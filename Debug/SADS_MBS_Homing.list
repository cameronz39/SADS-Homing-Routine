
SADS_MBS_Homing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008710  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  080088e0  080088e0  000098e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009098  08009098  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009098  08009098  0000a098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090a0  080090a0  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090a0  080090a0  0000a0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090a4  080090a4  0000a0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080090a8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  200001e4  0800928c  0000b1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000090c  0800928c  0000b90c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c22  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f5  00000000  00000000  0001de36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00020830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da5  00000000  00000000  00021978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ede  00000000  00000000  0002271d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016185  00000000  00000000  000465fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d60f2  00000000  00000000  0005c780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132872  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa0  00000000  00000000  001328b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00138358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080088c8 	.word	0x080088c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	080088c8 	.word	0x080088c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MTi_init>:
uint16_t measurementMessageSize;
uint8_t status[4];


void readAndPrintNotification(UART_HandleTypeDef *huart);
void MTi_init(uint8_t sampleRate, UART_HandleTypeDef *huart) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
	m_dataBuffer[0] = XBUS_PREAMBLE;
 8000ee4:	4b39      	ldr	r3, [pc, #228]	@ (8000fcc <MTi_init+0xf4>)
 8000ee6:	22fa      	movs	r2, #250	@ 0xfa
 8000ee8:	701a      	strb	r2, [r3, #0]
	m_dataBuffer[1] = XBUS_MASTERDEVICE;
 8000eea:	4b38      	ldr	r3, [pc, #224]	@ (8000fcc <MTi_init+0xf4>)
 8000eec:	22ff      	movs	r2, #255	@ 0xff
 8000eee:	705a      	strb	r2, [r3, #1]
	state = WAITING_FOR_WAKEUP;
 8000ef0:	4b37      	ldr	r3, [pc, #220]	@ (8000fd0 <MTi_init+0xf8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2120      	movs	r1, #32
 8000efa:	4836      	ldr	r0, [pc, #216]	@ (8000fd4 <MTi_init+0xfc>)
 8000efc:	f001 ff8a 	bl	8002e14 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f00:	2064      	movs	r0, #100	@ 0x64
 8000f02:	f001 fca5 	bl	8002850 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2120      	movs	r1, #32
 8000f0a:	4832      	ldr	r0, [pc, #200]	@ (8000fd4 <MTi_init+0xfc>)
 8000f0c:	f001 ff82 	bl	8002e14 <HAL_GPIO_WritePin>

	while(state != READY) {
 8000f10:	e18a      	b.n	8001228 <MTi_init+0x350>
		// HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
		if(checkDataReadyLineMain()) {
 8000f12:	f001 facf 	bl	80024b4 <checkDataReadyLineMain>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d023      	beq.n	8000f64 <MTi_init+0x8c>
			HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_PIPE_STATUS, 1, status, sizeof(status), 100);
 8000f1c:	2364      	movs	r3, #100	@ 0x64
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2304      	movs	r3, #4
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd8 <MTi_init+0x100>)
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	21d6      	movs	r1, #214	@ 0xd6
 8000f2e:	482b      	ldr	r0, [pc, #172]	@ (8000fdc <MTi_init+0x104>)
 8000f30:	f002 f9e4 	bl	80032fc <HAL_I2C_Mem_Read>
			notificationMessageSize = status[0] | (status[1] << 8);
 8000f34:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <MTi_init+0x100>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <MTi_init+0x100>)
 8000f3c:	785b      	ldrb	r3, [r3, #1]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <MTi_init+0x108>)
 8000f4a:	801a      	strh	r2, [r3, #0]
			measurementMessageSize = status[2] | (status[3] << 8);
 8000f4c:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <MTi_init+0x100>)
 8000f4e:	789b      	ldrb	r3, [r3, #2]
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <MTi_init+0x100>)
 8000f54:	78db      	ldrb	r3, [r3, #3]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <MTi_init+0x10c>)
 8000f62:	801a      	strh	r2, [r3, #0]
		}

		if ((notificationMessageSize && notificationMessageSize < sizeof(m_dataBuffer)) ) {
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <MTi_init+0x108>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 815d 	beq.w	8001228 <MTi_init+0x350>
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <MTi_init+0x108>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	2bff      	cmp	r3, #255	@ 0xff
 8000f74:	f200 8158 	bhi.w	8001228 <MTi_init+0x350>
			if(checkDataReadyLineMain()) {
 8000f78:	f001 fa9c 	bl	80024b4 <checkDataReadyLineMain>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 8152 	beq.w	8001228 <MTi_init+0x350>
				if(HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_NOTIFICATION_PIPE, 1, &m_dataBuffer[2], notificationMessageSize, 1000) != HAL_OK) {
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <MTi_init+0x108>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f8c:	9202      	str	r2, [sp, #8]
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <MTi_init+0x110>)
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	2205      	movs	r2, #5
 8000f98:	21d6      	movs	r1, #214	@ 0xd6
 8000f9a:	4810      	ldr	r0, [pc, #64]	@ (8000fdc <MTi_init+0x104>)
 8000f9c:	f002 f9ae 	bl	80032fc <HAL_I2C_Mem_Read>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d028      	beq.n	8000ff8 <MTi_init+0x120>
					len = snprintf(UART_buffer, sizeof(UART_buffer), "Failed to connect to MTi\n");
 8000fa6:	4a11      	ldr	r2, [pc, #68]	@ (8000fec <MTi_init+0x114>)
 8000fa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fac:	4810      	ldr	r0, [pc, #64]	@ (8000ff0 <MTi_init+0x118>)
 8000fae:	f005 fb4b 	bl	8006648 <sniprintf>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <MTi_init+0x11c>)
 8000fb6:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MTi_init+0x11c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000fc2:	490b      	ldr	r1, [pc, #44]	@ (8000ff0 <MTi_init+0x118>)
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	f004 fa69 	bl	800549c <HAL_UART_Transmit>

					break;
 8000fca:	e133      	b.n	8001234 <MTi_init+0x35c>
 8000fcc:	20000308 	.word	0x20000308
 8000fd0:	20000304 	.word	0x20000304
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	20000590 	.word	0x20000590
 8000fdc:	20000594 	.word	0x20000594
 8000fe0:	2000058c 	.word	0x2000058c
 8000fe4:	2000058e 	.word	0x2000058e
 8000fe8:	2000030a 	.word	0x2000030a
 8000fec:	080088e0 	.word	0x080088e0
 8000ff0:	20000200 	.word	0x20000200
 8000ff4:	20000300 	.word	0x20000300
				}
				// 3) User xbus.h helper to read the message ID and enter a new program state if needed
				if (Xbus_getMessageId(m_dataBuffer) == XMID_Wakeup && state == WAITING_FOR_WAKEUP)
 8000ff8:	4890      	ldr	r0, [pc, #576]	@ (800123c <MTi_init+0x364>)
 8000ffa:	f001 f9b7 	bl	800236c <Xbus_getMessageId>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b3e      	cmp	r3, #62	@ 0x3e
 8001002:	d12f      	bne.n	8001064 <MTi_init+0x18c>
 8001004:	4b8e      	ldr	r3, [pc, #568]	@ (8001240 <MTi_init+0x368>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d12b      	bne.n	8001064 <MTi_init+0x18c>
				{
					len = snprintf(UART_buffer, sizeof(UART_buffer), "Got Wakeup\n");
 800100c:	4a8d      	ldr	r2, [pc, #564]	@ (8001244 <MTi_init+0x36c>)
 800100e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001012:	488d      	ldr	r0, [pc, #564]	@ (8001248 <MTi_init+0x370>)
 8001014:	f005 fb18 	bl	8006648 <sniprintf>
 8001018:	4603      	mov	r3, r0
 800101a:	4a8c      	ldr	r2, [pc, #560]	@ (800124c <MTi_init+0x374>)
 800101c:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 800101e:	4b8b      	ldr	r3, [pc, #556]	@ (800124c <MTi_init+0x374>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001028:	4987      	ldr	r1, [pc, #540]	@ (8001248 <MTi_init+0x370>)
 800102a:	6838      	ldr	r0, [r7, #0]
 800102c:	f004 fa36 	bl	800549c <HAL_UART_Transmit>

					Xbus_message(m_xbusTxBuffer, 0xFF, XMID_ReqDid, 0);
 8001030:	2300      	movs	r3, #0
 8001032:	2200      	movs	r2, #0
 8001034:	21ff      	movs	r1, #255	@ 0xff
 8001036:	4886      	ldr	r0, [pc, #536]	@ (8001250 <MTi_init+0x378>)
 8001038:	f001 f9f9 	bl	800242e <Xbus_message>

					rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
 800103c:	4984      	ldr	r1, [pc, #528]	@ (8001250 <MTi_init+0x378>)
 800103e:	4885      	ldr	r0, [pc, #532]	@ (8001254 <MTi_init+0x37c>)
 8001040:	f001 fa48 	bl	80024d4 <Xbus_createRawMessageHelper>
 8001044:	4603      	mov	r3, r0
 8001046:	4a84      	ldr	r2, [pc, #528]	@ (8001258 <MTi_init+0x380>)
 8001048:	6013      	str	r3, [r2, #0]
					HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);
 800104a:	4b83      	ldr	r3, [pc, #524]	@ (8001258 <MTi_init+0x380>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	b29b      	uxth	r3, r3
 8001050:	2264      	movs	r2, #100	@ 0x64
 8001052:	9200      	str	r2, [sp, #0]
 8001054:	4a7f      	ldr	r2, [pc, #508]	@ (8001254 <MTi_init+0x37c>)
 8001056:	21d6      	movs	r1, #214	@ 0xd6
 8001058:	4880      	ldr	r0, [pc, #512]	@ (800125c <MTi_init+0x384>)
 800105a:	f002 f851 	bl	8003100 <HAL_I2C_Master_Transmit>

					state = WAITING_FOR_ID;
 800105e:	4b78      	ldr	r3, [pc, #480]	@ (8001240 <MTi_init+0x368>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
				}

				if (Xbus_getMessageId(m_dataBuffer) == XMID_DeviceId && state == WAITING_FOR_ID)
 8001064:	4875      	ldr	r0, [pc, #468]	@ (800123c <MTi_init+0x364>)
 8001066:	f001 f981 	bl	800236c <Xbus_getMessageId>
 800106a:	4603      	mov	r3, r0
 800106c:	2b01      	cmp	r3, #1
 800106e:	f040 8083 	bne.w	8001178 <MTi_init+0x2a0>
 8001072:	4b73      	ldr	r3, [pc, #460]	@ (8001240 <MTi_init+0x368>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d17e      	bne.n	8001178 <MTi_init+0x2a0>
				{
					len = snprintf(UART_buffer, sizeof(UART_buffer), "Got Device ID\n");
 800107a:	4a79      	ldr	r2, [pc, #484]	@ (8001260 <MTi_init+0x388>)
 800107c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001080:	4871      	ldr	r0, [pc, #452]	@ (8001248 <MTi_init+0x370>)
 8001082:	f005 fae1 	bl	8006648 <sniprintf>
 8001086:	4603      	mov	r3, r0
 8001088:	4a70      	ldr	r2, [pc, #448]	@ (800124c <MTi_init+0x374>)
 800108a:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 800108c:	4b6f      	ldr	r3, [pc, #444]	@ (800124c <MTi_init+0x374>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	b29a      	uxth	r2, r3
 8001092:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001096:	496c      	ldr	r1, [pc, #432]	@ (8001248 <MTi_init+0x370>)
 8001098:	6838      	ldr	r0, [r7, #0]
 800109a:	f004 f9ff 	bl	800549c <HAL_UART_Transmit>

					Xbus_message(m_xbusTxBuffer, 0xFF, XMID_SetOutputConfig, 12);
 800109e:	230c      	movs	r3, #12
 80010a0:	22c0      	movs	r2, #192	@ 0xc0
 80010a2:	21ff      	movs	r1, #255	@ 0xff
 80010a4:	486a      	ldr	r0, [pc, #424]	@ (8001250 <MTi_init+0x378>)
 80010a6:	f001 f9c2 	bl	800242e <Xbus_message>
					// Set Output mode: RotMatrix (0x2020)
					Xbus_getPointerToPayload(m_xbusTxBuffer)[0] = 0x20;
 80010aa:	4869      	ldr	r0, [pc, #420]	@ (8001250 <MTi_init+0x378>)
 80010ac:	f001 f9e2 	bl	8002474 <Xbus_getPointerToPayload>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2220      	movs	r2, #32
 80010b4:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[1] = 0x20;
 80010b6:	4866      	ldr	r0, [pc, #408]	@ (8001250 <MTi_init+0x378>)
 80010b8:	f001 f9dc 	bl	8002474 <Xbus_getPointerToPayload>
 80010bc:	4603      	mov	r3, r0
 80010be:	3301      	adds	r3, #1
 80010c0:	2220      	movs	r2, #32
 80010c2:	701a      	strb	r2, [r3, #0]
					// Set Output rate
					Xbus_getPointerToPayload(m_xbusTxBuffer)[2] = 0x00;
 80010c4:	4862      	ldr	r0, [pc, #392]	@ (8001250 <MTi_init+0x378>)
 80010c6:	f001 f9d5 	bl	8002474 <Xbus_getPointerToPayload>
 80010ca:	4603      	mov	r3, r0
 80010cc:	3302      	adds	r3, #2
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[3] = sampleRate;
 80010d2:	485f      	ldr	r0, [pc, #380]	@ (8001250 <MTi_init+0x378>)
 80010d4:	f001 f9ce 	bl	8002474 <Xbus_getPointerToPayload>
 80010d8:	4603      	mov	r3, r0
 80010da:	3303      	adds	r3, #3
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	701a      	strb	r2, [r3, #0]

					// Set Output mode: Quaternion (0x2010)
					Xbus_getPointerToPayload(m_xbusTxBuffer)[4] = 0x20;
 80010e0:	485b      	ldr	r0, [pc, #364]	@ (8001250 <MTi_init+0x378>)
 80010e2:	f001 f9c7 	bl	8002474 <Xbus_getPointerToPayload>
 80010e6:	4603      	mov	r3, r0
 80010e8:	3304      	adds	r3, #4
 80010ea:	2220      	movs	r2, #32
 80010ec:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[5] = 0x10;
 80010ee:	4858      	ldr	r0, [pc, #352]	@ (8001250 <MTi_init+0x378>)
 80010f0:	f001 f9c0 	bl	8002474 <Xbus_getPointerToPayload>
 80010f4:	4603      	mov	r3, r0
 80010f6:	3305      	adds	r3, #5
 80010f8:	2210      	movs	r2, #16
 80010fa:	701a      	strb	r2, [r3, #0]
					// Set Output rate
					Xbus_getPointerToPayload(m_xbusTxBuffer)[6] = 0x00;
 80010fc:	4854      	ldr	r0, [pc, #336]	@ (8001250 <MTi_init+0x378>)
 80010fe:	f001 f9b9 	bl	8002474 <Xbus_getPointerToPayload>
 8001102:	4603      	mov	r3, r0
 8001104:	3306      	adds	r3, #6
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[7] = sampleRate;
 800110a:	4851      	ldr	r0, [pc, #324]	@ (8001250 <MTi_init+0x378>)
 800110c:	f001 f9b2 	bl	8002474 <Xbus_getPointerToPayload>
 8001110:	4603      	mov	r3, r0
 8001112:	3307      	adds	r3, #7
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	701a      	strb	r2, [r3, #0]

					// Set Output mode: Body Rates (0x8020)
					Xbus_getPointerToPayload(m_xbusTxBuffer)[8] = 0x80;
 8001118:	484d      	ldr	r0, [pc, #308]	@ (8001250 <MTi_init+0x378>)
 800111a:	f001 f9ab 	bl	8002474 <Xbus_getPointerToPayload>
 800111e:	4603      	mov	r3, r0
 8001120:	3308      	adds	r3, #8
 8001122:	2280      	movs	r2, #128	@ 0x80
 8001124:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[9] = 0x20;
 8001126:	484a      	ldr	r0, [pc, #296]	@ (8001250 <MTi_init+0x378>)
 8001128:	f001 f9a4 	bl	8002474 <Xbus_getPointerToPayload>
 800112c:	4603      	mov	r3, r0
 800112e:	3309      	adds	r3, #9
 8001130:	2220      	movs	r2, #32
 8001132:	701a      	strb	r2, [r3, #0]
					// Set Output rate
					Xbus_getPointerToPayload(m_xbusTxBuffer)[10] = 0x00;
 8001134:	4846      	ldr	r0, [pc, #280]	@ (8001250 <MTi_init+0x378>)
 8001136:	f001 f99d 	bl	8002474 <Xbus_getPointerToPayload>
 800113a:	4603      	mov	r3, r0
 800113c:	330a      	adds	r3, #10
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[11] = sampleRate;
 8001142:	4843      	ldr	r0, [pc, #268]	@ (8001250 <MTi_init+0x378>)
 8001144:	f001 f996 	bl	8002474 <Xbus_getPointerToPayload>
 8001148:	4603      	mov	r3, r0
 800114a:	330b      	adds	r3, #11
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	701a      	strb	r2, [r3, #0]

					rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
 8001150:	493f      	ldr	r1, [pc, #252]	@ (8001250 <MTi_init+0x378>)
 8001152:	4840      	ldr	r0, [pc, #256]	@ (8001254 <MTi_init+0x37c>)
 8001154:	f001 f9be 	bl	80024d4 <Xbus_createRawMessageHelper>
 8001158:	4603      	mov	r3, r0
 800115a:	4a3f      	ldr	r2, [pc, #252]	@ (8001258 <MTi_init+0x380>)
 800115c:	6013      	str	r3, [r2, #0]
					HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);
 800115e:	4b3e      	ldr	r3, [pc, #248]	@ (8001258 <MTi_init+0x380>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	2264      	movs	r2, #100	@ 0x64
 8001166:	9200      	str	r2, [sp, #0]
 8001168:	4a3a      	ldr	r2, [pc, #232]	@ (8001254 <MTi_init+0x37c>)
 800116a:	21d6      	movs	r1, #214	@ 0xd6
 800116c:	483b      	ldr	r0, [pc, #236]	@ (800125c <MTi_init+0x384>)
 800116e:	f001 ffc7 	bl	8003100 <HAL_I2C_Master_Transmit>

					state = WAITING_FOR_CONFIG_ACK;
 8001172:	4b33      	ldr	r3, [pc, #204]	@ (8001240 <MTi_init+0x368>)
 8001174:	2202      	movs	r2, #2
 8001176:	701a      	strb	r2, [r3, #0]
				}

				// note: the config ack message is just the output config itself
				if(Xbus_getMessageId(m_dataBuffer) == XMID_OutputConfig && state == WAITING_FOR_CONFIG_ACK)
 8001178:	4830      	ldr	r0, [pc, #192]	@ (800123c <MTi_init+0x364>)
 800117a:	f001 f8f7 	bl	800236c <Xbus_getMessageId>
 800117e:	4603      	mov	r3, r0
 8001180:	2bc1      	cmp	r3, #193	@ 0xc1
 8001182:	d151      	bne.n	8001228 <MTi_init+0x350>
 8001184:	4b2e      	ldr	r3, [pc, #184]	@ (8001240 <MTi_init+0x368>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d14d      	bne.n	8001228 <MTi_init+0x350>
				{
					len = snprintf(UART_buffer, sizeof(UART_buffer), "Got config ACK\n");
 800118c:	4a35      	ldr	r2, [pc, #212]	@ (8001264 <MTi_init+0x38c>)
 800118e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001192:	482d      	ldr	r0, [pc, #180]	@ (8001248 <MTi_init+0x370>)
 8001194:	f005 fa58 	bl	8006648 <sniprintf>
 8001198:	4603      	mov	r3, r0
 800119a:	4a2c      	ldr	r2, [pc, #176]	@ (800124c <MTi_init+0x374>)
 800119c:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 800119e:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <MTi_init+0x374>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80011a8:	4927      	ldr	r1, [pc, #156]	@ (8001248 <MTi_init+0x370>)
 80011aa:	6838      	ldr	r0, [r7, #0]
 80011ac:	f004 f976 	bl	800549c <HAL_UART_Transmit>

					uint8_t buffer[2];
					HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_PROTOCOL_INFO, 1, buffer, sizeof(buffer), 100);
 80011b0:	2364      	movs	r3, #100	@ 0x64
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2302      	movs	r3, #2
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	2201      	movs	r2, #1
 80011c2:	21d6      	movs	r1, #214	@ 0xd6
 80011c4:	4825      	ldr	r0, [pc, #148]	@ (800125c <MTi_init+0x384>)
 80011c6:	f002 f899 	bl	80032fc <HAL_I2C_Mem_Read>

					uint8_t version = buffer[0];
 80011ca:	7b3b      	ldrb	r3, [r7, #12]
 80011cc:	73fb      	strb	r3, [r7, #15]
					uint8_t dataReadyConfig = buffer[1];
 80011ce:	7b7b      	ldrb	r3, [r7, #13]
 80011d0:	73bb      	strb	r3, [r7, #14]

					len = snprintf(UART_buffer, sizeof(UART_buffer), "Version: %d\nData Ready Pin configuartion: %d\n",version,dataReadyConfig);
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	4a23      	ldr	r2, [pc, #140]	@ (8001268 <MTi_init+0x390>)
 80011dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011e0:	4819      	ldr	r0, [pc, #100]	@ (8001248 <MTi_init+0x370>)
 80011e2:	f005 fa31 	bl	8006648 <sniprintf>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a18      	ldr	r2, [pc, #96]	@ (800124c <MTi_init+0x374>)
 80011ea:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 80011ec:	4b17      	ldr	r3, [pc, #92]	@ (800124c <MTi_init+0x374>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80011f6:	4914      	ldr	r1, [pc, #80]	@ (8001248 <MTi_init+0x370>)
 80011f8:	6838      	ldr	r0, [r7, #0]
 80011fa:	f004 f94f 	bl	800549c <HAL_UART_Transmit>

					len = snprintf(UART_buffer, sizeof(UART_buffer), "MTi was successfully configured!\n");
 80011fe:	4a1b      	ldr	r2, [pc, #108]	@ (800126c <MTi_init+0x394>)
 8001200:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001204:	4810      	ldr	r0, [pc, #64]	@ (8001248 <MTi_init+0x370>)
 8001206:	f005 fa1f 	bl	8006648 <sniprintf>
 800120a:	4603      	mov	r3, r0
 800120c:	4a0f      	ldr	r2, [pc, #60]	@ (800124c <MTi_init+0x374>)
 800120e:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 8001210:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <MTi_init+0x374>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	b29a      	uxth	r2, r3
 8001216:	f242 7310 	movw	r3, #10000	@ 0x2710
 800121a:	490b      	ldr	r1, [pc, #44]	@ (8001248 <MTi_init+0x370>)
 800121c:	6838      	ldr	r0, [r7, #0]
 800121e:	f004 f93d 	bl	800549c <HAL_UART_Transmit>

//					Xbus_message(m_xbusTxBuffer, 0xFF, XMID_GotoMeasurement, 0);
//					rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
//					HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);

					state = READY;
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <MTi_init+0x368>)
 8001224:	2204      	movs	r2, #4
 8001226:	701a      	strb	r2, [r3, #0]
	while(state != READY) {
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <MTi_init+0x368>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b04      	cmp	r3, #4
 800122e:	f47f ae70 	bne.w	8000f12 <MTi_init+0x3a>
				}
			}
		}
	}
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000308 	.word	0x20000308
 8001240:	20000304 	.word	0x20000304
 8001244:	080088fc 	.word	0x080088fc
 8001248:	20000200 	.word	0x20000200
 800124c:	20000300 	.word	0x20000300
 8001250:	20000408 	.word	0x20000408
 8001254:	20000508 	.word	0x20000508
 8001258:	20000588 	.word	0x20000588
 800125c:	20000594 	.word	0x20000594
 8001260:	08008908 	.word	0x08008908
 8001264:	08008918 	.word	0x08008918
 8001268:	08008928 	.word	0x08008928
 800126c:	08008958 	.word	0x08008958

08001270 <MTi_goToMeasurement>:
	HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
	MTi_init(userSampleRate,huart);
}


void MTi_goToMeasurement() {
 8001270:	b580      	push	{r7, lr}
 8001272:	b0e4      	sub	sp, #400	@ 0x190
 8001274:	af02      	add	r7, sp, #8
	size_t rawLength;
	uint8_t m_xbusTxBuffer[256]; // Buffer for outgoing messages
	uint8_t buffer[128]; // Helper buffer for creating outgoing messages
	Xbus_message(m_xbusTxBuffer, 0xFF, XMID_GotoMeasurement, 0);
 8001276:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 800127a:	2300      	movs	r3, #0
 800127c:	2210      	movs	r2, #16
 800127e:	21ff      	movs	r1, #255	@ 0xff
 8001280:	f001 f8d5 	bl	800242e <Xbus_message>
	rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
 8001284:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f001 f921 	bl	80024d4 <Xbus_createRawMessageHelper>
 8001292:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
	HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);
 8001296:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800129a:	b29b      	uxth	r3, r3
 800129c:	1d3a      	adds	r2, r7, #4
 800129e:	2164      	movs	r1, #100	@ 0x64
 80012a0:	9100      	str	r1, [sp, #0]
 80012a2:	21d6      	movs	r1, #214	@ 0xd6
 80012a4:	4803      	ldr	r0, [pc, #12]	@ (80012b4 <MTi_goToMeasurement+0x44>)
 80012a6:	f001 ff2b 	bl	8003100 <HAL_I2C_Master_Transmit>
}
 80012aa:	bf00      	nop
 80012ac:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000594 	.word	0x20000594

080012b8 <MTi_test_init>:
	    }
	    printf("\n");
	}
}

void MTi_test_init() {
 80012b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012bc:	b0b2      	sub	sp, #200	@ 0xc8
 80012be:	af12      	add	r7, sp, #72	@ 0x48
	m_dataBuffer[0] = XBUS_PREAMBLE;
 80012c0:	4bc0      	ldr	r3, [pc, #768]	@ (80015c4 <MTi_test_init+0x30c>)
 80012c2:	22fa      	movs	r2, #250	@ 0xfa
 80012c4:	701a      	strb	r2, [r3, #0]
	m_dataBuffer[1] = XBUS_MASTERDEVICE;
 80012c6:	4bbf      	ldr	r3, [pc, #764]	@ (80015c4 <MTi_test_init+0x30c>)
 80012c8:	22ff      	movs	r2, #255	@ 0xff
 80012ca:	705a      	strb	r2, [r3, #1]
	state = 60;
 80012cc:	4bbe      	ldr	r3, [pc, #760]	@ (80015c8 <MTi_test_init+0x310>)
 80012ce:	223c      	movs	r2, #60	@ 0x3c
 80012d0:	701a      	strb	r2, [r3, #0]

	// 1) Read pipe status and save incoming message sizes
	//	len = snprintf(UART_buffer, sizeof(UART_buffer), "Notif: %d, Msg: %d \n", notificationMessageSize,measurementMessageSize);
	//	HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 100);
	if(checkDataReadyLineMain()) {
 80012d2:	f001 f8ef 	bl	80024b4 <checkDataReadyLineMain>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 81d6 	beq.w	800168a <MTi_test_init+0x3d2>
		HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_PIPE_STATUS, 1, status, sizeof(status), 100);
 80012de:	2364      	movs	r3, #100	@ 0x64
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2304      	movs	r3, #4
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	4bb9      	ldr	r3, [pc, #740]	@ (80015cc <MTi_test_init+0x314>)
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	2204      	movs	r2, #4
 80012ee:	21d6      	movs	r1, #214	@ 0xd6
 80012f0:	48b7      	ldr	r0, [pc, #732]	@ (80015d0 <MTi_test_init+0x318>)
 80012f2:	f002 f803 	bl	80032fc <HAL_I2C_Mem_Read>

		notificationMessageSize = status[0] | (status[1] << 8);
 80012f6:	4bb5      	ldr	r3, [pc, #724]	@ (80015cc <MTi_test_init+0x314>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4bb3      	ldr	r3, [pc, #716]	@ (80015cc <MTi_test_init+0x314>)
 80012fe:	785b      	ldrb	r3, [r3, #1]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b21b      	sxth	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b21b      	sxth	r3, r3
 8001308:	b29a      	uxth	r2, r3
 800130a:	4bb2      	ldr	r3, [pc, #712]	@ (80015d4 <MTi_test_init+0x31c>)
 800130c:	801a      	strh	r2, [r3, #0]
		measurementMessageSize = status[2] | (status[3] << 8);
 800130e:	4baf      	ldr	r3, [pc, #700]	@ (80015cc <MTi_test_init+0x314>)
 8001310:	789b      	ldrb	r3, [r3, #2]
 8001312:	b21a      	sxth	r2, r3
 8001314:	4bad      	ldr	r3, [pc, #692]	@ (80015cc <MTi_test_init+0x314>)
 8001316:	78db      	ldrb	r3, [r3, #3]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	b21b      	sxth	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b21b      	sxth	r3, r3
 8001320:	b29a      	uxth	r2, r3
 8001322:	4bad      	ldr	r3, [pc, #692]	@ (80015d8 <MTi_test_init+0x320>)
 8001324:	801a      	strh	r2, [r3, #0]
//				state = READY;
//
//			}
//		}

		if (measurementMessageSize && measurementMessageSize < sizeof(m_dataBuffer)) {
 8001326:	4bac      	ldr	r3, [pc, #688]	@ (80015d8 <MTi_test_init+0x320>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 81ad 	beq.w	800168a <MTi_test_init+0x3d2>
 8001330:	4ba9      	ldr	r3, [pc, #676]	@ (80015d8 <MTi_test_init+0x320>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	2bff      	cmp	r3, #255	@ 0xff
 8001336:	f200 81a8 	bhi.w	800168a <MTi_test_init+0x3d2>
			HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_MEASUREMENT_PIPE, 1, &m_dataBuffer[2], measurementMessageSize, 100);
 800133a:	4ba7      	ldr	r3, [pc, #668]	@ (80015d8 <MTi_test_init+0x320>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	2264      	movs	r2, #100	@ 0x64
 8001340:	9202      	str	r2, [sp, #8]
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	4ba5      	ldr	r3, [pc, #660]	@ (80015dc <MTi_test_init+0x324>)
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2301      	movs	r3, #1
 800134a:	2206      	movs	r2, #6
 800134c:	21d6      	movs	r1, #214	@ 0xd6
 800134e:	48a0      	ldr	r0, [pc, #640]	@ (80015d0 <MTi_test_init+0x318>)
 8001350:	f001 ffd4 	bl	80032fc <HAL_I2C_Mem_Read>

			if(Xbus_getMessageId(m_dataBuffer) == XMID_MtData2) {
 8001354:	489b      	ldr	r0, [pc, #620]	@ (80015c4 <MTi_test_init+0x30c>)
 8001356:	f001 f809 	bl	800236c <Xbus_getMessageId>
 800135a:	4603      	mov	r3, r0
 800135c:	2b36      	cmp	r3, #54	@ 0x36
 800135e:	f040 8194 	bne.w	800168a <MTi_test_init+0x3d2>
//				} else {
//					len = snprintf(UART_buffer, sizeof(UART_buffer), "Error reading message ID\n");
//					HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 100);
//				}

                int index = 4;  // Start index for reading the payload
 8001362:	2304      	movs	r3, #4
 8001364:	677b      	str	r3, [r7, #116]	@ 0x74

                uint16_t dataId   = extractUint16(m_dataBuffer, &index);
 8001366:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800136a:	4619      	mov	r1, r3
 800136c:	4895      	ldr	r0, [pc, #596]	@ (80015c4 <MTi_test_init+0x30c>)
 800136e:	f001 f944 	bl	80025fa <extractUint16>
 8001372:	4603      	mov	r3, r0
 8001374:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                uint8_t  dataSize = extractUint8(m_dataBuffer, &index);
 8001378:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800137c:	4619      	mov	r1, r3
 800137e:	4891      	ldr	r0, [pc, #580]	@ (80015c4 <MTi_test_init+0x30c>)
 8001380:	f001 f923 	bl	80025ca <extractUint8>
 8001384:	4603      	mov	r3, r0
 8001386:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                float rotMatrixBuffer[9];
                if (dataId == 0x2020) {
 800138a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800138e:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001392:	4293      	cmp	r3, r2
 8001394:	d159      	bne.n	800144a <MTi_test_init+0x192>
                	rotMatrixBuffer[0] = extractFloat(m_dataBuffer, &index);
 8001396:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800139a:	4619      	mov	r1, r3
 800139c:	4889      	ldr	r0, [pc, #548]	@ (80015c4 <MTi_test_init+0x30c>)
 800139e:	f001 f9a5 	bl	80026ec <extractFloat>
 80013a2:	eef0 7a40 	vmov.f32	s15, s0
 80013a6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
                	rotMatrixBuffer[1] = extractFloat(m_dataBuffer, &index);
 80013aa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013ae:	4619      	mov	r1, r3
 80013b0:	4884      	ldr	r0, [pc, #528]	@ (80015c4 <MTi_test_init+0x30c>)
 80013b2:	f001 f99b 	bl	80026ec <extractFloat>
 80013b6:	eef0 7a40 	vmov.f32	s15, s0
 80013ba:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
                	rotMatrixBuffer[2] = extractFloat(m_dataBuffer, &index);
 80013be:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013c2:	4619      	mov	r1, r3
 80013c4:	487f      	ldr	r0, [pc, #508]	@ (80015c4 <MTi_test_init+0x30c>)
 80013c6:	f001 f991 	bl	80026ec <extractFloat>
 80013ca:	eef0 7a40 	vmov.f32	s15, s0
 80013ce:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
                	rotMatrixBuffer[3] = extractFloat(m_dataBuffer, &index); // roll
 80013d2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013d6:	4619      	mov	r1, r3
 80013d8:	487a      	ldr	r0, [pc, #488]	@ (80015c4 <MTi_test_init+0x30c>)
 80013da:	f001 f987 	bl	80026ec <extractFloat>
 80013de:	eef0 7a40 	vmov.f32	s15, s0
 80013e2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
                	rotMatrixBuffer[4] = extractFloat(m_dataBuffer, &index); // pitch
 80013e6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013ea:	4619      	mov	r1, r3
 80013ec:	4875      	ldr	r0, [pc, #468]	@ (80015c4 <MTi_test_init+0x30c>)
 80013ee:	f001 f97d 	bl	80026ec <extractFloat>
 80013f2:	eef0 7a40 	vmov.f32	s15, s0
 80013f6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
                	rotMatrixBuffer[5] = extractFloat(m_dataBuffer, &index); // yaw
 80013fa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013fe:	4619      	mov	r1, r3
 8001400:	4870      	ldr	r0, [pc, #448]	@ (80015c4 <MTi_test_init+0x30c>)
 8001402:	f001 f973 	bl	80026ec <extractFloat>
 8001406:	eef0 7a40 	vmov.f32	s15, s0
 800140a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
                	rotMatrixBuffer[6] = extractFloat(m_dataBuffer, &index); // roll
 800140e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001412:	4619      	mov	r1, r3
 8001414:	486b      	ldr	r0, [pc, #428]	@ (80015c4 <MTi_test_init+0x30c>)
 8001416:	f001 f969 	bl	80026ec <extractFloat>
 800141a:	eef0 7a40 	vmov.f32	s15, s0
 800141e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
                	rotMatrixBuffer[7] = extractFloat(m_dataBuffer, &index); // pitch
 8001422:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001426:	4619      	mov	r1, r3
 8001428:	4866      	ldr	r0, [pc, #408]	@ (80015c4 <MTi_test_init+0x30c>)
 800142a:	f001 f95f 	bl	80026ec <extractFloat>
 800142e:	eef0 7a40 	vmov.f32	s15, s0
 8001432:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
                	rotMatrixBuffer[8] = extractFloat(m_dataBuffer, &index); // yaw
 8001436:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800143a:	4619      	mov	r1, r3
 800143c:	4861      	ldr	r0, [pc, #388]	@ (80015c4 <MTi_test_init+0x30c>)
 800143e:	f001 f955 	bl	80026ec <extractFloat>
 8001442:	eef0 7a40 	vmov.f32	s15, s0
 8001446:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
                }

                dataId   = extractUint16(m_dataBuffer, &index);
 800144a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800144e:	4619      	mov	r1, r3
 8001450:	485c      	ldr	r0, [pc, #368]	@ (80015c4 <MTi_test_init+0x30c>)
 8001452:	f001 f8d2 	bl	80025fa <extractUint16>
 8001456:	4603      	mov	r3, r0
 8001458:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
				dataSize = extractUint8(m_dataBuffer, &index);
 800145c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001460:	4619      	mov	r1, r3
 8001462:	4858      	ldr	r0, [pc, #352]	@ (80015c4 <MTi_test_init+0x30c>)
 8001464:	f001 f8b1 	bl	80025ca <extractUint8>
 8001468:	4603      	mov	r3, r0
 800146a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
				float quatBuffer[9];
				if (dataId == 0x2010) {
 800146e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001472:	f242 0210 	movw	r2, #8208	@ 0x2010
 8001476:	4293      	cmp	r3, r2
 8001478:	d127      	bne.n	80014ca <MTi_test_init+0x212>
					quatBuffer[0] = extractFloat(m_dataBuffer, &index);
 800147a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800147e:	4619      	mov	r1, r3
 8001480:	4850      	ldr	r0, [pc, #320]	@ (80015c4 <MTi_test_init+0x30c>)
 8001482:	f001 f933 	bl	80026ec <extractFloat>
 8001486:	eef0 7a40 	vmov.f32	s15, s0
 800148a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
					quatBuffer[1] = extractFloat(m_dataBuffer, &index);
 800148e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001492:	4619      	mov	r1, r3
 8001494:	484b      	ldr	r0, [pc, #300]	@ (80015c4 <MTi_test_init+0x30c>)
 8001496:	f001 f929 	bl	80026ec <extractFloat>
 800149a:	eef0 7a40 	vmov.f32	s15, s0
 800149e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
					quatBuffer[2] = extractFloat(m_dataBuffer, &index);
 80014a2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014a6:	4619      	mov	r1, r3
 80014a8:	4846      	ldr	r0, [pc, #280]	@ (80015c4 <MTi_test_init+0x30c>)
 80014aa:	f001 f91f 	bl	80026ec <extractFloat>
 80014ae:	eef0 7a40 	vmov.f32	s15, s0
 80014b2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
					quatBuffer[3] = extractFloat(m_dataBuffer, &index);
 80014b6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014ba:	4619      	mov	r1, r3
 80014bc:	4841      	ldr	r0, [pc, #260]	@ (80015c4 <MTi_test_init+0x30c>)
 80014be:	f001 f915 	bl	80026ec <extractFloat>
 80014c2:	eef0 7a40 	vmov.f32	s15, s0
 80014c6:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

				}
				int len;

                len = snprintf(UART_buffer, sizeof(UART_buffer), "Rotation Matrix:\n  %.2f %.2f %.2f\n %.2f %.2f %.2f\n %.2f %.2f %.2f\n ",rotMatrixBuffer[0],rotMatrixBuffer[1],rotMatrixBuffer[2],rotMatrixBuffer[3],rotMatrixBuffer[4],rotMatrixBuffer[5],rotMatrixBuffer[6],rotMatrixBuffer[7],rotMatrixBuffer[8]);
 80014ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f85b 	bl	8000588 <__aeabi_f2d>
 80014d2:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80014d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f855 	bl	8000588 <__aeabi_f2d>
 80014de:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80014e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f84f 	bl	8000588 <__aeabi_f2d>
 80014ea:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80014ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f849 	bl	8000588 <__aeabi_f2d>
 80014f6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80014fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f843 	bl	8000588 <__aeabi_f2d>
 8001502:	e9c7 0100 	strd	r0, r1, [r7]
 8001506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f83d 	bl	8000588 <__aeabi_f2d>
 800150e:	4682      	mov	sl, r0
 8001510:	468b      	mov	fp, r1
 8001512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f837 	bl	8000588 <__aeabi_f2d>
 800151a:	4680      	mov	r8, r0
 800151c:	4689      	mov	r9, r1
 800151e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f831 	bl	8000588 <__aeabi_f2d>
 8001526:	4604      	mov	r4, r0
 8001528:	460d      	mov	r5, r1
 800152a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f82b 	bl	8000588 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800153a:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 800153e:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8001542:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8001546:	ed97 7b00 	vldr	d7, [r7]
 800154a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800154e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001552:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001556:	ed97 7b04 	vldr	d7, [r7, #16]
 800155a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800155e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001562:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001566:	ed97 7b08 	vldr	d7, [r7, #32]
 800156a:	ed8d 7b00 	vstr	d7, [sp]
 800156e:	4a1c      	ldr	r2, [pc, #112]	@ (80015e0 <MTi_test_init+0x328>)
 8001570:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001574:	481b      	ldr	r0, [pc, #108]	@ (80015e4 <MTi_test_init+0x32c>)
 8001576:	f005 f867 	bl	8006648 <sniprintf>
 800157a:	67b8      	str	r0, [r7, #120]	@ 0x78
                HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);
 800157c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800157e:	b29a      	uxth	r2, r3
 8001580:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001584:	4917      	ldr	r1, [pc, #92]	@ (80015e4 <MTi_test_init+0x32c>)
 8001586:	4818      	ldr	r0, [pc, #96]	@ (80015e8 <MTi_test_init+0x330>)
 8001588:	f003 ff88 	bl	800549c <HAL_UART_Transmit>

				len = snprintf(UART_buffer, sizeof(UART_buffer), "Quaternion: %.2f %.2f %.2f %.2f\n",quatBuffer[0],quatBuffer[1],quatBuffer[2],quatBuffer[3]);
 800158c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fffa 	bl	8000588 <__aeabi_f2d>
 8001594:	4604      	mov	r4, r0
 8001596:	460d      	mov	r5, r1
 8001598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe fff4 	bl	8000588 <__aeabi_f2d>
 80015a0:	4680      	mov	r8, r0
 80015a2:	4689      	mov	r9, r1
 80015a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ffee 	bl	8000588 <__aeabi_f2d>
 80015ac:	4682      	mov	sl, r0
 80015ae:	468b      	mov	fp, r1
 80015b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffe8 	bl	8000588 <__aeabi_f2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80015c0:	e014      	b.n	80015ec <MTi_test_init+0x334>
 80015c2:	bf00      	nop
 80015c4:	20000308 	.word	0x20000308
 80015c8:	20000304 	.word	0x20000304
 80015cc:	20000590 	.word	0x20000590
 80015d0:	20000594 	.word	0x20000594
 80015d4:	2000058c 	.word	0x2000058c
 80015d8:	2000058e 	.word	0x2000058e
 80015dc:	2000030a 	.word	0x2000030a
 80015e0:	08008a38 	.word	0x08008a38
 80015e4:	20000200 	.word	0x20000200
 80015e8:	20000678 	.word	0x20000678
 80015ec:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80015f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015f4:	e9cd 4500 	strd	r4, r5, [sp]
 80015f8:	4a29      	ldr	r2, [pc, #164]	@ (80016a0 <MTi_test_init+0x3e8>)
 80015fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015fe:	4829      	ldr	r0, [pc, #164]	@ (80016a4 <MTi_test_init+0x3ec>)
 8001600:	f005 f822 	bl	8006648 <sniprintf>
 8001604:	67b8      	str	r0, [r7, #120]	@ 0x78
				HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);
 8001606:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001608:	b29a      	uxth	r2, r3
 800160a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800160e:	4925      	ldr	r1, [pc, #148]	@ (80016a4 <MTi_test_init+0x3ec>)
 8001610:	4825      	ldr	r0, [pc, #148]	@ (80016a8 <MTi_test_init+0x3f0>)
 8001612:	f003 ff43 	bl	800549c <HAL_UART_Transmit>

				len = snprintf(UART_buffer, sizeof(UART_buffer), "g in body: %.2f %.2f %.2f\n",-9.81*rotMatrixBuffer[2],-9.81*rotMatrixBuffer[5],-9.81*rotMatrixBuffer[8]);
 8001616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ffb5 	bl	8000588 <__aeabi_f2d>
 800161e:	a31e      	add	r3, pc, #120	@ (adr r3, 8001698 <MTi_test_init+0x3e0>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f808 	bl	8000638 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4614      	mov	r4, r2
 800162e:	461d      	mov	r5, r3
 8001630:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ffa8 	bl	8000588 <__aeabi_f2d>
 8001638:	a317      	add	r3, pc, #92	@ (adr r3, 8001698 <MTi_test_init+0x3e0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe fffb 	bl	8000638 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4690      	mov	r8, r2
 8001648:	4699      	mov	r9, r3
 800164a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff9b 	bl	8000588 <__aeabi_f2d>
 8001652:	a311      	add	r3, pc, #68	@ (adr r3, 8001698 <MTi_test_init+0x3e0>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe ffee 	bl	8000638 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001664:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001668:	e9cd 4500 	strd	r4, r5, [sp]
 800166c:	4a0f      	ldr	r2, [pc, #60]	@ (80016ac <MTi_test_init+0x3f4>)
 800166e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001672:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <MTi_test_init+0x3ec>)
 8001674:	f004 ffe8 	bl	8006648 <sniprintf>
 8001678:	67b8      	str	r0, [r7, #120]	@ 0x78
				HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);
 800167a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800167c:	b29a      	uxth	r2, r3
 800167e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001682:	4908      	ldr	r1, [pc, #32]	@ (80016a4 <MTi_test_init+0x3ec>)
 8001684:	4808      	ldr	r0, [pc, #32]	@ (80016a8 <MTi_test_init+0x3f0>)
 8001686:	f003 ff09 	bl	800549c <HAL_UART_Transmit>
			}
		}
	}
}
 800168a:	bf00      	nop
 800168c:	3780      	adds	r7, #128	@ 0x80
 800168e:	46bd      	mov	sp, r7
 8001690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001694:	f3af 8000 	nop.w
 8001698:	51eb851f 	.word	0x51eb851f
 800169c:	c0239eb8 	.word	0xc0239eb8
 80016a0:	08008a7c 	.word	0x08008a7c
 80016a4:	20000200 	.word	0x20000200
 80016a8:	20000678 	.word	0x20000678
 80016ac:	08008aa0 	.word	0x08008aa0

080016b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b6:	f001 f859 	bl	800276c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ba:	f000 f82d 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016be:	f000 f96d 	bl	800199c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016c2:	f000 f941 	bl	8001948 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016c6:	f000 f899 	bl	80017fc <MX_I2C1_Init>
  MX_TIM2_Init();
 80016ca:	f000 f8c7 	bl	800185c <MX_TIM2_Init>
  MX_UART5_Init();
 80016ce:	f000 f911 	bl	80018f4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); // Start TIM2 interrupts
 80016d2:	480e      	ldr	r0, [pc, #56]	@ (800170c <main+0x5c>)
 80016d4:	f003 fa6c 	bl	8004bb0 <HAL_TIM_Base_Start_IT>


//  stepperControl_init();
//  app_start(&huart5);
//
    uint8_t sampleRate = 0x03;
 80016d8:	2303      	movs	r3, #3
 80016da:	71fb      	strb	r3, [r7, #7]
    MTi_init(sampleRate,&huart2);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	490c      	ldr	r1, [pc, #48]	@ (8001710 <main+0x60>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fbf9 	bl	8000ed8 <MTi_init>
    MTi_goToMeasurement();
 80016e6:	f7ff fdc3 	bl	8001270 <MTi_goToMeasurement>

      HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2120      	movs	r1, #32
 80016ee:	4809      	ldr	r0, [pc, #36]	@ (8001714 <main+0x64>)
 80016f0:	f001 fb90 	bl	8002e14 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 80016f4:	2064      	movs	r0, #100	@ 0x64
 80016f6:	f001 f8ab 	bl	8002850 <HAL_Delay>
      HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2120      	movs	r1, #32
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <main+0x64>)
 8001700:	f001 fb88 	bl	8002e14 <HAL_GPIO_WritePin>

      while(1) {
    	  MTi_test_init();
 8001704:	f7ff fdd8 	bl	80012b8 <MTi_test_init>
 8001708:	e7fc      	b.n	8001704 <main+0x54>
 800170a:	bf00      	nop
 800170c:	200005e8 	.word	0x200005e8
 8001710:	20000678 	.word	0x20000678
 8001714:	40020400 	.word	0x40020400

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b094      	sub	sp, #80	@ 0x50
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	2234      	movs	r2, #52	@ 0x34
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f005 f805 	bl	8006736 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	4b2c      	ldr	r3, [pc, #176]	@ (80017f4 <SystemClock_Config+0xdc>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	4a2b      	ldr	r2, [pc, #172]	@ (80017f4 <SystemClock_Config+0xdc>)
 8001746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174a:	6413      	str	r3, [r2, #64]	@ 0x40
 800174c:	4b29      	ldr	r3, [pc, #164]	@ (80017f4 <SystemClock_Config+0xdc>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001758:	2300      	movs	r3, #0
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	4b26      	ldr	r3, [pc, #152]	@ (80017f8 <SystemClock_Config+0xe0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a25      	ldr	r2, [pc, #148]	@ (80017f8 <SystemClock_Config+0xe0>)
 8001762:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b23      	ldr	r3, [pc, #140]	@ (80017f8 <SystemClock_Config+0xe0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001774:	2302      	movs	r3, #2
 8001776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001778:	2301      	movs	r3, #1
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800177c:	2310      	movs	r3, #16
 800177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001780:	2302      	movs	r3, #2
 8001782:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001784:	2300      	movs	r3, #0
 8001786:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001788:	2308      	movs	r3, #8
 800178a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800178c:	23b4      	movs	r3, #180	@ 0xb4
 800178e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001790:	2302      	movs	r3, #2
 8001792:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001794:	2302      	movs	r3, #2
 8001796:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001798:	2302      	movs	r3, #2
 800179a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4618      	mov	r0, r3
 80017a2:	f002 ff17 	bl	80045d4 <HAL_RCC_OscConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017ac:	f000 f9fa 	bl	8001ba4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017b0:	f002 fb76 	bl	8003ea0 <HAL_PWREx_EnableOverDrive>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017ba:	f000 f9f3 	bl	8001ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017be:	230f      	movs	r3, #15
 80017c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c2:	2302      	movs	r3, #2
 80017c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	2105      	movs	r1, #5
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 fbaf 	bl	8003f40 <HAL_RCC_ClockConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80017e8:	f000 f9dc 	bl	8001ba4 <Error_Handler>
  }
}
 80017ec:	bf00      	nop
 80017ee:	3750      	adds	r7, #80	@ 0x50
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40007000 	.word	0x40007000

080017fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001800:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <MX_I2C1_Init+0x54>)
 8001802:	4a14      	ldr	r2, [pc, #80]	@ (8001854 <MX_I2C1_Init+0x58>)
 8001804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <MX_I2C1_Init+0x54>)
 8001808:	4a13      	ldr	r2, [pc, #76]	@ (8001858 <MX_I2C1_Init+0x5c>)
 800180a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 800180c:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <MX_I2C1_Init+0x54>)
 800180e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001812:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001814:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <MX_I2C1_Init+0x54>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800181a:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <MX_I2C1_Init+0x54>)
 800181c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001820:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001822:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <MX_I2C1_Init+0x54>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <MX_I2C1_Init+0x54>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <MX_I2C1_Init+0x54>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <MX_I2C1_Init+0x54>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_I2C1_Init+0x54>)
 800183c:	f001 fb1c 	bl	8002e78 <HAL_I2C_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001846:	f000 f9ad 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000594 	.word	0x20000594
 8001854:	40005400 	.word	0x40005400
 8001858:	00061a80 	.word	0x00061a80

0800185c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001870:	463b      	mov	r3, r7
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001878:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <MX_TIM2_Init+0x94>)
 800187a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800187e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17999;
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <MX_TIM2_Init+0x94>)
 8001882:	f244 624f 	movw	r2, #17999	@ 0x464f
 8001886:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <MX_TIM2_Init+0x94>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <MX_TIM2_Init+0x94>)
 8001890:	2202      	movs	r2, #2
 8001892:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001894:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <MX_TIM2_Init+0x94>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <MX_TIM2_Init+0x94>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a0:	4813      	ldr	r0, [pc, #76]	@ (80018f0 <MX_TIM2_Init+0x94>)
 80018a2:	f003 f935 	bl	8004b10 <HAL_TIM_Base_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018ac:	f000 f97a 	bl	8001ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018b6:	f107 0308 	add.w	r3, r7, #8
 80018ba:	4619      	mov	r1, r3
 80018bc:	480c      	ldr	r0, [pc, #48]	@ (80018f0 <MX_TIM2_Init+0x94>)
 80018be:	f003 fad7 	bl	8004e70 <HAL_TIM_ConfigClockSource>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018c8:	f000 f96c 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018d4:	463b      	mov	r3, r7
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <MX_TIM2_Init+0x94>)
 80018da:	f003 fcff 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018e4:	f000 f95e 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200005e8 	.word	0x200005e8

080018f4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80018f8:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <MX_UART5_Init+0x4c>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	@ (8001944 <MX_UART5_Init+0x50>)
 80018fc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <MX_UART5_Init+0x4c>)
 8001900:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001904:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <MX_UART5_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <MX_UART5_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <MX_UART5_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <MX_UART5_Init+0x4c>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <MX_UART5_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <MX_UART5_Init+0x4c>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	@ (8001940 <MX_UART5_Init+0x4c>)
 800192c:	f003 fd66 	bl	80053fc <HAL_UART_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001936:	f000 f935 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000630 	.word	0x20000630
 8001944:	40005000 	.word	0x40005000

08001948 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <MX_USART2_UART_Init+0x4c>)
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <MX_USART2_UART_Init+0x50>)
 8001950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <MX_USART2_UART_Init+0x4c>)
 8001954:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <MX_USART2_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <MX_USART2_UART_Init+0x4c>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <MX_USART2_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <MX_USART2_UART_Init+0x4c>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <MX_USART2_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <MX_USART2_UART_Init+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_USART2_UART_Init+0x4c>)
 8001980:	f003 fd3c 	bl	80053fc <HAL_UART_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800198a:	f000 f90b 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000678 	.word	0x20000678
 8001998:	40004400 	.word	0x40004400

0800199c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b77      	ldr	r3, [pc, #476]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a76      	ldr	r2, [pc, #472]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b74      	ldr	r3, [pc, #464]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b70      	ldr	r3, [pc, #448]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 80019d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b6d      	ldr	r3, [pc, #436]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	4b69      	ldr	r3, [pc, #420]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a68      	ldr	r2, [pc, #416]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b66      	ldr	r3, [pc, #408]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b62      	ldr	r3, [pc, #392]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a61      	ldr	r2, [pc, #388]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b5f      	ldr	r3, [pc, #380]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4b5b      	ldr	r3, [pc, #364]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a5a      	ldr	r2, [pc, #360]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b58      	ldr	r3, [pc, #352]	@ (8001b94 <MX_GPIO_Init+0x1f8>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, I2C_ADD0_Pin|I2C_ADD1_Pin|I2C_ADD2_Pin|PSEL_1_Pin, GPIO_PIN_SET);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8001a44:	4854      	ldr	r0, [pc, #336]	@ (8001b98 <MX_GPIO_Init+0x1fc>)
 8001a46:	f001 f9e5 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP4_Pin|DIR3_Pin|STEP1_Pin|STEP2_Pin
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f24e 4132 	movw	r1, #58418	@ 0xe432
 8001a50:	4852      	ldr	r0, [pc, #328]	@ (8001b9c <MX_GPIO_Init+0x200>)
 8001a52:	f001 f9df 	bl	8002e14 <HAL_GPIO_WritePin>
                          |STEP3_Pin|DIR2_Pin|RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PSEL_0_GPIO_Port, PSEL_0_Pin, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2180      	movs	r1, #128	@ 0x80
 8001a5a:	4851      	ldr	r0, [pc, #324]	@ (8001ba0 <MX_GPIO_Init+0x204>)
 8001a5c:	f001 f9da 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR4_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001a66:	484c      	ldr	r0, [pc, #304]	@ (8001b98 <MX_GPIO_Init+0x1fc>)
 8001a68:	f001 f9d4 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a72:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4847      	ldr	r0, [pc, #284]	@ (8001ba0 <MX_GPIO_Init+0x204>)
 8001a84:	f001 f81a 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_ADD0_Pin I2C_ADD1_Pin I2C_ADD2_Pin DIR4_Pin
                           PSEL_1_Pin DIR1_Pin */
  GPIO_InitStruct.Pin = I2C_ADD0_Pin|I2C_ADD1_Pin|I2C_ADD2_Pin|DIR4_Pin
 8001a88:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a8c:	617b      	str	r3, [r7, #20]
                          |PSEL_1_Pin|DIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	483d      	ldr	r0, [pc, #244]	@ (8001b98 <MX_GPIO_Init+0x1fc>)
 8001aa2:	f001 f80b 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP4_Pin DIR3_Pin STEP1_Pin STEP2_Pin
                           STEP3_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = STEP4_Pin|DIR3_Pin|STEP1_Pin|STEP2_Pin
 8001aa6:	f24e 4312 	movw	r3, #58386	@ 0xe412
 8001aaa:	617b      	str	r3, [r7, #20]
                          |STEP3_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4837      	ldr	r0, [pc, #220]	@ (8001b9c <MX_GPIO_Init+0x200>)
 8001ac0:	f000 fffc 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH2_Pin LIMIT_SWITCH1_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH2_Pin|LIMIT_SWITCH1_Pin;
 8001ac4:	2344      	movs	r3, #68	@ 0x44
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ac8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4830      	ldr	r0, [pc, #192]	@ (8001b9c <MX_GPIO_Init+0x200>)
 8001ada:	f000 ffef 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PSEL_0_Pin */
  GPIO_InitStruct.Pin = PSEL_0_Pin;
 8001ade:	2380      	movs	r3, #128	@ 0x80
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PSEL_0_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	482a      	ldr	r0, [pc, #168]	@ (8001ba0 <MX_GPIO_Init+0x204>)
 8001af6:	f000 ffe1 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH4_Pin LIMIT_SWITCH3_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH4_Pin|LIMIT_SWITCH3_Pin;
 8001afa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b00:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4821      	ldr	r0, [pc, #132]	@ (8001b98 <MX_GPIO_Init+0x1fc>)
 8001b12:	f000 ffd3 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_READY_Pin */
  GPIO_InitStruct.Pin = DATA_READY_Pin;
 8001b16:	2308      	movs	r3, #8
 8001b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b1a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_READY_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	481c      	ldr	r0, [pc, #112]	@ (8001b9c <MX_GPIO_Init+0x200>)
 8001b2c:	f000 ffc6 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8001b30:	2320      	movs	r3, #32
 8001b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	4815      	ldr	r0, [pc, #84]	@ (8001b9c <MX_GPIO_Init+0x200>)
 8001b48:	f000 ffb8 	bl	8002abc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2008      	movs	r0, #8
 8001b52:	f000 ff7c 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001b56:	2008      	movs	r0, #8
 8001b58:	f000 ff95 	bl	8002a86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2009      	movs	r0, #9
 8001b62:	f000 ff74 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001b66:	2009      	movs	r0, #9
 8001b68:	f000 ff8d 	bl	8002a86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2017      	movs	r0, #23
 8001b72:	f000 ff6c 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b76:	2017      	movs	r0, #23
 8001b78:	f000 ff85 	bl	8002a86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2028      	movs	r0, #40	@ 0x28
 8001b82:	f000 ff64 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b86:	2028      	movs	r0, #40	@ 0x28
 8001b88:	f000 ff7d 	bl	8002a86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	@ 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40020800 	.word	0x40020800

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba8:	b672      	cpsid	i
}
 8001baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <Error_Handler+0x8>

08001bb0 <doStep>:
};

enum Status currentStatus;


void doStep() {
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0

	for (int i = 0; i < 4; i++) {
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	e05c      	b.n	8001c76 <doStep+0xc6>
		StepperMotor *motor = motors[i];
 8001bbc:	4a33      	ldr	r2, [pc, #204]	@ (8001c8c <doStep+0xdc>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	603b      	str	r3, [r7, #0]
		if (motor->active) {
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	7e1b      	ldrb	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d050      	beq.n	8001c70 <doStep+0xc0>
			if (motor->currentPos < motor->desiredPos) {
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	da23      	bge.n	8001c22 <doStep+0x72>
				// Set direction for forward motion
				motor->dirPort->BSRR = (motor->dirPin << 16);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	899b      	ldrh	r3, [r3, #12]
 8001bde:	461a      	mov	r2, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	0412      	lsls	r2, r2, #16
 8001be6:	619a      	str	r2, [r3, #24]
				if (motor->toggleCount == 0) { // rising edge: set STEP high
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	7b9b      	ldrb	r3, [r3, #14]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d108      	bne.n	8001c02 <doStep+0x52>
					motor->stepPort->BSRR = motor->stepPin;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	889a      	ldrh	r2, [r3, #4]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	619a      	str	r2, [r3, #24]
					motor->toggleCount = 1;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	739a      	strb	r2, [r3, #14]
 8001c00:	e036      	b.n	8001c70 <doStep+0xc0>
				} else { // falling edge: set STEP low and update position
					motor->stepPort->BSRR = (motor->stepPin << 16);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	889b      	ldrh	r3, [r3, #4]
 8001c06:	461a      	mov	r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0412      	lsls	r2, r2, #16
 8001c0e:	619a      	str	r2, [r3, #24]
					motor->toggleCount = 0;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2200      	movs	r2, #0
 8001c14:	739a      	strb	r2, [r3, #14]
					motor->currentPos++;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	611a      	str	r2, [r3, #16]
 8001c20:	e026      	b.n	8001c70 <doStep+0xc0>
//					int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Motor %d At Position: %d\n",i,motor->currentPos);
//					HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer2, len, 10000);
				}
			} else if (motor->currentPos > motor->desiredPos) {
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	dd20      	ble.n	8001c70 <doStep+0xc0>
				// Set direction for reverse motion using DIR clear
				motor->dirPort->BSRR = motor->dirPin;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	899a      	ldrh	r2, [r3, #12]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	619a      	str	r2, [r3, #24]
				if (motor->toggleCount == 0) { // rising edge: set STEP high
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	7b9b      	ldrb	r3, [r3, #14]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d108      	bne.n	8001c52 <doStep+0xa2>
					motor->stepPort->BSRR = motor->stepPin;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	889a      	ldrh	r2, [r3, #4]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	619a      	str	r2, [r3, #24]
					motor->toggleCount = 1;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	739a      	strb	r2, [r3, #14]
 8001c50:	e00e      	b.n	8001c70 <doStep+0xc0>
				} else { // falling edge: set STEP low and update position
					motor->stepPort->BSRR = (motor->stepPin << 16);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	889b      	ldrh	r3, [r3, #4]
 8001c56:	461a      	mov	r2, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	619a      	str	r2, [r3, #24]
					motor->toggleCount = 0;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2200      	movs	r2, #0
 8001c64:	739a      	strb	r2, [r3, #14]
					motor->currentPos--;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	1e5a      	subs	r2, r3, #1
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < 4; i++) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3301      	adds	r3, #1
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	dd9f      	ble.n	8001bbc <doStep+0xc>
				}
			}
		}
	}

}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000

08001c90 <HAL_GPIO_EXTI_Callback>:
			motor4.active = 0;
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
	if(currentStatus == MANUAL_CONTROL) {
 8001c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001e18 <HAL_GPIO_EXTI_Callback+0x188>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d137      	bne.n	8001d12 <HAL_GPIO_EXTI_Callback+0x82>
	    if ((GPIO_Pin == LIMIT_SWITCH3_Pin) || (GPIO_Pin == LIMIT_SWITCH4_Pin) || (GPIO_Pin == LIMIT_SWITCH1_Pin)|| (GPIO_Pin == LIMIT_SWITCH2_Pin)) {
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ca8:	d009      	beq.n	8001cbe <HAL_GPIO_EXTI_Callback+0x2e>
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001cb0:	d005      	beq.n	8001cbe <HAL_GPIO_EXTI_Callback+0x2e>
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	2b40      	cmp	r3, #64	@ 0x40
 8001cb6:	d002      	beq.n	8001cbe <HAL_GPIO_EXTI_Callback+0x2e>
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d128      	bne.n	8001d10 <HAL_GPIO_EXTI_Callback+0x80>
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered, entering safemode. Restart program when ready\n");
 8001cbe:	4a57      	ldr	r2, [pc, #348]	@ (8001e1c <HAL_GPIO_EXTI_Callback+0x18c>)
 8001cc0:	2180      	movs	r1, #128	@ 0x80
 8001cc2:	4857      	ldr	r0, [pc, #348]	@ (8001e20 <HAL_GPIO_EXTI_Callback+0x190>)
 8001cc4:	f004 fcc0 	bl	8006648 <sniprintf>
 8001cc8:	61f8      	str	r0, [r7, #28]
			HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 100);
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	2364      	movs	r3, #100	@ 0x64
 8001cd0:	4953      	ldr	r1, [pc, #332]	@ (8001e20 <HAL_GPIO_EXTI_Callback+0x190>)
 8001cd2:	4854      	ldr	r0, [pc, #336]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x194>)
 8001cd4:	f003 fbe2 	bl	800549c <HAL_UART_Transmit>

	        motor1.active = 0;
 8001cd8:	4b53      	ldr	r3, [pc, #332]	@ (8001e28 <HAL_GPIO_EXTI_Callback+0x198>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	761a      	strb	r2, [r3, #24]
	        motor2.active = 0;
 8001cde:	4b53      	ldr	r3, [pc, #332]	@ (8001e2c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	761a      	strb	r2, [r3, #24]
	        motor3.active = 0;
 8001ce4:	4b52      	ldr	r3, [pc, #328]	@ (8001e30 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	761a      	strb	r2, [r3, #24]
	        motor4.active = 0;
 8001cea:	4b52      	ldr	r3, [pc, #328]	@ (8001e34 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	761a      	strb	r2, [r3, #24]

	        motor1.currentPos = 0;
 8001cf0:	4b4d      	ldr	r3, [pc, #308]	@ (8001e28 <HAL_GPIO_EXTI_Callback+0x198>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
	        motor2.currentPos = 0;
 8001cf6:	4b4d      	ldr	r3, [pc, #308]	@ (8001e2c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
	        motor3.currentPos = 0;
 8001cfc:	4b4c      	ldr	r3, [pc, #304]	@ (8001e30 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
	        motor4.currentPos = 0;
 8001d02:	4b4c      	ldr	r3, [pc, #304]	@ (8001e34 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]

	        currentStatus = SAFE_MODE;
 8001d08:	4b43      	ldr	r3, [pc, #268]	@ (8001e18 <HAL_GPIO_EXTI_Callback+0x188>)
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	701a      	strb	r2, [r3, #0]
	    if ((GPIO_Pin == LIMIT_SWITCH3_Pin) || (GPIO_Pin == LIMIT_SWITCH4_Pin) || (GPIO_Pin == LIMIT_SWITCH1_Pin)|| (GPIO_Pin == LIMIT_SWITCH2_Pin)) {
 8001d0e:	e000      	b.n	8001d12 <HAL_GPIO_EXTI_Callback+0x82>
	    } else {
	    	__NOP();
 8001d10:	bf00      	nop
	    }
	}

	if(currentStatus == HOMING) {
 8001d12:	4b41      	ldr	r3, [pc, #260]	@ (8001e18 <HAL_GPIO_EXTI_Callback+0x188>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d179      	bne.n	8001e0e <HAL_GPIO_EXTI_Callback+0x17e>
		if ((GPIO_Pin == LIMIT_SWITCH3_Pin) && (!MOTOR3_READY)) {
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d20:	d11a      	bne.n	8001d58 <HAL_GPIO_EXTI_Callback+0xc8>
 8001d22:	4b45      	ldr	r3, [pc, #276]	@ (8001e38 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d116      	bne.n	8001d58 <HAL_GPIO_EXTI_Callback+0xc8>
			MOTOR3_READY = 1;
 8001d2a:	4b43      	ldr	r3, [pc, #268]	@ (8001e38 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
			motor3.currentPos = HOMING_STEPS_REQ;
 8001d30:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001d34:	4b3e      	ldr	r3, [pc, #248]	@ (8001e30 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001d36:	611a      	str	r2, [r3, #16]
			motor3.desiredPos = 0;
 8001d38:	4b3d      	ldr	r3, [pc, #244]	@ (8001e30 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	615a      	str	r2, [r3, #20]
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 3!\r\n");
 8001d3e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e3c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001d40:	2180      	movs	r1, #128	@ 0x80
 8001d42:	4837      	ldr	r0, [pc, #220]	@ (8001e20 <HAL_GPIO_EXTI_Callback+0x190>)
 8001d44:	f004 fc80 	bl	8006648 <sniprintf>
 8001d48:	61b8      	str	r0, [r7, #24]
			HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 100);
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	2364      	movs	r3, #100	@ 0x64
 8001d50:	4933      	ldr	r1, [pc, #204]	@ (8001e20 <HAL_GPIO_EXTI_Callback+0x190>)
 8001d52:	4834      	ldr	r0, [pc, #208]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x194>)
 8001d54:	f003 fba2 	bl	800549c <HAL_UART_Transmit>

		}
		if ((GPIO_Pin == LIMIT_SWITCH4_Pin) && (!MOTOR4_READY)) {
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d5e:	d11a      	bne.n	8001d96 <HAL_GPIO_EXTI_Callback+0x106>
 8001d60:	4b37      	ldr	r3, [pc, #220]	@ (8001e40 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d116      	bne.n	8001d96 <HAL_GPIO_EXTI_Callback+0x106>
			MOTOR4_READY = 1;
 8001d68:	4b35      	ldr	r3, [pc, #212]	@ (8001e40 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
			motor4.currentPos = HOMING_STEPS_REQ;
 8001d6e:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001d72:	4b30      	ldr	r3, [pc, #192]	@ (8001e34 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001d74:	611a      	str	r2, [r3, #16]
			motor4.desiredPos = 0;
 8001d76:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 4!\r\n");
 8001d7c:	4a31      	ldr	r2, [pc, #196]	@ (8001e44 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001d7e:	2180      	movs	r1, #128	@ 0x80
 8001d80:	4827      	ldr	r0, [pc, #156]	@ (8001e20 <HAL_GPIO_EXTI_Callback+0x190>)
 8001d82:	f004 fc61 	bl	8006648 <sniprintf>
 8001d86:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 100);
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	2364      	movs	r3, #100	@ 0x64
 8001d8e:	4924      	ldr	r1, [pc, #144]	@ (8001e20 <HAL_GPIO_EXTI_Callback+0x190>)
 8001d90:	4824      	ldr	r0, [pc, #144]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x194>)
 8001d92:	f003 fb83 	bl	800549c <HAL_UART_Transmit>
		}
		if ((GPIO_Pin == LIMIT_SWITCH1_Pin) && (!MOTOR1_READY)) {
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	2b40      	cmp	r3, #64	@ 0x40
 8001d9a:	d11a      	bne.n	8001dd2 <HAL_GPIO_EXTI_Callback+0x142>
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d116      	bne.n	8001dd2 <HAL_GPIO_EXTI_Callback+0x142>
			MOTOR1_READY = 1;
 8001da4:	4b28      	ldr	r3, [pc, #160]	@ (8001e48 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
			motor1.currentPos = HOMING_STEPS_REQ;
 8001daa:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001dae:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <HAL_GPIO_EXTI_Callback+0x198>)
 8001db0:	611a      	str	r2, [r3, #16]
			motor1.desiredPos = 0;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e28 <HAL_GPIO_EXTI_Callback+0x198>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	615a      	str	r2, [r3, #20]
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 1!\r\n");
 8001db8:	4a24      	ldr	r2, [pc, #144]	@ (8001e4c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001dba:	2180      	movs	r1, #128	@ 0x80
 8001dbc:	4818      	ldr	r0, [pc, #96]	@ (8001e20 <HAL_GPIO_EXTI_Callback+0x190>)
 8001dbe:	f004 fc43 	bl	8006648 <sniprintf>
 8001dc2:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 100);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	2364      	movs	r3, #100	@ 0x64
 8001dca:	4915      	ldr	r1, [pc, #84]	@ (8001e20 <HAL_GPIO_EXTI_Callback+0x190>)
 8001dcc:	4815      	ldr	r0, [pc, #84]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x194>)
 8001dce:	f003 fb65 	bl	800549c <HAL_UART_Transmit>
		}
		if ((GPIO_Pin == LIMIT_SWITCH2_Pin) && (!MOTOR2_READY)) {
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d11a      	bne.n	8001e0e <HAL_GPIO_EXTI_Callback+0x17e>
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d116      	bne.n	8001e0e <HAL_GPIO_EXTI_Callback+0x17e>
			MOTOR2_READY = 1;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
			motor2.currentPos = HOMING_STEPS_REQ;
 8001de6:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001dea:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001dec:	611a      	str	r2, [r3, #16]
			motor2.desiredPos = 0;
 8001dee:	4b0f      	ldr	r3, [pc, #60]	@ (8001e2c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 2!\r\n");
 8001df4:	4a17      	ldr	r2, [pc, #92]	@ (8001e54 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001df6:	2180      	movs	r1, #128	@ 0x80
 8001df8:	4809      	ldr	r0, [pc, #36]	@ (8001e20 <HAL_GPIO_EXTI_Callback+0x190>)
 8001dfa:	f004 fc25 	bl	8006648 <sniprintf>
 8001dfe:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 100);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	2364      	movs	r3, #100	@ 0x64
 8001e06:	4906      	ldr	r1, [pc, #24]	@ (8001e20 <HAL_GPIO_EXTI_Callback+0x190>)
 8001e08:	4806      	ldr	r0, [pc, #24]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x194>)
 8001e0a:	f003 fb47 	bl	800549c <HAL_UART_Transmit>
		}
	}
}
 8001e0e:	bf00      	nop
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200007b4 	.word	0x200007b4
 8001e1c:	08008c38 	.word	0x08008c38
 8001e20:	200006c0 	.word	0x200006c0
 8001e24:	20000630 	.word	0x20000630
 8001e28:	20000794 	.word	0x20000794
 8001e2c:	20000778 	.word	0x20000778
 8001e30:	2000075c 	.word	0x2000075c
 8001e34:	20000740 	.word	0x20000740
 8001e38:	200007b2 	.word	0x200007b2
 8001e3c:	08008c7c 	.word	0x08008c7c
 8001e40:	200007b3 	.word	0x200007b3
 8001e44:	08008ca0 	.word	0x08008ca0
 8001e48:	200007b0 	.word	0x200007b0
 8001e4c:	08008cc4 	.word	0x08008cc4
 8001e50:	200007b1 	.word	0x200007b1
 8001e54:	08008ce8 	.word	0x08008ce8

08001e58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e68:	d101      	bne.n	8001e6e <HAL_TIM_PeriodElapsedCallback+0x16>
        doStep();
 8001e6a:	f7ff fea1 	bl	8001bb0 <doStep>
    }
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	4a08      	ldr	r2, [pc, #32]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001eb6:	2007      	movs	r0, #7
 8001eb8:	f000 fdbe 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	@ 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	@ (8001f4c <HAL_I2C_MspInit+0x84>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d12c      	bne.n	8001f44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <HAL_I2C_MspInit+0x88>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a17      	ldr	r2, [pc, #92]	@ (8001f50 <HAL_I2C_MspInit+0x88>)
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_I2C_MspInit+0x88>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f0c:	2312      	movs	r3, #18
 8001f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f18:	2304      	movs	r3, #4
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4619      	mov	r1, r3
 8001f22:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <HAL_I2C_MspInit+0x8c>)
 8001f24:	f000 fdca 	bl	8002abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <HAL_I2C_MspInit+0x88>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	4a07      	ldr	r2, [pc, #28]	@ (8001f50 <HAL_I2C_MspInit+0x88>)
 8001f32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f38:	4b05      	ldr	r3, [pc, #20]	@ (8001f50 <HAL_I2C_MspInit+0x88>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f44:	bf00      	nop
 8001f46:	3728      	adds	r7, #40	@ 0x28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40005400 	.word	0x40005400
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020400 	.word	0x40020400

08001f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f68:	d115      	bne.n	8001f96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x48>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x48>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7a:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x48>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	201c      	movs	r0, #28
 8001f8c:	f000 fd5f 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f90:	201c      	movs	r0, #28
 8001f92:	f000 fd78 	bl	8002a86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	@ 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a41      	ldr	r2, [pc, #260]	@ (80020c8 <HAL_UART_MspInit+0x124>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d14b      	bne.n	800205e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	4b40      	ldr	r3, [pc, #256]	@ (80020cc <HAL_UART_MspInit+0x128>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	4a3f      	ldr	r2, [pc, #252]	@ (80020cc <HAL_UART_MspInit+0x128>)
 8001fd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80020cc <HAL_UART_MspInit+0x128>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	4b39      	ldr	r3, [pc, #228]	@ (80020cc <HAL_UART_MspInit+0x128>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a38      	ldr	r2, [pc, #224]	@ (80020cc <HAL_UART_MspInit+0x128>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b36      	ldr	r3, [pc, #216]	@ (80020cc <HAL_UART_MspInit+0x128>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b32      	ldr	r3, [pc, #200]	@ (80020cc <HAL_UART_MspInit+0x128>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a31      	ldr	r2, [pc, #196]	@ (80020cc <HAL_UART_MspInit+0x128>)
 8002008:	f043 0308 	orr.w	r3, r3, #8
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b2f      	ldr	r3, [pc, #188]	@ (80020cc <HAL_UART_MspInit+0x128>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800201a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002028:	2303      	movs	r3, #3
 800202a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800202c:	2308      	movs	r3, #8
 800202e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	4619      	mov	r1, r3
 8002036:	4826      	ldr	r0, [pc, #152]	@ (80020d0 <HAL_UART_MspInit+0x12c>)
 8002038:	f000 fd40 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800203c:	2304      	movs	r3, #4
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800204c:	2308      	movs	r3, #8
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	481f      	ldr	r0, [pc, #124]	@ (80020d4 <HAL_UART_MspInit+0x130>)
 8002058:	f000 fd30 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800205c:	e030      	b.n	80020c0 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1d      	ldr	r2, [pc, #116]	@ (80020d8 <HAL_UART_MspInit+0x134>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d12b      	bne.n	80020c0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	4b17      	ldr	r3, [pc, #92]	@ (80020cc <HAL_UART_MspInit+0x128>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	4a16      	ldr	r2, [pc, #88]	@ (80020cc <HAL_UART_MspInit+0x128>)
 8002072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002076:	6413      	str	r3, [r2, #64]	@ 0x40
 8002078:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <HAL_UART_MspInit+0x128>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <HAL_UART_MspInit+0x128>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208c:	4a0f      	ldr	r2, [pc, #60]	@ (80020cc <HAL_UART_MspInit+0x128>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6313      	str	r3, [r2, #48]	@ 0x30
 8002094:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <HAL_UART_MspInit+0x128>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020a0:	230c      	movs	r3, #12
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b0:	2307      	movs	r3, #7
 80020b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	4619      	mov	r1, r3
 80020ba:	4808      	ldr	r0, [pc, #32]	@ (80020dc <HAL_UART_MspInit+0x138>)
 80020bc:	f000 fcfe 	bl	8002abc <HAL_GPIO_Init>
}
 80020c0:	bf00      	nop
 80020c2:	3730      	adds	r7, #48	@ 0x30
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40005000 	.word	0x40005000
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020800 	.word	0x40020800
 80020d4:	40020c00 	.word	0x40020c00
 80020d8:	40004400 	.word	0x40004400
 80020dc:	40020000 	.word	0x40020000

080020e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <NMI_Handler+0x4>

080020e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <MemManage_Handler+0x4>

080020f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <BusFault_Handler+0x4>

08002100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <UsageFault_Handler+0x4>

08002108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002136:	f000 fb6b 	bl	8002810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}

0800213e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH2_Pin);
 8002142:	2004      	movs	r0, #4
 8002144:	f000 fe80 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DATA_READY_Pin);
 8002150:	2008      	movs	r0, #8
 8002152:	f000 fe79 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}

0800215a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH1_Pin);
 800215e:	2040      	movs	r0, #64	@ 0x40
 8002160:	f000 fe72 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}

08002168 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800216c:	4802      	ldr	r0, [pc, #8]	@ (8002178 <TIM2_IRQHandler+0x10>)
 800216e:	f002 fd8f 	bl	8004c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200005e8 	.word	0x200005e8

0800217c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH4_Pin);
 8002180:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002184:	f000 fe60 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH3_Pin);
 8002188:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800218c:	f000 fe5c 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002190:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002194:	f000 fe58 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return 1;
 80021a0:	2301      	movs	r3, #1
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <_kill>:

int _kill(int pid, int sig)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021b6:	f004 fb11 	bl	80067dc <__errno>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2216      	movs	r2, #22
 80021be:	601a      	str	r2, [r3, #0]
  return -1;
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_exit>:

void _exit (int status)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ffe7 	bl	80021ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80021de:	bf00      	nop
 80021e0:	e7fd      	b.n	80021de <_exit+0x12>

080021e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e00a      	b.n	800220a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021f4:	f3af 8000 	nop.w
 80021f8:	4601      	mov	r1, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	60ba      	str	r2, [r7, #8]
 8002200:	b2ca      	uxtb	r2, r1
 8002202:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3301      	adds	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	429a      	cmp	r2, r3
 8002210:	dbf0      	blt.n	80021f4 <_read+0x12>
  }

  return len;
 8002212:	687b      	ldr	r3, [r7, #4]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	e009      	b.n	8002242 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	60ba      	str	r2, [r7, #8]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3301      	adds	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	dbf1      	blt.n	800222e <_write+0x12>
  }
  return len;
 800224a:	687b      	ldr	r3, [r7, #4]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_close>:

int _close(int file)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800227c:	605a      	str	r2, [r3, #4]
  return 0;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_isatty>:

int _isatty(int file)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002294:	2301      	movs	r3, #1
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c4:	4a14      	ldr	r2, [pc, #80]	@ (8002318 <_sbrk+0x5c>)
 80022c6:	4b15      	ldr	r3, [pc, #84]	@ (800231c <_sbrk+0x60>)
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d0:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <_sbrk+0x64>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <_sbrk+0x64>)
 80022da:	4a12      	ldr	r2, [pc, #72]	@ (8002324 <_sbrk+0x68>)
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022de:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d207      	bcs.n	80022fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ec:	f004 fa76 	bl	80067dc <__errno>
 80022f0:	4603      	mov	r3, r0
 80022f2:	220c      	movs	r2, #12
 80022f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	e009      	b.n	8002310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022fc:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <_sbrk+0x64>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002302:	4b07      	ldr	r3, [pc, #28]	@ (8002320 <_sbrk+0x64>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	4a05      	ldr	r2, [pc, #20]	@ (8002320 <_sbrk+0x64>)
 800230c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230e:	68fb      	ldr	r3, [r7, #12]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20020000 	.word	0x20020000
 800231c:	00000400 	.word	0x00000400
 8002320:	200007b8 	.word	0x200007b8
 8002324:	20000910 	.word	0x20000910

08002328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <SystemInit+0x20>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002332:	4a05      	ldr	r2, [pc, #20]	@ (8002348 <SystemInit+0x20>)
 8002334:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002338:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <Xbus_setBusId>:
}

/*! \brief Sets xbus Bus identifier
*/
void Xbus_setBusId(uint8_t* xbusMessage, uint8_t busId)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	70fb      	strb	r3, [r7, #3]
	xbusMessage[OFFSET_TO_BID] = busId & 0xff;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3301      	adds	r3, #1
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	701a      	strb	r2, [r3, #0]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <Xbus_getMessageId>:

/*! \brief Returns xbus Message identifier
*/
int Xbus_getMessageId(const uint8_t* xbusMessage)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	return (xbusMessage[OFFSET_TO_MID] & 0xff);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3302      	adds	r3, #2
 8002378:	781b      	ldrb	r3, [r3, #0]
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <Xbus_setMessageId>:

/*! \brief Sets xbus Message identifier
*/
void Xbus_setMessageId(uint8_t* xbusMessage, uint8_t messageId)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	70fb      	strb	r3, [r7, #3]
	xbusMessage[OFFSET_TO_MID] = messageId & 0xff;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3302      	adds	r3, #2
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	701a      	strb	r2, [r3, #0]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <Xbus_getPayloadLength>:

/*! \brief Returns xbus message (payload) length
*/
int Xbus_getPayloadLength(const uint8_t* xbusMessage)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
	int length = xbusMessage[OFFSET_TO_LEN] & 0xff;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3303      	adds	r3, #3
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
	if (length != LENGTH_EXTENDER_BYTE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2bff      	cmp	r3, #255	@ 0xff
 80023ba:	d001      	beq.n	80023c0 <Xbus_getPayloadLength+0x1a>
		return length;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	e00b      	b.n	80023d8 <Xbus_getPayloadLength+0x32>
	else
	{
		int result = (xbusMessage[OFFSET_TO_LEN + 2] & 0xff);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3305      	adds	r3, #5
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	60bb      	str	r3, [r7, #8]
		result += (xbusMessage[OFFSET_TO_LEN + 1] & 0xff) << 8;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	4413      	add	r3, r2
 80023d4:	60bb      	str	r3, [r7, #8]
		return result;
 80023d6:	68bb      	ldr	r3, [r7, #8]
	}
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <Xbus_setPayloadLength>:

/*! \brief Sets xbus message (payload) length
*/
void Xbus_setPayloadLength(uint8_t* xbusMessage, uint16_t payloadLength)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
	if (payloadLength < 255)
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	2bfe      	cmp	r3, #254	@ 0xfe
 80023f4:	d805      	bhi.n	8002402 <Xbus_setPayloadLength+0x1e>
		xbusMessage[OFFSET_TO_LEN] = payloadLength & 0xff;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3303      	adds	r3, #3
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
	{
		xbusMessage[OFFSET_TO_LEN] = LENGTH_EXTENDER_BYTE;
		xbusMessage[OFFSET_TO_LEN + 1] = (payloadLength >> 8) & 0xff;
		xbusMessage[OFFSET_TO_LEN + 2] = payloadLength & 0xff;
	}
}
 8002400:	e00f      	b.n	8002422 <Xbus_setPayloadLength+0x3e>
		xbusMessage[OFFSET_TO_LEN] = LENGTH_EXTENDER_BYTE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3303      	adds	r3, #3
 8002406:	22ff      	movs	r2, #255	@ 0xff
 8002408:	701a      	strb	r2, [r3, #0]
		xbusMessage[OFFSET_TO_LEN + 1] = (payloadLength >> 8) & 0xff;
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	b29a      	uxth	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]
		xbusMessage[OFFSET_TO_LEN + 2] = payloadLength & 0xff;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3305      	adds	r3, #5
 800241c:	887a      	ldrh	r2, [r7, #2]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <Xbus_message>:

/*! \brief Initialize a xbus message with BID, MID and Length
*/
void Xbus_message(uint8_t* xbusMessage, uint8_t bid, uint8_t mid, uint16_t len)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	4608      	mov	r0, r1
 8002438:	4611      	mov	r1, r2
 800243a:	461a      	mov	r2, r3
 800243c:	4603      	mov	r3, r0
 800243e:	70fb      	strb	r3, [r7, #3]
 8002440:	460b      	mov	r3, r1
 8002442:	70bb      	strb	r3, [r7, #2]
 8002444:	4613      	mov	r3, r2
 8002446:	803b      	strh	r3, [r7, #0]
	xbusMessage[0] = 0xFA;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	22fa      	movs	r2, #250	@ 0xfa
 800244c:	701a      	strb	r2, [r3, #0]
	Xbus_setBusId(xbusMessage, bid);
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	4619      	mov	r1, r3
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ff7a 	bl	800234c <Xbus_setBusId>
	Xbus_setMessageId(xbusMessage, mid);
 8002458:	78bb      	ldrb	r3, [r7, #2]
 800245a:	4619      	mov	r1, r3
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ff92 	bl	8002386 <Xbus_setMessageId>
	Xbus_setPayloadLength(xbusMessage, len);
 8002462:	883b      	ldrh	r3, [r7, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffbc 	bl	80023e4 <Xbus_setPayloadLength>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <Xbus_getPointerToPayload>:
}

/*! \brief Returns pointer to payload of an xbus message
*/
uint8_t* Xbus_getPointerToPayload(uint8_t* xbusMessage)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	if ((xbusMessage[OFFSET_TO_LEN] & 0xff) == LENGTH_EXTENDER_BYTE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3303      	adds	r3, #3
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2bff      	cmp	r3, #255	@ 0xff
 8002484:	d102      	bne.n	800248c <Xbus_getPointerToPayload+0x18>
		return xbusMessage + OFFSET_TO_PAYLOAD_EXT;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3306      	adds	r3, #6
 800248a:	e001      	b.n	8002490 <Xbus_getPointerToPayload+0x1c>
	else
		return xbusMessage + OFFSET_TO_PAYLOAD;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3304      	adds	r3, #4
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <Xbus_getConstPointerToPayload>:

/*! \brief Returns a const pointer to payload of an xbus message
*/
uint8_t const* Xbus_getConstPointerToPayload(uint8_t const* xbusMessage)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	return Xbus_getPointerToPayload((uint8_t*)xbusMessage);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ffe5 	bl	8002474 <Xbus_getPointerToPayload>
 80024aa:	4603      	mov	r3, r0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <checkDataReadyLineMain>:
	checksum &= 0xff;
	return (checksum == 0);
}

bool checkDataReadyLineMain()
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(DATA_READY_PORT, DATA_READY_PIN) == GPIO_PIN_SET;
 80024b8:	2108      	movs	r1, #8
 80024ba:	4805      	ldr	r0, [pc, #20]	@ (80024d0 <checkDataReadyLineMain+0x1c>)
 80024bc:	f000 fc92 	bl	8002de4 <HAL_GPIO_ReadPin>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	bf0c      	ite	eq
 80024c6:	2301      	moveq	r3, #1
 80024c8:	2300      	movne	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40020400 	.word	0x40020400

080024d4 <Xbus_createRawMessageHelper>:

size_t Xbus_createRawMessageHelper(uint8_t* dest, uint8_t const* message)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
	int n;
	uint8_t checksum;
	uint16_t length;
	uint8_t* dptr = dest;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]

	length = Xbus_getPayloadLength(message);
 80024e2:	6838      	ldr	r0, [r7, #0]
 80024e4:	f7ff ff5f 	bl	80023a6 <Xbus_getPayloadLength>
 80024e8:	4603      	mov	r3, r0
 80024ea:	817b      	strh	r3, [r7, #10]

	*dptr++ = XBUS_CONTROL_PIPE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	60fa      	str	r2, [r7, #12]
 80024f2:	2203      	movs	r2, #3
 80024f4:	701a      	strb	r2, [r3, #0]

	checksum = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	74fb      	strb	r3, [r7, #19]
	checksum -= XBUS_MASTERDEVICE;
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	3301      	adds	r3, #1
 80024fe:	74fb      	strb	r3, [r7, #19]

	*dptr = Xbus_getMessageId(message);
 8002500:	6838      	ldr	r0, [r7, #0]
 8002502:	f7ff ff33 	bl	800236c <Xbus_getMessageId>
 8002506:	4603      	mov	r3, r0
 8002508:	b2da      	uxtb	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	701a      	strb	r2, [r3, #0]
	checksum -= *dptr++;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	60fa      	str	r2, [r7, #12]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	7cfa      	ldrb	r2, [r7, #19]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	74fb      	strb	r3, [r7, #19]

	if (length < XBUS_EXTENDED_LENGTH)
 800251c:	897b      	ldrh	r3, [r7, #10]
 800251e:	2bfe      	cmp	r3, #254	@ 0xfe
 8002520:	d80b      	bhi.n	800253a <Xbus_createRawMessageHelper+0x66>
	{
		*dptr = length;
 8002522:	897b      	ldrh	r3, [r7, #10]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	60fa      	str	r2, [r7, #12]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	7cfa      	ldrb	r2, [r7, #19]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	74fb      	strb	r3, [r7, #19]
 8002538:	e021      	b.n	800257e <Xbus_createRawMessageHelper+0xaa>
	}
	else
	{
		*dptr = XBUS_EXTENDED_LENGTH;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	22ff      	movs	r2, #255	@ 0xff
 800253e:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	60fa      	str	r2, [r7, #12]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	7cfa      	ldrb	r2, [r7, #19]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	74fb      	strb	r3, [r7, #19]
		*dptr = length >> 8;
 800254e:	897b      	ldrh	r3, [r7, #10]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	b29b      	uxth	r3, r3
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	60fa      	str	r2, [r7, #12]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	7cfa      	ldrb	r2, [r7, #19]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	74fb      	strb	r3, [r7, #19]
		*dptr = length & 0xFF;
 8002568:	897b      	ldrh	r3, [r7, #10]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	60fa      	str	r2, [r7, #12]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	7cfa      	ldrb	r2, [r7, #19]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	74fb      	strb	r3, [r7, #19]
	}

	for (n = 0; n < length; n++)
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e012      	b.n	80025aa <Xbus_createRawMessageHelper+0xd6>
	{
		*dptr = Xbus_getConstPointerToPayload(message)[n];
 8002584:	6838      	ldr	r0, [r7, #0]
 8002586:	f7ff ff89 	bl	800249c <Xbus_getConstPointerToPayload>
 800258a:	4602      	mov	r2, r0
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	4413      	add	r3, r2
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	60fa      	str	r2, [r7, #12]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	7cfa      	ldrb	r2, [r7, #19]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	74fb      	strb	r3, [r7, #19]
	for (n = 0; n < length; n++)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3301      	adds	r3, #1
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	897b      	ldrh	r3, [r7, #10]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	dbe8      	blt.n	8002584 <Xbus_createRawMessageHelper+0xb0>
	}

	*dptr++ = checksum;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	60fa      	str	r2, [r7, #12]
 80025b8:	7cfa      	ldrb	r2, [r7, #19]
 80025ba:	701a      	strb	r2, [r3, #0]

	return dptr - dest;
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	1ad3      	subs	r3, r2, r3
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <extractUint8>:

uint8_t extractUint8(const uint8_t *data, int *index) {
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
    uint8_t result = data[*index];
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	73fb      	strb	r3, [r7, #15]
    (*index)++;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	601a      	str	r2, [r3, #0]
    return result;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <extractUint16>:

/* Extract a 16-bit unsigned integer from data in big-endian order.
   The first byte becomes the high 8 bits and the second byte the low 8 bits. */
uint16_t extractUint16(const uint8_t *data, int *index) {
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	81fb      	strh	r3, [r7, #14]
    result |= ((uint16_t)data[*index]) << 8;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	b21a      	sxth	r2, r3
 8002618:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800261c:	4313      	orrs	r3, r2
 800261e:	b21b      	sxth	r3, r3
 8002620:	81fb      	strh	r3, [r7, #14]
    (*index)++;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	601a      	str	r2, [r3, #0]
    result |= ((uint16_t)data[*index]);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	89fb      	ldrh	r3, [r7, #14]
 800263c:	4313      	orrs	r3, r2
 800263e:	81fb      	strh	r3, [r7, #14]
    (*index)++;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	601a      	str	r2, [r3, #0]
    return result;
 800264a:	89fb      	ldrh	r3, [r7, #14]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <extractUint32>:

/* Extract a 32-bit unsigned integer from data in big-endian order.
   The first byte is shifted to the most significant position, etc. */
uint32_t extractUint32(const uint8_t *data, int *index) {
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
    uint32_t result = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
    result |= ((uint32_t)data[*index]) << 24;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	061b      	lsls	r3, r3, #24
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
    (*index)++;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]) << 16;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	041b      	lsls	r3, r3, #16
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
    (*index)++;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]) << 8;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
    (*index)++;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
    (*index)++;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	601a      	str	r2, [r3, #0]
    return result;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <extractFloat>:

/* Extract a float by first reading 4 bytes as a 32-bit unsigned integer
   and then copying them into a float. */
float extractFloat(const uint8_t *data, int *index) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
    uint32_t temp = extractUint32(data, index);
 80026f6:	6839      	ldr	r1, [r7, #0]
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ffad 	bl	8002658 <extractUint32>
 80026fe:	4603      	mov	r3, r0
 8002700:	60fb      	str	r3, [r7, #12]
    float result;
    memcpy(&result, &temp, sizeof(result));
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	60bb      	str	r3, [r7, #8]
    return result;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	ee07 3a90 	vmov	s15, r3
}
 800270c:	eeb0 0a67 	vmov.f32	s0, s15
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002718:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002750 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800271c:	f7ff fe04 	bl	8002328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002720:	480c      	ldr	r0, [pc, #48]	@ (8002754 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002722:	490d      	ldr	r1, [pc, #52]	@ (8002758 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002724:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002728:	e002      	b.n	8002730 <LoopCopyDataInit>

0800272a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800272c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272e:	3304      	adds	r3, #4

08002730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002734:	d3f9      	bcc.n	800272a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002736:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002738:	4c0a      	ldr	r4, [pc, #40]	@ (8002764 <LoopFillZerobss+0x22>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800273c:	e001      	b.n	8002742 <LoopFillZerobss>

0800273e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002740:	3204      	adds	r2, #4

08002742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002744:	d3fb      	bcc.n	800273e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002746:	f004 f84f 	bl	80067e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800274a:	f7fe ffb1 	bl	80016b0 <main>
  bx  lr    
 800274e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800275c:	080090a8 	.word	0x080090a8
  ldr r2, =_sbss
 8002760:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002764:	2000090c 	.word	0x2000090c

08002768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC_IRQHandler>
	...

0800276c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002770:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <HAL_Init+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0d      	ldr	r2, [pc, #52]	@ (80027ac <HAL_Init+0x40>)
 8002776:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800277a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800277c:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_Init+0x40>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <HAL_Init+0x40>)
 8002782:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002786:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002788:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a07      	ldr	r2, [pc, #28]	@ (80027ac <HAL_Init+0x40>)
 800278e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002794:	2003      	movs	r0, #3
 8002796:	f000 f94f 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800279a:	2000      	movs	r0, #0
 800279c:	f000 f808 	bl	80027b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a0:	f7ff fb6a 	bl	8001e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023c00 	.word	0x40023c00

080027b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b8:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <HAL_InitTick+0x54>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <HAL_InitTick+0x58>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f967 	bl	8002aa2 <HAL_SYSTICK_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e00e      	b.n	80027fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b0f      	cmp	r3, #15
 80027e2:	d80a      	bhi.n	80027fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e4:	2200      	movs	r2, #0
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f000 f92f 	bl	8002a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f0:	4a06      	ldr	r2, [pc, #24]	@ (800280c <HAL_InitTick+0x5c>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e000      	b.n	80027fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000010 	.word	0x20000010
 8002808:	20000018 	.word	0x20000018
 800280c:	20000014 	.word	0x20000014

08002810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_IncTick+0x20>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_IncTick+0x24>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4413      	add	r3, r2
 8002820:	4a04      	ldr	r2, [pc, #16]	@ (8002834 <HAL_IncTick+0x24>)
 8002822:	6013      	str	r3, [r2, #0]
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000018 	.word	0x20000018
 8002834:	200007bc 	.word	0x200007bc

08002838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return uwTick;
 800283c:	4b03      	ldr	r3, [pc, #12]	@ (800284c <HAL_GetTick+0x14>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	200007bc 	.word	0x200007bc

08002850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff ffee 	bl	8002838 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d005      	beq.n	8002876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800286a:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <HAL_Delay+0x44>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002876:	bf00      	nop
 8002878:	f7ff ffde 	bl	8002838 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	429a      	cmp	r2, r3
 8002886:	d8f7      	bhi.n	8002878 <HAL_Delay+0x28>
  {
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000018 	.word	0x20000018

08002898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a8:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028b4:	4013      	ands	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ca:	4a04      	ldr	r2, [pc, #16]	@ (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	60d3      	str	r3, [r2, #12]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e4:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <__NVIC_GetPriorityGrouping+0x18>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f003 0307 	and.w	r3, r3, #7
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	db0b      	blt.n	8002926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	4907      	ldr	r1, [pc, #28]	@ (8002934 <__NVIC_EnableIRQ+0x38>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2001      	movs	r0, #1
 800291e:	fa00 f202 	lsl.w	r2, r0, r2
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000e100 	.word	0xe000e100

08002938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db0a      	blt.n	8002962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	490c      	ldr	r1, [pc, #48]	@ (8002984 <__NVIC_SetPriority+0x4c>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	440b      	add	r3, r1
 800295c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002960:	e00a      	b.n	8002978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4908      	ldr	r1, [pc, #32]	@ (8002988 <__NVIC_SetPriority+0x50>)
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	3b04      	subs	r3, #4
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	440b      	add	r3, r1
 8002976:	761a      	strb	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	@ 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f1c3 0307 	rsb	r3, r3, #7
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	bf28      	it	cs
 80029aa:	2304      	movcs	r3, #4
 80029ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d902      	bls.n	80029bc <NVIC_EncodePriority+0x30>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3b03      	subs	r3, #3
 80029ba:	e000      	b.n	80029be <NVIC_EncodePriority+0x32>
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	401a      	ands	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43d9      	mvns	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	4313      	orrs	r3, r2
         );
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	@ 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a04:	d301      	bcc.n	8002a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a34 <SysTick_Config+0x40>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a12:	210f      	movs	r1, #15
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f7ff ff8e 	bl	8002938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <SysTick_Config+0x40>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a22:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <SysTick_Config+0x40>)
 8002a24:	2207      	movs	r2, #7
 8002a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e000e010 	.word	0xe000e010

08002a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff29 	bl	8002898 <__NVIC_SetPriorityGrouping>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a60:	f7ff ff3e 	bl	80028e0 <__NVIC_GetPriorityGrouping>
 8002a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f7ff ff8e 	bl	800298c <NVIC_EncodePriority>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff5d 	bl	8002938 <__NVIC_SetPriority>
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff31 	bl	80028fc <__NVIC_EnableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffa2 	bl	80029f4 <SysTick_Config>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	@ 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	e165      	b.n	8002da4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	f040 8154 	bne.w	8002d9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d005      	beq.n	8002b0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d130      	bne.n	8002b70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	2203      	movs	r2, #3
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b44:	2201      	movs	r2, #1
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 0201 	and.w	r2, r3, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d017      	beq.n	8002bac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d123      	bne.n	8002c00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	08da      	lsrs	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3208      	adds	r2, #8
 8002bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	220f      	movs	r2, #15
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	08da      	lsrs	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3208      	adds	r2, #8
 8002bfa:	69b9      	ldr	r1, [r7, #24]
 8002bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0203 	and.w	r2, r3, #3
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80ae 	beq.w	8002d9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	4b5d      	ldr	r3, [pc, #372]	@ (8002dbc <HAL_GPIO_Init+0x300>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4a:	4a5c      	ldr	r2, [pc, #368]	@ (8002dbc <HAL_GPIO_Init+0x300>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c52:	4b5a      	ldr	r3, [pc, #360]	@ (8002dbc <HAL_GPIO_Init+0x300>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c5e:	4a58      	ldr	r2, [pc, #352]	@ (8002dc0 <HAL_GPIO_Init+0x304>)
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	3302      	adds	r3, #2
 8002c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	220f      	movs	r2, #15
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4f      	ldr	r2, [pc, #316]	@ (8002dc4 <HAL_GPIO_Init+0x308>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d025      	beq.n	8002cd6 <HAL_GPIO_Init+0x21a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4e      	ldr	r2, [pc, #312]	@ (8002dc8 <HAL_GPIO_Init+0x30c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01f      	beq.n	8002cd2 <HAL_GPIO_Init+0x216>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4d      	ldr	r2, [pc, #308]	@ (8002dcc <HAL_GPIO_Init+0x310>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d019      	beq.n	8002cce <HAL_GPIO_Init+0x212>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4c      	ldr	r2, [pc, #304]	@ (8002dd0 <HAL_GPIO_Init+0x314>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_GPIO_Init+0x20e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd4 <HAL_GPIO_Init+0x318>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00d      	beq.n	8002cc6 <HAL_GPIO_Init+0x20a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4a      	ldr	r2, [pc, #296]	@ (8002dd8 <HAL_GPIO_Init+0x31c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d007      	beq.n	8002cc2 <HAL_GPIO_Init+0x206>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a49      	ldr	r2, [pc, #292]	@ (8002ddc <HAL_GPIO_Init+0x320>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d101      	bne.n	8002cbe <HAL_GPIO_Init+0x202>
 8002cba:	2306      	movs	r3, #6
 8002cbc:	e00c      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cbe:	2307      	movs	r3, #7
 8002cc0:	e00a      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cc2:	2305      	movs	r3, #5
 8002cc4:	e008      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	e006      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e004      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e002      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	f002 0203 	and.w	r2, r2, #3
 8002cde:	0092      	lsls	r2, r2, #2
 8002ce0:	4093      	lsls	r3, r2
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce8:	4935      	ldr	r1, [pc, #212]	@ (8002dc0 <HAL_GPIO_Init+0x304>)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	089b      	lsrs	r3, r3, #2
 8002cee:	3302      	adds	r3, #2
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8002de0 <HAL_GPIO_Init+0x324>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d1a:	4a31      	ldr	r2, [pc, #196]	@ (8002de0 <HAL_GPIO_Init+0x324>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d20:	4b2f      	ldr	r3, [pc, #188]	@ (8002de0 <HAL_GPIO_Init+0x324>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d44:	4a26      	ldr	r2, [pc, #152]	@ (8002de0 <HAL_GPIO_Init+0x324>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d4a:	4b25      	ldr	r3, [pc, #148]	@ (8002de0 <HAL_GPIO_Init+0x324>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8002de0 <HAL_GPIO_Init+0x324>)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d74:	4b1a      	ldr	r3, [pc, #104]	@ (8002de0 <HAL_GPIO_Init+0x324>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d98:	4a11      	ldr	r2, [pc, #68]	@ (8002de0 <HAL_GPIO_Init+0x324>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3301      	adds	r3, #1
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b0f      	cmp	r3, #15
 8002da8:	f67f ae96 	bls.w	8002ad8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	3724      	adds	r7, #36	@ 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40013800 	.word	0x40013800
 8002dc4:	40020000 	.word	0x40020000
 8002dc8:	40020400 	.word	0x40020400
 8002dcc:	40020800 	.word	0x40020800
 8002dd0:	40020c00 	.word	0x40020c00
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40021400 	.word	0x40021400
 8002ddc:	40021800 	.word	0x40021800
 8002de0:	40013c00 	.word	0x40013c00

08002de4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	887b      	ldrh	r3, [r7, #2]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e001      	b.n	8002e06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e02:	2300      	movs	r3, #0
 8002e04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
 8002e20:	4613      	mov	r3, r2
 8002e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e24:	787b      	ldrb	r3, [r7, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e30:	e003      	b.n	8002e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e32:	887b      	ldrh	r3, [r7, #2]
 8002e34:	041a      	lsls	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	619a      	str	r2, [r3, #24]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e52:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e5e:	4a05      	ldr	r2, [pc, #20]	@ (8002e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe ff12 	bl	8001c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40013c00 	.word	0x40013c00

08002e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e12b      	b.n	80030e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff f812 	bl	8001ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2224      	movs	r2, #36	@ 0x24
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002eda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002edc:	f001 f922 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8002ee0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4a81      	ldr	r2, [pc, #516]	@ (80030ec <HAL_I2C_Init+0x274>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d807      	bhi.n	8002efc <HAL_I2C_Init+0x84>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a80      	ldr	r2, [pc, #512]	@ (80030f0 <HAL_I2C_Init+0x278>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	bf94      	ite	ls
 8002ef4:	2301      	movls	r3, #1
 8002ef6:	2300      	movhi	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e006      	b.n	8002f0a <HAL_I2C_Init+0x92>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4a7d      	ldr	r2, [pc, #500]	@ (80030f4 <HAL_I2C_Init+0x27c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	bf94      	ite	ls
 8002f04:	2301      	movls	r3, #1
 8002f06:	2300      	movhi	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0e7      	b.n	80030e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a78      	ldr	r2, [pc, #480]	@ (80030f8 <HAL_I2C_Init+0x280>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	0c9b      	lsrs	r3, r3, #18
 8002f1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a6a      	ldr	r2, [pc, #424]	@ (80030ec <HAL_I2C_Init+0x274>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d802      	bhi.n	8002f4c <HAL_I2C_Init+0xd4>
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	e009      	b.n	8002f60 <HAL_I2C_Init+0xe8>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	4a69      	ldr	r2, [pc, #420]	@ (80030fc <HAL_I2C_Init+0x284>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	099b      	lsrs	r3, r3, #6
 8002f5e:	3301      	adds	r3, #1
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	495c      	ldr	r1, [pc, #368]	@ (80030ec <HAL_I2C_Init+0x274>)
 8002f7c:	428b      	cmp	r3, r1
 8002f7e:	d819      	bhi.n	8002fb4 <HAL_I2C_Init+0x13c>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e59      	subs	r1, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f8e:	1c59      	adds	r1, r3, #1
 8002f90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f94:	400b      	ands	r3, r1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_I2C_Init+0x138>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e59      	subs	r1, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa8:	3301      	adds	r3, #1
 8002faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fae:	e051      	b.n	8003054 <HAL_I2C_Init+0x1dc>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	e04f      	b.n	8003054 <HAL_I2C_Init+0x1dc>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d111      	bne.n	8002fe0 <HAL_I2C_Init+0x168>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1e58      	subs	r0, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e012      	b.n	8003006 <HAL_I2C_Init+0x18e>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1e58      	subs	r0, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	0099      	lsls	r1, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Init+0x196>
 800300a:	2301      	movs	r3, #1
 800300c:	e022      	b.n	8003054 <HAL_I2C_Init+0x1dc>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10e      	bne.n	8003034 <HAL_I2C_Init+0x1bc>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1e58      	subs	r0, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6859      	ldr	r1, [r3, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	440b      	add	r3, r1
 8003024:	fbb0 f3f3 	udiv	r3, r0, r3
 8003028:	3301      	adds	r3, #1
 800302a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003032:	e00f      	b.n	8003054 <HAL_I2C_Init+0x1dc>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1e58      	subs	r0, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	0099      	lsls	r1, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	fbb0 f3f3 	udiv	r3, r0, r3
 800304a:	3301      	adds	r3, #1
 800304c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003050:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	6809      	ldr	r1, [r1, #0]
 8003058:	4313      	orrs	r3, r2
 800305a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003082:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6911      	ldr	r1, [r2, #16]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68d2      	ldr	r2, [r2, #12]
 800308e:	4311      	orrs	r1, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	430b      	orrs	r3, r1
 8003096:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	000186a0 	.word	0x000186a0
 80030f0:	001e847f 	.word	0x001e847f
 80030f4:	003d08ff 	.word	0x003d08ff
 80030f8:	431bde83 	.word	0x431bde83
 80030fc:	10624dd3 	.word	0x10624dd3

08003100 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	461a      	mov	r2, r3
 800310c:	460b      	mov	r3, r1
 800310e:	817b      	strh	r3, [r7, #10]
 8003110:	4613      	mov	r3, r2
 8003112:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003114:	f7ff fb90 	bl	8002838 <HAL_GetTick>
 8003118:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b20      	cmp	r3, #32
 8003124:	f040 80e0 	bne.w	80032e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2319      	movs	r3, #25
 800312e:	2201      	movs	r2, #1
 8003130:	4970      	ldr	r1, [pc, #448]	@ (80032f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fc7e 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800313e:	2302      	movs	r3, #2
 8003140:	e0d3      	b.n	80032ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_I2C_Master_Transmit+0x50>
 800314c:	2302      	movs	r3, #2
 800314e:	e0cc      	b.n	80032ea <HAL_I2C_Master_Transmit+0x1ea>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b01      	cmp	r3, #1
 8003164:	d007      	beq.n	8003176 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003184:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2221      	movs	r2, #33	@ 0x21
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2210      	movs	r2, #16
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	893a      	ldrh	r2, [r7, #8]
 80031a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4a50      	ldr	r2, [pc, #320]	@ (80032f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80031b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031b8:	8979      	ldrh	r1, [r7, #10]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	6a3a      	ldr	r2, [r7, #32]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 face 	bl	8003760 <I2C_MasterRequestWrite>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e08d      	b.n	80032ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031e4:	e066      	b.n	80032b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	6a39      	ldr	r1, [r7, #32]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fd3c 	bl	8003c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00d      	beq.n	8003212 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d107      	bne.n	800320e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800320c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e06b      	b.n	80032ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	781a      	ldrb	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b04      	cmp	r3, #4
 800324e:	d11b      	bne.n	8003288 <HAL_I2C_Master_Transmit+0x188>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d017      	beq.n	8003288 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	6a39      	ldr	r1, [r7, #32]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fd33 	bl	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00d      	beq.n	80032b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	2b04      	cmp	r3, #4
 800329e:	d107      	bne.n	80032b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e01a      	b.n	80032ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d194      	bne.n	80031e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e000      	b.n	80032ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
  }
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	00100002 	.word	0x00100002
 80032f8:	ffff0000 	.word	0xffff0000

080032fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08c      	sub	sp, #48	@ 0x30
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	4608      	mov	r0, r1
 8003306:	4611      	mov	r1, r2
 8003308:	461a      	mov	r2, r3
 800330a:	4603      	mov	r3, r0
 800330c:	817b      	strh	r3, [r7, #10]
 800330e:	460b      	mov	r3, r1
 8003310:	813b      	strh	r3, [r7, #8]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003316:	f7ff fa8f 	bl	8002838 <HAL_GetTick>
 800331a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b20      	cmp	r3, #32
 8003326:	f040 8214 	bne.w	8003752 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	2319      	movs	r3, #25
 8003330:	2201      	movs	r2, #1
 8003332:	497b      	ldr	r1, [pc, #492]	@ (8003520 <HAL_I2C_Mem_Read+0x224>)
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 fb7d 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003340:	2302      	movs	r3, #2
 8003342:	e207      	b.n	8003754 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_I2C_Mem_Read+0x56>
 800334e:	2302      	movs	r3, #2
 8003350:	e200      	b.n	8003754 <HAL_I2C_Mem_Read+0x458>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b01      	cmp	r3, #1
 8003366:	d007      	beq.n	8003378 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003386:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2222      	movs	r2, #34	@ 0x22
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2240      	movs	r2, #64	@ 0x40
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80033a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003524 <HAL_I2C_Mem_Read+0x228>)
 80033b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033ba:	88f8      	ldrh	r0, [r7, #6]
 80033bc:	893a      	ldrh	r2, [r7, #8]
 80033be:	8979      	ldrh	r1, [r7, #10]
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	4603      	mov	r3, r0
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 fa4a 	bl	8003864 <I2C_RequestMemoryRead>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e1bc      	b.n	8003754 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d113      	bne.n	800340a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e2:	2300      	movs	r3, #0
 80033e4:	623b      	str	r3, [r7, #32]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	623b      	str	r3, [r7, #32]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	623b      	str	r3, [r7, #32]
 80033f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e190      	b.n	800372c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340e:	2b01      	cmp	r3, #1
 8003410:	d11b      	bne.n	800344a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003420:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	e170      	b.n	800372c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344e:	2b02      	cmp	r3, #2
 8003450:	d11b      	bne.n	800348a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003460:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003470:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	e150      	b.n	800372c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034a0:	e144      	b.n	800372c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	f200 80f1 	bhi.w	800368e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d123      	bne.n	80034fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 fc65 	bl	8003d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e145      	b.n	8003754 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034fa:	e117      	b.n	800372c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003500:	2b02      	cmp	r3, #2
 8003502:	d14e      	bne.n	80035a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350a:	2200      	movs	r2, #0
 800350c:	4906      	ldr	r1, [pc, #24]	@ (8003528 <HAL_I2C_Mem_Read+0x22c>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 fa90 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d008      	beq.n	800352c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e11a      	b.n	8003754 <HAL_I2C_Mem_Read+0x458>
 800351e:	bf00      	nop
 8003520:	00100002 	.word	0x00100002
 8003524:	ffff0000 	.word	0xffff0000
 8003528:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035a0:	e0c4      	b.n	800372c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a8:	2200      	movs	r2, #0
 80035aa:	496c      	ldr	r1, [pc, #432]	@ (800375c <HAL_I2C_Mem_Read+0x460>)
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fa41 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0cb      	b.n	8003754 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003604:	2200      	movs	r2, #0
 8003606:	4955      	ldr	r1, [pc, #340]	@ (800375c <HAL_I2C_Mem_Read+0x460>)
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fa13 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e09d      	b.n	8003754 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003626:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800368c:	e04e      	b.n	800372c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003690:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 fb78 	bl	8003d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e058      	b.n	8003754 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d124      	bne.n	800372c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d107      	bne.n	80036fa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036f8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	f47f aeb6 	bne.w	80034a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	e000      	b.n	8003754 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003752:	2302      	movs	r3, #2
  }
}
 8003754:	4618      	mov	r0, r3
 8003756:	3728      	adds	r7, #40	@ 0x28
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	00010004 	.word	0x00010004

08003760 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	460b      	mov	r3, r1
 800376e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b08      	cmp	r3, #8
 800377a:	d006      	beq.n	800378a <I2C_MasterRequestWrite+0x2a>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d003      	beq.n	800378a <I2C_MasterRequestWrite+0x2a>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003788:	d108      	bne.n	800379c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e00b      	b.n	80037b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a0:	2b12      	cmp	r3, #18
 80037a2:	d107      	bne.n	80037b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f937 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00d      	beq.n	80037e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037da:	d103      	bne.n	80037e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e035      	b.n	8003854 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037f0:	d108      	bne.n	8003804 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037f2:	897b      	ldrh	r3, [r7, #10]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003800:	611a      	str	r2, [r3, #16]
 8003802:	e01b      	b.n	800383c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003804:	897b      	ldrh	r3, [r7, #10]
 8003806:	11db      	asrs	r3, r3, #7
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f003 0306 	and.w	r3, r3, #6
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f063 030f 	orn	r3, r3, #15
 8003814:	b2da      	uxtb	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	490e      	ldr	r1, [pc, #56]	@ (800385c <I2C_MasterRequestWrite+0xfc>)
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f980 	bl	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e010      	b.n	8003854 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003832:	897b      	ldrh	r3, [r7, #10]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4907      	ldr	r1, [pc, #28]	@ (8003860 <I2C_MasterRequestWrite+0x100>)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f970 	bl	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	00010008 	.word	0x00010008
 8003860:	00010002 	.word	0x00010002

08003864 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	461a      	mov	r2, r3
 8003872:	4603      	mov	r3, r0
 8003874:	817b      	strh	r3, [r7, #10]
 8003876:	460b      	mov	r3, r1
 8003878:	813b      	strh	r3, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800388c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800389c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f8c2 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c4:	d103      	bne.n	80038ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e0aa      	b.n	8003a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038d2:	897b      	ldrh	r3, [r7, #10]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	4952      	ldr	r1, [pc, #328]	@ (8003a30 <I2C_RequestMemoryRead+0x1cc>)
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f91d 	bl	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e097      	b.n	8003a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800390e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003910:	6a39      	ldr	r1, [r7, #32]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f9a8 	bl	8003c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	2b04      	cmp	r3, #4
 8003924:	d107      	bne.n	8003936 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003934:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e076      	b.n	8003a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003940:	893b      	ldrh	r3, [r7, #8]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	611a      	str	r2, [r3, #16]
 800394a:	e021      	b.n	8003990 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800394c:	893b      	ldrh	r3, [r7, #8]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	b29b      	uxth	r3, r3
 8003952:	b2da      	uxtb	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395c:	6a39      	ldr	r1, [r7, #32]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f982 	bl	8003c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	2b04      	cmp	r3, #4
 8003970:	d107      	bne.n	8003982 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003980:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e050      	b.n	8003a28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003986:	893b      	ldrh	r3, [r7, #8]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003992:	6a39      	ldr	r1, [r7, #32]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f967 	bl	8003c68 <I2C_WaitOnTXEFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d107      	bne.n	80039b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e035      	b.n	8003a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f82b 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00d      	beq.n	8003a00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039f2:	d103      	bne.n	80039fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e013      	b.n	8003a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a00:	897b      	ldrh	r3, [r7, #10]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	6a3a      	ldr	r2, [r7, #32]
 8003a14:	4906      	ldr	r1, [pc, #24]	@ (8003a30 <I2C_RequestMemoryRead+0x1cc>)
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f886 	bl	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	00010002 	.word	0x00010002

08003a34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a44:	e048      	b.n	8003ad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d044      	beq.n	8003ad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4e:	f7fe fef3 	bl	8002838 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d302      	bcc.n	8003a64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d139      	bne.n	8003ad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	0c1b      	lsrs	r3, r3, #16
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d10d      	bne.n	8003a8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	43da      	mvns	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	e00c      	b.n	8003aa4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	43da      	mvns	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4013      	ands	r3, r2
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d116      	bne.n	8003ad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	f043 0220 	orr.w	r2, r3, #32
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e023      	b.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	0c1b      	lsrs	r3, r3, #16
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d10d      	bne.n	8003afe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4013      	ands	r3, r2
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	e00c      	b.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	43da      	mvns	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d093      	beq.n	8003a46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b36:	e071      	b.n	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b46:	d123      	bne.n	8003b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	f043 0204 	orr.w	r2, r3, #4
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e067      	b.n	8003c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d041      	beq.n	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b98:	f7fe fe4e 	bl	8002838 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d302      	bcc.n	8003bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d136      	bne.n	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	0c1b      	lsrs	r3, r3, #16
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d10c      	bne.n	8003bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bf14      	ite	ne
 8003bca:	2301      	movne	r3, #1
 8003bcc:	2300      	moveq	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	e00b      	b.n	8003bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	43da      	mvns	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d016      	beq.n	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e021      	b.n	8003c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	0c1b      	lsrs	r3, r3, #16
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d10c      	bne.n	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf14      	ite	ne
 8003c38:	2301      	movne	r3, #1
 8003c3a:	2300      	moveq	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	e00b      	b.n	8003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	43da      	mvns	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bf14      	ite	ne
 8003c52:	2301      	movne	r3, #1
 8003c54:	2300      	moveq	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f47f af6d 	bne.w	8003b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c74:	e034      	b.n	8003ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f8e3 	bl	8003e42 <I2C_IsAcknowledgeFailed>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e034      	b.n	8003cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8c:	d028      	beq.n	8003ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8e:	f7fe fdd3 	bl	8002838 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d302      	bcc.n	8003ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d11d      	bne.n	8003ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cae:	2b80      	cmp	r3, #128	@ 0x80
 8003cb0:	d016      	beq.n	8003ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e007      	b.n	8003cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cea:	2b80      	cmp	r3, #128	@ 0x80
 8003cec:	d1c3      	bne.n	8003c76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d04:	e034      	b.n	8003d70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f89b 	bl	8003e42 <I2C_IsAcknowledgeFailed>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e034      	b.n	8003d80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d028      	beq.n	8003d70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fe fd8b 	bl	8002838 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d11d      	bne.n	8003d70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d016      	beq.n	8003d70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	f043 0220 	orr.w	r2, r3, #32
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e007      	b.n	8003d80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d1c3      	bne.n	8003d06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d94:	e049      	b.n	8003e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d119      	bne.n	8003dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0210 	mvn.w	r2, #16
 8003dac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e030      	b.n	8003e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd8:	f7fe fd2e 	bl	8002838 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d302      	bcc.n	8003dee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d11d      	bne.n	8003e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df8:	2b40      	cmp	r3, #64	@ 0x40
 8003dfa:	d016      	beq.n	8003e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	f043 0220 	orr.w	r2, r3, #32
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e007      	b.n	8003e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e34:	2b40      	cmp	r3, #64	@ 0x40
 8003e36:	d1ae      	bne.n	8003d96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e58:	d11b      	bne.n	8003e92 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e62:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	f043 0204 	orr.w	r2, r3, #4
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	4b20      	ldr	r3, [pc, #128]	@ (8003f30 <HAL_PWREx_EnableOverDrive+0x90>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f30 <HAL_PWREx_EnableOverDrive+0x90>)
 8003eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eba:	4b1d      	ldr	r3, [pc, #116]	@ (8003f30 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f34 <HAL_PWREx_EnableOverDrive+0x94>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ecc:	f7fe fcb4 	bl	8002838 <HAL_GetTick>
 8003ed0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ed2:	e009      	b.n	8003ee8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ed4:	f7fe fcb0 	bl	8002838 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ee2:	d901      	bls.n	8003ee8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e01f      	b.n	8003f28 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ee8:	4b13      	ldr	r3, [pc, #76]	@ (8003f38 <HAL_PWREx_EnableOverDrive+0x98>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef4:	d1ee      	bne.n	8003ed4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ef6:	4b11      	ldr	r3, [pc, #68]	@ (8003f3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003efc:	f7fe fc9c 	bl	8002838 <HAL_GetTick>
 8003f00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f02:	e009      	b.n	8003f18 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f04:	f7fe fc98 	bl	8002838 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f12:	d901      	bls.n	8003f18 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e007      	b.n	8003f28 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f18:	4b07      	ldr	r3, [pc, #28]	@ (8003f38 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f24:	d1ee      	bne.n	8003f04 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40023800 	.word	0x40023800
 8003f34:	420e0040 	.word	0x420e0040
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	420e0044 	.word	0x420e0044

08003f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0cc      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f54:	4b68      	ldr	r3, [pc, #416]	@ (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d90c      	bls.n	8003f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b65      	ldr	r3, [pc, #404]	@ (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6a:	4b63      	ldr	r3, [pc, #396]	@ (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0b8      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d020      	beq.n	8003fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f94:	4b59      	ldr	r3, [pc, #356]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4a58      	ldr	r2, [pc, #352]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fac:	4b53      	ldr	r3, [pc, #332]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4a52      	ldr	r2, [pc, #328]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb8:	4b50      	ldr	r3, [pc, #320]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	494d      	ldr	r1, [pc, #308]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d044      	beq.n	8004060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d107      	bne.n	8003fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fde:	4b47      	ldr	r3, [pc, #284]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d119      	bne.n	800401e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e07f      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e06f      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400e:	4b3b      	ldr	r3, [pc, #236]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e067      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800401e:	4b37      	ldr	r3, [pc, #220]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4934      	ldr	r1, [pc, #208]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004030:	f7fe fc02 	bl	8002838 <HAL_GetTick>
 8004034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004036:	e00a      	b.n	800404e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004038:	f7fe fbfe 	bl	8002838 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e04f      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	4b2b      	ldr	r3, [pc, #172]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 020c 	and.w	r2, r3, #12
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	429a      	cmp	r2, r3
 800405e:	d1eb      	bne.n	8004038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004060:	4b25      	ldr	r3, [pc, #148]	@ (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d20c      	bcs.n	8004088 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b22      	ldr	r3, [pc, #136]	@ (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	4b20      	ldr	r3, [pc, #128]	@ (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e032      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004094:	4b19      	ldr	r3, [pc, #100]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4916      	ldr	r1, [pc, #88]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040b2:	4b12      	ldr	r3, [pc, #72]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	490e      	ldr	r1, [pc, #56]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040c6:	f000 f855 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 80040ca:	4602      	mov	r2, r0
 80040cc:	4b0b      	ldr	r3, [pc, #44]	@ (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	490a      	ldr	r1, [pc, #40]	@ (8004100 <HAL_RCC_ClockConfig+0x1c0>)
 80040d8:	5ccb      	ldrb	r3, [r1, r3]
 80040da:	fa22 f303 	lsr.w	r3, r2, r3
 80040de:	4a09      	ldr	r2, [pc, #36]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040e2:	4b09      	ldr	r3, [pc, #36]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe fb62 	bl	80027b0 <HAL_InitTick>

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40023c00 	.word	0x40023c00
 80040fc:	40023800 	.word	0x40023800
 8004100:	08008d0c 	.word	0x08008d0c
 8004104:	20000010 	.word	0x20000010
 8004108:	20000014 	.word	0x20000014

0800410c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004110:	4b03      	ldr	r3, [pc, #12]	@ (8004120 <HAL_RCC_GetHCLKFreq+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000010 	.word	0x20000010

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004128:	f7ff fff0 	bl	800410c <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0a9b      	lsrs	r3, r3, #10
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4903      	ldr	r1, [pc, #12]	@ (8004148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	08008d1c 	.word	0x08008d1c

0800414c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004150:	f7ff ffdc 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b05      	ldr	r3, [pc, #20]	@ (800416c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0b5b      	lsrs	r3, r3, #13
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4903      	ldr	r1, [pc, #12]	@ (8004170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40023800 	.word	0x40023800
 8004170:	08008d1c 	.word	0x08008d1c

08004174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004178:	b0ae      	sub	sp, #184	@ 0xb8
 800417a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800419a:	4bcb      	ldr	r3, [pc, #812]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
 80041a2:	2b0c      	cmp	r3, #12
 80041a4:	f200 8206 	bhi.w	80045b4 <HAL_RCC_GetSysClockFreq+0x440>
 80041a8:	a201      	add	r2, pc, #4	@ (adr r2, 80041b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041e5 	.word	0x080041e5
 80041b4:	080045b5 	.word	0x080045b5
 80041b8:	080045b5 	.word	0x080045b5
 80041bc:	080045b5 	.word	0x080045b5
 80041c0:	080041ed 	.word	0x080041ed
 80041c4:	080045b5 	.word	0x080045b5
 80041c8:	080045b5 	.word	0x080045b5
 80041cc:	080045b5 	.word	0x080045b5
 80041d0:	080041f5 	.word	0x080041f5
 80041d4:	080045b5 	.word	0x080045b5
 80041d8:	080045b5 	.word	0x080045b5
 80041dc:	080045b5 	.word	0x080045b5
 80041e0:	080043e5 	.word	0x080043e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e4:	4bb9      	ldr	r3, [pc, #740]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x358>)
 80041e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041ea:	e1e7      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ec:	4bb8      	ldr	r3, [pc, #736]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80041ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041f2:	e1e3      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f4:	4bb4      	ldr	r3, [pc, #720]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004200:	4bb1      	ldr	r3, [pc, #708]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d071      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420c:	4bae      	ldr	r3, [pc, #696]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	099b      	lsrs	r3, r3, #6
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004218:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800421c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004224:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004228:	2300      	movs	r3, #0
 800422a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800422e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004232:	4622      	mov	r2, r4
 8004234:	462b      	mov	r3, r5
 8004236:	f04f 0000 	mov.w	r0, #0
 800423a:	f04f 0100 	mov.w	r1, #0
 800423e:	0159      	lsls	r1, r3, #5
 8004240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004244:	0150      	lsls	r0, r2, #5
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4621      	mov	r1, r4
 800424c:	1a51      	subs	r1, r2, r1
 800424e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004250:	4629      	mov	r1, r5
 8004252:	eb63 0301 	sbc.w	r3, r3, r1
 8004256:	647b      	str	r3, [r7, #68]	@ 0x44
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004264:	4649      	mov	r1, r9
 8004266:	018b      	lsls	r3, r1, #6
 8004268:	4641      	mov	r1, r8
 800426a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800426e:	4641      	mov	r1, r8
 8004270:	018a      	lsls	r2, r1, #6
 8004272:	4641      	mov	r1, r8
 8004274:	1a51      	subs	r1, r2, r1
 8004276:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004278:	4649      	mov	r1, r9
 800427a:	eb63 0301 	sbc.w	r3, r3, r1
 800427e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800428c:	4649      	mov	r1, r9
 800428e:	00cb      	lsls	r3, r1, #3
 8004290:	4641      	mov	r1, r8
 8004292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004296:	4641      	mov	r1, r8
 8004298:	00ca      	lsls	r2, r1, #3
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	4622      	mov	r2, r4
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042a6:	462b      	mov	r3, r5
 80042a8:	460a      	mov	r2, r1
 80042aa:	eb42 0303 	adc.w	r3, r2, r3
 80042ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80042bc:	4629      	mov	r1, r5
 80042be:	024b      	lsls	r3, r1, #9
 80042c0:	4621      	mov	r1, r4
 80042c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042c6:	4621      	mov	r1, r4
 80042c8:	024a      	lsls	r2, r1, #9
 80042ca:	4610      	mov	r0, r2
 80042cc:	4619      	mov	r1, r3
 80042ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80042e0:	f7fc fc82 	bl	8000be8 <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4613      	mov	r3, r2
 80042ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042ee:	e067      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f0:	4b75      	ldr	r3, [pc, #468]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	099b      	lsrs	r3, r3, #6
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004300:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004308:	67bb      	str	r3, [r7, #120]	@ 0x78
 800430a:	2300      	movs	r3, #0
 800430c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800430e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004312:	4622      	mov	r2, r4
 8004314:	462b      	mov	r3, r5
 8004316:	f04f 0000 	mov.w	r0, #0
 800431a:	f04f 0100 	mov.w	r1, #0
 800431e:	0159      	lsls	r1, r3, #5
 8004320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004324:	0150      	lsls	r0, r2, #5
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4621      	mov	r1, r4
 800432c:	1a51      	subs	r1, r2, r1
 800432e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004330:	4629      	mov	r1, r5
 8004332:	eb63 0301 	sbc.w	r3, r3, r1
 8004336:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004344:	4649      	mov	r1, r9
 8004346:	018b      	lsls	r3, r1, #6
 8004348:	4641      	mov	r1, r8
 800434a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800434e:	4641      	mov	r1, r8
 8004350:	018a      	lsls	r2, r1, #6
 8004352:	4641      	mov	r1, r8
 8004354:	ebb2 0a01 	subs.w	sl, r2, r1
 8004358:	4649      	mov	r1, r9
 800435a:	eb63 0b01 	sbc.w	fp, r3, r1
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800436a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800436e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004372:	4692      	mov	sl, r2
 8004374:	469b      	mov	fp, r3
 8004376:	4623      	mov	r3, r4
 8004378:	eb1a 0303 	adds.w	r3, sl, r3
 800437c:	623b      	str	r3, [r7, #32]
 800437e:	462b      	mov	r3, r5
 8004380:	eb4b 0303 	adc.w	r3, fp, r3
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004392:	4629      	mov	r1, r5
 8004394:	028b      	lsls	r3, r1, #10
 8004396:	4621      	mov	r1, r4
 8004398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800439c:	4621      	mov	r1, r4
 800439e:	028a      	lsls	r2, r1, #10
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043a8:	2200      	movs	r2, #0
 80043aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80043ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80043ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80043b2:	f7fc fc19 	bl	8000be8 <__aeabi_uldivmod>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4613      	mov	r3, r2
 80043bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043c0:	4b41      	ldr	r3, [pc, #260]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	0c1b      	lsrs	r3, r3, #16
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	3301      	adds	r3, #1
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80043d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80043e2:	e0eb      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043e4:	4b38      	ldr	r3, [pc, #224]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043f0:	4b35      	ldr	r3, [pc, #212]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d06b      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fc:	4b32      	ldr	r3, [pc, #200]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	099b      	lsrs	r3, r3, #6
 8004402:	2200      	movs	r2, #0
 8004404:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004406:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004408:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800440a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004410:	2300      	movs	r3, #0
 8004412:	667b      	str	r3, [r7, #100]	@ 0x64
 8004414:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004418:	4622      	mov	r2, r4
 800441a:	462b      	mov	r3, r5
 800441c:	f04f 0000 	mov.w	r0, #0
 8004420:	f04f 0100 	mov.w	r1, #0
 8004424:	0159      	lsls	r1, r3, #5
 8004426:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800442a:	0150      	lsls	r0, r2, #5
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4621      	mov	r1, r4
 8004432:	1a51      	subs	r1, r2, r1
 8004434:	61b9      	str	r1, [r7, #24]
 8004436:	4629      	mov	r1, r5
 8004438:	eb63 0301 	sbc.w	r3, r3, r1
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800444a:	4659      	mov	r1, fp
 800444c:	018b      	lsls	r3, r1, #6
 800444e:	4651      	mov	r1, sl
 8004450:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004454:	4651      	mov	r1, sl
 8004456:	018a      	lsls	r2, r1, #6
 8004458:	4651      	mov	r1, sl
 800445a:	ebb2 0801 	subs.w	r8, r2, r1
 800445e:	4659      	mov	r1, fp
 8004460:	eb63 0901 	sbc.w	r9, r3, r1
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004470:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004474:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004478:	4690      	mov	r8, r2
 800447a:	4699      	mov	r9, r3
 800447c:	4623      	mov	r3, r4
 800447e:	eb18 0303 	adds.w	r3, r8, r3
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	462b      	mov	r3, r5
 8004486:	eb49 0303 	adc.w	r3, r9, r3
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004498:	4629      	mov	r1, r5
 800449a:	024b      	lsls	r3, r1, #9
 800449c:	4621      	mov	r1, r4
 800449e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044a2:	4621      	mov	r1, r4
 80044a4:	024a      	lsls	r2, r1, #9
 80044a6:	4610      	mov	r0, r2
 80044a8:	4619      	mov	r1, r3
 80044aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044ae:	2200      	movs	r2, #0
 80044b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80044b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044b8:	f7fc fb96 	bl	8000be8 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4613      	mov	r3, r2
 80044c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044c6:	e065      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x420>
 80044c8:	40023800 	.word	0x40023800
 80044cc:	00f42400 	.word	0x00f42400
 80044d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d4:	4b3d      	ldr	r3, [pc, #244]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x458>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	099b      	lsrs	r3, r3, #6
 80044da:	2200      	movs	r2, #0
 80044dc:	4618      	mov	r0, r3
 80044de:	4611      	mov	r1, r2
 80044e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80044e6:	2300      	movs	r3, #0
 80044e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80044ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80044ee:	4642      	mov	r2, r8
 80044f0:	464b      	mov	r3, r9
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f04f 0100 	mov.w	r1, #0
 80044fa:	0159      	lsls	r1, r3, #5
 80044fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004500:	0150      	lsls	r0, r2, #5
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4641      	mov	r1, r8
 8004508:	1a51      	subs	r1, r2, r1
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	4649      	mov	r1, r9
 800450e:	eb63 0301 	sbc.w	r3, r3, r1
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004520:	4659      	mov	r1, fp
 8004522:	018b      	lsls	r3, r1, #6
 8004524:	4651      	mov	r1, sl
 8004526:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800452a:	4651      	mov	r1, sl
 800452c:	018a      	lsls	r2, r1, #6
 800452e:	4651      	mov	r1, sl
 8004530:	1a54      	subs	r4, r2, r1
 8004532:	4659      	mov	r1, fp
 8004534:	eb63 0501 	sbc.w	r5, r3, r1
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	00eb      	lsls	r3, r5, #3
 8004542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004546:	00e2      	lsls	r2, r4, #3
 8004548:	4614      	mov	r4, r2
 800454a:	461d      	mov	r5, r3
 800454c:	4643      	mov	r3, r8
 800454e:	18e3      	adds	r3, r4, r3
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	464b      	mov	r3, r9
 8004554:	eb45 0303 	adc.w	r3, r5, r3
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004566:	4629      	mov	r1, r5
 8004568:	028b      	lsls	r3, r1, #10
 800456a:	4621      	mov	r1, r4
 800456c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004570:	4621      	mov	r1, r4
 8004572:	028a      	lsls	r2, r1, #10
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800457c:	2200      	movs	r2, #0
 800457e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004580:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004582:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004586:	f7fc fb2f 	bl	8000be8 <__aeabi_uldivmod>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4613      	mov	r3, r2
 8004590:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004594:	4b0d      	ldr	r3, [pc, #52]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x458>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	0f1b      	lsrs	r3, r3, #28
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80045a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80045aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80045b2:	e003      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b4:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80045b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80045ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	37b8      	adds	r7, #184	@ 0xb8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800
 80045d0:	00f42400 	.word	0x00f42400

080045d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e28d      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8083 	beq.w	80046fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045f4:	4b94      	ldr	r3, [pc, #592]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d019      	beq.n	8004634 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004600:	4b91      	ldr	r3, [pc, #580]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 030c 	and.w	r3, r3, #12
        || \
 8004608:	2b08      	cmp	r3, #8
 800460a:	d106      	bne.n	800461a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800460c:	4b8e      	ldr	r3, [pc, #568]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004614:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004618:	d00c      	beq.n	8004634 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461a:	4b8b      	ldr	r3, [pc, #556]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004622:	2b0c      	cmp	r3, #12
 8004624:	d112      	bne.n	800464c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004626:	4b88      	ldr	r3, [pc, #544]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800462e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004632:	d10b      	bne.n	800464c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004634:	4b84      	ldr	r3, [pc, #528]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05b      	beq.n	80046f8 <HAL_RCC_OscConfig+0x124>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d157      	bne.n	80046f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e25a      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004654:	d106      	bne.n	8004664 <HAL_RCC_OscConfig+0x90>
 8004656:	4b7c      	ldr	r3, [pc, #496]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a7b      	ldr	r2, [pc, #492]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e01d      	b.n	80046a0 <HAL_RCC_OscConfig+0xcc>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0xb4>
 800466e:	4b76      	ldr	r3, [pc, #472]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a75      	ldr	r2, [pc, #468]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b73      	ldr	r3, [pc, #460]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a72      	ldr	r2, [pc, #456]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e00b      	b.n	80046a0 <HAL_RCC_OscConfig+0xcc>
 8004688:	4b6f      	ldr	r3, [pc, #444]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a6e      	ldr	r2, [pc, #440]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800468e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b6c      	ldr	r3, [pc, #432]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a6b      	ldr	r2, [pc, #428]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800469a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800469e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d013      	beq.n	80046d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fe f8c6 	bl	8002838 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fe f8c2 	bl	8002838 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	@ 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e21f      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	4b61      	ldr	r3, [pc, #388]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0xdc>
 80046ce:	e014      	b.n	80046fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fe f8b2 	bl	8002838 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d8:	f7fe f8ae 	bl	8002838 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	@ 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e20b      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ea:	4b57      	ldr	r3, [pc, #348]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x104>
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d06f      	beq.n	80047e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004706:	4b50      	ldr	r3, [pc, #320]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b00      	cmp	r3, #0
 8004710:	d017      	beq.n	8004742 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004712:	4b4d      	ldr	r3, [pc, #308]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
        || \
 800471a:	2b08      	cmp	r3, #8
 800471c:	d105      	bne.n	800472a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800471e:	4b4a      	ldr	r3, [pc, #296]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00b      	beq.n	8004742 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800472a:	4b47      	ldr	r3, [pc, #284]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004732:	2b0c      	cmp	r3, #12
 8004734:	d11c      	bne.n	8004770 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004736:	4b44      	ldr	r3, [pc, #272]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d116      	bne.n	8004770 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004742:	4b41      	ldr	r3, [pc, #260]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_RCC_OscConfig+0x186>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d001      	beq.n	800475a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e1d3      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475a:	4b3b      	ldr	r3, [pc, #236]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4937      	ldr	r1, [pc, #220]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800476a:	4313      	orrs	r3, r2
 800476c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476e:	e03a      	b.n	80047e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d020      	beq.n	80047ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004778:	4b34      	ldr	r3, [pc, #208]	@ (800484c <HAL_RCC_OscConfig+0x278>)
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477e:	f7fe f85b 	bl	8002838 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004786:	f7fe f857 	bl	8002838 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e1b4      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004798:	4b2b      	ldr	r3, [pc, #172]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a4:	4b28      	ldr	r3, [pc, #160]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4925      	ldr	r1, [pc, #148]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	600b      	str	r3, [r1, #0]
 80047b8:	e015      	b.n	80047e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ba:	4b24      	ldr	r3, [pc, #144]	@ (800484c <HAL_RCC_OscConfig+0x278>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fe f83a 	bl	8002838 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c8:	f7fe f836 	bl	8002838 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e193      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047da:	4b1b      	ldr	r3, [pc, #108]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d036      	beq.n	8004860 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d016      	beq.n	8004828 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047fa:	4b15      	ldr	r3, [pc, #84]	@ (8004850 <HAL_RCC_OscConfig+0x27c>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fe f81a 	bl	8002838 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004808:	f7fe f816 	bl	8002838 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e173      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481a:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800481c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x234>
 8004826:	e01b      	b.n	8004860 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004828:	4b09      	ldr	r3, [pc, #36]	@ (8004850 <HAL_RCC_OscConfig+0x27c>)
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482e:	f7fe f803 	bl	8002838 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004834:	e00e      	b.n	8004854 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004836:	f7fd ffff 	bl	8002838 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d907      	bls.n	8004854 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e15c      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
 8004848:	40023800 	.word	0x40023800
 800484c:	42470000 	.word	0x42470000
 8004850:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004854:	4b8a      	ldr	r3, [pc, #552]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1ea      	bne.n	8004836 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 8097 	beq.w	800499c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800486e:	2300      	movs	r3, #0
 8004870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004872:	4b83      	ldr	r3, [pc, #524]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10f      	bne.n	800489e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	4b7f      	ldr	r3, [pc, #508]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	4a7e      	ldr	r2, [pc, #504]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800488c:	6413      	str	r3, [r2, #64]	@ 0x40
 800488e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800489a:	2301      	movs	r3, #1
 800489c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489e:	4b79      	ldr	r3, [pc, #484]	@ (8004a84 <HAL_RCC_OscConfig+0x4b0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d118      	bne.n	80048dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048aa:	4b76      	ldr	r3, [pc, #472]	@ (8004a84 <HAL_RCC_OscConfig+0x4b0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a75      	ldr	r2, [pc, #468]	@ (8004a84 <HAL_RCC_OscConfig+0x4b0>)
 80048b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048b6:	f7fd ffbf 	bl	8002838 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048be:	f7fd ffbb 	bl	8002838 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e118      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004a84 <HAL_RCC_OscConfig+0x4b0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d106      	bne.n	80048f2 <HAL_RCC_OscConfig+0x31e>
 80048e4:	4b66      	ldr	r3, [pc, #408]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 80048e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e8:	4a65      	ldr	r2, [pc, #404]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f0:	e01c      	b.n	800492c <HAL_RCC_OscConfig+0x358>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0x340>
 80048fa:	4b61      	ldr	r3, [pc, #388]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fe:	4a60      	ldr	r2, [pc, #384]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004900:	f043 0304 	orr.w	r3, r3, #4
 8004904:	6713      	str	r3, [r2, #112]	@ 0x70
 8004906:	4b5e      	ldr	r3, [pc, #376]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490a:	4a5d      	ldr	r2, [pc, #372]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	6713      	str	r3, [r2, #112]	@ 0x70
 8004912:	e00b      	b.n	800492c <HAL_RCC_OscConfig+0x358>
 8004914:	4b5a      	ldr	r3, [pc, #360]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004918:	4a59      	ldr	r2, [pc, #356]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004920:	4b57      	ldr	r3, [pc, #348]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004924:	4a56      	ldr	r2, [pc, #344]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004926:	f023 0304 	bic.w	r3, r3, #4
 800492a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d015      	beq.n	8004960 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004934:	f7fd ff80 	bl	8002838 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493a:	e00a      	b.n	8004952 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800493c:	f7fd ff7c 	bl	8002838 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800494a:	4293      	cmp	r3, r2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e0d7      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004952:	4b4b      	ldr	r3, [pc, #300]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0ee      	beq.n	800493c <HAL_RCC_OscConfig+0x368>
 800495e:	e014      	b.n	800498a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7fd ff6a 	bl	8002838 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004966:	e00a      	b.n	800497e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004968:	f7fd ff66 	bl	8002838 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e0c1      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800497e:	4b40      	ldr	r3, [pc, #256]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1ee      	bne.n	8004968 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d105      	bne.n	800499c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004990:	4b3b      	ldr	r3, [pc, #236]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	4a3a      	ldr	r2, [pc, #232]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800499a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80ad 	beq.w	8004b00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049a6:	4b36      	ldr	r3, [pc, #216]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d060      	beq.n	8004a74 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d145      	bne.n	8004a46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ba:	4b33      	ldr	r3, [pc, #204]	@ (8004a88 <HAL_RCC_OscConfig+0x4b4>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fd ff3a 	bl	8002838 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fd ff36 	bl	8002838 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e093      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	4b29      	ldr	r3, [pc, #164]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69da      	ldr	r2, [r3, #28]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f4:	019b      	lsls	r3, r3, #6
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	3b01      	subs	r3, #1
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	061b      	lsls	r3, r3, #24
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a10:	071b      	lsls	r3, r3, #28
 8004a12:	491b      	ldr	r1, [pc, #108]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a18:	4b1b      	ldr	r3, [pc, #108]	@ (8004a88 <HAL_RCC_OscConfig+0x4b4>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7fd ff0b 	bl	8002838 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a26:	f7fd ff07 	bl	8002838 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e064      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a38:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x452>
 8004a44:	e05c      	b.n	8004b00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a46:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <HAL_RCC_OscConfig+0x4b4>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fd fef4 	bl	8002838 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fd fef0 	bl	8002838 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e04d      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x480>
 8004a72:	e045      	b.n	8004b00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e040      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40007000 	.word	0x40007000
 8004a88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8004b0c <HAL_RCC_OscConfig+0x538>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d030      	beq.n	8004afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d129      	bne.n	8004afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d122      	bne.n	8004afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004abc:	4013      	ands	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ac2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d119      	bne.n	8004afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d10f      	bne.n	8004afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d107      	bne.n	8004afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800

08004b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e041      	b.n	8004ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fd fa0e 	bl	8001f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f000 fa7e 	bl	8005050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d001      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e04e      	b.n	8004c66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a23      	ldr	r2, [pc, #140]	@ (8004c74 <HAL_TIM_Base_Start_IT+0xc4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d022      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf2:	d01d      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c78 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d018      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1e      	ldr	r2, [pc, #120]	@ (8004c7c <HAL_TIM_Base_Start_IT+0xcc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d013      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004c80 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00e      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1b      	ldr	r2, [pc, #108]	@ (8004c84 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d009      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a19      	ldr	r2, [pc, #100]	@ (8004c88 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d004      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a18      	ldr	r2, [pc, #96]	@ (8004c8c <HAL_TIM_Base_Start_IT+0xdc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d111      	bne.n	8004c54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b06      	cmp	r3, #6
 8004c40:	d010      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0201 	orr.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c52:	e007      	b.n	8004c64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40010400 	.word	0x40010400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40001800 	.word	0x40001800

08004c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01b      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0202 	mvn.w	r2, #2
 8004cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f999 	bl	8005012 <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f98b 	bl	8004ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f99c 	bl	8005026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d020      	beq.n	8004d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01b      	beq.n	8004d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0204 	mvn.w	r2, #4
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f973 	bl	8005012 <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f965 	bl	8004ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f976 	bl	8005026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d020      	beq.n	8004d8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01b      	beq.n	8004d8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0208 	mvn.w	r2, #8
 8004d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2204      	movs	r2, #4
 8004d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f94d 	bl	8005012 <HAL_TIM_IC_CaptureCallback>
 8004d78:	e005      	b.n	8004d86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f93f 	bl	8004ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f950 	bl	8005026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d020      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01b      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0210 	mvn.w	r2, #16
 8004da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2208      	movs	r2, #8
 8004dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f927 	bl	8005012 <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f919 	bl	8004ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f92a 	bl	8005026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00c      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d007      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0201 	mvn.w	r2, #1
 8004df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fd f82e 	bl	8001e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00c      	beq.n	8004e20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fae4 	bl	80053e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00c      	beq.n	8004e44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f8fb 	bl	800503a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00c      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d007      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0220 	mvn.w	r2, #32
 8004e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fab6 	bl	80053d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_TIM_ConfigClockSource+0x1c>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e0b4      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x186>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec4:	d03e      	beq.n	8004f44 <HAL_TIM_ConfigClockSource+0xd4>
 8004ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eca:	f200 8087 	bhi.w	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed2:	f000 8086 	beq.w	8004fe2 <HAL_TIM_ConfigClockSource+0x172>
 8004ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eda:	d87f      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004edc:	2b70      	cmp	r3, #112	@ 0x70
 8004ede:	d01a      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0xa6>
 8004ee0:	2b70      	cmp	r3, #112	@ 0x70
 8004ee2:	d87b      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004ee4:	2b60      	cmp	r3, #96	@ 0x60
 8004ee6:	d050      	beq.n	8004f8a <HAL_TIM_ConfigClockSource+0x11a>
 8004ee8:	2b60      	cmp	r3, #96	@ 0x60
 8004eea:	d877      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004eec:	2b50      	cmp	r3, #80	@ 0x50
 8004eee:	d03c      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0xfa>
 8004ef0:	2b50      	cmp	r3, #80	@ 0x50
 8004ef2:	d873      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004ef4:	2b40      	cmp	r3, #64	@ 0x40
 8004ef6:	d058      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x13a>
 8004ef8:	2b40      	cmp	r3, #64	@ 0x40
 8004efa:	d86f      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004efc:	2b30      	cmp	r3, #48	@ 0x30
 8004efe:	d064      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0x15a>
 8004f00:	2b30      	cmp	r3, #48	@ 0x30
 8004f02:	d86b      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d060      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0x15a>
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d867      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d05c      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0x15a>
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d05a      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0x15a>
 8004f14:	e062      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f26:	f000 f9b9 	bl	800529c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	609a      	str	r2, [r3, #8]
      break;
 8004f42:	e04f      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f54:	f000 f9a2 	bl	800529c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f66:	609a      	str	r2, [r3, #8]
      break;
 8004f68:	e03c      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f76:	461a      	mov	r2, r3
 8004f78:	f000 f916 	bl	80051a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2150      	movs	r1, #80	@ 0x50
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f96f 	bl	8005266 <TIM_ITRx_SetConfig>
      break;
 8004f88:	e02c      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f96:	461a      	mov	r2, r3
 8004f98:	f000 f935 	bl	8005206 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2160      	movs	r1, #96	@ 0x60
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 f95f 	bl	8005266 <TIM_ITRx_SetConfig>
      break;
 8004fa8:	e01c      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f000 f8f6 	bl	80051a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2140      	movs	r1, #64	@ 0x40
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 f94f 	bl	8005266 <TIM_ITRx_SetConfig>
      break;
 8004fc8:	e00c      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f000 f946 	bl	8005266 <TIM_ITRx_SetConfig>
      break;
 8004fda:	e003      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe0:	e000      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a46      	ldr	r2, [pc, #280]	@ (800517c <TIM_Base_SetConfig+0x12c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d013      	beq.n	8005090 <TIM_Base_SetConfig+0x40>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800506e:	d00f      	beq.n	8005090 <TIM_Base_SetConfig+0x40>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a43      	ldr	r2, [pc, #268]	@ (8005180 <TIM_Base_SetConfig+0x130>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00b      	beq.n	8005090 <TIM_Base_SetConfig+0x40>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a42      	ldr	r2, [pc, #264]	@ (8005184 <TIM_Base_SetConfig+0x134>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d007      	beq.n	8005090 <TIM_Base_SetConfig+0x40>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a41      	ldr	r2, [pc, #260]	@ (8005188 <TIM_Base_SetConfig+0x138>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d003      	beq.n	8005090 <TIM_Base_SetConfig+0x40>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a40      	ldr	r2, [pc, #256]	@ (800518c <TIM_Base_SetConfig+0x13c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d108      	bne.n	80050a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a35      	ldr	r2, [pc, #212]	@ (800517c <TIM_Base_SetConfig+0x12c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d02b      	beq.n	8005102 <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b0:	d027      	beq.n	8005102 <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a32      	ldr	r2, [pc, #200]	@ (8005180 <TIM_Base_SetConfig+0x130>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d023      	beq.n	8005102 <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a31      	ldr	r2, [pc, #196]	@ (8005184 <TIM_Base_SetConfig+0x134>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01f      	beq.n	8005102 <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a30      	ldr	r2, [pc, #192]	@ (8005188 <TIM_Base_SetConfig+0x138>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01b      	beq.n	8005102 <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a2f      	ldr	r2, [pc, #188]	@ (800518c <TIM_Base_SetConfig+0x13c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d017      	beq.n	8005102 <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005190 <TIM_Base_SetConfig+0x140>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005194 <TIM_Base_SetConfig+0x144>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00f      	beq.n	8005102 <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005198 <TIM_Base_SetConfig+0x148>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00b      	beq.n	8005102 <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2b      	ldr	r2, [pc, #172]	@ (800519c <TIM_Base_SetConfig+0x14c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d007      	beq.n	8005102 <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2a      	ldr	r2, [pc, #168]	@ (80051a0 <TIM_Base_SetConfig+0x150>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d003      	beq.n	8005102 <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a29      	ldr	r2, [pc, #164]	@ (80051a4 <TIM_Base_SetConfig+0x154>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d108      	bne.n	8005114 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a10      	ldr	r2, [pc, #64]	@ (800517c <TIM_Base_SetConfig+0x12c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_Base_SetConfig+0xf8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a12      	ldr	r2, [pc, #72]	@ (800518c <TIM_Base_SetConfig+0x13c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d103      	bne.n	8005150 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b01      	cmp	r3, #1
 8005160:	d105      	bne.n	800516e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f023 0201 	bic.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	611a      	str	r2, [r3, #16]
  }
}
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40010000 	.word	0x40010000
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800
 8005188:	40000c00 	.word	0x40000c00
 800518c:	40010400 	.word	0x40010400
 8005190:	40014000 	.word	0x40014000
 8005194:	40014400 	.word	0x40014400
 8005198:	40014800 	.word	0x40014800
 800519c:	40001800 	.word	0x40001800
 80051a0:	40001c00 	.word	0x40001c00
 80051a4:	40002000 	.word	0x40002000

080051a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f023 0201 	bic.w	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f023 030a 	bic.w	r3, r3, #10
 80051e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	621a      	str	r2, [r3, #32]
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005206:	b480      	push	{r7}
 8005208:	b087      	sub	sp, #28
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f023 0210 	bic.w	r2, r3, #16
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005230:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	031b      	lsls	r3, r3, #12
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005242:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	621a      	str	r2, [r3, #32]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800527c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	f043 0307 	orr.w	r3, r3, #7
 8005288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	609a      	str	r2, [r3, #8]
}
 8005290:	bf00      	nop
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	021a      	lsls	r2, r3, #8
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	431a      	orrs	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	609a      	str	r2, [r3, #8]
}
 80052d0:	bf00      	nop
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e05a      	b.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a21      	ldr	r2, [pc, #132]	@ (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d022      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005340:	d01d      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a1d      	ldr	r2, [pc, #116]	@ (80053bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d018      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a1b      	ldr	r2, [pc, #108]	@ (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a1a      	ldr	r2, [pc, #104]	@ (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00e      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a18      	ldr	r2, [pc, #96]	@ (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d009      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a17      	ldr	r2, [pc, #92]	@ (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a15      	ldr	r2, [pc, #84]	@ (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d10c      	bne.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	4313      	orrs	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800
 80053c4:	40000c00 	.word	0x40000c00
 80053c8:	40010400 	.word	0x40010400
 80053cc:	40014000 	.word	0x40014000
 80053d0:	40001800 	.word	0x40001800

080053d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e042      	b.n	8005494 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fc fdbe 	bl	8001fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2224      	movs	r2, #36	@ 0x24
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800543e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f973 	bl	800572c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	@ 0x28
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	4613      	mov	r3, r2
 80054aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d175      	bne.n	80055a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <HAL_UART_Transmit+0x2c>
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e06e      	b.n	80055aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2221      	movs	r2, #33	@ 0x21
 80054d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054da:	f7fd f9ad 	bl	8002838 <HAL_GetTick>
 80054de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	88fa      	ldrh	r2, [r7, #6]
 80054ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f4:	d108      	bne.n	8005508 <HAL_UART_Transmit+0x6c>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	e003      	b.n	8005510 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800550c:	2300      	movs	r3, #0
 800550e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005510:	e02e      	b.n	8005570 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2200      	movs	r2, #0
 800551a:	2180      	movs	r1, #128	@ 0x80
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f848 	bl	80055b2 <UART_WaitOnFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2220      	movs	r2, #32
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e03a      	b.n	80055aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10b      	bne.n	8005552 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005548:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	3302      	adds	r3, #2
 800554e:	61bb      	str	r3, [r7, #24]
 8005550:	e007      	b.n	8005562 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	781a      	ldrb	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	3301      	adds	r3, #1
 8005560:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1cb      	bne.n	8005512 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2200      	movs	r2, #0
 8005582:	2140      	movs	r1, #64	@ 0x40
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f814 	bl	80055b2 <UART_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e006      	b.n	80055aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	e000      	b.n	80055aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80055a8:	2302      	movs	r3, #2
  }
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b086      	sub	sp, #24
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	603b      	str	r3, [r7, #0]
 80055be:	4613      	mov	r3, r2
 80055c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c2:	e03b      	b.n	800563c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d037      	beq.n	800563c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055cc:	f7fd f934 	bl	8002838 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	6a3a      	ldr	r2, [r7, #32]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d302      	bcc.n	80055e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e03a      	b.n	800565c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d023      	beq.n	800563c <UART_WaitOnFlagUntilTimeout+0x8a>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b80      	cmp	r3, #128	@ 0x80
 80055f8:	d020      	beq.n	800563c <UART_WaitOnFlagUntilTimeout+0x8a>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b40      	cmp	r3, #64	@ 0x40
 80055fe:	d01d      	beq.n	800563c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b08      	cmp	r3, #8
 800560c:	d116      	bne.n	800563c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f81d 	bl	8005664 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2208      	movs	r2, #8
 800562e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e00f      	b.n	800565c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4013      	ands	r3, r2
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	bf0c      	ite	eq
 800564c:	2301      	moveq	r3, #1
 800564e:	2300      	movne	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	429a      	cmp	r2, r3
 8005658:	d0b4      	beq.n	80055c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005664:	b480      	push	{r7}
 8005666:	b095      	sub	sp, #84	@ 0x54
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	330c      	adds	r3, #12
 8005672:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800567c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800568c:	643a      	str	r2, [r7, #64]	@ 0x40
 800568e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005692:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800569a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e5      	bne.n	800566c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3314      	adds	r3, #20
 80056a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f023 0301 	bic.w	r3, r3, #1
 80056b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e5      	bne.n	80056a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d119      	bne.n	8005710 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f023 0310 	bic.w	r3, r3, #16
 80056f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	330c      	adds	r3, #12
 80056fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056fc:	61ba      	str	r2, [r7, #24]
 80056fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6979      	ldr	r1, [r7, #20]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	613b      	str	r3, [r7, #16]
   return(result);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e5      	bne.n	80056dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800571e:	bf00      	nop
 8005720:	3754      	adds	r7, #84	@ 0x54
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800572c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005730:	b0c0      	sub	sp, #256	@ 0x100
 8005732:	af00      	add	r7, sp, #0
 8005734:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005748:	68d9      	ldr	r1, [r3, #12]
 800574a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	ea40 0301 	orr.w	r3, r0, r1
 8005754:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	431a      	orrs	r2, r3
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	431a      	orrs	r2, r3
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005784:	f021 010c 	bic.w	r1, r1, #12
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005792:	430b      	orrs	r3, r1
 8005794:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80057a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a6:	6999      	ldr	r1, [r3, #24]
 80057a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	ea40 0301 	orr.w	r3, r0, r1
 80057b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b8f      	ldr	r3, [pc, #572]	@ (80059f8 <UART_SetConfig+0x2cc>)
 80057bc:	429a      	cmp	r2, r3
 80057be:	d005      	beq.n	80057cc <UART_SetConfig+0xa0>
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4b8d      	ldr	r3, [pc, #564]	@ (80059fc <UART_SetConfig+0x2d0>)
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d104      	bne.n	80057d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057cc:	f7fe fcbe 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 80057d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057d4:	e003      	b.n	80057de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057d6:	f7fe fca5 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 80057da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057e8:	f040 810c 	bne.w	8005a04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057fe:	4622      	mov	r2, r4
 8005800:	462b      	mov	r3, r5
 8005802:	1891      	adds	r1, r2, r2
 8005804:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005806:	415b      	adcs	r3, r3
 8005808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800580a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800580e:	4621      	mov	r1, r4
 8005810:	eb12 0801 	adds.w	r8, r2, r1
 8005814:	4629      	mov	r1, r5
 8005816:	eb43 0901 	adc.w	r9, r3, r1
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800582a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800582e:	4690      	mov	r8, r2
 8005830:	4699      	mov	r9, r3
 8005832:	4623      	mov	r3, r4
 8005834:	eb18 0303 	adds.w	r3, r8, r3
 8005838:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800583c:	462b      	mov	r3, r5
 800583e:	eb49 0303 	adc.w	r3, r9, r3
 8005842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005852:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005856:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800585a:	460b      	mov	r3, r1
 800585c:	18db      	adds	r3, r3, r3
 800585e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005860:	4613      	mov	r3, r2
 8005862:	eb42 0303 	adc.w	r3, r2, r3
 8005866:	657b      	str	r3, [r7, #84]	@ 0x54
 8005868:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800586c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005870:	f7fb f9ba 	bl	8000be8 <__aeabi_uldivmod>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4b61      	ldr	r3, [pc, #388]	@ (8005a00 <UART_SetConfig+0x2d4>)
 800587a:	fba3 2302 	umull	r2, r3, r3, r2
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	011c      	lsls	r4, r3, #4
 8005882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005886:	2200      	movs	r2, #0
 8005888:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800588c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005890:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	1891      	adds	r1, r2, r2
 800589a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800589c:	415b      	adcs	r3, r3
 800589e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058a4:	4641      	mov	r1, r8
 80058a6:	eb12 0a01 	adds.w	sl, r2, r1
 80058aa:	4649      	mov	r1, r9
 80058ac:	eb43 0b01 	adc.w	fp, r3, r1
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058c4:	4692      	mov	sl, r2
 80058c6:	469b      	mov	fp, r3
 80058c8:	4643      	mov	r3, r8
 80058ca:	eb1a 0303 	adds.w	r3, sl, r3
 80058ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058d2:	464b      	mov	r3, r9
 80058d4:	eb4b 0303 	adc.w	r3, fp, r3
 80058d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058f0:	460b      	mov	r3, r1
 80058f2:	18db      	adds	r3, r3, r3
 80058f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80058f6:	4613      	mov	r3, r2
 80058f8:	eb42 0303 	adc.w	r3, r2, r3
 80058fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80058fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005902:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005906:	f7fb f96f 	bl	8000be8 <__aeabi_uldivmod>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4611      	mov	r1, r2
 8005910:	4b3b      	ldr	r3, [pc, #236]	@ (8005a00 <UART_SetConfig+0x2d4>)
 8005912:	fba3 2301 	umull	r2, r3, r3, r1
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	2264      	movs	r2, #100	@ 0x64
 800591a:	fb02 f303 	mul.w	r3, r2, r3
 800591e:	1acb      	subs	r3, r1, r3
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005926:	4b36      	ldr	r3, [pc, #216]	@ (8005a00 <UART_SetConfig+0x2d4>)
 8005928:	fba3 2302 	umull	r2, r3, r3, r2
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005934:	441c      	add	r4, r3
 8005936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800593a:	2200      	movs	r2, #0
 800593c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005940:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005944:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005948:	4642      	mov	r2, r8
 800594a:	464b      	mov	r3, r9
 800594c:	1891      	adds	r1, r2, r2
 800594e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005950:	415b      	adcs	r3, r3
 8005952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005954:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005958:	4641      	mov	r1, r8
 800595a:	1851      	adds	r1, r2, r1
 800595c:	6339      	str	r1, [r7, #48]	@ 0x30
 800595e:	4649      	mov	r1, r9
 8005960:	414b      	adcs	r3, r1
 8005962:	637b      	str	r3, [r7, #52]	@ 0x34
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005970:	4659      	mov	r1, fp
 8005972:	00cb      	lsls	r3, r1, #3
 8005974:	4651      	mov	r1, sl
 8005976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800597a:	4651      	mov	r1, sl
 800597c:	00ca      	lsls	r2, r1, #3
 800597e:	4610      	mov	r0, r2
 8005980:	4619      	mov	r1, r3
 8005982:	4603      	mov	r3, r0
 8005984:	4642      	mov	r2, r8
 8005986:	189b      	adds	r3, r3, r2
 8005988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800598c:	464b      	mov	r3, r9
 800598e:	460a      	mov	r2, r1
 8005990:	eb42 0303 	adc.w	r3, r2, r3
 8005994:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80059a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059ac:	460b      	mov	r3, r1
 80059ae:	18db      	adds	r3, r3, r3
 80059b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059b2:	4613      	mov	r3, r2
 80059b4:	eb42 0303 	adc.w	r3, r2, r3
 80059b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059c2:	f7fb f911 	bl	8000be8 <__aeabi_uldivmod>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005a00 <UART_SetConfig+0x2d4>)
 80059cc:	fba3 1302 	umull	r1, r3, r3, r2
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	2164      	movs	r1, #100	@ 0x64
 80059d4:	fb01 f303 	mul.w	r3, r1, r3
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	3332      	adds	r3, #50	@ 0x32
 80059de:	4a08      	ldr	r2, [pc, #32]	@ (8005a00 <UART_SetConfig+0x2d4>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	f003 0207 	and.w	r2, r3, #7
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4422      	add	r2, r4
 80059f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059f4:	e106      	b.n	8005c04 <UART_SetConfig+0x4d8>
 80059f6:	bf00      	nop
 80059f8:	40011000 	.word	0x40011000
 80059fc:	40011400 	.word	0x40011400
 8005a00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a16:	4642      	mov	r2, r8
 8005a18:	464b      	mov	r3, r9
 8005a1a:	1891      	adds	r1, r2, r2
 8005a1c:	6239      	str	r1, [r7, #32]
 8005a1e:	415b      	adcs	r3, r3
 8005a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a26:	4641      	mov	r1, r8
 8005a28:	1854      	adds	r4, r2, r1
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	eb43 0501 	adc.w	r5, r3, r1
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	00eb      	lsls	r3, r5, #3
 8005a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a3e:	00e2      	lsls	r2, r4, #3
 8005a40:	4614      	mov	r4, r2
 8005a42:	461d      	mov	r5, r3
 8005a44:	4643      	mov	r3, r8
 8005a46:	18e3      	adds	r3, r4, r3
 8005a48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	eb45 0303 	adc.w	r3, r5, r3
 8005a52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a72:	4629      	mov	r1, r5
 8005a74:	008b      	lsls	r3, r1, #2
 8005a76:	4621      	mov	r1, r4
 8005a78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	008a      	lsls	r2, r1, #2
 8005a80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a84:	f7fb f8b0 	bl	8000be8 <__aeabi_uldivmod>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4b60      	ldr	r3, [pc, #384]	@ (8005c10 <UART_SetConfig+0x4e4>)
 8005a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a92:	095b      	lsrs	r3, r3, #5
 8005a94:	011c      	lsls	r4, r3, #4
 8005a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005aa0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005aa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005aa8:	4642      	mov	r2, r8
 8005aaa:	464b      	mov	r3, r9
 8005aac:	1891      	adds	r1, r2, r2
 8005aae:	61b9      	str	r1, [r7, #24]
 8005ab0:	415b      	adcs	r3, r3
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab8:	4641      	mov	r1, r8
 8005aba:	1851      	adds	r1, r2, r1
 8005abc:	6139      	str	r1, [r7, #16]
 8005abe:	4649      	mov	r1, r9
 8005ac0:	414b      	adcs	r3, r1
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ad0:	4659      	mov	r1, fp
 8005ad2:	00cb      	lsls	r3, r1, #3
 8005ad4:	4651      	mov	r1, sl
 8005ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ada:	4651      	mov	r1, sl
 8005adc:	00ca      	lsls	r2, r1, #3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4642      	mov	r2, r8
 8005ae6:	189b      	adds	r3, r3, r2
 8005ae8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005aec:	464b      	mov	r3, r9
 8005aee:	460a      	mov	r2, r1
 8005af0:	eb42 0303 	adc.w	r3, r2, r3
 8005af4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b10:	4649      	mov	r1, r9
 8005b12:	008b      	lsls	r3, r1, #2
 8005b14:	4641      	mov	r1, r8
 8005b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b1a:	4641      	mov	r1, r8
 8005b1c:	008a      	lsls	r2, r1, #2
 8005b1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b22:	f7fb f861 	bl	8000be8 <__aeabi_uldivmod>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4b38      	ldr	r3, [pc, #224]	@ (8005c10 <UART_SetConfig+0x4e4>)
 8005b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	2264      	movs	r2, #100	@ 0x64
 8005b36:	fb02 f303 	mul.w	r3, r2, r3
 8005b3a:	1acb      	subs	r3, r1, r3
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	3332      	adds	r3, #50	@ 0x32
 8005b40:	4a33      	ldr	r2, [pc, #204]	@ (8005c10 <UART_SetConfig+0x4e4>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b4c:	441c      	add	r4, r3
 8005b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b52:	2200      	movs	r2, #0
 8005b54:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b56:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b5c:	4642      	mov	r2, r8
 8005b5e:	464b      	mov	r3, r9
 8005b60:	1891      	adds	r1, r2, r2
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	415b      	adcs	r3, r3
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b6c:	4641      	mov	r1, r8
 8005b6e:	1851      	adds	r1, r2, r1
 8005b70:	6039      	str	r1, [r7, #0]
 8005b72:	4649      	mov	r1, r9
 8005b74:	414b      	adcs	r3, r1
 8005b76:	607b      	str	r3, [r7, #4]
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b84:	4659      	mov	r1, fp
 8005b86:	00cb      	lsls	r3, r1, #3
 8005b88:	4651      	mov	r1, sl
 8005b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b8e:	4651      	mov	r1, sl
 8005b90:	00ca      	lsls	r2, r1, #3
 8005b92:	4610      	mov	r0, r2
 8005b94:	4619      	mov	r1, r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	4642      	mov	r2, r8
 8005b9a:	189b      	adds	r3, r3, r2
 8005b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	460a      	mov	r2, r1
 8005ba2:	eb42 0303 	adc.w	r3, r2, r3
 8005ba6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bb2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	008b      	lsls	r3, r1, #2
 8005bc4:	4641      	mov	r1, r8
 8005bc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bca:	4641      	mov	r1, r8
 8005bcc:	008a      	lsls	r2, r1, #2
 8005bce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005bd2:	f7fb f809 	bl	8000be8 <__aeabi_uldivmod>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4b0d      	ldr	r3, [pc, #52]	@ (8005c10 <UART_SetConfig+0x4e4>)
 8005bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	2164      	movs	r1, #100	@ 0x64
 8005be4:	fb01 f303 	mul.w	r3, r1, r3
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	3332      	adds	r3, #50	@ 0x32
 8005bee:	4a08      	ldr	r2, [pc, #32]	@ (8005c10 <UART_SetConfig+0x4e4>)
 8005bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	f003 020f 	and.w	r2, r3, #15
 8005bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4422      	add	r2, r4
 8005c02:	609a      	str	r2, [r3, #8]
}
 8005c04:	bf00      	nop
 8005c06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c10:	51eb851f 	.word	0x51eb851f

08005c14 <__cvt>:
 8005c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	ec57 6b10 	vmov	r6, r7, d0
 8005c1c:	2f00      	cmp	r7, #0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	4619      	mov	r1, r3
 8005c22:	463b      	mov	r3, r7
 8005c24:	bfbb      	ittet	lt
 8005c26:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005c2a:	461f      	movlt	r7, r3
 8005c2c:	2300      	movge	r3, #0
 8005c2e:	232d      	movlt	r3, #45	@ 0x2d
 8005c30:	700b      	strb	r3, [r1, #0]
 8005c32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005c38:	4691      	mov	r9, r2
 8005c3a:	f023 0820 	bic.w	r8, r3, #32
 8005c3e:	bfbc      	itt	lt
 8005c40:	4632      	movlt	r2, r6
 8005c42:	4616      	movlt	r6, r2
 8005c44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c48:	d005      	beq.n	8005c56 <__cvt+0x42>
 8005c4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005c4e:	d100      	bne.n	8005c52 <__cvt+0x3e>
 8005c50:	3401      	adds	r4, #1
 8005c52:	2102      	movs	r1, #2
 8005c54:	e000      	b.n	8005c58 <__cvt+0x44>
 8005c56:	2103      	movs	r1, #3
 8005c58:	ab03      	add	r3, sp, #12
 8005c5a:	9301      	str	r3, [sp, #4]
 8005c5c:	ab02      	add	r3, sp, #8
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	ec47 6b10 	vmov	d0, r6, r7
 8005c64:	4653      	mov	r3, sl
 8005c66:	4622      	mov	r2, r4
 8005c68:	f000 fe6e 	bl	8006948 <_dtoa_r>
 8005c6c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c70:	4605      	mov	r5, r0
 8005c72:	d119      	bne.n	8005ca8 <__cvt+0x94>
 8005c74:	f019 0f01 	tst.w	r9, #1
 8005c78:	d00e      	beq.n	8005c98 <__cvt+0x84>
 8005c7a:	eb00 0904 	add.w	r9, r0, r4
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2300      	movs	r3, #0
 8005c82:	4630      	mov	r0, r6
 8005c84:	4639      	mov	r1, r7
 8005c86:	f7fa ff3f 	bl	8000b08 <__aeabi_dcmpeq>
 8005c8a:	b108      	cbz	r0, 8005c90 <__cvt+0x7c>
 8005c8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c90:	2230      	movs	r2, #48	@ 0x30
 8005c92:	9b03      	ldr	r3, [sp, #12]
 8005c94:	454b      	cmp	r3, r9
 8005c96:	d31e      	bcc.n	8005cd6 <__cvt+0xc2>
 8005c98:	9b03      	ldr	r3, [sp, #12]
 8005c9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c9c:	1b5b      	subs	r3, r3, r5
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	b004      	add	sp, #16
 8005ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005cac:	eb00 0904 	add.w	r9, r0, r4
 8005cb0:	d1e5      	bne.n	8005c7e <__cvt+0x6a>
 8005cb2:	7803      	ldrb	r3, [r0, #0]
 8005cb4:	2b30      	cmp	r3, #48	@ 0x30
 8005cb6:	d10a      	bne.n	8005cce <__cvt+0xba>
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2300      	movs	r3, #0
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	f7fa ff22 	bl	8000b08 <__aeabi_dcmpeq>
 8005cc4:	b918      	cbnz	r0, 8005cce <__cvt+0xba>
 8005cc6:	f1c4 0401 	rsb	r4, r4, #1
 8005cca:	f8ca 4000 	str.w	r4, [sl]
 8005cce:	f8da 3000 	ldr.w	r3, [sl]
 8005cd2:	4499      	add	r9, r3
 8005cd4:	e7d3      	b.n	8005c7e <__cvt+0x6a>
 8005cd6:	1c59      	adds	r1, r3, #1
 8005cd8:	9103      	str	r1, [sp, #12]
 8005cda:	701a      	strb	r2, [r3, #0]
 8005cdc:	e7d9      	b.n	8005c92 <__cvt+0x7e>

08005cde <__exponent>:
 8005cde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ce0:	2900      	cmp	r1, #0
 8005ce2:	bfba      	itte	lt
 8005ce4:	4249      	neglt	r1, r1
 8005ce6:	232d      	movlt	r3, #45	@ 0x2d
 8005ce8:	232b      	movge	r3, #43	@ 0x2b
 8005cea:	2909      	cmp	r1, #9
 8005cec:	7002      	strb	r2, [r0, #0]
 8005cee:	7043      	strb	r3, [r0, #1]
 8005cf0:	dd29      	ble.n	8005d46 <__exponent+0x68>
 8005cf2:	f10d 0307 	add.w	r3, sp, #7
 8005cf6:	461d      	mov	r5, r3
 8005cf8:	270a      	movs	r7, #10
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005d00:	fb07 1416 	mls	r4, r7, r6, r1
 8005d04:	3430      	adds	r4, #48	@ 0x30
 8005d06:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	2c63      	cmp	r4, #99	@ 0x63
 8005d0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d12:	4631      	mov	r1, r6
 8005d14:	dcf1      	bgt.n	8005cfa <__exponent+0x1c>
 8005d16:	3130      	adds	r1, #48	@ 0x30
 8005d18:	1e94      	subs	r4, r2, #2
 8005d1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d1e:	1c41      	adds	r1, r0, #1
 8005d20:	4623      	mov	r3, r4
 8005d22:	42ab      	cmp	r3, r5
 8005d24:	d30a      	bcc.n	8005d3c <__exponent+0x5e>
 8005d26:	f10d 0309 	add.w	r3, sp, #9
 8005d2a:	1a9b      	subs	r3, r3, r2
 8005d2c:	42ac      	cmp	r4, r5
 8005d2e:	bf88      	it	hi
 8005d30:	2300      	movhi	r3, #0
 8005d32:	3302      	adds	r3, #2
 8005d34:	4403      	add	r3, r0
 8005d36:	1a18      	subs	r0, r3, r0
 8005d38:	b003      	add	sp, #12
 8005d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d3c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005d40:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d44:	e7ed      	b.n	8005d22 <__exponent+0x44>
 8005d46:	2330      	movs	r3, #48	@ 0x30
 8005d48:	3130      	adds	r1, #48	@ 0x30
 8005d4a:	7083      	strb	r3, [r0, #2]
 8005d4c:	70c1      	strb	r1, [r0, #3]
 8005d4e:	1d03      	adds	r3, r0, #4
 8005d50:	e7f1      	b.n	8005d36 <__exponent+0x58>
	...

08005d54 <_printf_float>:
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d58:	b08d      	sub	sp, #52	@ 0x34
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005d60:	4616      	mov	r6, r2
 8005d62:	461f      	mov	r7, r3
 8005d64:	4605      	mov	r5, r0
 8005d66:	f000 fcef 	bl	8006748 <_localeconv_r>
 8005d6a:	6803      	ldr	r3, [r0, #0]
 8005d6c:	9304      	str	r3, [sp, #16]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fa fa9e 	bl	80002b0 <strlen>
 8005d74:	2300      	movs	r3, #0
 8005d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d78:	f8d8 3000 	ldr.w	r3, [r8]
 8005d7c:	9005      	str	r0, [sp, #20]
 8005d7e:	3307      	adds	r3, #7
 8005d80:	f023 0307 	bic.w	r3, r3, #7
 8005d84:	f103 0208 	add.w	r2, r3, #8
 8005d88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005d8c:	f8d4 b000 	ldr.w	fp, [r4]
 8005d90:	f8c8 2000 	str.w	r2, [r8]
 8005d94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d9c:	9307      	str	r3, [sp, #28]
 8005d9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005da2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005daa:	4b9c      	ldr	r3, [pc, #624]	@ (800601c <_printf_float+0x2c8>)
 8005dac:	f04f 32ff 	mov.w	r2, #4294967295
 8005db0:	f7fa fedc 	bl	8000b6c <__aeabi_dcmpun>
 8005db4:	bb70      	cbnz	r0, 8005e14 <_printf_float+0xc0>
 8005db6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dba:	4b98      	ldr	r3, [pc, #608]	@ (800601c <_printf_float+0x2c8>)
 8005dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc0:	f7fa feb6 	bl	8000b30 <__aeabi_dcmple>
 8005dc4:	bb30      	cbnz	r0, 8005e14 <_printf_float+0xc0>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4640      	mov	r0, r8
 8005dcc:	4649      	mov	r1, r9
 8005dce:	f7fa fea5 	bl	8000b1c <__aeabi_dcmplt>
 8005dd2:	b110      	cbz	r0, 8005dda <_printf_float+0x86>
 8005dd4:	232d      	movs	r3, #45	@ 0x2d
 8005dd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dda:	4a91      	ldr	r2, [pc, #580]	@ (8006020 <_printf_float+0x2cc>)
 8005ddc:	4b91      	ldr	r3, [pc, #580]	@ (8006024 <_printf_float+0x2d0>)
 8005dde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005de2:	bf94      	ite	ls
 8005de4:	4690      	movls	r8, r2
 8005de6:	4698      	movhi	r8, r3
 8005de8:	2303      	movs	r3, #3
 8005dea:	6123      	str	r3, [r4, #16]
 8005dec:	f02b 0304 	bic.w	r3, fp, #4
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	f04f 0900 	mov.w	r9, #0
 8005df6:	9700      	str	r7, [sp, #0]
 8005df8:	4633      	mov	r3, r6
 8005dfa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 f9d2 	bl	80061a8 <_printf_common>
 8005e04:	3001      	adds	r0, #1
 8005e06:	f040 808d 	bne.w	8005f24 <_printf_float+0x1d0>
 8005e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0e:	b00d      	add	sp, #52	@ 0x34
 8005e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e14:	4642      	mov	r2, r8
 8005e16:	464b      	mov	r3, r9
 8005e18:	4640      	mov	r0, r8
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	f7fa fea6 	bl	8000b6c <__aeabi_dcmpun>
 8005e20:	b140      	cbz	r0, 8005e34 <_printf_float+0xe0>
 8005e22:	464b      	mov	r3, r9
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	bfbc      	itt	lt
 8005e28:	232d      	movlt	r3, #45	@ 0x2d
 8005e2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8006028 <_printf_float+0x2d4>)
 8005e30:	4b7e      	ldr	r3, [pc, #504]	@ (800602c <_printf_float+0x2d8>)
 8005e32:	e7d4      	b.n	8005dde <_printf_float+0x8a>
 8005e34:	6863      	ldr	r3, [r4, #4]
 8005e36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005e3a:	9206      	str	r2, [sp, #24]
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	d13b      	bne.n	8005eb8 <_printf_float+0x164>
 8005e40:	2306      	movs	r3, #6
 8005e42:	6063      	str	r3, [r4, #4]
 8005e44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005e48:	2300      	movs	r3, #0
 8005e4a:	6022      	str	r2, [r4, #0]
 8005e4c:	9303      	str	r3, [sp, #12]
 8005e4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005e50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005e54:	ab09      	add	r3, sp, #36	@ 0x24
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	6861      	ldr	r1, [r4, #4]
 8005e5a:	ec49 8b10 	vmov	d0, r8, r9
 8005e5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005e62:	4628      	mov	r0, r5
 8005e64:	f7ff fed6 	bl	8005c14 <__cvt>
 8005e68:	9b06      	ldr	r3, [sp, #24]
 8005e6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e6c:	2b47      	cmp	r3, #71	@ 0x47
 8005e6e:	4680      	mov	r8, r0
 8005e70:	d129      	bne.n	8005ec6 <_printf_float+0x172>
 8005e72:	1cc8      	adds	r0, r1, #3
 8005e74:	db02      	blt.n	8005e7c <_printf_float+0x128>
 8005e76:	6863      	ldr	r3, [r4, #4]
 8005e78:	4299      	cmp	r1, r3
 8005e7a:	dd41      	ble.n	8005f00 <_printf_float+0x1ac>
 8005e7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e80:	fa5f fa8a 	uxtb.w	sl, sl
 8005e84:	3901      	subs	r1, #1
 8005e86:	4652      	mov	r2, sl
 8005e88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005e8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e8e:	f7ff ff26 	bl	8005cde <__exponent>
 8005e92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e94:	1813      	adds	r3, r2, r0
 8005e96:	2a01      	cmp	r2, #1
 8005e98:	4681      	mov	r9, r0
 8005e9a:	6123      	str	r3, [r4, #16]
 8005e9c:	dc02      	bgt.n	8005ea4 <_printf_float+0x150>
 8005e9e:	6822      	ldr	r2, [r4, #0]
 8005ea0:	07d2      	lsls	r2, r2, #31
 8005ea2:	d501      	bpl.n	8005ea8 <_printf_float+0x154>
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0a2      	beq.n	8005df6 <_printf_float+0xa2>
 8005eb0:	232d      	movs	r3, #45	@ 0x2d
 8005eb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eb6:	e79e      	b.n	8005df6 <_printf_float+0xa2>
 8005eb8:	9a06      	ldr	r2, [sp, #24]
 8005eba:	2a47      	cmp	r2, #71	@ 0x47
 8005ebc:	d1c2      	bne.n	8005e44 <_printf_float+0xf0>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1c0      	bne.n	8005e44 <_printf_float+0xf0>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e7bd      	b.n	8005e42 <_printf_float+0xee>
 8005ec6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005eca:	d9db      	bls.n	8005e84 <_printf_float+0x130>
 8005ecc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ed0:	d118      	bne.n	8005f04 <_printf_float+0x1b0>
 8005ed2:	2900      	cmp	r1, #0
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	dd0b      	ble.n	8005ef0 <_printf_float+0x19c>
 8005ed8:	6121      	str	r1, [r4, #16]
 8005eda:	b913      	cbnz	r3, 8005ee2 <_printf_float+0x18e>
 8005edc:	6822      	ldr	r2, [r4, #0]
 8005ede:	07d0      	lsls	r0, r2, #31
 8005ee0:	d502      	bpl.n	8005ee8 <_printf_float+0x194>
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	440b      	add	r3, r1
 8005ee6:	6123      	str	r3, [r4, #16]
 8005ee8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005eea:	f04f 0900 	mov.w	r9, #0
 8005eee:	e7db      	b.n	8005ea8 <_printf_float+0x154>
 8005ef0:	b913      	cbnz	r3, 8005ef8 <_printf_float+0x1a4>
 8005ef2:	6822      	ldr	r2, [r4, #0]
 8005ef4:	07d2      	lsls	r2, r2, #31
 8005ef6:	d501      	bpl.n	8005efc <_printf_float+0x1a8>
 8005ef8:	3302      	adds	r3, #2
 8005efa:	e7f4      	b.n	8005ee6 <_printf_float+0x192>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e7f2      	b.n	8005ee6 <_printf_float+0x192>
 8005f00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f06:	4299      	cmp	r1, r3
 8005f08:	db05      	blt.n	8005f16 <_printf_float+0x1c2>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	6121      	str	r1, [r4, #16]
 8005f0e:	07d8      	lsls	r0, r3, #31
 8005f10:	d5ea      	bpl.n	8005ee8 <_printf_float+0x194>
 8005f12:	1c4b      	adds	r3, r1, #1
 8005f14:	e7e7      	b.n	8005ee6 <_printf_float+0x192>
 8005f16:	2900      	cmp	r1, #0
 8005f18:	bfd4      	ite	le
 8005f1a:	f1c1 0202 	rsble	r2, r1, #2
 8005f1e:	2201      	movgt	r2, #1
 8005f20:	4413      	add	r3, r2
 8005f22:	e7e0      	b.n	8005ee6 <_printf_float+0x192>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	055a      	lsls	r2, r3, #21
 8005f28:	d407      	bmi.n	8005f3a <_printf_float+0x1e6>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	d12b      	bne.n	8005f90 <_printf_float+0x23c>
 8005f38:	e767      	b.n	8005e0a <_printf_float+0xb6>
 8005f3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f3e:	f240 80dd 	bls.w	80060fc <_printf_float+0x3a8>
 8005f42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f46:	2200      	movs	r2, #0
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f7fa fddd 	bl	8000b08 <__aeabi_dcmpeq>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d033      	beq.n	8005fba <_printf_float+0x266>
 8005f52:	4a37      	ldr	r2, [pc, #220]	@ (8006030 <_printf_float+0x2dc>)
 8005f54:	2301      	movs	r3, #1
 8005f56:	4631      	mov	r1, r6
 8005f58:	4628      	mov	r0, r5
 8005f5a:	47b8      	blx	r7
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	f43f af54 	beq.w	8005e0a <_printf_float+0xb6>
 8005f62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005f66:	4543      	cmp	r3, r8
 8005f68:	db02      	blt.n	8005f70 <_printf_float+0x21c>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	07d8      	lsls	r0, r3, #31
 8005f6e:	d50f      	bpl.n	8005f90 <_printf_float+0x23c>
 8005f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f74:	4631      	mov	r1, r6
 8005f76:	4628      	mov	r0, r5
 8005f78:	47b8      	blx	r7
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	f43f af45 	beq.w	8005e0a <_printf_float+0xb6>
 8005f80:	f04f 0900 	mov.w	r9, #0
 8005f84:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f88:	f104 0a1a 	add.w	sl, r4, #26
 8005f8c:	45c8      	cmp	r8, r9
 8005f8e:	dc09      	bgt.n	8005fa4 <_printf_float+0x250>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	079b      	lsls	r3, r3, #30
 8005f94:	f100 8103 	bmi.w	800619e <_printf_float+0x44a>
 8005f98:	68e0      	ldr	r0, [r4, #12]
 8005f9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f9c:	4298      	cmp	r0, r3
 8005f9e:	bfb8      	it	lt
 8005fa0:	4618      	movlt	r0, r3
 8005fa2:	e734      	b.n	8005e0e <_printf_float+0xba>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4652      	mov	r2, sl
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	f43f af2b 	beq.w	8005e0a <_printf_float+0xb6>
 8005fb4:	f109 0901 	add.w	r9, r9, #1
 8005fb8:	e7e8      	b.n	8005f8c <_printf_float+0x238>
 8005fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dc39      	bgt.n	8006034 <_printf_float+0x2e0>
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8006030 <_printf_float+0x2dc>)
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	47b8      	blx	r7
 8005fca:	3001      	adds	r0, #1
 8005fcc:	f43f af1d 	beq.w	8005e0a <_printf_float+0xb6>
 8005fd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005fd4:	ea59 0303 	orrs.w	r3, r9, r3
 8005fd8:	d102      	bne.n	8005fe0 <_printf_float+0x28c>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	07d9      	lsls	r1, r3, #31
 8005fde:	d5d7      	bpl.n	8005f90 <_printf_float+0x23c>
 8005fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	47b8      	blx	r7
 8005fea:	3001      	adds	r0, #1
 8005fec:	f43f af0d 	beq.w	8005e0a <_printf_float+0xb6>
 8005ff0:	f04f 0a00 	mov.w	sl, #0
 8005ff4:	f104 0b1a 	add.w	fp, r4, #26
 8005ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ffa:	425b      	negs	r3, r3
 8005ffc:	4553      	cmp	r3, sl
 8005ffe:	dc01      	bgt.n	8006004 <_printf_float+0x2b0>
 8006000:	464b      	mov	r3, r9
 8006002:	e793      	b.n	8005f2c <_printf_float+0x1d8>
 8006004:	2301      	movs	r3, #1
 8006006:	465a      	mov	r2, fp
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	f43f aefb 	beq.w	8005e0a <_printf_float+0xb6>
 8006014:	f10a 0a01 	add.w	sl, sl, #1
 8006018:	e7ee      	b.n	8005ff8 <_printf_float+0x2a4>
 800601a:	bf00      	nop
 800601c:	7fefffff 	.word	0x7fefffff
 8006020:	08008e25 	.word	0x08008e25
 8006024:	08008e29 	.word	0x08008e29
 8006028:	08008e2d 	.word	0x08008e2d
 800602c:	08008e31 	.word	0x08008e31
 8006030:	08008e35 	.word	0x08008e35
 8006034:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006036:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800603a:	4553      	cmp	r3, sl
 800603c:	bfa8      	it	ge
 800603e:	4653      	movge	r3, sl
 8006040:	2b00      	cmp	r3, #0
 8006042:	4699      	mov	r9, r3
 8006044:	dc36      	bgt.n	80060b4 <_printf_float+0x360>
 8006046:	f04f 0b00 	mov.w	fp, #0
 800604a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800604e:	f104 021a 	add.w	r2, r4, #26
 8006052:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006054:	9306      	str	r3, [sp, #24]
 8006056:	eba3 0309 	sub.w	r3, r3, r9
 800605a:	455b      	cmp	r3, fp
 800605c:	dc31      	bgt.n	80060c2 <_printf_float+0x36e>
 800605e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006060:	459a      	cmp	sl, r3
 8006062:	dc3a      	bgt.n	80060da <_printf_float+0x386>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	07da      	lsls	r2, r3, #31
 8006068:	d437      	bmi.n	80060da <_printf_float+0x386>
 800606a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800606c:	ebaa 0903 	sub.w	r9, sl, r3
 8006070:	9b06      	ldr	r3, [sp, #24]
 8006072:	ebaa 0303 	sub.w	r3, sl, r3
 8006076:	4599      	cmp	r9, r3
 8006078:	bfa8      	it	ge
 800607a:	4699      	movge	r9, r3
 800607c:	f1b9 0f00 	cmp.w	r9, #0
 8006080:	dc33      	bgt.n	80060ea <_printf_float+0x396>
 8006082:	f04f 0800 	mov.w	r8, #0
 8006086:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800608a:	f104 0b1a 	add.w	fp, r4, #26
 800608e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006090:	ebaa 0303 	sub.w	r3, sl, r3
 8006094:	eba3 0309 	sub.w	r3, r3, r9
 8006098:	4543      	cmp	r3, r8
 800609a:	f77f af79 	ble.w	8005f90 <_printf_float+0x23c>
 800609e:	2301      	movs	r3, #1
 80060a0:	465a      	mov	r2, fp
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	f43f aeae 	beq.w	8005e0a <_printf_float+0xb6>
 80060ae:	f108 0801 	add.w	r8, r8, #1
 80060b2:	e7ec      	b.n	800608e <_printf_float+0x33a>
 80060b4:	4642      	mov	r2, r8
 80060b6:	4631      	mov	r1, r6
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b8      	blx	r7
 80060bc:	3001      	adds	r0, #1
 80060be:	d1c2      	bne.n	8006046 <_printf_float+0x2f2>
 80060c0:	e6a3      	b.n	8005e0a <_printf_float+0xb6>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4631      	mov	r1, r6
 80060c6:	4628      	mov	r0, r5
 80060c8:	9206      	str	r2, [sp, #24]
 80060ca:	47b8      	blx	r7
 80060cc:	3001      	adds	r0, #1
 80060ce:	f43f ae9c 	beq.w	8005e0a <_printf_float+0xb6>
 80060d2:	9a06      	ldr	r2, [sp, #24]
 80060d4:	f10b 0b01 	add.w	fp, fp, #1
 80060d8:	e7bb      	b.n	8006052 <_printf_float+0x2fe>
 80060da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060de:	4631      	mov	r1, r6
 80060e0:	4628      	mov	r0, r5
 80060e2:	47b8      	blx	r7
 80060e4:	3001      	adds	r0, #1
 80060e6:	d1c0      	bne.n	800606a <_printf_float+0x316>
 80060e8:	e68f      	b.n	8005e0a <_printf_float+0xb6>
 80060ea:	9a06      	ldr	r2, [sp, #24]
 80060ec:	464b      	mov	r3, r9
 80060ee:	4442      	add	r2, r8
 80060f0:	4631      	mov	r1, r6
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b8      	blx	r7
 80060f6:	3001      	adds	r0, #1
 80060f8:	d1c3      	bne.n	8006082 <_printf_float+0x32e>
 80060fa:	e686      	b.n	8005e0a <_printf_float+0xb6>
 80060fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006100:	f1ba 0f01 	cmp.w	sl, #1
 8006104:	dc01      	bgt.n	800610a <_printf_float+0x3b6>
 8006106:	07db      	lsls	r3, r3, #31
 8006108:	d536      	bpl.n	8006178 <_printf_float+0x424>
 800610a:	2301      	movs	r3, #1
 800610c:	4642      	mov	r2, r8
 800610e:	4631      	mov	r1, r6
 8006110:	4628      	mov	r0, r5
 8006112:	47b8      	blx	r7
 8006114:	3001      	adds	r0, #1
 8006116:	f43f ae78 	beq.w	8005e0a <_printf_float+0xb6>
 800611a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800611e:	4631      	mov	r1, r6
 8006120:	4628      	mov	r0, r5
 8006122:	47b8      	blx	r7
 8006124:	3001      	adds	r0, #1
 8006126:	f43f ae70 	beq.w	8005e0a <_printf_float+0xb6>
 800612a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800612e:	2200      	movs	r2, #0
 8006130:	2300      	movs	r3, #0
 8006132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006136:	f7fa fce7 	bl	8000b08 <__aeabi_dcmpeq>
 800613a:	b9c0      	cbnz	r0, 800616e <_printf_float+0x41a>
 800613c:	4653      	mov	r3, sl
 800613e:	f108 0201 	add.w	r2, r8, #1
 8006142:	4631      	mov	r1, r6
 8006144:	4628      	mov	r0, r5
 8006146:	47b8      	blx	r7
 8006148:	3001      	adds	r0, #1
 800614a:	d10c      	bne.n	8006166 <_printf_float+0x412>
 800614c:	e65d      	b.n	8005e0a <_printf_float+0xb6>
 800614e:	2301      	movs	r3, #1
 8006150:	465a      	mov	r2, fp
 8006152:	4631      	mov	r1, r6
 8006154:	4628      	mov	r0, r5
 8006156:	47b8      	blx	r7
 8006158:	3001      	adds	r0, #1
 800615a:	f43f ae56 	beq.w	8005e0a <_printf_float+0xb6>
 800615e:	f108 0801 	add.w	r8, r8, #1
 8006162:	45d0      	cmp	r8, sl
 8006164:	dbf3      	blt.n	800614e <_printf_float+0x3fa>
 8006166:	464b      	mov	r3, r9
 8006168:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800616c:	e6df      	b.n	8005f2e <_printf_float+0x1da>
 800616e:	f04f 0800 	mov.w	r8, #0
 8006172:	f104 0b1a 	add.w	fp, r4, #26
 8006176:	e7f4      	b.n	8006162 <_printf_float+0x40e>
 8006178:	2301      	movs	r3, #1
 800617a:	4642      	mov	r2, r8
 800617c:	e7e1      	b.n	8006142 <_printf_float+0x3ee>
 800617e:	2301      	movs	r3, #1
 8006180:	464a      	mov	r2, r9
 8006182:	4631      	mov	r1, r6
 8006184:	4628      	mov	r0, r5
 8006186:	47b8      	blx	r7
 8006188:	3001      	adds	r0, #1
 800618a:	f43f ae3e 	beq.w	8005e0a <_printf_float+0xb6>
 800618e:	f108 0801 	add.w	r8, r8, #1
 8006192:	68e3      	ldr	r3, [r4, #12]
 8006194:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006196:	1a5b      	subs	r3, r3, r1
 8006198:	4543      	cmp	r3, r8
 800619a:	dcf0      	bgt.n	800617e <_printf_float+0x42a>
 800619c:	e6fc      	b.n	8005f98 <_printf_float+0x244>
 800619e:	f04f 0800 	mov.w	r8, #0
 80061a2:	f104 0919 	add.w	r9, r4, #25
 80061a6:	e7f4      	b.n	8006192 <_printf_float+0x43e>

080061a8 <_printf_common>:
 80061a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	4616      	mov	r6, r2
 80061ae:	4698      	mov	r8, r3
 80061b0:	688a      	ldr	r2, [r1, #8]
 80061b2:	690b      	ldr	r3, [r1, #16]
 80061b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061b8:	4293      	cmp	r3, r2
 80061ba:	bfb8      	it	lt
 80061bc:	4613      	movlt	r3, r2
 80061be:	6033      	str	r3, [r6, #0]
 80061c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061c4:	4607      	mov	r7, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	b10a      	cbz	r2, 80061ce <_printf_common+0x26>
 80061ca:	3301      	adds	r3, #1
 80061cc:	6033      	str	r3, [r6, #0]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	0699      	lsls	r1, r3, #26
 80061d2:	bf42      	ittt	mi
 80061d4:	6833      	ldrmi	r3, [r6, #0]
 80061d6:	3302      	addmi	r3, #2
 80061d8:	6033      	strmi	r3, [r6, #0]
 80061da:	6825      	ldr	r5, [r4, #0]
 80061dc:	f015 0506 	ands.w	r5, r5, #6
 80061e0:	d106      	bne.n	80061f0 <_printf_common+0x48>
 80061e2:	f104 0a19 	add.w	sl, r4, #25
 80061e6:	68e3      	ldr	r3, [r4, #12]
 80061e8:	6832      	ldr	r2, [r6, #0]
 80061ea:	1a9b      	subs	r3, r3, r2
 80061ec:	42ab      	cmp	r3, r5
 80061ee:	dc26      	bgt.n	800623e <_printf_common+0x96>
 80061f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061f4:	6822      	ldr	r2, [r4, #0]
 80061f6:	3b00      	subs	r3, #0
 80061f8:	bf18      	it	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	0692      	lsls	r2, r2, #26
 80061fe:	d42b      	bmi.n	8006258 <_printf_common+0xb0>
 8006200:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006204:	4641      	mov	r1, r8
 8006206:	4638      	mov	r0, r7
 8006208:	47c8      	blx	r9
 800620a:	3001      	adds	r0, #1
 800620c:	d01e      	beq.n	800624c <_printf_common+0xa4>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	6922      	ldr	r2, [r4, #16]
 8006212:	f003 0306 	and.w	r3, r3, #6
 8006216:	2b04      	cmp	r3, #4
 8006218:	bf02      	ittt	eq
 800621a:	68e5      	ldreq	r5, [r4, #12]
 800621c:	6833      	ldreq	r3, [r6, #0]
 800621e:	1aed      	subeq	r5, r5, r3
 8006220:	68a3      	ldr	r3, [r4, #8]
 8006222:	bf0c      	ite	eq
 8006224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006228:	2500      	movne	r5, #0
 800622a:	4293      	cmp	r3, r2
 800622c:	bfc4      	itt	gt
 800622e:	1a9b      	subgt	r3, r3, r2
 8006230:	18ed      	addgt	r5, r5, r3
 8006232:	2600      	movs	r6, #0
 8006234:	341a      	adds	r4, #26
 8006236:	42b5      	cmp	r5, r6
 8006238:	d11a      	bne.n	8006270 <_printf_common+0xc8>
 800623a:	2000      	movs	r0, #0
 800623c:	e008      	b.n	8006250 <_printf_common+0xa8>
 800623e:	2301      	movs	r3, #1
 8006240:	4652      	mov	r2, sl
 8006242:	4641      	mov	r1, r8
 8006244:	4638      	mov	r0, r7
 8006246:	47c8      	blx	r9
 8006248:	3001      	adds	r0, #1
 800624a:	d103      	bne.n	8006254 <_printf_common+0xac>
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006254:	3501      	adds	r5, #1
 8006256:	e7c6      	b.n	80061e6 <_printf_common+0x3e>
 8006258:	18e1      	adds	r1, r4, r3
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	2030      	movs	r0, #48	@ 0x30
 800625e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006262:	4422      	add	r2, r4
 8006264:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006268:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800626c:	3302      	adds	r3, #2
 800626e:	e7c7      	b.n	8006200 <_printf_common+0x58>
 8006270:	2301      	movs	r3, #1
 8006272:	4622      	mov	r2, r4
 8006274:	4641      	mov	r1, r8
 8006276:	4638      	mov	r0, r7
 8006278:	47c8      	blx	r9
 800627a:	3001      	adds	r0, #1
 800627c:	d0e6      	beq.n	800624c <_printf_common+0xa4>
 800627e:	3601      	adds	r6, #1
 8006280:	e7d9      	b.n	8006236 <_printf_common+0x8e>
	...

08006284 <_printf_i>:
 8006284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	7e0f      	ldrb	r7, [r1, #24]
 800628a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800628c:	2f78      	cmp	r7, #120	@ 0x78
 800628e:	4691      	mov	r9, r2
 8006290:	4680      	mov	r8, r0
 8006292:	460c      	mov	r4, r1
 8006294:	469a      	mov	sl, r3
 8006296:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800629a:	d807      	bhi.n	80062ac <_printf_i+0x28>
 800629c:	2f62      	cmp	r7, #98	@ 0x62
 800629e:	d80a      	bhi.n	80062b6 <_printf_i+0x32>
 80062a0:	2f00      	cmp	r7, #0
 80062a2:	f000 80d2 	beq.w	800644a <_printf_i+0x1c6>
 80062a6:	2f58      	cmp	r7, #88	@ 0x58
 80062a8:	f000 80b9 	beq.w	800641e <_printf_i+0x19a>
 80062ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062b4:	e03a      	b.n	800632c <_printf_i+0xa8>
 80062b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062ba:	2b15      	cmp	r3, #21
 80062bc:	d8f6      	bhi.n	80062ac <_printf_i+0x28>
 80062be:	a101      	add	r1, pc, #4	@ (adr r1, 80062c4 <_printf_i+0x40>)
 80062c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062c4:	0800631d 	.word	0x0800631d
 80062c8:	08006331 	.word	0x08006331
 80062cc:	080062ad 	.word	0x080062ad
 80062d0:	080062ad 	.word	0x080062ad
 80062d4:	080062ad 	.word	0x080062ad
 80062d8:	080062ad 	.word	0x080062ad
 80062dc:	08006331 	.word	0x08006331
 80062e0:	080062ad 	.word	0x080062ad
 80062e4:	080062ad 	.word	0x080062ad
 80062e8:	080062ad 	.word	0x080062ad
 80062ec:	080062ad 	.word	0x080062ad
 80062f0:	08006431 	.word	0x08006431
 80062f4:	0800635b 	.word	0x0800635b
 80062f8:	080063eb 	.word	0x080063eb
 80062fc:	080062ad 	.word	0x080062ad
 8006300:	080062ad 	.word	0x080062ad
 8006304:	08006453 	.word	0x08006453
 8006308:	080062ad 	.word	0x080062ad
 800630c:	0800635b 	.word	0x0800635b
 8006310:	080062ad 	.word	0x080062ad
 8006314:	080062ad 	.word	0x080062ad
 8006318:	080063f3 	.word	0x080063f3
 800631c:	6833      	ldr	r3, [r6, #0]
 800631e:	1d1a      	adds	r2, r3, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6032      	str	r2, [r6, #0]
 8006324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006328:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800632c:	2301      	movs	r3, #1
 800632e:	e09d      	b.n	800646c <_printf_i+0x1e8>
 8006330:	6833      	ldr	r3, [r6, #0]
 8006332:	6820      	ldr	r0, [r4, #0]
 8006334:	1d19      	adds	r1, r3, #4
 8006336:	6031      	str	r1, [r6, #0]
 8006338:	0606      	lsls	r6, r0, #24
 800633a:	d501      	bpl.n	8006340 <_printf_i+0xbc>
 800633c:	681d      	ldr	r5, [r3, #0]
 800633e:	e003      	b.n	8006348 <_printf_i+0xc4>
 8006340:	0645      	lsls	r5, r0, #25
 8006342:	d5fb      	bpl.n	800633c <_printf_i+0xb8>
 8006344:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006348:	2d00      	cmp	r5, #0
 800634a:	da03      	bge.n	8006354 <_printf_i+0xd0>
 800634c:	232d      	movs	r3, #45	@ 0x2d
 800634e:	426d      	negs	r5, r5
 8006350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006354:	4859      	ldr	r0, [pc, #356]	@ (80064bc <_printf_i+0x238>)
 8006356:	230a      	movs	r3, #10
 8006358:	e011      	b.n	800637e <_printf_i+0xfa>
 800635a:	6821      	ldr	r1, [r4, #0]
 800635c:	6833      	ldr	r3, [r6, #0]
 800635e:	0608      	lsls	r0, r1, #24
 8006360:	f853 5b04 	ldr.w	r5, [r3], #4
 8006364:	d402      	bmi.n	800636c <_printf_i+0xe8>
 8006366:	0649      	lsls	r1, r1, #25
 8006368:	bf48      	it	mi
 800636a:	b2ad      	uxthmi	r5, r5
 800636c:	2f6f      	cmp	r7, #111	@ 0x6f
 800636e:	4853      	ldr	r0, [pc, #332]	@ (80064bc <_printf_i+0x238>)
 8006370:	6033      	str	r3, [r6, #0]
 8006372:	bf14      	ite	ne
 8006374:	230a      	movne	r3, #10
 8006376:	2308      	moveq	r3, #8
 8006378:	2100      	movs	r1, #0
 800637a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800637e:	6866      	ldr	r6, [r4, #4]
 8006380:	60a6      	str	r6, [r4, #8]
 8006382:	2e00      	cmp	r6, #0
 8006384:	bfa2      	ittt	ge
 8006386:	6821      	ldrge	r1, [r4, #0]
 8006388:	f021 0104 	bicge.w	r1, r1, #4
 800638c:	6021      	strge	r1, [r4, #0]
 800638e:	b90d      	cbnz	r5, 8006394 <_printf_i+0x110>
 8006390:	2e00      	cmp	r6, #0
 8006392:	d04b      	beq.n	800642c <_printf_i+0x1a8>
 8006394:	4616      	mov	r6, r2
 8006396:	fbb5 f1f3 	udiv	r1, r5, r3
 800639a:	fb03 5711 	mls	r7, r3, r1, r5
 800639e:	5dc7      	ldrb	r7, [r0, r7]
 80063a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063a4:	462f      	mov	r7, r5
 80063a6:	42bb      	cmp	r3, r7
 80063a8:	460d      	mov	r5, r1
 80063aa:	d9f4      	bls.n	8006396 <_printf_i+0x112>
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d10b      	bne.n	80063c8 <_printf_i+0x144>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	07df      	lsls	r7, r3, #31
 80063b4:	d508      	bpl.n	80063c8 <_printf_i+0x144>
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	6861      	ldr	r1, [r4, #4]
 80063ba:	4299      	cmp	r1, r3
 80063bc:	bfde      	ittt	le
 80063be:	2330      	movle	r3, #48	@ 0x30
 80063c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063c8:	1b92      	subs	r2, r2, r6
 80063ca:	6122      	str	r2, [r4, #16]
 80063cc:	f8cd a000 	str.w	sl, [sp]
 80063d0:	464b      	mov	r3, r9
 80063d2:	aa03      	add	r2, sp, #12
 80063d4:	4621      	mov	r1, r4
 80063d6:	4640      	mov	r0, r8
 80063d8:	f7ff fee6 	bl	80061a8 <_printf_common>
 80063dc:	3001      	adds	r0, #1
 80063de:	d14a      	bne.n	8006476 <_printf_i+0x1f2>
 80063e0:	f04f 30ff 	mov.w	r0, #4294967295
 80063e4:	b004      	add	sp, #16
 80063e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	f043 0320 	orr.w	r3, r3, #32
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	4833      	ldr	r0, [pc, #204]	@ (80064c0 <_printf_i+0x23c>)
 80063f4:	2778      	movs	r7, #120	@ 0x78
 80063f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	6831      	ldr	r1, [r6, #0]
 80063fe:	061f      	lsls	r7, r3, #24
 8006400:	f851 5b04 	ldr.w	r5, [r1], #4
 8006404:	d402      	bmi.n	800640c <_printf_i+0x188>
 8006406:	065f      	lsls	r7, r3, #25
 8006408:	bf48      	it	mi
 800640a:	b2ad      	uxthmi	r5, r5
 800640c:	6031      	str	r1, [r6, #0]
 800640e:	07d9      	lsls	r1, r3, #31
 8006410:	bf44      	itt	mi
 8006412:	f043 0320 	orrmi.w	r3, r3, #32
 8006416:	6023      	strmi	r3, [r4, #0]
 8006418:	b11d      	cbz	r5, 8006422 <_printf_i+0x19e>
 800641a:	2310      	movs	r3, #16
 800641c:	e7ac      	b.n	8006378 <_printf_i+0xf4>
 800641e:	4827      	ldr	r0, [pc, #156]	@ (80064bc <_printf_i+0x238>)
 8006420:	e7e9      	b.n	80063f6 <_printf_i+0x172>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	f023 0320 	bic.w	r3, r3, #32
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	e7f6      	b.n	800641a <_printf_i+0x196>
 800642c:	4616      	mov	r6, r2
 800642e:	e7bd      	b.n	80063ac <_printf_i+0x128>
 8006430:	6833      	ldr	r3, [r6, #0]
 8006432:	6825      	ldr	r5, [r4, #0]
 8006434:	6961      	ldr	r1, [r4, #20]
 8006436:	1d18      	adds	r0, r3, #4
 8006438:	6030      	str	r0, [r6, #0]
 800643a:	062e      	lsls	r6, r5, #24
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	d501      	bpl.n	8006444 <_printf_i+0x1c0>
 8006440:	6019      	str	r1, [r3, #0]
 8006442:	e002      	b.n	800644a <_printf_i+0x1c6>
 8006444:	0668      	lsls	r0, r5, #25
 8006446:	d5fb      	bpl.n	8006440 <_printf_i+0x1bc>
 8006448:	8019      	strh	r1, [r3, #0]
 800644a:	2300      	movs	r3, #0
 800644c:	6123      	str	r3, [r4, #16]
 800644e:	4616      	mov	r6, r2
 8006450:	e7bc      	b.n	80063cc <_printf_i+0x148>
 8006452:	6833      	ldr	r3, [r6, #0]
 8006454:	1d1a      	adds	r2, r3, #4
 8006456:	6032      	str	r2, [r6, #0]
 8006458:	681e      	ldr	r6, [r3, #0]
 800645a:	6862      	ldr	r2, [r4, #4]
 800645c:	2100      	movs	r1, #0
 800645e:	4630      	mov	r0, r6
 8006460:	f7f9 fed6 	bl	8000210 <memchr>
 8006464:	b108      	cbz	r0, 800646a <_printf_i+0x1e6>
 8006466:	1b80      	subs	r0, r0, r6
 8006468:	6060      	str	r0, [r4, #4]
 800646a:	6863      	ldr	r3, [r4, #4]
 800646c:	6123      	str	r3, [r4, #16]
 800646e:	2300      	movs	r3, #0
 8006470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006474:	e7aa      	b.n	80063cc <_printf_i+0x148>
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	4632      	mov	r2, r6
 800647a:	4649      	mov	r1, r9
 800647c:	4640      	mov	r0, r8
 800647e:	47d0      	blx	sl
 8006480:	3001      	adds	r0, #1
 8006482:	d0ad      	beq.n	80063e0 <_printf_i+0x15c>
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	079b      	lsls	r3, r3, #30
 8006488:	d413      	bmi.n	80064b2 <_printf_i+0x22e>
 800648a:	68e0      	ldr	r0, [r4, #12]
 800648c:	9b03      	ldr	r3, [sp, #12]
 800648e:	4298      	cmp	r0, r3
 8006490:	bfb8      	it	lt
 8006492:	4618      	movlt	r0, r3
 8006494:	e7a6      	b.n	80063e4 <_printf_i+0x160>
 8006496:	2301      	movs	r3, #1
 8006498:	4632      	mov	r2, r6
 800649a:	4649      	mov	r1, r9
 800649c:	4640      	mov	r0, r8
 800649e:	47d0      	blx	sl
 80064a0:	3001      	adds	r0, #1
 80064a2:	d09d      	beq.n	80063e0 <_printf_i+0x15c>
 80064a4:	3501      	adds	r5, #1
 80064a6:	68e3      	ldr	r3, [r4, #12]
 80064a8:	9903      	ldr	r1, [sp, #12]
 80064aa:	1a5b      	subs	r3, r3, r1
 80064ac:	42ab      	cmp	r3, r5
 80064ae:	dcf2      	bgt.n	8006496 <_printf_i+0x212>
 80064b0:	e7eb      	b.n	800648a <_printf_i+0x206>
 80064b2:	2500      	movs	r5, #0
 80064b4:	f104 0619 	add.w	r6, r4, #25
 80064b8:	e7f5      	b.n	80064a6 <_printf_i+0x222>
 80064ba:	bf00      	nop
 80064bc:	08008e37 	.word	0x08008e37
 80064c0:	08008e48 	.word	0x08008e48

080064c4 <std>:
 80064c4:	2300      	movs	r3, #0
 80064c6:	b510      	push	{r4, lr}
 80064c8:	4604      	mov	r4, r0
 80064ca:	e9c0 3300 	strd	r3, r3, [r0]
 80064ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064d2:	6083      	str	r3, [r0, #8]
 80064d4:	8181      	strh	r1, [r0, #12]
 80064d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80064d8:	81c2      	strh	r2, [r0, #14]
 80064da:	6183      	str	r3, [r0, #24]
 80064dc:	4619      	mov	r1, r3
 80064de:	2208      	movs	r2, #8
 80064e0:	305c      	adds	r0, #92	@ 0x5c
 80064e2:	f000 f928 	bl	8006736 <memset>
 80064e6:	4b0d      	ldr	r3, [pc, #52]	@ (800651c <std+0x58>)
 80064e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80064ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006520 <std+0x5c>)
 80064ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006524 <std+0x60>)
 80064f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <std+0x64>)
 80064f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80064f6:	4b0d      	ldr	r3, [pc, #52]	@ (800652c <std+0x68>)
 80064f8:	6224      	str	r4, [r4, #32]
 80064fa:	429c      	cmp	r4, r3
 80064fc:	d006      	beq.n	800650c <std+0x48>
 80064fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006502:	4294      	cmp	r4, r2
 8006504:	d002      	beq.n	800650c <std+0x48>
 8006506:	33d0      	adds	r3, #208	@ 0xd0
 8006508:	429c      	cmp	r4, r3
 800650a:	d105      	bne.n	8006518 <std+0x54>
 800650c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006514:	f000 b98c 	b.w	8006830 <__retarget_lock_init_recursive>
 8006518:	bd10      	pop	{r4, pc}
 800651a:	bf00      	nop
 800651c:	080066b1 	.word	0x080066b1
 8006520:	080066d3 	.word	0x080066d3
 8006524:	0800670b 	.word	0x0800670b
 8006528:	0800672f 	.word	0x0800672f
 800652c:	200007c0 	.word	0x200007c0

08006530 <stdio_exit_handler>:
 8006530:	4a02      	ldr	r2, [pc, #8]	@ (800653c <stdio_exit_handler+0xc>)
 8006532:	4903      	ldr	r1, [pc, #12]	@ (8006540 <stdio_exit_handler+0x10>)
 8006534:	4803      	ldr	r0, [pc, #12]	@ (8006544 <stdio_exit_handler+0x14>)
 8006536:	f000 b869 	b.w	800660c <_fwalk_sglue>
 800653a:	bf00      	nop
 800653c:	2000001c 	.word	0x2000001c
 8006540:	0800818d 	.word	0x0800818d
 8006544:	2000002c 	.word	0x2000002c

08006548 <cleanup_stdio>:
 8006548:	6841      	ldr	r1, [r0, #4]
 800654a:	4b0c      	ldr	r3, [pc, #48]	@ (800657c <cleanup_stdio+0x34>)
 800654c:	4299      	cmp	r1, r3
 800654e:	b510      	push	{r4, lr}
 8006550:	4604      	mov	r4, r0
 8006552:	d001      	beq.n	8006558 <cleanup_stdio+0x10>
 8006554:	f001 fe1a 	bl	800818c <_fflush_r>
 8006558:	68a1      	ldr	r1, [r4, #8]
 800655a:	4b09      	ldr	r3, [pc, #36]	@ (8006580 <cleanup_stdio+0x38>)
 800655c:	4299      	cmp	r1, r3
 800655e:	d002      	beq.n	8006566 <cleanup_stdio+0x1e>
 8006560:	4620      	mov	r0, r4
 8006562:	f001 fe13 	bl	800818c <_fflush_r>
 8006566:	68e1      	ldr	r1, [r4, #12]
 8006568:	4b06      	ldr	r3, [pc, #24]	@ (8006584 <cleanup_stdio+0x3c>)
 800656a:	4299      	cmp	r1, r3
 800656c:	d004      	beq.n	8006578 <cleanup_stdio+0x30>
 800656e:	4620      	mov	r0, r4
 8006570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006574:	f001 be0a 	b.w	800818c <_fflush_r>
 8006578:	bd10      	pop	{r4, pc}
 800657a:	bf00      	nop
 800657c:	200007c0 	.word	0x200007c0
 8006580:	20000828 	.word	0x20000828
 8006584:	20000890 	.word	0x20000890

08006588 <global_stdio_init.part.0>:
 8006588:	b510      	push	{r4, lr}
 800658a:	4b0b      	ldr	r3, [pc, #44]	@ (80065b8 <global_stdio_init.part.0+0x30>)
 800658c:	4c0b      	ldr	r4, [pc, #44]	@ (80065bc <global_stdio_init.part.0+0x34>)
 800658e:	4a0c      	ldr	r2, [pc, #48]	@ (80065c0 <global_stdio_init.part.0+0x38>)
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	4620      	mov	r0, r4
 8006594:	2200      	movs	r2, #0
 8006596:	2104      	movs	r1, #4
 8006598:	f7ff ff94 	bl	80064c4 <std>
 800659c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80065a0:	2201      	movs	r2, #1
 80065a2:	2109      	movs	r1, #9
 80065a4:	f7ff ff8e 	bl	80064c4 <std>
 80065a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80065ac:	2202      	movs	r2, #2
 80065ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065b2:	2112      	movs	r1, #18
 80065b4:	f7ff bf86 	b.w	80064c4 <std>
 80065b8:	200008f8 	.word	0x200008f8
 80065bc:	200007c0 	.word	0x200007c0
 80065c0:	08006531 	.word	0x08006531

080065c4 <__sfp_lock_acquire>:
 80065c4:	4801      	ldr	r0, [pc, #4]	@ (80065cc <__sfp_lock_acquire+0x8>)
 80065c6:	f000 b934 	b.w	8006832 <__retarget_lock_acquire_recursive>
 80065ca:	bf00      	nop
 80065cc:	20000901 	.word	0x20000901

080065d0 <__sfp_lock_release>:
 80065d0:	4801      	ldr	r0, [pc, #4]	@ (80065d8 <__sfp_lock_release+0x8>)
 80065d2:	f000 b92f 	b.w	8006834 <__retarget_lock_release_recursive>
 80065d6:	bf00      	nop
 80065d8:	20000901 	.word	0x20000901

080065dc <__sinit>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	4604      	mov	r4, r0
 80065e0:	f7ff fff0 	bl	80065c4 <__sfp_lock_acquire>
 80065e4:	6a23      	ldr	r3, [r4, #32]
 80065e6:	b11b      	cbz	r3, 80065f0 <__sinit+0x14>
 80065e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ec:	f7ff bff0 	b.w	80065d0 <__sfp_lock_release>
 80065f0:	4b04      	ldr	r3, [pc, #16]	@ (8006604 <__sinit+0x28>)
 80065f2:	6223      	str	r3, [r4, #32]
 80065f4:	4b04      	ldr	r3, [pc, #16]	@ (8006608 <__sinit+0x2c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f5      	bne.n	80065e8 <__sinit+0xc>
 80065fc:	f7ff ffc4 	bl	8006588 <global_stdio_init.part.0>
 8006600:	e7f2      	b.n	80065e8 <__sinit+0xc>
 8006602:	bf00      	nop
 8006604:	08006549 	.word	0x08006549
 8006608:	200008f8 	.word	0x200008f8

0800660c <_fwalk_sglue>:
 800660c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006610:	4607      	mov	r7, r0
 8006612:	4688      	mov	r8, r1
 8006614:	4614      	mov	r4, r2
 8006616:	2600      	movs	r6, #0
 8006618:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800661c:	f1b9 0901 	subs.w	r9, r9, #1
 8006620:	d505      	bpl.n	800662e <_fwalk_sglue+0x22>
 8006622:	6824      	ldr	r4, [r4, #0]
 8006624:	2c00      	cmp	r4, #0
 8006626:	d1f7      	bne.n	8006618 <_fwalk_sglue+0xc>
 8006628:	4630      	mov	r0, r6
 800662a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800662e:	89ab      	ldrh	r3, [r5, #12]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d907      	bls.n	8006644 <_fwalk_sglue+0x38>
 8006634:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006638:	3301      	adds	r3, #1
 800663a:	d003      	beq.n	8006644 <_fwalk_sglue+0x38>
 800663c:	4629      	mov	r1, r5
 800663e:	4638      	mov	r0, r7
 8006640:	47c0      	blx	r8
 8006642:	4306      	orrs	r6, r0
 8006644:	3568      	adds	r5, #104	@ 0x68
 8006646:	e7e9      	b.n	800661c <_fwalk_sglue+0x10>

08006648 <sniprintf>:
 8006648:	b40c      	push	{r2, r3}
 800664a:	b530      	push	{r4, r5, lr}
 800664c:	4b17      	ldr	r3, [pc, #92]	@ (80066ac <sniprintf+0x64>)
 800664e:	1e0c      	subs	r4, r1, #0
 8006650:	681d      	ldr	r5, [r3, #0]
 8006652:	b09d      	sub	sp, #116	@ 0x74
 8006654:	da08      	bge.n	8006668 <sniprintf+0x20>
 8006656:	238b      	movs	r3, #139	@ 0x8b
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	f04f 30ff 	mov.w	r0, #4294967295
 800665e:	b01d      	add	sp, #116	@ 0x74
 8006660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006664:	b002      	add	sp, #8
 8006666:	4770      	bx	lr
 8006668:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800666c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006670:	bf14      	ite	ne
 8006672:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006676:	4623      	moveq	r3, r4
 8006678:	9304      	str	r3, [sp, #16]
 800667a:	9307      	str	r3, [sp, #28]
 800667c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006680:	9002      	str	r0, [sp, #8]
 8006682:	9006      	str	r0, [sp, #24]
 8006684:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006688:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800668a:	ab21      	add	r3, sp, #132	@ 0x84
 800668c:	a902      	add	r1, sp, #8
 800668e:	4628      	mov	r0, r5
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	f001 fbfb 	bl	8007e8c <_svfiprintf_r>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	bfbc      	itt	lt
 800669a:	238b      	movlt	r3, #139	@ 0x8b
 800669c:	602b      	strlt	r3, [r5, #0]
 800669e:	2c00      	cmp	r4, #0
 80066a0:	d0dd      	beq.n	800665e <sniprintf+0x16>
 80066a2:	9b02      	ldr	r3, [sp, #8]
 80066a4:	2200      	movs	r2, #0
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	e7d9      	b.n	800665e <sniprintf+0x16>
 80066aa:	bf00      	nop
 80066ac:	20000028 	.word	0x20000028

080066b0 <__sread>:
 80066b0:	b510      	push	{r4, lr}
 80066b2:	460c      	mov	r4, r1
 80066b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b8:	f000 f86c 	bl	8006794 <_read_r>
 80066bc:	2800      	cmp	r0, #0
 80066be:	bfab      	itete	ge
 80066c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80066c2:	89a3      	ldrhlt	r3, [r4, #12]
 80066c4:	181b      	addge	r3, r3, r0
 80066c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066ca:	bfac      	ite	ge
 80066cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066ce:	81a3      	strhlt	r3, [r4, #12]
 80066d0:	bd10      	pop	{r4, pc}

080066d2 <__swrite>:
 80066d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d6:	461f      	mov	r7, r3
 80066d8:	898b      	ldrh	r3, [r1, #12]
 80066da:	05db      	lsls	r3, r3, #23
 80066dc:	4605      	mov	r5, r0
 80066de:	460c      	mov	r4, r1
 80066e0:	4616      	mov	r6, r2
 80066e2:	d505      	bpl.n	80066f0 <__swrite+0x1e>
 80066e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e8:	2302      	movs	r3, #2
 80066ea:	2200      	movs	r2, #0
 80066ec:	f000 f840 	bl	8006770 <_lseek_r>
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066fa:	81a3      	strh	r3, [r4, #12]
 80066fc:	4632      	mov	r2, r6
 80066fe:	463b      	mov	r3, r7
 8006700:	4628      	mov	r0, r5
 8006702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006706:	f000 b857 	b.w	80067b8 <_write_r>

0800670a <__sseek>:
 800670a:	b510      	push	{r4, lr}
 800670c:	460c      	mov	r4, r1
 800670e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006712:	f000 f82d 	bl	8006770 <_lseek_r>
 8006716:	1c43      	adds	r3, r0, #1
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	bf15      	itete	ne
 800671c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800671e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006722:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006726:	81a3      	strheq	r3, [r4, #12]
 8006728:	bf18      	it	ne
 800672a:	81a3      	strhne	r3, [r4, #12]
 800672c:	bd10      	pop	{r4, pc}

0800672e <__sclose>:
 800672e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006732:	f000 b80d 	b.w	8006750 <_close_r>

08006736 <memset>:
 8006736:	4402      	add	r2, r0
 8006738:	4603      	mov	r3, r0
 800673a:	4293      	cmp	r3, r2
 800673c:	d100      	bne.n	8006740 <memset+0xa>
 800673e:	4770      	bx	lr
 8006740:	f803 1b01 	strb.w	r1, [r3], #1
 8006744:	e7f9      	b.n	800673a <memset+0x4>
	...

08006748 <_localeconv_r>:
 8006748:	4800      	ldr	r0, [pc, #0]	@ (800674c <_localeconv_r+0x4>)
 800674a:	4770      	bx	lr
 800674c:	20000168 	.word	0x20000168

08006750 <_close_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d06      	ldr	r5, [pc, #24]	@ (800676c <_close_r+0x1c>)
 8006754:	2300      	movs	r3, #0
 8006756:	4604      	mov	r4, r0
 8006758:	4608      	mov	r0, r1
 800675a:	602b      	str	r3, [r5, #0]
 800675c:	f7fb fd7a 	bl	8002254 <_close>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_close_r+0x1a>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_close_r+0x1a>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	200008fc 	.word	0x200008fc

08006770 <_lseek_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4d07      	ldr	r5, [pc, #28]	@ (8006790 <_lseek_r+0x20>)
 8006774:	4604      	mov	r4, r0
 8006776:	4608      	mov	r0, r1
 8006778:	4611      	mov	r1, r2
 800677a:	2200      	movs	r2, #0
 800677c:	602a      	str	r2, [r5, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	f7fb fd8f 	bl	80022a2 <_lseek>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_lseek_r+0x1e>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_lseek_r+0x1e>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	200008fc 	.word	0x200008fc

08006794 <_read_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d07      	ldr	r5, [pc, #28]	@ (80067b4 <_read_r+0x20>)
 8006798:	4604      	mov	r4, r0
 800679a:	4608      	mov	r0, r1
 800679c:	4611      	mov	r1, r2
 800679e:	2200      	movs	r2, #0
 80067a0:	602a      	str	r2, [r5, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	f7fb fd1d 	bl	80021e2 <_read>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d102      	bne.n	80067b2 <_read_r+0x1e>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	b103      	cbz	r3, 80067b2 <_read_r+0x1e>
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	200008fc 	.word	0x200008fc

080067b8 <_write_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d07      	ldr	r5, [pc, #28]	@ (80067d8 <_write_r+0x20>)
 80067bc:	4604      	mov	r4, r0
 80067be:	4608      	mov	r0, r1
 80067c0:	4611      	mov	r1, r2
 80067c2:	2200      	movs	r2, #0
 80067c4:	602a      	str	r2, [r5, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f7fb fd28 	bl	800221c <_write>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d102      	bne.n	80067d6 <_write_r+0x1e>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	b103      	cbz	r3, 80067d6 <_write_r+0x1e>
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	200008fc 	.word	0x200008fc

080067dc <__errno>:
 80067dc:	4b01      	ldr	r3, [pc, #4]	@ (80067e4 <__errno+0x8>)
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20000028 	.word	0x20000028

080067e8 <__libc_init_array>:
 80067e8:	b570      	push	{r4, r5, r6, lr}
 80067ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006820 <__libc_init_array+0x38>)
 80067ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006824 <__libc_init_array+0x3c>)
 80067ee:	1b64      	subs	r4, r4, r5
 80067f0:	10a4      	asrs	r4, r4, #2
 80067f2:	2600      	movs	r6, #0
 80067f4:	42a6      	cmp	r6, r4
 80067f6:	d109      	bne.n	800680c <__libc_init_array+0x24>
 80067f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006828 <__libc_init_array+0x40>)
 80067fa:	4c0c      	ldr	r4, [pc, #48]	@ (800682c <__libc_init_array+0x44>)
 80067fc:	f002 f864 	bl	80088c8 <_init>
 8006800:	1b64      	subs	r4, r4, r5
 8006802:	10a4      	asrs	r4, r4, #2
 8006804:	2600      	movs	r6, #0
 8006806:	42a6      	cmp	r6, r4
 8006808:	d105      	bne.n	8006816 <__libc_init_array+0x2e>
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006810:	4798      	blx	r3
 8006812:	3601      	adds	r6, #1
 8006814:	e7ee      	b.n	80067f4 <__libc_init_array+0xc>
 8006816:	f855 3b04 	ldr.w	r3, [r5], #4
 800681a:	4798      	blx	r3
 800681c:	3601      	adds	r6, #1
 800681e:	e7f2      	b.n	8006806 <__libc_init_array+0x1e>
 8006820:	080090a0 	.word	0x080090a0
 8006824:	080090a0 	.word	0x080090a0
 8006828:	080090a0 	.word	0x080090a0
 800682c:	080090a4 	.word	0x080090a4

08006830 <__retarget_lock_init_recursive>:
 8006830:	4770      	bx	lr

08006832 <__retarget_lock_acquire_recursive>:
 8006832:	4770      	bx	lr

08006834 <__retarget_lock_release_recursive>:
 8006834:	4770      	bx	lr

08006836 <quorem>:
 8006836:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683a:	6903      	ldr	r3, [r0, #16]
 800683c:	690c      	ldr	r4, [r1, #16]
 800683e:	42a3      	cmp	r3, r4
 8006840:	4607      	mov	r7, r0
 8006842:	db7e      	blt.n	8006942 <quorem+0x10c>
 8006844:	3c01      	subs	r4, #1
 8006846:	f101 0814 	add.w	r8, r1, #20
 800684a:	00a3      	lsls	r3, r4, #2
 800684c:	f100 0514 	add.w	r5, r0, #20
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800685c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006860:	3301      	adds	r3, #1
 8006862:	429a      	cmp	r2, r3
 8006864:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006868:	fbb2 f6f3 	udiv	r6, r2, r3
 800686c:	d32e      	bcc.n	80068cc <quorem+0x96>
 800686e:	f04f 0a00 	mov.w	sl, #0
 8006872:	46c4      	mov	ip, r8
 8006874:	46ae      	mov	lr, r5
 8006876:	46d3      	mov	fp, sl
 8006878:	f85c 3b04 	ldr.w	r3, [ip], #4
 800687c:	b298      	uxth	r0, r3
 800687e:	fb06 a000 	mla	r0, r6, r0, sl
 8006882:	0c02      	lsrs	r2, r0, #16
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	fb06 2303 	mla	r3, r6, r3, r2
 800688a:	f8de 2000 	ldr.w	r2, [lr]
 800688e:	b280      	uxth	r0, r0
 8006890:	b292      	uxth	r2, r2
 8006892:	1a12      	subs	r2, r2, r0
 8006894:	445a      	add	r2, fp
 8006896:	f8de 0000 	ldr.w	r0, [lr]
 800689a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800689e:	b29b      	uxth	r3, r3
 80068a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80068a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80068a8:	b292      	uxth	r2, r2
 80068aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80068ae:	45e1      	cmp	r9, ip
 80068b0:	f84e 2b04 	str.w	r2, [lr], #4
 80068b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80068b8:	d2de      	bcs.n	8006878 <quorem+0x42>
 80068ba:	9b00      	ldr	r3, [sp, #0]
 80068bc:	58eb      	ldr	r3, [r5, r3]
 80068be:	b92b      	cbnz	r3, 80068cc <quorem+0x96>
 80068c0:	9b01      	ldr	r3, [sp, #4]
 80068c2:	3b04      	subs	r3, #4
 80068c4:	429d      	cmp	r5, r3
 80068c6:	461a      	mov	r2, r3
 80068c8:	d32f      	bcc.n	800692a <quorem+0xf4>
 80068ca:	613c      	str	r4, [r7, #16]
 80068cc:	4638      	mov	r0, r7
 80068ce:	f001 f979 	bl	8007bc4 <__mcmp>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	db25      	blt.n	8006922 <quorem+0xec>
 80068d6:	4629      	mov	r1, r5
 80068d8:	2000      	movs	r0, #0
 80068da:	f858 2b04 	ldr.w	r2, [r8], #4
 80068de:	f8d1 c000 	ldr.w	ip, [r1]
 80068e2:	fa1f fe82 	uxth.w	lr, r2
 80068e6:	fa1f f38c 	uxth.w	r3, ip
 80068ea:	eba3 030e 	sub.w	r3, r3, lr
 80068ee:	4403      	add	r3, r0
 80068f0:	0c12      	lsrs	r2, r2, #16
 80068f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006900:	45c1      	cmp	r9, r8
 8006902:	f841 3b04 	str.w	r3, [r1], #4
 8006906:	ea4f 4022 	mov.w	r0, r2, asr #16
 800690a:	d2e6      	bcs.n	80068da <quorem+0xa4>
 800690c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006910:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006914:	b922      	cbnz	r2, 8006920 <quorem+0xea>
 8006916:	3b04      	subs	r3, #4
 8006918:	429d      	cmp	r5, r3
 800691a:	461a      	mov	r2, r3
 800691c:	d30b      	bcc.n	8006936 <quorem+0x100>
 800691e:	613c      	str	r4, [r7, #16]
 8006920:	3601      	adds	r6, #1
 8006922:	4630      	mov	r0, r6
 8006924:	b003      	add	sp, #12
 8006926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	3b04      	subs	r3, #4
 800692e:	2a00      	cmp	r2, #0
 8006930:	d1cb      	bne.n	80068ca <quorem+0x94>
 8006932:	3c01      	subs	r4, #1
 8006934:	e7c6      	b.n	80068c4 <quorem+0x8e>
 8006936:	6812      	ldr	r2, [r2, #0]
 8006938:	3b04      	subs	r3, #4
 800693a:	2a00      	cmp	r2, #0
 800693c:	d1ef      	bne.n	800691e <quorem+0xe8>
 800693e:	3c01      	subs	r4, #1
 8006940:	e7ea      	b.n	8006918 <quorem+0xe2>
 8006942:	2000      	movs	r0, #0
 8006944:	e7ee      	b.n	8006924 <quorem+0xee>
	...

08006948 <_dtoa_r>:
 8006948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694c:	69c7      	ldr	r7, [r0, #28]
 800694e:	b099      	sub	sp, #100	@ 0x64
 8006950:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006954:	ec55 4b10 	vmov	r4, r5, d0
 8006958:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800695a:	9109      	str	r1, [sp, #36]	@ 0x24
 800695c:	4683      	mov	fp, r0
 800695e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006960:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006962:	b97f      	cbnz	r7, 8006984 <_dtoa_r+0x3c>
 8006964:	2010      	movs	r0, #16
 8006966:	f000 fdfd 	bl	8007564 <malloc>
 800696a:	4602      	mov	r2, r0
 800696c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006970:	b920      	cbnz	r0, 800697c <_dtoa_r+0x34>
 8006972:	4ba7      	ldr	r3, [pc, #668]	@ (8006c10 <_dtoa_r+0x2c8>)
 8006974:	21ef      	movs	r1, #239	@ 0xef
 8006976:	48a7      	ldr	r0, [pc, #668]	@ (8006c14 <_dtoa_r+0x2cc>)
 8006978:	f001 fcfc 	bl	8008374 <__assert_func>
 800697c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006980:	6007      	str	r7, [r0, #0]
 8006982:	60c7      	str	r7, [r0, #12]
 8006984:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006988:	6819      	ldr	r1, [r3, #0]
 800698a:	b159      	cbz	r1, 80069a4 <_dtoa_r+0x5c>
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	604a      	str	r2, [r1, #4]
 8006990:	2301      	movs	r3, #1
 8006992:	4093      	lsls	r3, r2
 8006994:	608b      	str	r3, [r1, #8]
 8006996:	4658      	mov	r0, fp
 8006998:	f000 feda 	bl	8007750 <_Bfree>
 800699c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	1e2b      	subs	r3, r5, #0
 80069a6:	bfb9      	ittee	lt
 80069a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80069ac:	9303      	strlt	r3, [sp, #12]
 80069ae:	2300      	movge	r3, #0
 80069b0:	6033      	strge	r3, [r6, #0]
 80069b2:	9f03      	ldr	r7, [sp, #12]
 80069b4:	4b98      	ldr	r3, [pc, #608]	@ (8006c18 <_dtoa_r+0x2d0>)
 80069b6:	bfbc      	itt	lt
 80069b8:	2201      	movlt	r2, #1
 80069ba:	6032      	strlt	r2, [r6, #0]
 80069bc:	43bb      	bics	r3, r7
 80069be:	d112      	bne.n	80069e6 <_dtoa_r+0x9e>
 80069c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80069c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069cc:	4323      	orrs	r3, r4
 80069ce:	f000 854d 	beq.w	800746c <_dtoa_r+0xb24>
 80069d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006c2c <_dtoa_r+0x2e4>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 854f 	beq.w	800747c <_dtoa_r+0xb34>
 80069de:	f10a 0303 	add.w	r3, sl, #3
 80069e2:	f000 bd49 	b.w	8007478 <_dtoa_r+0xb30>
 80069e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069ea:	2200      	movs	r2, #0
 80069ec:	ec51 0b17 	vmov	r0, r1, d7
 80069f0:	2300      	movs	r3, #0
 80069f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80069f6:	f7fa f887 	bl	8000b08 <__aeabi_dcmpeq>
 80069fa:	4680      	mov	r8, r0
 80069fc:	b158      	cbz	r0, 8006a16 <_dtoa_r+0xce>
 80069fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a00:	2301      	movs	r3, #1
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a06:	b113      	cbz	r3, 8006a0e <_dtoa_r+0xc6>
 8006a08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a0a:	4b84      	ldr	r3, [pc, #528]	@ (8006c1c <_dtoa_r+0x2d4>)
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006c30 <_dtoa_r+0x2e8>
 8006a12:	f000 bd33 	b.w	800747c <_dtoa_r+0xb34>
 8006a16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006a1a:	aa16      	add	r2, sp, #88	@ 0x58
 8006a1c:	a917      	add	r1, sp, #92	@ 0x5c
 8006a1e:	4658      	mov	r0, fp
 8006a20:	f001 f980 	bl	8007d24 <__d2b>
 8006a24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006a28:	4681      	mov	r9, r0
 8006a2a:	2e00      	cmp	r6, #0
 8006a2c:	d077      	beq.n	8006b1e <_dtoa_r+0x1d6>
 8006a2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006a40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006a44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006a48:	4619      	mov	r1, r3
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	4b74      	ldr	r3, [pc, #464]	@ (8006c20 <_dtoa_r+0x2d8>)
 8006a4e:	f7f9 fc3b 	bl	80002c8 <__aeabi_dsub>
 8006a52:	a369      	add	r3, pc, #420	@ (adr r3, 8006bf8 <_dtoa_r+0x2b0>)
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	f7f9 fdee 	bl	8000638 <__aeabi_dmul>
 8006a5c:	a368      	add	r3, pc, #416	@ (adr r3, 8006c00 <_dtoa_r+0x2b8>)
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	f7f9 fc33 	bl	80002cc <__adddf3>
 8006a66:	4604      	mov	r4, r0
 8006a68:	4630      	mov	r0, r6
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	f7f9 fd7a 	bl	8000564 <__aeabi_i2d>
 8006a70:	a365      	add	r3, pc, #404	@ (adr r3, 8006c08 <_dtoa_r+0x2c0>)
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	f7f9 fddf 	bl	8000638 <__aeabi_dmul>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4620      	mov	r0, r4
 8006a80:	4629      	mov	r1, r5
 8006a82:	f7f9 fc23 	bl	80002cc <__adddf3>
 8006a86:	4604      	mov	r4, r0
 8006a88:	460d      	mov	r5, r1
 8006a8a:	f7fa f885 	bl	8000b98 <__aeabi_d2iz>
 8006a8e:	2200      	movs	r2, #0
 8006a90:	4607      	mov	r7, r0
 8006a92:	2300      	movs	r3, #0
 8006a94:	4620      	mov	r0, r4
 8006a96:	4629      	mov	r1, r5
 8006a98:	f7fa f840 	bl	8000b1c <__aeabi_dcmplt>
 8006a9c:	b140      	cbz	r0, 8006ab0 <_dtoa_r+0x168>
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	f7f9 fd60 	bl	8000564 <__aeabi_i2d>
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	462b      	mov	r3, r5
 8006aa8:	f7fa f82e 	bl	8000b08 <__aeabi_dcmpeq>
 8006aac:	b900      	cbnz	r0, 8006ab0 <_dtoa_r+0x168>
 8006aae:	3f01      	subs	r7, #1
 8006ab0:	2f16      	cmp	r7, #22
 8006ab2:	d851      	bhi.n	8006b58 <_dtoa_r+0x210>
 8006ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8006c24 <_dtoa_r+0x2dc>)
 8006ab6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ac2:	f7fa f82b 	bl	8000b1c <__aeabi_dcmplt>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d048      	beq.n	8006b5c <_dtoa_r+0x214>
 8006aca:	3f01      	subs	r7, #1
 8006acc:	2300      	movs	r3, #0
 8006ace:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ad0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006ad2:	1b9b      	subs	r3, r3, r6
 8006ad4:	1e5a      	subs	r2, r3, #1
 8006ad6:	bf44      	itt	mi
 8006ad8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006adc:	2300      	movmi	r3, #0
 8006ade:	9208      	str	r2, [sp, #32]
 8006ae0:	bf54      	ite	pl
 8006ae2:	f04f 0800 	movpl.w	r8, #0
 8006ae6:	9308      	strmi	r3, [sp, #32]
 8006ae8:	2f00      	cmp	r7, #0
 8006aea:	db39      	blt.n	8006b60 <_dtoa_r+0x218>
 8006aec:	9b08      	ldr	r3, [sp, #32]
 8006aee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006af0:	443b      	add	r3, r7
 8006af2:	9308      	str	r3, [sp, #32]
 8006af4:	2300      	movs	r3, #0
 8006af6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006afa:	2b09      	cmp	r3, #9
 8006afc:	d864      	bhi.n	8006bc8 <_dtoa_r+0x280>
 8006afe:	2b05      	cmp	r3, #5
 8006b00:	bfc4      	itt	gt
 8006b02:	3b04      	subgt	r3, #4
 8006b04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b08:	f1a3 0302 	sub.w	r3, r3, #2
 8006b0c:	bfcc      	ite	gt
 8006b0e:	2400      	movgt	r4, #0
 8006b10:	2401      	movle	r4, #1
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d863      	bhi.n	8006bde <_dtoa_r+0x296>
 8006b16:	e8df f003 	tbb	[pc, r3]
 8006b1a:	372a      	.short	0x372a
 8006b1c:	5535      	.short	0x5535
 8006b1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006b22:	441e      	add	r6, r3
 8006b24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006b28:	2b20      	cmp	r3, #32
 8006b2a:	bfc1      	itttt	gt
 8006b2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006b30:	409f      	lslgt	r7, r3
 8006b32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006b36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006b3a:	bfd6      	itet	le
 8006b3c:	f1c3 0320 	rsble	r3, r3, #32
 8006b40:	ea47 0003 	orrgt.w	r0, r7, r3
 8006b44:	fa04 f003 	lslle.w	r0, r4, r3
 8006b48:	f7f9 fcfc 	bl	8000544 <__aeabi_ui2d>
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b52:	3e01      	subs	r6, #1
 8006b54:	9214      	str	r2, [sp, #80]	@ 0x50
 8006b56:	e777      	b.n	8006a48 <_dtoa_r+0x100>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e7b8      	b.n	8006ace <_dtoa_r+0x186>
 8006b5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006b5e:	e7b7      	b.n	8006ad0 <_dtoa_r+0x188>
 8006b60:	427b      	negs	r3, r7
 8006b62:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b64:	2300      	movs	r3, #0
 8006b66:	eba8 0807 	sub.w	r8, r8, r7
 8006b6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b6c:	e7c4      	b.n	8006af8 <_dtoa_r+0x1b0>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dc35      	bgt.n	8006be4 <_dtoa_r+0x29c>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	9307      	str	r3, [sp, #28]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b82:	e00b      	b.n	8006b9c <_dtoa_r+0x254>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e7f3      	b.n	8006b70 <_dtoa_r+0x228>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b8e:	18fb      	adds	r3, r7, r3
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	3301      	adds	r3, #1
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	9307      	str	r3, [sp, #28]
 8006b98:	bfb8      	it	lt
 8006b9a:	2301      	movlt	r3, #1
 8006b9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	f102 0514 	add.w	r5, r2, #20
 8006ba8:	429d      	cmp	r5, r3
 8006baa:	d91f      	bls.n	8006bec <_dtoa_r+0x2a4>
 8006bac:	6041      	str	r1, [r0, #4]
 8006bae:	4658      	mov	r0, fp
 8006bb0:	f000 fd8e 	bl	80076d0 <_Balloc>
 8006bb4:	4682      	mov	sl, r0
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d13c      	bne.n	8006c34 <_dtoa_r+0x2ec>
 8006bba:	4b1b      	ldr	r3, [pc, #108]	@ (8006c28 <_dtoa_r+0x2e0>)
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8006bc2:	e6d8      	b.n	8006976 <_dtoa_r+0x2e>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e7e0      	b.n	8006b8a <_dtoa_r+0x242>
 8006bc8:	2401      	movs	r4, #1
 8006bca:	2300      	movs	r3, #0
 8006bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bce:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	9307      	str	r3, [sp, #28]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2312      	movs	r3, #18
 8006bdc:	e7d0      	b.n	8006b80 <_dtoa_r+0x238>
 8006bde:	2301      	movs	r3, #1
 8006be0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006be2:	e7f5      	b.n	8006bd0 <_dtoa_r+0x288>
 8006be4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	9307      	str	r3, [sp, #28]
 8006bea:	e7d7      	b.n	8006b9c <_dtoa_r+0x254>
 8006bec:	3101      	adds	r1, #1
 8006bee:	0052      	lsls	r2, r2, #1
 8006bf0:	e7d8      	b.n	8006ba4 <_dtoa_r+0x25c>
 8006bf2:	bf00      	nop
 8006bf4:	f3af 8000 	nop.w
 8006bf8:	636f4361 	.word	0x636f4361
 8006bfc:	3fd287a7 	.word	0x3fd287a7
 8006c00:	8b60c8b3 	.word	0x8b60c8b3
 8006c04:	3fc68a28 	.word	0x3fc68a28
 8006c08:	509f79fb 	.word	0x509f79fb
 8006c0c:	3fd34413 	.word	0x3fd34413
 8006c10:	08008e66 	.word	0x08008e66
 8006c14:	08008e7d 	.word	0x08008e7d
 8006c18:	7ff00000 	.word	0x7ff00000
 8006c1c:	08008e36 	.word	0x08008e36
 8006c20:	3ff80000 	.word	0x3ff80000
 8006c24:	08008f78 	.word	0x08008f78
 8006c28:	08008ed5 	.word	0x08008ed5
 8006c2c:	08008e62 	.word	0x08008e62
 8006c30:	08008e35 	.word	0x08008e35
 8006c34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c38:	6018      	str	r0, [r3, #0]
 8006c3a:	9b07      	ldr	r3, [sp, #28]
 8006c3c:	2b0e      	cmp	r3, #14
 8006c3e:	f200 80a4 	bhi.w	8006d8a <_dtoa_r+0x442>
 8006c42:	2c00      	cmp	r4, #0
 8006c44:	f000 80a1 	beq.w	8006d8a <_dtoa_r+0x442>
 8006c48:	2f00      	cmp	r7, #0
 8006c4a:	dd33      	ble.n	8006cb4 <_dtoa_r+0x36c>
 8006c4c:	4bad      	ldr	r3, [pc, #692]	@ (8006f04 <_dtoa_r+0x5bc>)
 8006c4e:	f007 020f 	and.w	r2, r7, #15
 8006c52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c56:	ed93 7b00 	vldr	d7, [r3]
 8006c5a:	05f8      	lsls	r0, r7, #23
 8006c5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006c60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c64:	d516      	bpl.n	8006c94 <_dtoa_r+0x34c>
 8006c66:	4ba8      	ldr	r3, [pc, #672]	@ (8006f08 <_dtoa_r+0x5c0>)
 8006c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c70:	f7f9 fe0c 	bl	800088c <__aeabi_ddiv>
 8006c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c78:	f004 040f 	and.w	r4, r4, #15
 8006c7c:	2603      	movs	r6, #3
 8006c7e:	4da2      	ldr	r5, [pc, #648]	@ (8006f08 <_dtoa_r+0x5c0>)
 8006c80:	b954      	cbnz	r4, 8006c98 <_dtoa_r+0x350>
 8006c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c8a:	f7f9 fdff 	bl	800088c <__aeabi_ddiv>
 8006c8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c92:	e028      	b.n	8006ce6 <_dtoa_r+0x39e>
 8006c94:	2602      	movs	r6, #2
 8006c96:	e7f2      	b.n	8006c7e <_dtoa_r+0x336>
 8006c98:	07e1      	lsls	r1, r4, #31
 8006c9a:	d508      	bpl.n	8006cae <_dtoa_r+0x366>
 8006c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ca0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ca4:	f7f9 fcc8 	bl	8000638 <__aeabi_dmul>
 8006ca8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cac:	3601      	adds	r6, #1
 8006cae:	1064      	asrs	r4, r4, #1
 8006cb0:	3508      	adds	r5, #8
 8006cb2:	e7e5      	b.n	8006c80 <_dtoa_r+0x338>
 8006cb4:	f000 80d2 	beq.w	8006e5c <_dtoa_r+0x514>
 8006cb8:	427c      	negs	r4, r7
 8006cba:	4b92      	ldr	r3, [pc, #584]	@ (8006f04 <_dtoa_r+0x5bc>)
 8006cbc:	4d92      	ldr	r5, [pc, #584]	@ (8006f08 <_dtoa_r+0x5c0>)
 8006cbe:	f004 020f 	and.w	r2, r4, #15
 8006cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cce:	f7f9 fcb3 	bl	8000638 <__aeabi_dmul>
 8006cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd6:	1124      	asrs	r4, r4, #4
 8006cd8:	2300      	movs	r3, #0
 8006cda:	2602      	movs	r6, #2
 8006cdc:	2c00      	cmp	r4, #0
 8006cde:	f040 80b2 	bne.w	8006e46 <_dtoa_r+0x4fe>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1d3      	bne.n	8006c8e <_dtoa_r+0x346>
 8006ce6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ce8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80b7 	beq.w	8006e60 <_dtoa_r+0x518>
 8006cf2:	4b86      	ldr	r3, [pc, #536]	@ (8006f0c <_dtoa_r+0x5c4>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	f7f9 ff0f 	bl	8000b1c <__aeabi_dcmplt>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	f000 80ae 	beq.w	8006e60 <_dtoa_r+0x518>
 8006d04:	9b07      	ldr	r3, [sp, #28]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 80aa 	beq.w	8006e60 <_dtoa_r+0x518>
 8006d0c:	9b00      	ldr	r3, [sp, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	dd37      	ble.n	8006d82 <_dtoa_r+0x43a>
 8006d12:	1e7b      	subs	r3, r7, #1
 8006d14:	9304      	str	r3, [sp, #16]
 8006d16:	4620      	mov	r0, r4
 8006d18:	4b7d      	ldr	r3, [pc, #500]	@ (8006f10 <_dtoa_r+0x5c8>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	f7f9 fc8b 	bl	8000638 <__aeabi_dmul>
 8006d22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d26:	9c00      	ldr	r4, [sp, #0]
 8006d28:	3601      	adds	r6, #1
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7f9 fc1a 	bl	8000564 <__aeabi_i2d>
 8006d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d34:	f7f9 fc80 	bl	8000638 <__aeabi_dmul>
 8006d38:	4b76      	ldr	r3, [pc, #472]	@ (8006f14 <_dtoa_r+0x5cc>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f7f9 fac6 	bl	80002cc <__adddf3>
 8006d40:	4605      	mov	r5, r0
 8006d42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006d46:	2c00      	cmp	r4, #0
 8006d48:	f040 808d 	bne.w	8006e66 <_dtoa_r+0x51e>
 8006d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d50:	4b71      	ldr	r3, [pc, #452]	@ (8006f18 <_dtoa_r+0x5d0>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	f7f9 fab8 	bl	80002c8 <__aeabi_dsub>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d60:	462a      	mov	r2, r5
 8006d62:	4633      	mov	r3, r6
 8006d64:	f7f9 fef8 	bl	8000b58 <__aeabi_dcmpgt>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	f040 828b 	bne.w	8007284 <_dtoa_r+0x93c>
 8006d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d72:	462a      	mov	r2, r5
 8006d74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d78:	f7f9 fed0 	bl	8000b1c <__aeabi_dcmplt>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	f040 8128 	bne.w	8006fd2 <_dtoa_r+0x68a>
 8006d82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f2c0 815a 	blt.w	8007046 <_dtoa_r+0x6fe>
 8006d92:	2f0e      	cmp	r7, #14
 8006d94:	f300 8157 	bgt.w	8007046 <_dtoa_r+0x6fe>
 8006d98:	4b5a      	ldr	r3, [pc, #360]	@ (8006f04 <_dtoa_r+0x5bc>)
 8006d9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d9e:	ed93 7b00 	vldr	d7, [r3]
 8006da2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	ed8d 7b00 	vstr	d7, [sp]
 8006daa:	da03      	bge.n	8006db4 <_dtoa_r+0x46c>
 8006dac:	9b07      	ldr	r3, [sp, #28]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f340 8101 	ble.w	8006fb6 <_dtoa_r+0x66e>
 8006db4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006db8:	4656      	mov	r6, sl
 8006dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	f7f9 fd63 	bl	800088c <__aeabi_ddiv>
 8006dc6:	f7f9 fee7 	bl	8000b98 <__aeabi_d2iz>
 8006dca:	4680      	mov	r8, r0
 8006dcc:	f7f9 fbca 	bl	8000564 <__aeabi_i2d>
 8006dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dd4:	f7f9 fc30 	bl	8000638 <__aeabi_dmul>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4620      	mov	r0, r4
 8006dde:	4629      	mov	r1, r5
 8006de0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006de4:	f7f9 fa70 	bl	80002c8 <__aeabi_dsub>
 8006de8:	f806 4b01 	strb.w	r4, [r6], #1
 8006dec:	9d07      	ldr	r5, [sp, #28]
 8006dee:	eba6 040a 	sub.w	r4, r6, sl
 8006df2:	42a5      	cmp	r5, r4
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	f040 8117 	bne.w	800702a <_dtoa_r+0x6e2>
 8006dfc:	f7f9 fa66 	bl	80002cc <__adddf3>
 8006e00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e04:	4604      	mov	r4, r0
 8006e06:	460d      	mov	r5, r1
 8006e08:	f7f9 fea6 	bl	8000b58 <__aeabi_dcmpgt>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	f040 80f9 	bne.w	8007004 <_dtoa_r+0x6bc>
 8006e12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e16:	4620      	mov	r0, r4
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7f9 fe75 	bl	8000b08 <__aeabi_dcmpeq>
 8006e1e:	b118      	cbz	r0, 8006e28 <_dtoa_r+0x4e0>
 8006e20:	f018 0f01 	tst.w	r8, #1
 8006e24:	f040 80ee 	bne.w	8007004 <_dtoa_r+0x6bc>
 8006e28:	4649      	mov	r1, r9
 8006e2a:	4658      	mov	r0, fp
 8006e2c:	f000 fc90 	bl	8007750 <_Bfree>
 8006e30:	2300      	movs	r3, #0
 8006e32:	7033      	strb	r3, [r6, #0]
 8006e34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e36:	3701      	adds	r7, #1
 8006e38:	601f      	str	r7, [r3, #0]
 8006e3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 831d 	beq.w	800747c <_dtoa_r+0xb34>
 8006e42:	601e      	str	r6, [r3, #0]
 8006e44:	e31a      	b.n	800747c <_dtoa_r+0xb34>
 8006e46:	07e2      	lsls	r2, r4, #31
 8006e48:	d505      	bpl.n	8006e56 <_dtoa_r+0x50e>
 8006e4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e4e:	f7f9 fbf3 	bl	8000638 <__aeabi_dmul>
 8006e52:	3601      	adds	r6, #1
 8006e54:	2301      	movs	r3, #1
 8006e56:	1064      	asrs	r4, r4, #1
 8006e58:	3508      	adds	r5, #8
 8006e5a:	e73f      	b.n	8006cdc <_dtoa_r+0x394>
 8006e5c:	2602      	movs	r6, #2
 8006e5e:	e742      	b.n	8006ce6 <_dtoa_r+0x39e>
 8006e60:	9c07      	ldr	r4, [sp, #28]
 8006e62:	9704      	str	r7, [sp, #16]
 8006e64:	e761      	b.n	8006d2a <_dtoa_r+0x3e2>
 8006e66:	4b27      	ldr	r3, [pc, #156]	@ (8006f04 <_dtoa_r+0x5bc>)
 8006e68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e72:	4454      	add	r4, sl
 8006e74:	2900      	cmp	r1, #0
 8006e76:	d053      	beq.n	8006f20 <_dtoa_r+0x5d8>
 8006e78:	4928      	ldr	r1, [pc, #160]	@ (8006f1c <_dtoa_r+0x5d4>)
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	f7f9 fd06 	bl	800088c <__aeabi_ddiv>
 8006e80:	4633      	mov	r3, r6
 8006e82:	462a      	mov	r2, r5
 8006e84:	f7f9 fa20 	bl	80002c8 <__aeabi_dsub>
 8006e88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e8c:	4656      	mov	r6, sl
 8006e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e92:	f7f9 fe81 	bl	8000b98 <__aeabi_d2iz>
 8006e96:	4605      	mov	r5, r0
 8006e98:	f7f9 fb64 	bl	8000564 <__aeabi_i2d>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ea4:	f7f9 fa10 	bl	80002c8 <__aeabi_dsub>
 8006ea8:	3530      	adds	r5, #48	@ 0x30
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006eb2:	f806 5b01 	strb.w	r5, [r6], #1
 8006eb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006eba:	f7f9 fe2f 	bl	8000b1c <__aeabi_dcmplt>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d171      	bne.n	8006fa6 <_dtoa_r+0x65e>
 8006ec2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ec6:	4911      	ldr	r1, [pc, #68]	@ (8006f0c <_dtoa_r+0x5c4>)
 8006ec8:	2000      	movs	r0, #0
 8006eca:	f7f9 f9fd 	bl	80002c8 <__aeabi_dsub>
 8006ece:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ed2:	f7f9 fe23 	bl	8000b1c <__aeabi_dcmplt>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f040 8095 	bne.w	8007006 <_dtoa_r+0x6be>
 8006edc:	42a6      	cmp	r6, r4
 8006ede:	f43f af50 	beq.w	8006d82 <_dtoa_r+0x43a>
 8006ee2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f10 <_dtoa_r+0x5c8>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f7f9 fba5 	bl	8000638 <__aeabi_dmul>
 8006eee:	4b08      	ldr	r3, [pc, #32]	@ (8006f10 <_dtoa_r+0x5c8>)
 8006ef0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006efa:	f7f9 fb9d 	bl	8000638 <__aeabi_dmul>
 8006efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f02:	e7c4      	b.n	8006e8e <_dtoa_r+0x546>
 8006f04:	08008f78 	.word	0x08008f78
 8006f08:	08008f50 	.word	0x08008f50
 8006f0c:	3ff00000 	.word	0x3ff00000
 8006f10:	40240000 	.word	0x40240000
 8006f14:	401c0000 	.word	0x401c0000
 8006f18:	40140000 	.word	0x40140000
 8006f1c:	3fe00000 	.word	0x3fe00000
 8006f20:	4631      	mov	r1, r6
 8006f22:	4628      	mov	r0, r5
 8006f24:	f7f9 fb88 	bl	8000638 <__aeabi_dmul>
 8006f28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f2c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006f2e:	4656      	mov	r6, sl
 8006f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f34:	f7f9 fe30 	bl	8000b98 <__aeabi_d2iz>
 8006f38:	4605      	mov	r5, r0
 8006f3a:	f7f9 fb13 	bl	8000564 <__aeabi_i2d>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f46:	f7f9 f9bf 	bl	80002c8 <__aeabi_dsub>
 8006f4a:	3530      	adds	r5, #48	@ 0x30
 8006f4c:	f806 5b01 	strb.w	r5, [r6], #1
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	42a6      	cmp	r6, r4
 8006f56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f5a:	f04f 0200 	mov.w	r2, #0
 8006f5e:	d124      	bne.n	8006faa <_dtoa_r+0x662>
 8006f60:	4bac      	ldr	r3, [pc, #688]	@ (8007214 <_dtoa_r+0x8cc>)
 8006f62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f66:	f7f9 f9b1 	bl	80002cc <__adddf3>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f72:	f7f9 fdf1 	bl	8000b58 <__aeabi_dcmpgt>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d145      	bne.n	8007006 <_dtoa_r+0x6be>
 8006f7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f7e:	49a5      	ldr	r1, [pc, #660]	@ (8007214 <_dtoa_r+0x8cc>)
 8006f80:	2000      	movs	r0, #0
 8006f82:	f7f9 f9a1 	bl	80002c8 <__aeabi_dsub>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f8e:	f7f9 fdc5 	bl	8000b1c <__aeabi_dcmplt>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	f43f aef5 	beq.w	8006d82 <_dtoa_r+0x43a>
 8006f98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006f9a:	1e73      	subs	r3, r6, #1
 8006f9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006fa2:	2b30      	cmp	r3, #48	@ 0x30
 8006fa4:	d0f8      	beq.n	8006f98 <_dtoa_r+0x650>
 8006fa6:	9f04      	ldr	r7, [sp, #16]
 8006fa8:	e73e      	b.n	8006e28 <_dtoa_r+0x4e0>
 8006faa:	4b9b      	ldr	r3, [pc, #620]	@ (8007218 <_dtoa_r+0x8d0>)
 8006fac:	f7f9 fb44 	bl	8000638 <__aeabi_dmul>
 8006fb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fb4:	e7bc      	b.n	8006f30 <_dtoa_r+0x5e8>
 8006fb6:	d10c      	bne.n	8006fd2 <_dtoa_r+0x68a>
 8006fb8:	4b98      	ldr	r3, [pc, #608]	@ (800721c <_dtoa_r+0x8d4>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fc0:	f7f9 fb3a 	bl	8000638 <__aeabi_dmul>
 8006fc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fc8:	f7f9 fdbc 	bl	8000b44 <__aeabi_dcmpge>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	f000 8157 	beq.w	8007280 <_dtoa_r+0x938>
 8006fd2:	2400      	movs	r4, #0
 8006fd4:	4625      	mov	r5, r4
 8006fd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	9304      	str	r3, [sp, #16]
 8006fdc:	4656      	mov	r6, sl
 8006fde:	2700      	movs	r7, #0
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	4658      	mov	r0, fp
 8006fe4:	f000 fbb4 	bl	8007750 <_Bfree>
 8006fe8:	2d00      	cmp	r5, #0
 8006fea:	d0dc      	beq.n	8006fa6 <_dtoa_r+0x65e>
 8006fec:	b12f      	cbz	r7, 8006ffa <_dtoa_r+0x6b2>
 8006fee:	42af      	cmp	r7, r5
 8006ff0:	d003      	beq.n	8006ffa <_dtoa_r+0x6b2>
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	4658      	mov	r0, fp
 8006ff6:	f000 fbab 	bl	8007750 <_Bfree>
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	4658      	mov	r0, fp
 8006ffe:	f000 fba7 	bl	8007750 <_Bfree>
 8007002:	e7d0      	b.n	8006fa6 <_dtoa_r+0x65e>
 8007004:	9704      	str	r7, [sp, #16]
 8007006:	4633      	mov	r3, r6
 8007008:	461e      	mov	r6, r3
 800700a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800700e:	2a39      	cmp	r2, #57	@ 0x39
 8007010:	d107      	bne.n	8007022 <_dtoa_r+0x6da>
 8007012:	459a      	cmp	sl, r3
 8007014:	d1f8      	bne.n	8007008 <_dtoa_r+0x6c0>
 8007016:	9a04      	ldr	r2, [sp, #16]
 8007018:	3201      	adds	r2, #1
 800701a:	9204      	str	r2, [sp, #16]
 800701c:	2230      	movs	r2, #48	@ 0x30
 800701e:	f88a 2000 	strb.w	r2, [sl]
 8007022:	781a      	ldrb	r2, [r3, #0]
 8007024:	3201      	adds	r2, #1
 8007026:	701a      	strb	r2, [r3, #0]
 8007028:	e7bd      	b.n	8006fa6 <_dtoa_r+0x65e>
 800702a:	4b7b      	ldr	r3, [pc, #492]	@ (8007218 <_dtoa_r+0x8d0>)
 800702c:	2200      	movs	r2, #0
 800702e:	f7f9 fb03 	bl	8000638 <__aeabi_dmul>
 8007032:	2200      	movs	r2, #0
 8007034:	2300      	movs	r3, #0
 8007036:	4604      	mov	r4, r0
 8007038:	460d      	mov	r5, r1
 800703a:	f7f9 fd65 	bl	8000b08 <__aeabi_dcmpeq>
 800703e:	2800      	cmp	r0, #0
 8007040:	f43f aebb 	beq.w	8006dba <_dtoa_r+0x472>
 8007044:	e6f0      	b.n	8006e28 <_dtoa_r+0x4e0>
 8007046:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007048:	2a00      	cmp	r2, #0
 800704a:	f000 80db 	beq.w	8007204 <_dtoa_r+0x8bc>
 800704e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007050:	2a01      	cmp	r2, #1
 8007052:	f300 80bf 	bgt.w	80071d4 <_dtoa_r+0x88c>
 8007056:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007058:	2a00      	cmp	r2, #0
 800705a:	f000 80b7 	beq.w	80071cc <_dtoa_r+0x884>
 800705e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007062:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007064:	4646      	mov	r6, r8
 8007066:	9a08      	ldr	r2, [sp, #32]
 8007068:	2101      	movs	r1, #1
 800706a:	441a      	add	r2, r3
 800706c:	4658      	mov	r0, fp
 800706e:	4498      	add	r8, r3
 8007070:	9208      	str	r2, [sp, #32]
 8007072:	f000 fc21 	bl	80078b8 <__i2b>
 8007076:	4605      	mov	r5, r0
 8007078:	b15e      	cbz	r6, 8007092 <_dtoa_r+0x74a>
 800707a:	9b08      	ldr	r3, [sp, #32]
 800707c:	2b00      	cmp	r3, #0
 800707e:	dd08      	ble.n	8007092 <_dtoa_r+0x74a>
 8007080:	42b3      	cmp	r3, r6
 8007082:	9a08      	ldr	r2, [sp, #32]
 8007084:	bfa8      	it	ge
 8007086:	4633      	movge	r3, r6
 8007088:	eba8 0803 	sub.w	r8, r8, r3
 800708c:	1af6      	subs	r6, r6, r3
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	9308      	str	r3, [sp, #32]
 8007092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007094:	b1f3      	cbz	r3, 80070d4 <_dtoa_r+0x78c>
 8007096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 80b7 	beq.w	800720c <_dtoa_r+0x8c4>
 800709e:	b18c      	cbz	r4, 80070c4 <_dtoa_r+0x77c>
 80070a0:	4629      	mov	r1, r5
 80070a2:	4622      	mov	r2, r4
 80070a4:	4658      	mov	r0, fp
 80070a6:	f000 fcc7 	bl	8007a38 <__pow5mult>
 80070aa:	464a      	mov	r2, r9
 80070ac:	4601      	mov	r1, r0
 80070ae:	4605      	mov	r5, r0
 80070b0:	4658      	mov	r0, fp
 80070b2:	f000 fc17 	bl	80078e4 <__multiply>
 80070b6:	4649      	mov	r1, r9
 80070b8:	9004      	str	r0, [sp, #16]
 80070ba:	4658      	mov	r0, fp
 80070bc:	f000 fb48 	bl	8007750 <_Bfree>
 80070c0:	9b04      	ldr	r3, [sp, #16]
 80070c2:	4699      	mov	r9, r3
 80070c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070c6:	1b1a      	subs	r2, r3, r4
 80070c8:	d004      	beq.n	80070d4 <_dtoa_r+0x78c>
 80070ca:	4649      	mov	r1, r9
 80070cc:	4658      	mov	r0, fp
 80070ce:	f000 fcb3 	bl	8007a38 <__pow5mult>
 80070d2:	4681      	mov	r9, r0
 80070d4:	2101      	movs	r1, #1
 80070d6:	4658      	mov	r0, fp
 80070d8:	f000 fbee 	bl	80078b8 <__i2b>
 80070dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070de:	4604      	mov	r4, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 81cf 	beq.w	8007484 <_dtoa_r+0xb3c>
 80070e6:	461a      	mov	r2, r3
 80070e8:	4601      	mov	r1, r0
 80070ea:	4658      	mov	r0, fp
 80070ec:	f000 fca4 	bl	8007a38 <__pow5mult>
 80070f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	4604      	mov	r4, r0
 80070f6:	f300 8095 	bgt.w	8007224 <_dtoa_r+0x8dc>
 80070fa:	9b02      	ldr	r3, [sp, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f040 8087 	bne.w	8007210 <_dtoa_r+0x8c8>
 8007102:	9b03      	ldr	r3, [sp, #12]
 8007104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007108:	2b00      	cmp	r3, #0
 800710a:	f040 8089 	bne.w	8007220 <_dtoa_r+0x8d8>
 800710e:	9b03      	ldr	r3, [sp, #12]
 8007110:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007114:	0d1b      	lsrs	r3, r3, #20
 8007116:	051b      	lsls	r3, r3, #20
 8007118:	b12b      	cbz	r3, 8007126 <_dtoa_r+0x7de>
 800711a:	9b08      	ldr	r3, [sp, #32]
 800711c:	3301      	adds	r3, #1
 800711e:	9308      	str	r3, [sp, #32]
 8007120:	f108 0801 	add.w	r8, r8, #1
 8007124:	2301      	movs	r3, #1
 8007126:	930a      	str	r3, [sp, #40]	@ 0x28
 8007128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 81b0 	beq.w	8007490 <_dtoa_r+0xb48>
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007136:	6918      	ldr	r0, [r3, #16]
 8007138:	f000 fb72 	bl	8007820 <__hi0bits>
 800713c:	f1c0 0020 	rsb	r0, r0, #32
 8007140:	9b08      	ldr	r3, [sp, #32]
 8007142:	4418      	add	r0, r3
 8007144:	f010 001f 	ands.w	r0, r0, #31
 8007148:	d077      	beq.n	800723a <_dtoa_r+0x8f2>
 800714a:	f1c0 0320 	rsb	r3, r0, #32
 800714e:	2b04      	cmp	r3, #4
 8007150:	dd6b      	ble.n	800722a <_dtoa_r+0x8e2>
 8007152:	9b08      	ldr	r3, [sp, #32]
 8007154:	f1c0 001c 	rsb	r0, r0, #28
 8007158:	4403      	add	r3, r0
 800715a:	4480      	add	r8, r0
 800715c:	4406      	add	r6, r0
 800715e:	9308      	str	r3, [sp, #32]
 8007160:	f1b8 0f00 	cmp.w	r8, #0
 8007164:	dd05      	ble.n	8007172 <_dtoa_r+0x82a>
 8007166:	4649      	mov	r1, r9
 8007168:	4642      	mov	r2, r8
 800716a:	4658      	mov	r0, fp
 800716c:	f000 fcbe 	bl	8007aec <__lshift>
 8007170:	4681      	mov	r9, r0
 8007172:	9b08      	ldr	r3, [sp, #32]
 8007174:	2b00      	cmp	r3, #0
 8007176:	dd05      	ble.n	8007184 <_dtoa_r+0x83c>
 8007178:	4621      	mov	r1, r4
 800717a:	461a      	mov	r2, r3
 800717c:	4658      	mov	r0, fp
 800717e:	f000 fcb5 	bl	8007aec <__lshift>
 8007182:	4604      	mov	r4, r0
 8007184:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007186:	2b00      	cmp	r3, #0
 8007188:	d059      	beq.n	800723e <_dtoa_r+0x8f6>
 800718a:	4621      	mov	r1, r4
 800718c:	4648      	mov	r0, r9
 800718e:	f000 fd19 	bl	8007bc4 <__mcmp>
 8007192:	2800      	cmp	r0, #0
 8007194:	da53      	bge.n	800723e <_dtoa_r+0x8f6>
 8007196:	1e7b      	subs	r3, r7, #1
 8007198:	9304      	str	r3, [sp, #16]
 800719a:	4649      	mov	r1, r9
 800719c:	2300      	movs	r3, #0
 800719e:	220a      	movs	r2, #10
 80071a0:	4658      	mov	r0, fp
 80071a2:	f000 faf7 	bl	8007794 <__multadd>
 80071a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071a8:	4681      	mov	r9, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 8172 	beq.w	8007494 <_dtoa_r+0xb4c>
 80071b0:	2300      	movs	r3, #0
 80071b2:	4629      	mov	r1, r5
 80071b4:	220a      	movs	r2, #10
 80071b6:	4658      	mov	r0, fp
 80071b8:	f000 faec 	bl	8007794 <__multadd>
 80071bc:	9b00      	ldr	r3, [sp, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	4605      	mov	r5, r0
 80071c2:	dc67      	bgt.n	8007294 <_dtoa_r+0x94c>
 80071c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	dc41      	bgt.n	800724e <_dtoa_r+0x906>
 80071ca:	e063      	b.n	8007294 <_dtoa_r+0x94c>
 80071cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80071ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80071d2:	e746      	b.n	8007062 <_dtoa_r+0x71a>
 80071d4:	9b07      	ldr	r3, [sp, #28]
 80071d6:	1e5c      	subs	r4, r3, #1
 80071d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071da:	42a3      	cmp	r3, r4
 80071dc:	bfbf      	itttt	lt
 80071de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80071e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80071e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80071e4:	1ae3      	sublt	r3, r4, r3
 80071e6:	bfb4      	ite	lt
 80071e8:	18d2      	addlt	r2, r2, r3
 80071ea:	1b1c      	subge	r4, r3, r4
 80071ec:	9b07      	ldr	r3, [sp, #28]
 80071ee:	bfbc      	itt	lt
 80071f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80071f2:	2400      	movlt	r4, #0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	bfb5      	itete	lt
 80071f8:	eba8 0603 	sublt.w	r6, r8, r3
 80071fc:	9b07      	ldrge	r3, [sp, #28]
 80071fe:	2300      	movlt	r3, #0
 8007200:	4646      	movge	r6, r8
 8007202:	e730      	b.n	8007066 <_dtoa_r+0x71e>
 8007204:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007206:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007208:	4646      	mov	r6, r8
 800720a:	e735      	b.n	8007078 <_dtoa_r+0x730>
 800720c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800720e:	e75c      	b.n	80070ca <_dtoa_r+0x782>
 8007210:	2300      	movs	r3, #0
 8007212:	e788      	b.n	8007126 <_dtoa_r+0x7de>
 8007214:	3fe00000 	.word	0x3fe00000
 8007218:	40240000 	.word	0x40240000
 800721c:	40140000 	.word	0x40140000
 8007220:	9b02      	ldr	r3, [sp, #8]
 8007222:	e780      	b.n	8007126 <_dtoa_r+0x7de>
 8007224:	2300      	movs	r3, #0
 8007226:	930a      	str	r3, [sp, #40]	@ 0x28
 8007228:	e782      	b.n	8007130 <_dtoa_r+0x7e8>
 800722a:	d099      	beq.n	8007160 <_dtoa_r+0x818>
 800722c:	9a08      	ldr	r2, [sp, #32]
 800722e:	331c      	adds	r3, #28
 8007230:	441a      	add	r2, r3
 8007232:	4498      	add	r8, r3
 8007234:	441e      	add	r6, r3
 8007236:	9208      	str	r2, [sp, #32]
 8007238:	e792      	b.n	8007160 <_dtoa_r+0x818>
 800723a:	4603      	mov	r3, r0
 800723c:	e7f6      	b.n	800722c <_dtoa_r+0x8e4>
 800723e:	9b07      	ldr	r3, [sp, #28]
 8007240:	9704      	str	r7, [sp, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	dc20      	bgt.n	8007288 <_dtoa_r+0x940>
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724a:	2b02      	cmp	r3, #2
 800724c:	dd1e      	ble.n	800728c <_dtoa_r+0x944>
 800724e:	9b00      	ldr	r3, [sp, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	f47f aec0 	bne.w	8006fd6 <_dtoa_r+0x68e>
 8007256:	4621      	mov	r1, r4
 8007258:	2205      	movs	r2, #5
 800725a:	4658      	mov	r0, fp
 800725c:	f000 fa9a 	bl	8007794 <__multadd>
 8007260:	4601      	mov	r1, r0
 8007262:	4604      	mov	r4, r0
 8007264:	4648      	mov	r0, r9
 8007266:	f000 fcad 	bl	8007bc4 <__mcmp>
 800726a:	2800      	cmp	r0, #0
 800726c:	f77f aeb3 	ble.w	8006fd6 <_dtoa_r+0x68e>
 8007270:	4656      	mov	r6, sl
 8007272:	2331      	movs	r3, #49	@ 0x31
 8007274:	f806 3b01 	strb.w	r3, [r6], #1
 8007278:	9b04      	ldr	r3, [sp, #16]
 800727a:	3301      	adds	r3, #1
 800727c:	9304      	str	r3, [sp, #16]
 800727e:	e6ae      	b.n	8006fde <_dtoa_r+0x696>
 8007280:	9c07      	ldr	r4, [sp, #28]
 8007282:	9704      	str	r7, [sp, #16]
 8007284:	4625      	mov	r5, r4
 8007286:	e7f3      	b.n	8007270 <_dtoa_r+0x928>
 8007288:	9b07      	ldr	r3, [sp, #28]
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 8104 	beq.w	800749c <_dtoa_r+0xb54>
 8007294:	2e00      	cmp	r6, #0
 8007296:	dd05      	ble.n	80072a4 <_dtoa_r+0x95c>
 8007298:	4629      	mov	r1, r5
 800729a:	4632      	mov	r2, r6
 800729c:	4658      	mov	r0, fp
 800729e:	f000 fc25 	bl	8007aec <__lshift>
 80072a2:	4605      	mov	r5, r0
 80072a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d05a      	beq.n	8007360 <_dtoa_r+0xa18>
 80072aa:	6869      	ldr	r1, [r5, #4]
 80072ac:	4658      	mov	r0, fp
 80072ae:	f000 fa0f 	bl	80076d0 <_Balloc>
 80072b2:	4606      	mov	r6, r0
 80072b4:	b928      	cbnz	r0, 80072c2 <_dtoa_r+0x97a>
 80072b6:	4b84      	ldr	r3, [pc, #528]	@ (80074c8 <_dtoa_r+0xb80>)
 80072b8:	4602      	mov	r2, r0
 80072ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80072be:	f7ff bb5a 	b.w	8006976 <_dtoa_r+0x2e>
 80072c2:	692a      	ldr	r2, [r5, #16]
 80072c4:	3202      	adds	r2, #2
 80072c6:	0092      	lsls	r2, r2, #2
 80072c8:	f105 010c 	add.w	r1, r5, #12
 80072cc:	300c      	adds	r0, #12
 80072ce:	f001 f843 	bl	8008358 <memcpy>
 80072d2:	2201      	movs	r2, #1
 80072d4:	4631      	mov	r1, r6
 80072d6:	4658      	mov	r0, fp
 80072d8:	f000 fc08 	bl	8007aec <__lshift>
 80072dc:	f10a 0301 	add.w	r3, sl, #1
 80072e0:	9307      	str	r3, [sp, #28]
 80072e2:	9b00      	ldr	r3, [sp, #0]
 80072e4:	4453      	add	r3, sl
 80072e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072e8:	9b02      	ldr	r3, [sp, #8]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	462f      	mov	r7, r5
 80072f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f2:	4605      	mov	r5, r0
 80072f4:	9b07      	ldr	r3, [sp, #28]
 80072f6:	4621      	mov	r1, r4
 80072f8:	3b01      	subs	r3, #1
 80072fa:	4648      	mov	r0, r9
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	f7ff fa9a 	bl	8006836 <quorem>
 8007302:	4639      	mov	r1, r7
 8007304:	9002      	str	r0, [sp, #8]
 8007306:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800730a:	4648      	mov	r0, r9
 800730c:	f000 fc5a 	bl	8007bc4 <__mcmp>
 8007310:	462a      	mov	r2, r5
 8007312:	9008      	str	r0, [sp, #32]
 8007314:	4621      	mov	r1, r4
 8007316:	4658      	mov	r0, fp
 8007318:	f000 fc70 	bl	8007bfc <__mdiff>
 800731c:	68c2      	ldr	r2, [r0, #12]
 800731e:	4606      	mov	r6, r0
 8007320:	bb02      	cbnz	r2, 8007364 <_dtoa_r+0xa1c>
 8007322:	4601      	mov	r1, r0
 8007324:	4648      	mov	r0, r9
 8007326:	f000 fc4d 	bl	8007bc4 <__mcmp>
 800732a:	4602      	mov	r2, r0
 800732c:	4631      	mov	r1, r6
 800732e:	4658      	mov	r0, fp
 8007330:	920e      	str	r2, [sp, #56]	@ 0x38
 8007332:	f000 fa0d 	bl	8007750 <_Bfree>
 8007336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007338:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800733a:	9e07      	ldr	r6, [sp, #28]
 800733c:	ea43 0102 	orr.w	r1, r3, r2
 8007340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007342:	4319      	orrs	r1, r3
 8007344:	d110      	bne.n	8007368 <_dtoa_r+0xa20>
 8007346:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800734a:	d029      	beq.n	80073a0 <_dtoa_r+0xa58>
 800734c:	9b08      	ldr	r3, [sp, #32]
 800734e:	2b00      	cmp	r3, #0
 8007350:	dd02      	ble.n	8007358 <_dtoa_r+0xa10>
 8007352:	9b02      	ldr	r3, [sp, #8]
 8007354:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007358:	9b00      	ldr	r3, [sp, #0]
 800735a:	f883 8000 	strb.w	r8, [r3]
 800735e:	e63f      	b.n	8006fe0 <_dtoa_r+0x698>
 8007360:	4628      	mov	r0, r5
 8007362:	e7bb      	b.n	80072dc <_dtoa_r+0x994>
 8007364:	2201      	movs	r2, #1
 8007366:	e7e1      	b.n	800732c <_dtoa_r+0x9e4>
 8007368:	9b08      	ldr	r3, [sp, #32]
 800736a:	2b00      	cmp	r3, #0
 800736c:	db04      	blt.n	8007378 <_dtoa_r+0xa30>
 800736e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007370:	430b      	orrs	r3, r1
 8007372:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007374:	430b      	orrs	r3, r1
 8007376:	d120      	bne.n	80073ba <_dtoa_r+0xa72>
 8007378:	2a00      	cmp	r2, #0
 800737a:	dded      	ble.n	8007358 <_dtoa_r+0xa10>
 800737c:	4649      	mov	r1, r9
 800737e:	2201      	movs	r2, #1
 8007380:	4658      	mov	r0, fp
 8007382:	f000 fbb3 	bl	8007aec <__lshift>
 8007386:	4621      	mov	r1, r4
 8007388:	4681      	mov	r9, r0
 800738a:	f000 fc1b 	bl	8007bc4 <__mcmp>
 800738e:	2800      	cmp	r0, #0
 8007390:	dc03      	bgt.n	800739a <_dtoa_r+0xa52>
 8007392:	d1e1      	bne.n	8007358 <_dtoa_r+0xa10>
 8007394:	f018 0f01 	tst.w	r8, #1
 8007398:	d0de      	beq.n	8007358 <_dtoa_r+0xa10>
 800739a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800739e:	d1d8      	bne.n	8007352 <_dtoa_r+0xa0a>
 80073a0:	9a00      	ldr	r2, [sp, #0]
 80073a2:	2339      	movs	r3, #57	@ 0x39
 80073a4:	7013      	strb	r3, [r2, #0]
 80073a6:	4633      	mov	r3, r6
 80073a8:	461e      	mov	r6, r3
 80073aa:	3b01      	subs	r3, #1
 80073ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80073b0:	2a39      	cmp	r2, #57	@ 0x39
 80073b2:	d052      	beq.n	800745a <_dtoa_r+0xb12>
 80073b4:	3201      	adds	r2, #1
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	e612      	b.n	8006fe0 <_dtoa_r+0x698>
 80073ba:	2a00      	cmp	r2, #0
 80073bc:	dd07      	ble.n	80073ce <_dtoa_r+0xa86>
 80073be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073c2:	d0ed      	beq.n	80073a0 <_dtoa_r+0xa58>
 80073c4:	9a00      	ldr	r2, [sp, #0]
 80073c6:	f108 0301 	add.w	r3, r8, #1
 80073ca:	7013      	strb	r3, [r2, #0]
 80073cc:	e608      	b.n	8006fe0 <_dtoa_r+0x698>
 80073ce:	9b07      	ldr	r3, [sp, #28]
 80073d0:	9a07      	ldr	r2, [sp, #28]
 80073d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80073d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073d8:	4293      	cmp	r3, r2
 80073da:	d028      	beq.n	800742e <_dtoa_r+0xae6>
 80073dc:	4649      	mov	r1, r9
 80073de:	2300      	movs	r3, #0
 80073e0:	220a      	movs	r2, #10
 80073e2:	4658      	mov	r0, fp
 80073e4:	f000 f9d6 	bl	8007794 <__multadd>
 80073e8:	42af      	cmp	r7, r5
 80073ea:	4681      	mov	r9, r0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	f04f 020a 	mov.w	r2, #10
 80073f4:	4639      	mov	r1, r7
 80073f6:	4658      	mov	r0, fp
 80073f8:	d107      	bne.n	800740a <_dtoa_r+0xac2>
 80073fa:	f000 f9cb 	bl	8007794 <__multadd>
 80073fe:	4607      	mov	r7, r0
 8007400:	4605      	mov	r5, r0
 8007402:	9b07      	ldr	r3, [sp, #28]
 8007404:	3301      	adds	r3, #1
 8007406:	9307      	str	r3, [sp, #28]
 8007408:	e774      	b.n	80072f4 <_dtoa_r+0x9ac>
 800740a:	f000 f9c3 	bl	8007794 <__multadd>
 800740e:	4629      	mov	r1, r5
 8007410:	4607      	mov	r7, r0
 8007412:	2300      	movs	r3, #0
 8007414:	220a      	movs	r2, #10
 8007416:	4658      	mov	r0, fp
 8007418:	f000 f9bc 	bl	8007794 <__multadd>
 800741c:	4605      	mov	r5, r0
 800741e:	e7f0      	b.n	8007402 <_dtoa_r+0xaba>
 8007420:	9b00      	ldr	r3, [sp, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	bfcc      	ite	gt
 8007426:	461e      	movgt	r6, r3
 8007428:	2601      	movle	r6, #1
 800742a:	4456      	add	r6, sl
 800742c:	2700      	movs	r7, #0
 800742e:	4649      	mov	r1, r9
 8007430:	2201      	movs	r2, #1
 8007432:	4658      	mov	r0, fp
 8007434:	f000 fb5a 	bl	8007aec <__lshift>
 8007438:	4621      	mov	r1, r4
 800743a:	4681      	mov	r9, r0
 800743c:	f000 fbc2 	bl	8007bc4 <__mcmp>
 8007440:	2800      	cmp	r0, #0
 8007442:	dcb0      	bgt.n	80073a6 <_dtoa_r+0xa5e>
 8007444:	d102      	bne.n	800744c <_dtoa_r+0xb04>
 8007446:	f018 0f01 	tst.w	r8, #1
 800744a:	d1ac      	bne.n	80073a6 <_dtoa_r+0xa5e>
 800744c:	4633      	mov	r3, r6
 800744e:	461e      	mov	r6, r3
 8007450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007454:	2a30      	cmp	r2, #48	@ 0x30
 8007456:	d0fa      	beq.n	800744e <_dtoa_r+0xb06>
 8007458:	e5c2      	b.n	8006fe0 <_dtoa_r+0x698>
 800745a:	459a      	cmp	sl, r3
 800745c:	d1a4      	bne.n	80073a8 <_dtoa_r+0xa60>
 800745e:	9b04      	ldr	r3, [sp, #16]
 8007460:	3301      	adds	r3, #1
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	2331      	movs	r3, #49	@ 0x31
 8007466:	f88a 3000 	strb.w	r3, [sl]
 800746a:	e5b9      	b.n	8006fe0 <_dtoa_r+0x698>
 800746c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800746e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80074cc <_dtoa_r+0xb84>
 8007472:	b11b      	cbz	r3, 800747c <_dtoa_r+0xb34>
 8007474:	f10a 0308 	add.w	r3, sl, #8
 8007478:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	4650      	mov	r0, sl
 800747e:	b019      	add	sp, #100	@ 0x64
 8007480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007486:	2b01      	cmp	r3, #1
 8007488:	f77f ae37 	ble.w	80070fa <_dtoa_r+0x7b2>
 800748c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800748e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007490:	2001      	movs	r0, #1
 8007492:	e655      	b.n	8007140 <_dtoa_r+0x7f8>
 8007494:	9b00      	ldr	r3, [sp, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	f77f aed6 	ble.w	8007248 <_dtoa_r+0x900>
 800749c:	4656      	mov	r6, sl
 800749e:	4621      	mov	r1, r4
 80074a0:	4648      	mov	r0, r9
 80074a2:	f7ff f9c8 	bl	8006836 <quorem>
 80074a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80074aa:	f806 8b01 	strb.w	r8, [r6], #1
 80074ae:	9b00      	ldr	r3, [sp, #0]
 80074b0:	eba6 020a 	sub.w	r2, r6, sl
 80074b4:	4293      	cmp	r3, r2
 80074b6:	ddb3      	ble.n	8007420 <_dtoa_r+0xad8>
 80074b8:	4649      	mov	r1, r9
 80074ba:	2300      	movs	r3, #0
 80074bc:	220a      	movs	r2, #10
 80074be:	4658      	mov	r0, fp
 80074c0:	f000 f968 	bl	8007794 <__multadd>
 80074c4:	4681      	mov	r9, r0
 80074c6:	e7ea      	b.n	800749e <_dtoa_r+0xb56>
 80074c8:	08008ed5 	.word	0x08008ed5
 80074cc:	08008e59 	.word	0x08008e59

080074d0 <_free_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4605      	mov	r5, r0
 80074d4:	2900      	cmp	r1, #0
 80074d6:	d041      	beq.n	800755c <_free_r+0x8c>
 80074d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074dc:	1f0c      	subs	r4, r1, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bfb8      	it	lt
 80074e2:	18e4      	addlt	r4, r4, r3
 80074e4:	f000 f8e8 	bl	80076b8 <__malloc_lock>
 80074e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007560 <_free_r+0x90>)
 80074ea:	6813      	ldr	r3, [r2, #0]
 80074ec:	b933      	cbnz	r3, 80074fc <_free_r+0x2c>
 80074ee:	6063      	str	r3, [r4, #4]
 80074f0:	6014      	str	r4, [r2, #0]
 80074f2:	4628      	mov	r0, r5
 80074f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074f8:	f000 b8e4 	b.w	80076c4 <__malloc_unlock>
 80074fc:	42a3      	cmp	r3, r4
 80074fe:	d908      	bls.n	8007512 <_free_r+0x42>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	1821      	adds	r1, r4, r0
 8007504:	428b      	cmp	r3, r1
 8007506:	bf01      	itttt	eq
 8007508:	6819      	ldreq	r1, [r3, #0]
 800750a:	685b      	ldreq	r3, [r3, #4]
 800750c:	1809      	addeq	r1, r1, r0
 800750e:	6021      	streq	r1, [r4, #0]
 8007510:	e7ed      	b.n	80074ee <_free_r+0x1e>
 8007512:	461a      	mov	r2, r3
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	b10b      	cbz	r3, 800751c <_free_r+0x4c>
 8007518:	42a3      	cmp	r3, r4
 800751a:	d9fa      	bls.n	8007512 <_free_r+0x42>
 800751c:	6811      	ldr	r1, [r2, #0]
 800751e:	1850      	adds	r0, r2, r1
 8007520:	42a0      	cmp	r0, r4
 8007522:	d10b      	bne.n	800753c <_free_r+0x6c>
 8007524:	6820      	ldr	r0, [r4, #0]
 8007526:	4401      	add	r1, r0
 8007528:	1850      	adds	r0, r2, r1
 800752a:	4283      	cmp	r3, r0
 800752c:	6011      	str	r1, [r2, #0]
 800752e:	d1e0      	bne.n	80074f2 <_free_r+0x22>
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	6053      	str	r3, [r2, #4]
 8007536:	4408      	add	r0, r1
 8007538:	6010      	str	r0, [r2, #0]
 800753a:	e7da      	b.n	80074f2 <_free_r+0x22>
 800753c:	d902      	bls.n	8007544 <_free_r+0x74>
 800753e:	230c      	movs	r3, #12
 8007540:	602b      	str	r3, [r5, #0]
 8007542:	e7d6      	b.n	80074f2 <_free_r+0x22>
 8007544:	6820      	ldr	r0, [r4, #0]
 8007546:	1821      	adds	r1, r4, r0
 8007548:	428b      	cmp	r3, r1
 800754a:	bf04      	itt	eq
 800754c:	6819      	ldreq	r1, [r3, #0]
 800754e:	685b      	ldreq	r3, [r3, #4]
 8007550:	6063      	str	r3, [r4, #4]
 8007552:	bf04      	itt	eq
 8007554:	1809      	addeq	r1, r1, r0
 8007556:	6021      	streq	r1, [r4, #0]
 8007558:	6054      	str	r4, [r2, #4]
 800755a:	e7ca      	b.n	80074f2 <_free_r+0x22>
 800755c:	bd38      	pop	{r3, r4, r5, pc}
 800755e:	bf00      	nop
 8007560:	20000908 	.word	0x20000908

08007564 <malloc>:
 8007564:	4b02      	ldr	r3, [pc, #8]	@ (8007570 <malloc+0xc>)
 8007566:	4601      	mov	r1, r0
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	f000 b825 	b.w	80075b8 <_malloc_r>
 800756e:	bf00      	nop
 8007570:	20000028 	.word	0x20000028

08007574 <sbrk_aligned>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	4e0f      	ldr	r6, [pc, #60]	@ (80075b4 <sbrk_aligned+0x40>)
 8007578:	460c      	mov	r4, r1
 800757a:	6831      	ldr	r1, [r6, #0]
 800757c:	4605      	mov	r5, r0
 800757e:	b911      	cbnz	r1, 8007586 <sbrk_aligned+0x12>
 8007580:	f000 feda 	bl	8008338 <_sbrk_r>
 8007584:	6030      	str	r0, [r6, #0]
 8007586:	4621      	mov	r1, r4
 8007588:	4628      	mov	r0, r5
 800758a:	f000 fed5 	bl	8008338 <_sbrk_r>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	d103      	bne.n	800759a <sbrk_aligned+0x26>
 8007592:	f04f 34ff 	mov.w	r4, #4294967295
 8007596:	4620      	mov	r0, r4
 8007598:	bd70      	pop	{r4, r5, r6, pc}
 800759a:	1cc4      	adds	r4, r0, #3
 800759c:	f024 0403 	bic.w	r4, r4, #3
 80075a0:	42a0      	cmp	r0, r4
 80075a2:	d0f8      	beq.n	8007596 <sbrk_aligned+0x22>
 80075a4:	1a21      	subs	r1, r4, r0
 80075a6:	4628      	mov	r0, r5
 80075a8:	f000 fec6 	bl	8008338 <_sbrk_r>
 80075ac:	3001      	adds	r0, #1
 80075ae:	d1f2      	bne.n	8007596 <sbrk_aligned+0x22>
 80075b0:	e7ef      	b.n	8007592 <sbrk_aligned+0x1e>
 80075b2:	bf00      	nop
 80075b4:	20000904 	.word	0x20000904

080075b8 <_malloc_r>:
 80075b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075bc:	1ccd      	adds	r5, r1, #3
 80075be:	f025 0503 	bic.w	r5, r5, #3
 80075c2:	3508      	adds	r5, #8
 80075c4:	2d0c      	cmp	r5, #12
 80075c6:	bf38      	it	cc
 80075c8:	250c      	movcc	r5, #12
 80075ca:	2d00      	cmp	r5, #0
 80075cc:	4606      	mov	r6, r0
 80075ce:	db01      	blt.n	80075d4 <_malloc_r+0x1c>
 80075d0:	42a9      	cmp	r1, r5
 80075d2:	d904      	bls.n	80075de <_malloc_r+0x26>
 80075d4:	230c      	movs	r3, #12
 80075d6:	6033      	str	r3, [r6, #0]
 80075d8:	2000      	movs	r0, #0
 80075da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076b4 <_malloc_r+0xfc>
 80075e2:	f000 f869 	bl	80076b8 <__malloc_lock>
 80075e6:	f8d8 3000 	ldr.w	r3, [r8]
 80075ea:	461c      	mov	r4, r3
 80075ec:	bb44      	cbnz	r4, 8007640 <_malloc_r+0x88>
 80075ee:	4629      	mov	r1, r5
 80075f0:	4630      	mov	r0, r6
 80075f2:	f7ff ffbf 	bl	8007574 <sbrk_aligned>
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	4604      	mov	r4, r0
 80075fa:	d158      	bne.n	80076ae <_malloc_r+0xf6>
 80075fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007600:	4627      	mov	r7, r4
 8007602:	2f00      	cmp	r7, #0
 8007604:	d143      	bne.n	800768e <_malloc_r+0xd6>
 8007606:	2c00      	cmp	r4, #0
 8007608:	d04b      	beq.n	80076a2 <_malloc_r+0xea>
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	4639      	mov	r1, r7
 800760e:	4630      	mov	r0, r6
 8007610:	eb04 0903 	add.w	r9, r4, r3
 8007614:	f000 fe90 	bl	8008338 <_sbrk_r>
 8007618:	4581      	cmp	r9, r0
 800761a:	d142      	bne.n	80076a2 <_malloc_r+0xea>
 800761c:	6821      	ldr	r1, [r4, #0]
 800761e:	1a6d      	subs	r5, r5, r1
 8007620:	4629      	mov	r1, r5
 8007622:	4630      	mov	r0, r6
 8007624:	f7ff ffa6 	bl	8007574 <sbrk_aligned>
 8007628:	3001      	adds	r0, #1
 800762a:	d03a      	beq.n	80076a2 <_malloc_r+0xea>
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	442b      	add	r3, r5
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	f8d8 3000 	ldr.w	r3, [r8]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	bb62      	cbnz	r2, 8007694 <_malloc_r+0xdc>
 800763a:	f8c8 7000 	str.w	r7, [r8]
 800763e:	e00f      	b.n	8007660 <_malloc_r+0xa8>
 8007640:	6822      	ldr	r2, [r4, #0]
 8007642:	1b52      	subs	r2, r2, r5
 8007644:	d420      	bmi.n	8007688 <_malloc_r+0xd0>
 8007646:	2a0b      	cmp	r2, #11
 8007648:	d917      	bls.n	800767a <_malloc_r+0xc2>
 800764a:	1961      	adds	r1, r4, r5
 800764c:	42a3      	cmp	r3, r4
 800764e:	6025      	str	r5, [r4, #0]
 8007650:	bf18      	it	ne
 8007652:	6059      	strne	r1, [r3, #4]
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	bf08      	it	eq
 8007658:	f8c8 1000 	streq.w	r1, [r8]
 800765c:	5162      	str	r2, [r4, r5]
 800765e:	604b      	str	r3, [r1, #4]
 8007660:	4630      	mov	r0, r6
 8007662:	f000 f82f 	bl	80076c4 <__malloc_unlock>
 8007666:	f104 000b 	add.w	r0, r4, #11
 800766a:	1d23      	adds	r3, r4, #4
 800766c:	f020 0007 	bic.w	r0, r0, #7
 8007670:	1ac2      	subs	r2, r0, r3
 8007672:	bf1c      	itt	ne
 8007674:	1a1b      	subne	r3, r3, r0
 8007676:	50a3      	strne	r3, [r4, r2]
 8007678:	e7af      	b.n	80075da <_malloc_r+0x22>
 800767a:	6862      	ldr	r2, [r4, #4]
 800767c:	42a3      	cmp	r3, r4
 800767e:	bf0c      	ite	eq
 8007680:	f8c8 2000 	streq.w	r2, [r8]
 8007684:	605a      	strne	r2, [r3, #4]
 8007686:	e7eb      	b.n	8007660 <_malloc_r+0xa8>
 8007688:	4623      	mov	r3, r4
 800768a:	6864      	ldr	r4, [r4, #4]
 800768c:	e7ae      	b.n	80075ec <_malloc_r+0x34>
 800768e:	463c      	mov	r4, r7
 8007690:	687f      	ldr	r7, [r7, #4]
 8007692:	e7b6      	b.n	8007602 <_malloc_r+0x4a>
 8007694:	461a      	mov	r2, r3
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	42a3      	cmp	r3, r4
 800769a:	d1fb      	bne.n	8007694 <_malloc_r+0xdc>
 800769c:	2300      	movs	r3, #0
 800769e:	6053      	str	r3, [r2, #4]
 80076a0:	e7de      	b.n	8007660 <_malloc_r+0xa8>
 80076a2:	230c      	movs	r3, #12
 80076a4:	6033      	str	r3, [r6, #0]
 80076a6:	4630      	mov	r0, r6
 80076a8:	f000 f80c 	bl	80076c4 <__malloc_unlock>
 80076ac:	e794      	b.n	80075d8 <_malloc_r+0x20>
 80076ae:	6005      	str	r5, [r0, #0]
 80076b0:	e7d6      	b.n	8007660 <_malloc_r+0xa8>
 80076b2:	bf00      	nop
 80076b4:	20000908 	.word	0x20000908

080076b8 <__malloc_lock>:
 80076b8:	4801      	ldr	r0, [pc, #4]	@ (80076c0 <__malloc_lock+0x8>)
 80076ba:	f7ff b8ba 	b.w	8006832 <__retarget_lock_acquire_recursive>
 80076be:	bf00      	nop
 80076c0:	20000900 	.word	0x20000900

080076c4 <__malloc_unlock>:
 80076c4:	4801      	ldr	r0, [pc, #4]	@ (80076cc <__malloc_unlock+0x8>)
 80076c6:	f7ff b8b5 	b.w	8006834 <__retarget_lock_release_recursive>
 80076ca:	bf00      	nop
 80076cc:	20000900 	.word	0x20000900

080076d0 <_Balloc>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	69c6      	ldr	r6, [r0, #28]
 80076d4:	4604      	mov	r4, r0
 80076d6:	460d      	mov	r5, r1
 80076d8:	b976      	cbnz	r6, 80076f8 <_Balloc+0x28>
 80076da:	2010      	movs	r0, #16
 80076dc:	f7ff ff42 	bl	8007564 <malloc>
 80076e0:	4602      	mov	r2, r0
 80076e2:	61e0      	str	r0, [r4, #28]
 80076e4:	b920      	cbnz	r0, 80076f0 <_Balloc+0x20>
 80076e6:	4b18      	ldr	r3, [pc, #96]	@ (8007748 <_Balloc+0x78>)
 80076e8:	4818      	ldr	r0, [pc, #96]	@ (800774c <_Balloc+0x7c>)
 80076ea:	216b      	movs	r1, #107	@ 0x6b
 80076ec:	f000 fe42 	bl	8008374 <__assert_func>
 80076f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076f4:	6006      	str	r6, [r0, #0]
 80076f6:	60c6      	str	r6, [r0, #12]
 80076f8:	69e6      	ldr	r6, [r4, #28]
 80076fa:	68f3      	ldr	r3, [r6, #12]
 80076fc:	b183      	cbz	r3, 8007720 <_Balloc+0x50>
 80076fe:	69e3      	ldr	r3, [r4, #28]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007706:	b9b8      	cbnz	r0, 8007738 <_Balloc+0x68>
 8007708:	2101      	movs	r1, #1
 800770a:	fa01 f605 	lsl.w	r6, r1, r5
 800770e:	1d72      	adds	r2, r6, #5
 8007710:	0092      	lsls	r2, r2, #2
 8007712:	4620      	mov	r0, r4
 8007714:	f000 fe4c 	bl	80083b0 <_calloc_r>
 8007718:	b160      	cbz	r0, 8007734 <_Balloc+0x64>
 800771a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800771e:	e00e      	b.n	800773e <_Balloc+0x6e>
 8007720:	2221      	movs	r2, #33	@ 0x21
 8007722:	2104      	movs	r1, #4
 8007724:	4620      	mov	r0, r4
 8007726:	f000 fe43 	bl	80083b0 <_calloc_r>
 800772a:	69e3      	ldr	r3, [r4, #28]
 800772c:	60f0      	str	r0, [r6, #12]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e4      	bne.n	80076fe <_Balloc+0x2e>
 8007734:	2000      	movs	r0, #0
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	6802      	ldr	r2, [r0, #0]
 800773a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800773e:	2300      	movs	r3, #0
 8007740:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007744:	e7f7      	b.n	8007736 <_Balloc+0x66>
 8007746:	bf00      	nop
 8007748:	08008e66 	.word	0x08008e66
 800774c:	08008ee6 	.word	0x08008ee6

08007750 <_Bfree>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	69c6      	ldr	r6, [r0, #28]
 8007754:	4605      	mov	r5, r0
 8007756:	460c      	mov	r4, r1
 8007758:	b976      	cbnz	r6, 8007778 <_Bfree+0x28>
 800775a:	2010      	movs	r0, #16
 800775c:	f7ff ff02 	bl	8007564 <malloc>
 8007760:	4602      	mov	r2, r0
 8007762:	61e8      	str	r0, [r5, #28]
 8007764:	b920      	cbnz	r0, 8007770 <_Bfree+0x20>
 8007766:	4b09      	ldr	r3, [pc, #36]	@ (800778c <_Bfree+0x3c>)
 8007768:	4809      	ldr	r0, [pc, #36]	@ (8007790 <_Bfree+0x40>)
 800776a:	218f      	movs	r1, #143	@ 0x8f
 800776c:	f000 fe02 	bl	8008374 <__assert_func>
 8007770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007774:	6006      	str	r6, [r0, #0]
 8007776:	60c6      	str	r6, [r0, #12]
 8007778:	b13c      	cbz	r4, 800778a <_Bfree+0x3a>
 800777a:	69eb      	ldr	r3, [r5, #28]
 800777c:	6862      	ldr	r2, [r4, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007784:	6021      	str	r1, [r4, #0]
 8007786:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	08008e66 	.word	0x08008e66
 8007790:	08008ee6 	.word	0x08008ee6

08007794 <__multadd>:
 8007794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007798:	690d      	ldr	r5, [r1, #16]
 800779a:	4607      	mov	r7, r0
 800779c:	460c      	mov	r4, r1
 800779e:	461e      	mov	r6, r3
 80077a0:	f101 0c14 	add.w	ip, r1, #20
 80077a4:	2000      	movs	r0, #0
 80077a6:	f8dc 3000 	ldr.w	r3, [ip]
 80077aa:	b299      	uxth	r1, r3
 80077ac:	fb02 6101 	mla	r1, r2, r1, r6
 80077b0:	0c1e      	lsrs	r6, r3, #16
 80077b2:	0c0b      	lsrs	r3, r1, #16
 80077b4:	fb02 3306 	mla	r3, r2, r6, r3
 80077b8:	b289      	uxth	r1, r1
 80077ba:	3001      	adds	r0, #1
 80077bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077c0:	4285      	cmp	r5, r0
 80077c2:	f84c 1b04 	str.w	r1, [ip], #4
 80077c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077ca:	dcec      	bgt.n	80077a6 <__multadd+0x12>
 80077cc:	b30e      	cbz	r6, 8007812 <__multadd+0x7e>
 80077ce:	68a3      	ldr	r3, [r4, #8]
 80077d0:	42ab      	cmp	r3, r5
 80077d2:	dc19      	bgt.n	8007808 <__multadd+0x74>
 80077d4:	6861      	ldr	r1, [r4, #4]
 80077d6:	4638      	mov	r0, r7
 80077d8:	3101      	adds	r1, #1
 80077da:	f7ff ff79 	bl	80076d0 <_Balloc>
 80077de:	4680      	mov	r8, r0
 80077e0:	b928      	cbnz	r0, 80077ee <__multadd+0x5a>
 80077e2:	4602      	mov	r2, r0
 80077e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007818 <__multadd+0x84>)
 80077e6:	480d      	ldr	r0, [pc, #52]	@ (800781c <__multadd+0x88>)
 80077e8:	21ba      	movs	r1, #186	@ 0xba
 80077ea:	f000 fdc3 	bl	8008374 <__assert_func>
 80077ee:	6922      	ldr	r2, [r4, #16]
 80077f0:	3202      	adds	r2, #2
 80077f2:	f104 010c 	add.w	r1, r4, #12
 80077f6:	0092      	lsls	r2, r2, #2
 80077f8:	300c      	adds	r0, #12
 80077fa:	f000 fdad 	bl	8008358 <memcpy>
 80077fe:	4621      	mov	r1, r4
 8007800:	4638      	mov	r0, r7
 8007802:	f7ff ffa5 	bl	8007750 <_Bfree>
 8007806:	4644      	mov	r4, r8
 8007808:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800780c:	3501      	adds	r5, #1
 800780e:	615e      	str	r6, [r3, #20]
 8007810:	6125      	str	r5, [r4, #16]
 8007812:	4620      	mov	r0, r4
 8007814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007818:	08008ed5 	.word	0x08008ed5
 800781c:	08008ee6 	.word	0x08008ee6

08007820 <__hi0bits>:
 8007820:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007824:	4603      	mov	r3, r0
 8007826:	bf36      	itet	cc
 8007828:	0403      	lslcc	r3, r0, #16
 800782a:	2000      	movcs	r0, #0
 800782c:	2010      	movcc	r0, #16
 800782e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007832:	bf3c      	itt	cc
 8007834:	021b      	lslcc	r3, r3, #8
 8007836:	3008      	addcc	r0, #8
 8007838:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800783c:	bf3c      	itt	cc
 800783e:	011b      	lslcc	r3, r3, #4
 8007840:	3004      	addcc	r0, #4
 8007842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007846:	bf3c      	itt	cc
 8007848:	009b      	lslcc	r3, r3, #2
 800784a:	3002      	addcc	r0, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	db05      	blt.n	800785c <__hi0bits+0x3c>
 8007850:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007854:	f100 0001 	add.w	r0, r0, #1
 8007858:	bf08      	it	eq
 800785a:	2020      	moveq	r0, #32
 800785c:	4770      	bx	lr

0800785e <__lo0bits>:
 800785e:	6803      	ldr	r3, [r0, #0]
 8007860:	4602      	mov	r2, r0
 8007862:	f013 0007 	ands.w	r0, r3, #7
 8007866:	d00b      	beq.n	8007880 <__lo0bits+0x22>
 8007868:	07d9      	lsls	r1, r3, #31
 800786a:	d421      	bmi.n	80078b0 <__lo0bits+0x52>
 800786c:	0798      	lsls	r0, r3, #30
 800786e:	bf49      	itett	mi
 8007870:	085b      	lsrmi	r3, r3, #1
 8007872:	089b      	lsrpl	r3, r3, #2
 8007874:	2001      	movmi	r0, #1
 8007876:	6013      	strmi	r3, [r2, #0]
 8007878:	bf5c      	itt	pl
 800787a:	6013      	strpl	r3, [r2, #0]
 800787c:	2002      	movpl	r0, #2
 800787e:	4770      	bx	lr
 8007880:	b299      	uxth	r1, r3
 8007882:	b909      	cbnz	r1, 8007888 <__lo0bits+0x2a>
 8007884:	0c1b      	lsrs	r3, r3, #16
 8007886:	2010      	movs	r0, #16
 8007888:	b2d9      	uxtb	r1, r3
 800788a:	b909      	cbnz	r1, 8007890 <__lo0bits+0x32>
 800788c:	3008      	adds	r0, #8
 800788e:	0a1b      	lsrs	r3, r3, #8
 8007890:	0719      	lsls	r1, r3, #28
 8007892:	bf04      	itt	eq
 8007894:	091b      	lsreq	r3, r3, #4
 8007896:	3004      	addeq	r0, #4
 8007898:	0799      	lsls	r1, r3, #30
 800789a:	bf04      	itt	eq
 800789c:	089b      	lsreq	r3, r3, #2
 800789e:	3002      	addeq	r0, #2
 80078a0:	07d9      	lsls	r1, r3, #31
 80078a2:	d403      	bmi.n	80078ac <__lo0bits+0x4e>
 80078a4:	085b      	lsrs	r3, r3, #1
 80078a6:	f100 0001 	add.w	r0, r0, #1
 80078aa:	d003      	beq.n	80078b4 <__lo0bits+0x56>
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	4770      	bx	lr
 80078b0:	2000      	movs	r0, #0
 80078b2:	4770      	bx	lr
 80078b4:	2020      	movs	r0, #32
 80078b6:	4770      	bx	lr

080078b8 <__i2b>:
 80078b8:	b510      	push	{r4, lr}
 80078ba:	460c      	mov	r4, r1
 80078bc:	2101      	movs	r1, #1
 80078be:	f7ff ff07 	bl	80076d0 <_Balloc>
 80078c2:	4602      	mov	r2, r0
 80078c4:	b928      	cbnz	r0, 80078d2 <__i2b+0x1a>
 80078c6:	4b05      	ldr	r3, [pc, #20]	@ (80078dc <__i2b+0x24>)
 80078c8:	4805      	ldr	r0, [pc, #20]	@ (80078e0 <__i2b+0x28>)
 80078ca:	f240 1145 	movw	r1, #325	@ 0x145
 80078ce:	f000 fd51 	bl	8008374 <__assert_func>
 80078d2:	2301      	movs	r3, #1
 80078d4:	6144      	str	r4, [r0, #20]
 80078d6:	6103      	str	r3, [r0, #16]
 80078d8:	bd10      	pop	{r4, pc}
 80078da:	bf00      	nop
 80078dc:	08008ed5 	.word	0x08008ed5
 80078e0:	08008ee6 	.word	0x08008ee6

080078e4 <__multiply>:
 80078e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e8:	4614      	mov	r4, r2
 80078ea:	690a      	ldr	r2, [r1, #16]
 80078ec:	6923      	ldr	r3, [r4, #16]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	bfa8      	it	ge
 80078f2:	4623      	movge	r3, r4
 80078f4:	460f      	mov	r7, r1
 80078f6:	bfa4      	itt	ge
 80078f8:	460c      	movge	r4, r1
 80078fa:	461f      	movge	r7, r3
 80078fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007900:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007904:	68a3      	ldr	r3, [r4, #8]
 8007906:	6861      	ldr	r1, [r4, #4]
 8007908:	eb0a 0609 	add.w	r6, sl, r9
 800790c:	42b3      	cmp	r3, r6
 800790e:	b085      	sub	sp, #20
 8007910:	bfb8      	it	lt
 8007912:	3101      	addlt	r1, #1
 8007914:	f7ff fedc 	bl	80076d0 <_Balloc>
 8007918:	b930      	cbnz	r0, 8007928 <__multiply+0x44>
 800791a:	4602      	mov	r2, r0
 800791c:	4b44      	ldr	r3, [pc, #272]	@ (8007a30 <__multiply+0x14c>)
 800791e:	4845      	ldr	r0, [pc, #276]	@ (8007a34 <__multiply+0x150>)
 8007920:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007924:	f000 fd26 	bl	8008374 <__assert_func>
 8007928:	f100 0514 	add.w	r5, r0, #20
 800792c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007930:	462b      	mov	r3, r5
 8007932:	2200      	movs	r2, #0
 8007934:	4543      	cmp	r3, r8
 8007936:	d321      	bcc.n	800797c <__multiply+0x98>
 8007938:	f107 0114 	add.w	r1, r7, #20
 800793c:	f104 0214 	add.w	r2, r4, #20
 8007940:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007944:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007948:	9302      	str	r3, [sp, #8]
 800794a:	1b13      	subs	r3, r2, r4
 800794c:	3b15      	subs	r3, #21
 800794e:	f023 0303 	bic.w	r3, r3, #3
 8007952:	3304      	adds	r3, #4
 8007954:	f104 0715 	add.w	r7, r4, #21
 8007958:	42ba      	cmp	r2, r7
 800795a:	bf38      	it	cc
 800795c:	2304      	movcc	r3, #4
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	9b02      	ldr	r3, [sp, #8]
 8007962:	9103      	str	r1, [sp, #12]
 8007964:	428b      	cmp	r3, r1
 8007966:	d80c      	bhi.n	8007982 <__multiply+0x9e>
 8007968:	2e00      	cmp	r6, #0
 800796a:	dd03      	ble.n	8007974 <__multiply+0x90>
 800796c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007970:	2b00      	cmp	r3, #0
 8007972:	d05b      	beq.n	8007a2c <__multiply+0x148>
 8007974:	6106      	str	r6, [r0, #16]
 8007976:	b005      	add	sp, #20
 8007978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797c:	f843 2b04 	str.w	r2, [r3], #4
 8007980:	e7d8      	b.n	8007934 <__multiply+0x50>
 8007982:	f8b1 a000 	ldrh.w	sl, [r1]
 8007986:	f1ba 0f00 	cmp.w	sl, #0
 800798a:	d024      	beq.n	80079d6 <__multiply+0xf2>
 800798c:	f104 0e14 	add.w	lr, r4, #20
 8007990:	46a9      	mov	r9, r5
 8007992:	f04f 0c00 	mov.w	ip, #0
 8007996:	f85e 7b04 	ldr.w	r7, [lr], #4
 800799a:	f8d9 3000 	ldr.w	r3, [r9]
 800799e:	fa1f fb87 	uxth.w	fp, r7
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80079a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80079ac:	f8d9 7000 	ldr.w	r7, [r9]
 80079b0:	4463      	add	r3, ip
 80079b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80079b6:	fb0a c70b 	mla	r7, sl, fp, ip
 80079ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80079be:	b29b      	uxth	r3, r3
 80079c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80079c4:	4572      	cmp	r2, lr
 80079c6:	f849 3b04 	str.w	r3, [r9], #4
 80079ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80079ce:	d8e2      	bhi.n	8007996 <__multiply+0xb2>
 80079d0:	9b01      	ldr	r3, [sp, #4]
 80079d2:	f845 c003 	str.w	ip, [r5, r3]
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80079dc:	3104      	adds	r1, #4
 80079de:	f1b9 0f00 	cmp.w	r9, #0
 80079e2:	d021      	beq.n	8007a28 <__multiply+0x144>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	f104 0c14 	add.w	ip, r4, #20
 80079ea:	46ae      	mov	lr, r5
 80079ec:	f04f 0a00 	mov.w	sl, #0
 80079f0:	f8bc b000 	ldrh.w	fp, [ip]
 80079f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80079f8:	fb09 770b 	mla	r7, r9, fp, r7
 80079fc:	4457      	add	r7, sl
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a04:	f84e 3b04 	str.w	r3, [lr], #4
 8007a08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a10:	f8be 3000 	ldrh.w	r3, [lr]
 8007a14:	fb09 330a 	mla	r3, r9, sl, r3
 8007a18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007a1c:	4562      	cmp	r2, ip
 8007a1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a22:	d8e5      	bhi.n	80079f0 <__multiply+0x10c>
 8007a24:	9f01      	ldr	r7, [sp, #4]
 8007a26:	51eb      	str	r3, [r5, r7]
 8007a28:	3504      	adds	r5, #4
 8007a2a:	e799      	b.n	8007960 <__multiply+0x7c>
 8007a2c:	3e01      	subs	r6, #1
 8007a2e:	e79b      	b.n	8007968 <__multiply+0x84>
 8007a30:	08008ed5 	.word	0x08008ed5
 8007a34:	08008ee6 	.word	0x08008ee6

08007a38 <__pow5mult>:
 8007a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a3c:	4615      	mov	r5, r2
 8007a3e:	f012 0203 	ands.w	r2, r2, #3
 8007a42:	4607      	mov	r7, r0
 8007a44:	460e      	mov	r6, r1
 8007a46:	d007      	beq.n	8007a58 <__pow5mult+0x20>
 8007a48:	4c25      	ldr	r4, [pc, #148]	@ (8007ae0 <__pow5mult+0xa8>)
 8007a4a:	3a01      	subs	r2, #1
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a52:	f7ff fe9f 	bl	8007794 <__multadd>
 8007a56:	4606      	mov	r6, r0
 8007a58:	10ad      	asrs	r5, r5, #2
 8007a5a:	d03d      	beq.n	8007ad8 <__pow5mult+0xa0>
 8007a5c:	69fc      	ldr	r4, [r7, #28]
 8007a5e:	b97c      	cbnz	r4, 8007a80 <__pow5mult+0x48>
 8007a60:	2010      	movs	r0, #16
 8007a62:	f7ff fd7f 	bl	8007564 <malloc>
 8007a66:	4602      	mov	r2, r0
 8007a68:	61f8      	str	r0, [r7, #28]
 8007a6a:	b928      	cbnz	r0, 8007a78 <__pow5mult+0x40>
 8007a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae4 <__pow5mult+0xac>)
 8007a6e:	481e      	ldr	r0, [pc, #120]	@ (8007ae8 <__pow5mult+0xb0>)
 8007a70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a74:	f000 fc7e 	bl	8008374 <__assert_func>
 8007a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a7c:	6004      	str	r4, [r0, #0]
 8007a7e:	60c4      	str	r4, [r0, #12]
 8007a80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a88:	b94c      	cbnz	r4, 8007a9e <__pow5mult+0x66>
 8007a8a:	f240 2171 	movw	r1, #625	@ 0x271
 8007a8e:	4638      	mov	r0, r7
 8007a90:	f7ff ff12 	bl	80078b8 <__i2b>
 8007a94:	2300      	movs	r3, #0
 8007a96:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	6003      	str	r3, [r0, #0]
 8007a9e:	f04f 0900 	mov.w	r9, #0
 8007aa2:	07eb      	lsls	r3, r5, #31
 8007aa4:	d50a      	bpl.n	8007abc <__pow5mult+0x84>
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4622      	mov	r2, r4
 8007aaa:	4638      	mov	r0, r7
 8007aac:	f7ff ff1a 	bl	80078e4 <__multiply>
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4680      	mov	r8, r0
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	f7ff fe4b 	bl	8007750 <_Bfree>
 8007aba:	4646      	mov	r6, r8
 8007abc:	106d      	asrs	r5, r5, #1
 8007abe:	d00b      	beq.n	8007ad8 <__pow5mult+0xa0>
 8007ac0:	6820      	ldr	r0, [r4, #0]
 8007ac2:	b938      	cbnz	r0, 8007ad4 <__pow5mult+0x9c>
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4638      	mov	r0, r7
 8007aca:	f7ff ff0b 	bl	80078e4 <__multiply>
 8007ace:	6020      	str	r0, [r4, #0]
 8007ad0:	f8c0 9000 	str.w	r9, [r0]
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	e7e4      	b.n	8007aa2 <__pow5mult+0x6a>
 8007ad8:	4630      	mov	r0, r6
 8007ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ade:	bf00      	nop
 8007ae0:	08008f40 	.word	0x08008f40
 8007ae4:	08008e66 	.word	0x08008e66
 8007ae8:	08008ee6 	.word	0x08008ee6

08007aec <__lshift>:
 8007aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af0:	460c      	mov	r4, r1
 8007af2:	6849      	ldr	r1, [r1, #4]
 8007af4:	6923      	ldr	r3, [r4, #16]
 8007af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007afa:	68a3      	ldr	r3, [r4, #8]
 8007afc:	4607      	mov	r7, r0
 8007afe:	4691      	mov	r9, r2
 8007b00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b04:	f108 0601 	add.w	r6, r8, #1
 8007b08:	42b3      	cmp	r3, r6
 8007b0a:	db0b      	blt.n	8007b24 <__lshift+0x38>
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	f7ff fddf 	bl	80076d0 <_Balloc>
 8007b12:	4605      	mov	r5, r0
 8007b14:	b948      	cbnz	r0, 8007b2a <__lshift+0x3e>
 8007b16:	4602      	mov	r2, r0
 8007b18:	4b28      	ldr	r3, [pc, #160]	@ (8007bbc <__lshift+0xd0>)
 8007b1a:	4829      	ldr	r0, [pc, #164]	@ (8007bc0 <__lshift+0xd4>)
 8007b1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007b20:	f000 fc28 	bl	8008374 <__assert_func>
 8007b24:	3101      	adds	r1, #1
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	e7ee      	b.n	8007b08 <__lshift+0x1c>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f100 0114 	add.w	r1, r0, #20
 8007b30:	f100 0210 	add.w	r2, r0, #16
 8007b34:	4618      	mov	r0, r3
 8007b36:	4553      	cmp	r3, sl
 8007b38:	db33      	blt.n	8007ba2 <__lshift+0xb6>
 8007b3a:	6920      	ldr	r0, [r4, #16]
 8007b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b40:	f104 0314 	add.w	r3, r4, #20
 8007b44:	f019 091f 	ands.w	r9, r9, #31
 8007b48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b50:	d02b      	beq.n	8007baa <__lshift+0xbe>
 8007b52:	f1c9 0e20 	rsb	lr, r9, #32
 8007b56:	468a      	mov	sl, r1
 8007b58:	2200      	movs	r2, #0
 8007b5a:	6818      	ldr	r0, [r3, #0]
 8007b5c:	fa00 f009 	lsl.w	r0, r0, r9
 8007b60:	4310      	orrs	r0, r2
 8007b62:	f84a 0b04 	str.w	r0, [sl], #4
 8007b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b6a:	459c      	cmp	ip, r3
 8007b6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b70:	d8f3      	bhi.n	8007b5a <__lshift+0x6e>
 8007b72:	ebac 0304 	sub.w	r3, ip, r4
 8007b76:	3b15      	subs	r3, #21
 8007b78:	f023 0303 	bic.w	r3, r3, #3
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	f104 0015 	add.w	r0, r4, #21
 8007b82:	4584      	cmp	ip, r0
 8007b84:	bf38      	it	cc
 8007b86:	2304      	movcc	r3, #4
 8007b88:	50ca      	str	r2, [r1, r3]
 8007b8a:	b10a      	cbz	r2, 8007b90 <__lshift+0xa4>
 8007b8c:	f108 0602 	add.w	r6, r8, #2
 8007b90:	3e01      	subs	r6, #1
 8007b92:	4638      	mov	r0, r7
 8007b94:	612e      	str	r6, [r5, #16]
 8007b96:	4621      	mov	r1, r4
 8007b98:	f7ff fdda 	bl	8007750 <_Bfree>
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	e7c5      	b.n	8007b36 <__lshift+0x4a>
 8007baa:	3904      	subs	r1, #4
 8007bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bb4:	459c      	cmp	ip, r3
 8007bb6:	d8f9      	bhi.n	8007bac <__lshift+0xc0>
 8007bb8:	e7ea      	b.n	8007b90 <__lshift+0xa4>
 8007bba:	bf00      	nop
 8007bbc:	08008ed5 	.word	0x08008ed5
 8007bc0:	08008ee6 	.word	0x08008ee6

08007bc4 <__mcmp>:
 8007bc4:	690a      	ldr	r2, [r1, #16]
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	6900      	ldr	r0, [r0, #16]
 8007bca:	1a80      	subs	r0, r0, r2
 8007bcc:	b530      	push	{r4, r5, lr}
 8007bce:	d10e      	bne.n	8007bee <__mcmp+0x2a>
 8007bd0:	3314      	adds	r3, #20
 8007bd2:	3114      	adds	r1, #20
 8007bd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007bd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007bdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007be0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007be4:	4295      	cmp	r5, r2
 8007be6:	d003      	beq.n	8007bf0 <__mcmp+0x2c>
 8007be8:	d205      	bcs.n	8007bf6 <__mcmp+0x32>
 8007bea:	f04f 30ff 	mov.w	r0, #4294967295
 8007bee:	bd30      	pop	{r4, r5, pc}
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	d3f3      	bcc.n	8007bdc <__mcmp+0x18>
 8007bf4:	e7fb      	b.n	8007bee <__mcmp+0x2a>
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	e7f9      	b.n	8007bee <__mcmp+0x2a>
	...

08007bfc <__mdiff>:
 8007bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c00:	4689      	mov	r9, r1
 8007c02:	4606      	mov	r6, r0
 8007c04:	4611      	mov	r1, r2
 8007c06:	4648      	mov	r0, r9
 8007c08:	4614      	mov	r4, r2
 8007c0a:	f7ff ffdb 	bl	8007bc4 <__mcmp>
 8007c0e:	1e05      	subs	r5, r0, #0
 8007c10:	d112      	bne.n	8007c38 <__mdiff+0x3c>
 8007c12:	4629      	mov	r1, r5
 8007c14:	4630      	mov	r0, r6
 8007c16:	f7ff fd5b 	bl	80076d0 <_Balloc>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	b928      	cbnz	r0, 8007c2a <__mdiff+0x2e>
 8007c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8007d1c <__mdiff+0x120>)
 8007c20:	f240 2137 	movw	r1, #567	@ 0x237
 8007c24:	483e      	ldr	r0, [pc, #248]	@ (8007d20 <__mdiff+0x124>)
 8007c26:	f000 fba5 	bl	8008374 <__assert_func>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c30:	4610      	mov	r0, r2
 8007c32:	b003      	add	sp, #12
 8007c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c38:	bfbc      	itt	lt
 8007c3a:	464b      	movlt	r3, r9
 8007c3c:	46a1      	movlt	r9, r4
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c44:	bfba      	itte	lt
 8007c46:	461c      	movlt	r4, r3
 8007c48:	2501      	movlt	r5, #1
 8007c4a:	2500      	movge	r5, #0
 8007c4c:	f7ff fd40 	bl	80076d0 <_Balloc>
 8007c50:	4602      	mov	r2, r0
 8007c52:	b918      	cbnz	r0, 8007c5c <__mdiff+0x60>
 8007c54:	4b31      	ldr	r3, [pc, #196]	@ (8007d1c <__mdiff+0x120>)
 8007c56:	f240 2145 	movw	r1, #581	@ 0x245
 8007c5a:	e7e3      	b.n	8007c24 <__mdiff+0x28>
 8007c5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c60:	6926      	ldr	r6, [r4, #16]
 8007c62:	60c5      	str	r5, [r0, #12]
 8007c64:	f109 0310 	add.w	r3, r9, #16
 8007c68:	f109 0514 	add.w	r5, r9, #20
 8007c6c:	f104 0e14 	add.w	lr, r4, #20
 8007c70:	f100 0b14 	add.w	fp, r0, #20
 8007c74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	46d9      	mov	r9, fp
 8007c80:	f04f 0c00 	mov.w	ip, #0
 8007c84:	9b01      	ldr	r3, [sp, #4]
 8007c86:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c8e:	9301      	str	r3, [sp, #4]
 8007c90:	fa1f f38a 	uxth.w	r3, sl
 8007c94:	4619      	mov	r1, r3
 8007c96:	b283      	uxth	r3, r0
 8007c98:	1acb      	subs	r3, r1, r3
 8007c9a:	0c00      	lsrs	r0, r0, #16
 8007c9c:	4463      	add	r3, ip
 8007c9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ca2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007cac:	4576      	cmp	r6, lr
 8007cae:	f849 3b04 	str.w	r3, [r9], #4
 8007cb2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cb6:	d8e5      	bhi.n	8007c84 <__mdiff+0x88>
 8007cb8:	1b33      	subs	r3, r6, r4
 8007cba:	3b15      	subs	r3, #21
 8007cbc:	f023 0303 	bic.w	r3, r3, #3
 8007cc0:	3415      	adds	r4, #21
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	42a6      	cmp	r6, r4
 8007cc6:	bf38      	it	cc
 8007cc8:	2304      	movcc	r3, #4
 8007cca:	441d      	add	r5, r3
 8007ccc:	445b      	add	r3, fp
 8007cce:	461e      	mov	r6, r3
 8007cd0:	462c      	mov	r4, r5
 8007cd2:	4544      	cmp	r4, r8
 8007cd4:	d30e      	bcc.n	8007cf4 <__mdiff+0xf8>
 8007cd6:	f108 0103 	add.w	r1, r8, #3
 8007cda:	1b49      	subs	r1, r1, r5
 8007cdc:	f021 0103 	bic.w	r1, r1, #3
 8007ce0:	3d03      	subs	r5, #3
 8007ce2:	45a8      	cmp	r8, r5
 8007ce4:	bf38      	it	cc
 8007ce6:	2100      	movcc	r1, #0
 8007ce8:	440b      	add	r3, r1
 8007cea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cee:	b191      	cbz	r1, 8007d16 <__mdiff+0x11a>
 8007cf0:	6117      	str	r7, [r2, #16]
 8007cf2:	e79d      	b.n	8007c30 <__mdiff+0x34>
 8007cf4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007cf8:	46e6      	mov	lr, ip
 8007cfa:	0c08      	lsrs	r0, r1, #16
 8007cfc:	fa1c fc81 	uxtah	ip, ip, r1
 8007d00:	4471      	add	r1, lr
 8007d02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007d06:	b289      	uxth	r1, r1
 8007d08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d0c:	f846 1b04 	str.w	r1, [r6], #4
 8007d10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d14:	e7dd      	b.n	8007cd2 <__mdiff+0xd6>
 8007d16:	3f01      	subs	r7, #1
 8007d18:	e7e7      	b.n	8007cea <__mdiff+0xee>
 8007d1a:	bf00      	nop
 8007d1c:	08008ed5 	.word	0x08008ed5
 8007d20:	08008ee6 	.word	0x08008ee6

08007d24 <__d2b>:
 8007d24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d28:	460f      	mov	r7, r1
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	ec59 8b10 	vmov	r8, r9, d0
 8007d30:	4616      	mov	r6, r2
 8007d32:	f7ff fccd 	bl	80076d0 <_Balloc>
 8007d36:	4604      	mov	r4, r0
 8007d38:	b930      	cbnz	r0, 8007d48 <__d2b+0x24>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	4b23      	ldr	r3, [pc, #140]	@ (8007dcc <__d2b+0xa8>)
 8007d3e:	4824      	ldr	r0, [pc, #144]	@ (8007dd0 <__d2b+0xac>)
 8007d40:	f240 310f 	movw	r1, #783	@ 0x30f
 8007d44:	f000 fb16 	bl	8008374 <__assert_func>
 8007d48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d50:	b10d      	cbz	r5, 8007d56 <__d2b+0x32>
 8007d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	f1b8 0300 	subs.w	r3, r8, #0
 8007d5c:	d023      	beq.n	8007da6 <__d2b+0x82>
 8007d5e:	4668      	mov	r0, sp
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	f7ff fd7c 	bl	800785e <__lo0bits>
 8007d66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d6a:	b1d0      	cbz	r0, 8007da2 <__d2b+0x7e>
 8007d6c:	f1c0 0320 	rsb	r3, r0, #32
 8007d70:	fa02 f303 	lsl.w	r3, r2, r3
 8007d74:	430b      	orrs	r3, r1
 8007d76:	40c2      	lsrs	r2, r0
 8007d78:	6163      	str	r3, [r4, #20]
 8007d7a:	9201      	str	r2, [sp, #4]
 8007d7c:	9b01      	ldr	r3, [sp, #4]
 8007d7e:	61a3      	str	r3, [r4, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	bf0c      	ite	eq
 8007d84:	2201      	moveq	r2, #1
 8007d86:	2202      	movne	r2, #2
 8007d88:	6122      	str	r2, [r4, #16]
 8007d8a:	b1a5      	cbz	r5, 8007db6 <__d2b+0x92>
 8007d8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d90:	4405      	add	r5, r0
 8007d92:	603d      	str	r5, [r7, #0]
 8007d94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d98:	6030      	str	r0, [r6, #0]
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	b003      	add	sp, #12
 8007d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007da2:	6161      	str	r1, [r4, #20]
 8007da4:	e7ea      	b.n	8007d7c <__d2b+0x58>
 8007da6:	a801      	add	r0, sp, #4
 8007da8:	f7ff fd59 	bl	800785e <__lo0bits>
 8007dac:	9b01      	ldr	r3, [sp, #4]
 8007dae:	6163      	str	r3, [r4, #20]
 8007db0:	3020      	adds	r0, #32
 8007db2:	2201      	movs	r2, #1
 8007db4:	e7e8      	b.n	8007d88 <__d2b+0x64>
 8007db6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007dba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007dbe:	6038      	str	r0, [r7, #0]
 8007dc0:	6918      	ldr	r0, [r3, #16]
 8007dc2:	f7ff fd2d 	bl	8007820 <__hi0bits>
 8007dc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007dca:	e7e5      	b.n	8007d98 <__d2b+0x74>
 8007dcc:	08008ed5 	.word	0x08008ed5
 8007dd0:	08008ee6 	.word	0x08008ee6

08007dd4 <__ssputs_r>:
 8007dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd8:	688e      	ldr	r6, [r1, #8]
 8007dda:	461f      	mov	r7, r3
 8007ddc:	42be      	cmp	r6, r7
 8007dde:	680b      	ldr	r3, [r1, #0]
 8007de0:	4682      	mov	sl, r0
 8007de2:	460c      	mov	r4, r1
 8007de4:	4690      	mov	r8, r2
 8007de6:	d82d      	bhi.n	8007e44 <__ssputs_r+0x70>
 8007de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007dec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007df0:	d026      	beq.n	8007e40 <__ssputs_r+0x6c>
 8007df2:	6965      	ldr	r5, [r4, #20]
 8007df4:	6909      	ldr	r1, [r1, #16]
 8007df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dfa:	eba3 0901 	sub.w	r9, r3, r1
 8007dfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e02:	1c7b      	adds	r3, r7, #1
 8007e04:	444b      	add	r3, r9
 8007e06:	106d      	asrs	r5, r5, #1
 8007e08:	429d      	cmp	r5, r3
 8007e0a:	bf38      	it	cc
 8007e0c:	461d      	movcc	r5, r3
 8007e0e:	0553      	lsls	r3, r2, #21
 8007e10:	d527      	bpl.n	8007e62 <__ssputs_r+0x8e>
 8007e12:	4629      	mov	r1, r5
 8007e14:	f7ff fbd0 	bl	80075b8 <_malloc_r>
 8007e18:	4606      	mov	r6, r0
 8007e1a:	b360      	cbz	r0, 8007e76 <__ssputs_r+0xa2>
 8007e1c:	6921      	ldr	r1, [r4, #16]
 8007e1e:	464a      	mov	r2, r9
 8007e20:	f000 fa9a 	bl	8008358 <memcpy>
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e2e:	81a3      	strh	r3, [r4, #12]
 8007e30:	6126      	str	r6, [r4, #16]
 8007e32:	6165      	str	r5, [r4, #20]
 8007e34:	444e      	add	r6, r9
 8007e36:	eba5 0509 	sub.w	r5, r5, r9
 8007e3a:	6026      	str	r6, [r4, #0]
 8007e3c:	60a5      	str	r5, [r4, #8]
 8007e3e:	463e      	mov	r6, r7
 8007e40:	42be      	cmp	r6, r7
 8007e42:	d900      	bls.n	8007e46 <__ssputs_r+0x72>
 8007e44:	463e      	mov	r6, r7
 8007e46:	6820      	ldr	r0, [r4, #0]
 8007e48:	4632      	mov	r2, r6
 8007e4a:	4641      	mov	r1, r8
 8007e4c:	f000 fa5a 	bl	8008304 <memmove>
 8007e50:	68a3      	ldr	r3, [r4, #8]
 8007e52:	1b9b      	subs	r3, r3, r6
 8007e54:	60a3      	str	r3, [r4, #8]
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	4433      	add	r3, r6
 8007e5a:	6023      	str	r3, [r4, #0]
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e62:	462a      	mov	r2, r5
 8007e64:	f000 faca 	bl	80083fc <_realloc_r>
 8007e68:	4606      	mov	r6, r0
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d1e0      	bne.n	8007e30 <__ssputs_r+0x5c>
 8007e6e:	6921      	ldr	r1, [r4, #16]
 8007e70:	4650      	mov	r0, sl
 8007e72:	f7ff fb2d 	bl	80074d0 <_free_r>
 8007e76:	230c      	movs	r3, #12
 8007e78:	f8ca 3000 	str.w	r3, [sl]
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e82:	81a3      	strh	r3, [r4, #12]
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295
 8007e88:	e7e9      	b.n	8007e5e <__ssputs_r+0x8a>
	...

08007e8c <_svfiprintf_r>:
 8007e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e90:	4698      	mov	r8, r3
 8007e92:	898b      	ldrh	r3, [r1, #12]
 8007e94:	061b      	lsls	r3, r3, #24
 8007e96:	b09d      	sub	sp, #116	@ 0x74
 8007e98:	4607      	mov	r7, r0
 8007e9a:	460d      	mov	r5, r1
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	d510      	bpl.n	8007ec2 <_svfiprintf_r+0x36>
 8007ea0:	690b      	ldr	r3, [r1, #16]
 8007ea2:	b973      	cbnz	r3, 8007ec2 <_svfiprintf_r+0x36>
 8007ea4:	2140      	movs	r1, #64	@ 0x40
 8007ea6:	f7ff fb87 	bl	80075b8 <_malloc_r>
 8007eaa:	6028      	str	r0, [r5, #0]
 8007eac:	6128      	str	r0, [r5, #16]
 8007eae:	b930      	cbnz	r0, 8007ebe <_svfiprintf_r+0x32>
 8007eb0:	230c      	movs	r3, #12
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb8:	b01d      	add	sp, #116	@ 0x74
 8007eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ebe:	2340      	movs	r3, #64	@ 0x40
 8007ec0:	616b      	str	r3, [r5, #20]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ec6:	2320      	movs	r3, #32
 8007ec8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ed0:	2330      	movs	r3, #48	@ 0x30
 8007ed2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008070 <_svfiprintf_r+0x1e4>
 8007ed6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007eda:	f04f 0901 	mov.w	r9, #1
 8007ede:	4623      	mov	r3, r4
 8007ee0:	469a      	mov	sl, r3
 8007ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ee6:	b10a      	cbz	r2, 8007eec <_svfiprintf_r+0x60>
 8007ee8:	2a25      	cmp	r2, #37	@ 0x25
 8007eea:	d1f9      	bne.n	8007ee0 <_svfiprintf_r+0x54>
 8007eec:	ebba 0b04 	subs.w	fp, sl, r4
 8007ef0:	d00b      	beq.n	8007f0a <_svfiprintf_r+0x7e>
 8007ef2:	465b      	mov	r3, fp
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	4638      	mov	r0, r7
 8007efa:	f7ff ff6b 	bl	8007dd4 <__ssputs_r>
 8007efe:	3001      	adds	r0, #1
 8007f00:	f000 80a7 	beq.w	8008052 <_svfiprintf_r+0x1c6>
 8007f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f06:	445a      	add	r2, fp
 8007f08:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 809f 	beq.w	8008052 <_svfiprintf_r+0x1c6>
 8007f14:	2300      	movs	r3, #0
 8007f16:	f04f 32ff 	mov.w	r2, #4294967295
 8007f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f1e:	f10a 0a01 	add.w	sl, sl, #1
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	9307      	str	r3, [sp, #28]
 8007f26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f2c:	4654      	mov	r4, sl
 8007f2e:	2205      	movs	r2, #5
 8007f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f34:	484e      	ldr	r0, [pc, #312]	@ (8008070 <_svfiprintf_r+0x1e4>)
 8007f36:	f7f8 f96b 	bl	8000210 <memchr>
 8007f3a:	9a04      	ldr	r2, [sp, #16]
 8007f3c:	b9d8      	cbnz	r0, 8007f76 <_svfiprintf_r+0xea>
 8007f3e:	06d0      	lsls	r0, r2, #27
 8007f40:	bf44      	itt	mi
 8007f42:	2320      	movmi	r3, #32
 8007f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f48:	0711      	lsls	r1, r2, #28
 8007f4a:	bf44      	itt	mi
 8007f4c:	232b      	movmi	r3, #43	@ 0x2b
 8007f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f52:	f89a 3000 	ldrb.w	r3, [sl]
 8007f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f58:	d015      	beq.n	8007f86 <_svfiprintf_r+0xfa>
 8007f5a:	9a07      	ldr	r2, [sp, #28]
 8007f5c:	4654      	mov	r4, sl
 8007f5e:	2000      	movs	r0, #0
 8007f60:	f04f 0c0a 	mov.w	ip, #10
 8007f64:	4621      	mov	r1, r4
 8007f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f6a:	3b30      	subs	r3, #48	@ 0x30
 8007f6c:	2b09      	cmp	r3, #9
 8007f6e:	d94b      	bls.n	8008008 <_svfiprintf_r+0x17c>
 8007f70:	b1b0      	cbz	r0, 8007fa0 <_svfiprintf_r+0x114>
 8007f72:	9207      	str	r2, [sp, #28]
 8007f74:	e014      	b.n	8007fa0 <_svfiprintf_r+0x114>
 8007f76:	eba0 0308 	sub.w	r3, r0, r8
 8007f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	9304      	str	r3, [sp, #16]
 8007f82:	46a2      	mov	sl, r4
 8007f84:	e7d2      	b.n	8007f2c <_svfiprintf_r+0xa0>
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	1d19      	adds	r1, r3, #4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	9103      	str	r1, [sp, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	bfbb      	ittet	lt
 8007f92:	425b      	neglt	r3, r3
 8007f94:	f042 0202 	orrlt.w	r2, r2, #2
 8007f98:	9307      	strge	r3, [sp, #28]
 8007f9a:	9307      	strlt	r3, [sp, #28]
 8007f9c:	bfb8      	it	lt
 8007f9e:	9204      	strlt	r2, [sp, #16]
 8007fa0:	7823      	ldrb	r3, [r4, #0]
 8007fa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fa4:	d10a      	bne.n	8007fbc <_svfiprintf_r+0x130>
 8007fa6:	7863      	ldrb	r3, [r4, #1]
 8007fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007faa:	d132      	bne.n	8008012 <_svfiprintf_r+0x186>
 8007fac:	9b03      	ldr	r3, [sp, #12]
 8007fae:	1d1a      	adds	r2, r3, #4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	9203      	str	r2, [sp, #12]
 8007fb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fb8:	3402      	adds	r4, #2
 8007fba:	9305      	str	r3, [sp, #20]
 8007fbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008080 <_svfiprintf_r+0x1f4>
 8007fc0:	7821      	ldrb	r1, [r4, #0]
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	4650      	mov	r0, sl
 8007fc6:	f7f8 f923 	bl	8000210 <memchr>
 8007fca:	b138      	cbz	r0, 8007fdc <_svfiprintf_r+0x150>
 8007fcc:	9b04      	ldr	r3, [sp, #16]
 8007fce:	eba0 000a 	sub.w	r0, r0, sl
 8007fd2:	2240      	movs	r2, #64	@ 0x40
 8007fd4:	4082      	lsls	r2, r0
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	3401      	adds	r4, #1
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fe0:	4824      	ldr	r0, [pc, #144]	@ (8008074 <_svfiprintf_r+0x1e8>)
 8007fe2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fe6:	2206      	movs	r2, #6
 8007fe8:	f7f8 f912 	bl	8000210 <memchr>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d036      	beq.n	800805e <_svfiprintf_r+0x1d2>
 8007ff0:	4b21      	ldr	r3, [pc, #132]	@ (8008078 <_svfiprintf_r+0x1ec>)
 8007ff2:	bb1b      	cbnz	r3, 800803c <_svfiprintf_r+0x1b0>
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	3307      	adds	r3, #7
 8007ff8:	f023 0307 	bic.w	r3, r3, #7
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	9303      	str	r3, [sp, #12]
 8008000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008002:	4433      	add	r3, r6
 8008004:	9309      	str	r3, [sp, #36]	@ 0x24
 8008006:	e76a      	b.n	8007ede <_svfiprintf_r+0x52>
 8008008:	fb0c 3202 	mla	r2, ip, r2, r3
 800800c:	460c      	mov	r4, r1
 800800e:	2001      	movs	r0, #1
 8008010:	e7a8      	b.n	8007f64 <_svfiprintf_r+0xd8>
 8008012:	2300      	movs	r3, #0
 8008014:	3401      	adds	r4, #1
 8008016:	9305      	str	r3, [sp, #20]
 8008018:	4619      	mov	r1, r3
 800801a:	f04f 0c0a 	mov.w	ip, #10
 800801e:	4620      	mov	r0, r4
 8008020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008024:	3a30      	subs	r2, #48	@ 0x30
 8008026:	2a09      	cmp	r2, #9
 8008028:	d903      	bls.n	8008032 <_svfiprintf_r+0x1a6>
 800802a:	2b00      	cmp	r3, #0
 800802c:	d0c6      	beq.n	8007fbc <_svfiprintf_r+0x130>
 800802e:	9105      	str	r1, [sp, #20]
 8008030:	e7c4      	b.n	8007fbc <_svfiprintf_r+0x130>
 8008032:	fb0c 2101 	mla	r1, ip, r1, r2
 8008036:	4604      	mov	r4, r0
 8008038:	2301      	movs	r3, #1
 800803a:	e7f0      	b.n	800801e <_svfiprintf_r+0x192>
 800803c:	ab03      	add	r3, sp, #12
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	462a      	mov	r2, r5
 8008042:	4b0e      	ldr	r3, [pc, #56]	@ (800807c <_svfiprintf_r+0x1f0>)
 8008044:	a904      	add	r1, sp, #16
 8008046:	4638      	mov	r0, r7
 8008048:	f7fd fe84 	bl	8005d54 <_printf_float>
 800804c:	1c42      	adds	r2, r0, #1
 800804e:	4606      	mov	r6, r0
 8008050:	d1d6      	bne.n	8008000 <_svfiprintf_r+0x174>
 8008052:	89ab      	ldrh	r3, [r5, #12]
 8008054:	065b      	lsls	r3, r3, #25
 8008056:	f53f af2d 	bmi.w	8007eb4 <_svfiprintf_r+0x28>
 800805a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800805c:	e72c      	b.n	8007eb8 <_svfiprintf_r+0x2c>
 800805e:	ab03      	add	r3, sp, #12
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	462a      	mov	r2, r5
 8008064:	4b05      	ldr	r3, [pc, #20]	@ (800807c <_svfiprintf_r+0x1f0>)
 8008066:	a904      	add	r1, sp, #16
 8008068:	4638      	mov	r0, r7
 800806a:	f7fe f90b 	bl	8006284 <_printf_i>
 800806e:	e7ed      	b.n	800804c <_svfiprintf_r+0x1c0>
 8008070:	08009040 	.word	0x08009040
 8008074:	0800904a 	.word	0x0800904a
 8008078:	08005d55 	.word	0x08005d55
 800807c:	08007dd5 	.word	0x08007dd5
 8008080:	08009046 	.word	0x08009046

08008084 <__sflush_r>:
 8008084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800808c:	0716      	lsls	r6, r2, #28
 800808e:	4605      	mov	r5, r0
 8008090:	460c      	mov	r4, r1
 8008092:	d454      	bmi.n	800813e <__sflush_r+0xba>
 8008094:	684b      	ldr	r3, [r1, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	dc02      	bgt.n	80080a0 <__sflush_r+0x1c>
 800809a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	dd48      	ble.n	8008132 <__sflush_r+0xae>
 80080a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080a2:	2e00      	cmp	r6, #0
 80080a4:	d045      	beq.n	8008132 <__sflush_r+0xae>
 80080a6:	2300      	movs	r3, #0
 80080a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80080ac:	682f      	ldr	r7, [r5, #0]
 80080ae:	6a21      	ldr	r1, [r4, #32]
 80080b0:	602b      	str	r3, [r5, #0]
 80080b2:	d030      	beq.n	8008116 <__sflush_r+0x92>
 80080b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	0759      	lsls	r1, r3, #29
 80080ba:	d505      	bpl.n	80080c8 <__sflush_r+0x44>
 80080bc:	6863      	ldr	r3, [r4, #4]
 80080be:	1ad2      	subs	r2, r2, r3
 80080c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80080c2:	b10b      	cbz	r3, 80080c8 <__sflush_r+0x44>
 80080c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080c6:	1ad2      	subs	r2, r2, r3
 80080c8:	2300      	movs	r3, #0
 80080ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080cc:	6a21      	ldr	r1, [r4, #32]
 80080ce:	4628      	mov	r0, r5
 80080d0:	47b0      	blx	r6
 80080d2:	1c43      	adds	r3, r0, #1
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	d106      	bne.n	80080e6 <__sflush_r+0x62>
 80080d8:	6829      	ldr	r1, [r5, #0]
 80080da:	291d      	cmp	r1, #29
 80080dc:	d82b      	bhi.n	8008136 <__sflush_r+0xb2>
 80080de:	4a2a      	ldr	r2, [pc, #168]	@ (8008188 <__sflush_r+0x104>)
 80080e0:	410a      	asrs	r2, r1
 80080e2:	07d6      	lsls	r6, r2, #31
 80080e4:	d427      	bmi.n	8008136 <__sflush_r+0xb2>
 80080e6:	2200      	movs	r2, #0
 80080e8:	6062      	str	r2, [r4, #4]
 80080ea:	04d9      	lsls	r1, r3, #19
 80080ec:	6922      	ldr	r2, [r4, #16]
 80080ee:	6022      	str	r2, [r4, #0]
 80080f0:	d504      	bpl.n	80080fc <__sflush_r+0x78>
 80080f2:	1c42      	adds	r2, r0, #1
 80080f4:	d101      	bne.n	80080fa <__sflush_r+0x76>
 80080f6:	682b      	ldr	r3, [r5, #0]
 80080f8:	b903      	cbnz	r3, 80080fc <__sflush_r+0x78>
 80080fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80080fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080fe:	602f      	str	r7, [r5, #0]
 8008100:	b1b9      	cbz	r1, 8008132 <__sflush_r+0xae>
 8008102:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008106:	4299      	cmp	r1, r3
 8008108:	d002      	beq.n	8008110 <__sflush_r+0x8c>
 800810a:	4628      	mov	r0, r5
 800810c:	f7ff f9e0 	bl	80074d0 <_free_r>
 8008110:	2300      	movs	r3, #0
 8008112:	6363      	str	r3, [r4, #52]	@ 0x34
 8008114:	e00d      	b.n	8008132 <__sflush_r+0xae>
 8008116:	2301      	movs	r3, #1
 8008118:	4628      	mov	r0, r5
 800811a:	47b0      	blx	r6
 800811c:	4602      	mov	r2, r0
 800811e:	1c50      	adds	r0, r2, #1
 8008120:	d1c9      	bne.n	80080b6 <__sflush_r+0x32>
 8008122:	682b      	ldr	r3, [r5, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d0c6      	beq.n	80080b6 <__sflush_r+0x32>
 8008128:	2b1d      	cmp	r3, #29
 800812a:	d001      	beq.n	8008130 <__sflush_r+0xac>
 800812c:	2b16      	cmp	r3, #22
 800812e:	d11e      	bne.n	800816e <__sflush_r+0xea>
 8008130:	602f      	str	r7, [r5, #0]
 8008132:	2000      	movs	r0, #0
 8008134:	e022      	b.n	800817c <__sflush_r+0xf8>
 8008136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800813a:	b21b      	sxth	r3, r3
 800813c:	e01b      	b.n	8008176 <__sflush_r+0xf2>
 800813e:	690f      	ldr	r7, [r1, #16]
 8008140:	2f00      	cmp	r7, #0
 8008142:	d0f6      	beq.n	8008132 <__sflush_r+0xae>
 8008144:	0793      	lsls	r3, r2, #30
 8008146:	680e      	ldr	r6, [r1, #0]
 8008148:	bf08      	it	eq
 800814a:	694b      	ldreq	r3, [r1, #20]
 800814c:	600f      	str	r7, [r1, #0]
 800814e:	bf18      	it	ne
 8008150:	2300      	movne	r3, #0
 8008152:	eba6 0807 	sub.w	r8, r6, r7
 8008156:	608b      	str	r3, [r1, #8]
 8008158:	f1b8 0f00 	cmp.w	r8, #0
 800815c:	dde9      	ble.n	8008132 <__sflush_r+0xae>
 800815e:	6a21      	ldr	r1, [r4, #32]
 8008160:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008162:	4643      	mov	r3, r8
 8008164:	463a      	mov	r2, r7
 8008166:	4628      	mov	r0, r5
 8008168:	47b0      	blx	r6
 800816a:	2800      	cmp	r0, #0
 800816c:	dc08      	bgt.n	8008180 <__sflush_r+0xfc>
 800816e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008176:	81a3      	strh	r3, [r4, #12]
 8008178:	f04f 30ff 	mov.w	r0, #4294967295
 800817c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008180:	4407      	add	r7, r0
 8008182:	eba8 0800 	sub.w	r8, r8, r0
 8008186:	e7e7      	b.n	8008158 <__sflush_r+0xd4>
 8008188:	dfbffffe 	.word	0xdfbffffe

0800818c <_fflush_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	690b      	ldr	r3, [r1, #16]
 8008190:	4605      	mov	r5, r0
 8008192:	460c      	mov	r4, r1
 8008194:	b913      	cbnz	r3, 800819c <_fflush_r+0x10>
 8008196:	2500      	movs	r5, #0
 8008198:	4628      	mov	r0, r5
 800819a:	bd38      	pop	{r3, r4, r5, pc}
 800819c:	b118      	cbz	r0, 80081a6 <_fflush_r+0x1a>
 800819e:	6a03      	ldr	r3, [r0, #32]
 80081a0:	b90b      	cbnz	r3, 80081a6 <_fflush_r+0x1a>
 80081a2:	f7fe fa1b 	bl	80065dc <__sinit>
 80081a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0f3      	beq.n	8008196 <_fflush_r+0xa>
 80081ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081b0:	07d0      	lsls	r0, r2, #31
 80081b2:	d404      	bmi.n	80081be <_fflush_r+0x32>
 80081b4:	0599      	lsls	r1, r3, #22
 80081b6:	d402      	bmi.n	80081be <_fflush_r+0x32>
 80081b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081ba:	f7fe fb3a 	bl	8006832 <__retarget_lock_acquire_recursive>
 80081be:	4628      	mov	r0, r5
 80081c0:	4621      	mov	r1, r4
 80081c2:	f7ff ff5f 	bl	8008084 <__sflush_r>
 80081c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081c8:	07da      	lsls	r2, r3, #31
 80081ca:	4605      	mov	r5, r0
 80081cc:	d4e4      	bmi.n	8008198 <_fflush_r+0xc>
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	059b      	lsls	r3, r3, #22
 80081d2:	d4e1      	bmi.n	8008198 <_fflush_r+0xc>
 80081d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081d6:	f7fe fb2d 	bl	8006834 <__retarget_lock_release_recursive>
 80081da:	e7dd      	b.n	8008198 <_fflush_r+0xc>

080081dc <__swbuf_r>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	460e      	mov	r6, r1
 80081e0:	4614      	mov	r4, r2
 80081e2:	4605      	mov	r5, r0
 80081e4:	b118      	cbz	r0, 80081ee <__swbuf_r+0x12>
 80081e6:	6a03      	ldr	r3, [r0, #32]
 80081e8:	b90b      	cbnz	r3, 80081ee <__swbuf_r+0x12>
 80081ea:	f7fe f9f7 	bl	80065dc <__sinit>
 80081ee:	69a3      	ldr	r3, [r4, #24]
 80081f0:	60a3      	str	r3, [r4, #8]
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	071a      	lsls	r2, r3, #28
 80081f6:	d501      	bpl.n	80081fc <__swbuf_r+0x20>
 80081f8:	6923      	ldr	r3, [r4, #16]
 80081fa:	b943      	cbnz	r3, 800820e <__swbuf_r+0x32>
 80081fc:	4621      	mov	r1, r4
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 f82a 	bl	8008258 <__swsetup_r>
 8008204:	b118      	cbz	r0, 800820e <__swbuf_r+0x32>
 8008206:	f04f 37ff 	mov.w	r7, #4294967295
 800820a:	4638      	mov	r0, r7
 800820c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	6922      	ldr	r2, [r4, #16]
 8008212:	1a98      	subs	r0, r3, r2
 8008214:	6963      	ldr	r3, [r4, #20]
 8008216:	b2f6      	uxtb	r6, r6
 8008218:	4283      	cmp	r3, r0
 800821a:	4637      	mov	r7, r6
 800821c:	dc05      	bgt.n	800822a <__swbuf_r+0x4e>
 800821e:	4621      	mov	r1, r4
 8008220:	4628      	mov	r0, r5
 8008222:	f7ff ffb3 	bl	800818c <_fflush_r>
 8008226:	2800      	cmp	r0, #0
 8008228:	d1ed      	bne.n	8008206 <__swbuf_r+0x2a>
 800822a:	68a3      	ldr	r3, [r4, #8]
 800822c:	3b01      	subs	r3, #1
 800822e:	60a3      	str	r3, [r4, #8]
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	6022      	str	r2, [r4, #0]
 8008236:	701e      	strb	r6, [r3, #0]
 8008238:	6962      	ldr	r2, [r4, #20]
 800823a:	1c43      	adds	r3, r0, #1
 800823c:	429a      	cmp	r2, r3
 800823e:	d004      	beq.n	800824a <__swbuf_r+0x6e>
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	07db      	lsls	r3, r3, #31
 8008244:	d5e1      	bpl.n	800820a <__swbuf_r+0x2e>
 8008246:	2e0a      	cmp	r6, #10
 8008248:	d1df      	bne.n	800820a <__swbuf_r+0x2e>
 800824a:	4621      	mov	r1, r4
 800824c:	4628      	mov	r0, r5
 800824e:	f7ff ff9d 	bl	800818c <_fflush_r>
 8008252:	2800      	cmp	r0, #0
 8008254:	d0d9      	beq.n	800820a <__swbuf_r+0x2e>
 8008256:	e7d6      	b.n	8008206 <__swbuf_r+0x2a>

08008258 <__swsetup_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4b29      	ldr	r3, [pc, #164]	@ (8008300 <__swsetup_r+0xa8>)
 800825c:	4605      	mov	r5, r0
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	460c      	mov	r4, r1
 8008262:	b118      	cbz	r0, 800826c <__swsetup_r+0x14>
 8008264:	6a03      	ldr	r3, [r0, #32]
 8008266:	b90b      	cbnz	r3, 800826c <__swsetup_r+0x14>
 8008268:	f7fe f9b8 	bl	80065dc <__sinit>
 800826c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008270:	0719      	lsls	r1, r3, #28
 8008272:	d422      	bmi.n	80082ba <__swsetup_r+0x62>
 8008274:	06da      	lsls	r2, r3, #27
 8008276:	d407      	bmi.n	8008288 <__swsetup_r+0x30>
 8008278:	2209      	movs	r2, #9
 800827a:	602a      	str	r2, [r5, #0]
 800827c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008280:	81a3      	strh	r3, [r4, #12]
 8008282:	f04f 30ff 	mov.w	r0, #4294967295
 8008286:	e033      	b.n	80082f0 <__swsetup_r+0x98>
 8008288:	0758      	lsls	r0, r3, #29
 800828a:	d512      	bpl.n	80082b2 <__swsetup_r+0x5a>
 800828c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800828e:	b141      	cbz	r1, 80082a2 <__swsetup_r+0x4a>
 8008290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008294:	4299      	cmp	r1, r3
 8008296:	d002      	beq.n	800829e <__swsetup_r+0x46>
 8008298:	4628      	mov	r0, r5
 800829a:	f7ff f919 	bl	80074d0 <_free_r>
 800829e:	2300      	movs	r3, #0
 80082a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082a8:	81a3      	strh	r3, [r4, #12]
 80082aa:	2300      	movs	r3, #0
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	f043 0308 	orr.w	r3, r3, #8
 80082b8:	81a3      	strh	r3, [r4, #12]
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	b94b      	cbnz	r3, 80082d2 <__swsetup_r+0x7a>
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082c8:	d003      	beq.n	80082d2 <__swsetup_r+0x7a>
 80082ca:	4621      	mov	r1, r4
 80082cc:	4628      	mov	r0, r5
 80082ce:	f000 f909 	bl	80084e4 <__smakebuf_r>
 80082d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d6:	f013 0201 	ands.w	r2, r3, #1
 80082da:	d00a      	beq.n	80082f2 <__swsetup_r+0x9a>
 80082dc:	2200      	movs	r2, #0
 80082de:	60a2      	str	r2, [r4, #8]
 80082e0:	6962      	ldr	r2, [r4, #20]
 80082e2:	4252      	negs	r2, r2
 80082e4:	61a2      	str	r2, [r4, #24]
 80082e6:	6922      	ldr	r2, [r4, #16]
 80082e8:	b942      	cbnz	r2, 80082fc <__swsetup_r+0xa4>
 80082ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082ee:	d1c5      	bne.n	800827c <__swsetup_r+0x24>
 80082f0:	bd38      	pop	{r3, r4, r5, pc}
 80082f2:	0799      	lsls	r1, r3, #30
 80082f4:	bf58      	it	pl
 80082f6:	6962      	ldrpl	r2, [r4, #20]
 80082f8:	60a2      	str	r2, [r4, #8]
 80082fa:	e7f4      	b.n	80082e6 <__swsetup_r+0x8e>
 80082fc:	2000      	movs	r0, #0
 80082fe:	e7f7      	b.n	80082f0 <__swsetup_r+0x98>
 8008300:	20000028 	.word	0x20000028

08008304 <memmove>:
 8008304:	4288      	cmp	r0, r1
 8008306:	b510      	push	{r4, lr}
 8008308:	eb01 0402 	add.w	r4, r1, r2
 800830c:	d902      	bls.n	8008314 <memmove+0x10>
 800830e:	4284      	cmp	r4, r0
 8008310:	4623      	mov	r3, r4
 8008312:	d807      	bhi.n	8008324 <memmove+0x20>
 8008314:	1e43      	subs	r3, r0, #1
 8008316:	42a1      	cmp	r1, r4
 8008318:	d008      	beq.n	800832c <memmove+0x28>
 800831a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800831e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008322:	e7f8      	b.n	8008316 <memmove+0x12>
 8008324:	4402      	add	r2, r0
 8008326:	4601      	mov	r1, r0
 8008328:	428a      	cmp	r2, r1
 800832a:	d100      	bne.n	800832e <memmove+0x2a>
 800832c:	bd10      	pop	{r4, pc}
 800832e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008336:	e7f7      	b.n	8008328 <memmove+0x24>

08008338 <_sbrk_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4d06      	ldr	r5, [pc, #24]	@ (8008354 <_sbrk_r+0x1c>)
 800833c:	2300      	movs	r3, #0
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	602b      	str	r3, [r5, #0]
 8008344:	f7f9 ffba 	bl	80022bc <_sbrk>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_sbrk_r+0x1a>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_sbrk_r+0x1a>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	200008fc 	.word	0x200008fc

08008358 <memcpy>:
 8008358:	440a      	add	r2, r1
 800835a:	4291      	cmp	r1, r2
 800835c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008360:	d100      	bne.n	8008364 <memcpy+0xc>
 8008362:	4770      	bx	lr
 8008364:	b510      	push	{r4, lr}
 8008366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800836a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800836e:	4291      	cmp	r1, r2
 8008370:	d1f9      	bne.n	8008366 <memcpy+0xe>
 8008372:	bd10      	pop	{r4, pc}

08008374 <__assert_func>:
 8008374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008376:	4614      	mov	r4, r2
 8008378:	461a      	mov	r2, r3
 800837a:	4b09      	ldr	r3, [pc, #36]	@ (80083a0 <__assert_func+0x2c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4605      	mov	r5, r0
 8008380:	68d8      	ldr	r0, [r3, #12]
 8008382:	b954      	cbnz	r4, 800839a <__assert_func+0x26>
 8008384:	4b07      	ldr	r3, [pc, #28]	@ (80083a4 <__assert_func+0x30>)
 8008386:	461c      	mov	r4, r3
 8008388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800838c:	9100      	str	r1, [sp, #0]
 800838e:	462b      	mov	r3, r5
 8008390:	4905      	ldr	r1, [pc, #20]	@ (80083a8 <__assert_func+0x34>)
 8008392:	f000 f86f 	bl	8008474 <fiprintf>
 8008396:	f000 f903 	bl	80085a0 <abort>
 800839a:	4b04      	ldr	r3, [pc, #16]	@ (80083ac <__assert_func+0x38>)
 800839c:	e7f4      	b.n	8008388 <__assert_func+0x14>
 800839e:	bf00      	nop
 80083a0:	20000028 	.word	0x20000028
 80083a4:	08009096 	.word	0x08009096
 80083a8:	08009068 	.word	0x08009068
 80083ac:	0800905b 	.word	0x0800905b

080083b0 <_calloc_r>:
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	fba1 5402 	umull	r5, r4, r1, r2
 80083b6:	b93c      	cbnz	r4, 80083c8 <_calloc_r+0x18>
 80083b8:	4629      	mov	r1, r5
 80083ba:	f7ff f8fd 	bl	80075b8 <_malloc_r>
 80083be:	4606      	mov	r6, r0
 80083c0:	b928      	cbnz	r0, 80083ce <_calloc_r+0x1e>
 80083c2:	2600      	movs	r6, #0
 80083c4:	4630      	mov	r0, r6
 80083c6:	bd70      	pop	{r4, r5, r6, pc}
 80083c8:	220c      	movs	r2, #12
 80083ca:	6002      	str	r2, [r0, #0]
 80083cc:	e7f9      	b.n	80083c2 <_calloc_r+0x12>
 80083ce:	462a      	mov	r2, r5
 80083d0:	4621      	mov	r1, r4
 80083d2:	f7fe f9b0 	bl	8006736 <memset>
 80083d6:	e7f5      	b.n	80083c4 <_calloc_r+0x14>

080083d8 <__ascii_mbtowc>:
 80083d8:	b082      	sub	sp, #8
 80083da:	b901      	cbnz	r1, 80083de <__ascii_mbtowc+0x6>
 80083dc:	a901      	add	r1, sp, #4
 80083de:	b142      	cbz	r2, 80083f2 <__ascii_mbtowc+0x1a>
 80083e0:	b14b      	cbz	r3, 80083f6 <__ascii_mbtowc+0x1e>
 80083e2:	7813      	ldrb	r3, [r2, #0]
 80083e4:	600b      	str	r3, [r1, #0]
 80083e6:	7812      	ldrb	r2, [r2, #0]
 80083e8:	1e10      	subs	r0, r2, #0
 80083ea:	bf18      	it	ne
 80083ec:	2001      	movne	r0, #1
 80083ee:	b002      	add	sp, #8
 80083f0:	4770      	bx	lr
 80083f2:	4610      	mov	r0, r2
 80083f4:	e7fb      	b.n	80083ee <__ascii_mbtowc+0x16>
 80083f6:	f06f 0001 	mvn.w	r0, #1
 80083fa:	e7f8      	b.n	80083ee <__ascii_mbtowc+0x16>

080083fc <_realloc_r>:
 80083fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008400:	4680      	mov	r8, r0
 8008402:	4615      	mov	r5, r2
 8008404:	460c      	mov	r4, r1
 8008406:	b921      	cbnz	r1, 8008412 <_realloc_r+0x16>
 8008408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800840c:	4611      	mov	r1, r2
 800840e:	f7ff b8d3 	b.w	80075b8 <_malloc_r>
 8008412:	b92a      	cbnz	r2, 8008420 <_realloc_r+0x24>
 8008414:	f7ff f85c 	bl	80074d0 <_free_r>
 8008418:	2400      	movs	r4, #0
 800841a:	4620      	mov	r0, r4
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008420:	f000 f8c5 	bl	80085ae <_malloc_usable_size_r>
 8008424:	4285      	cmp	r5, r0
 8008426:	4606      	mov	r6, r0
 8008428:	d802      	bhi.n	8008430 <_realloc_r+0x34>
 800842a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800842e:	d8f4      	bhi.n	800841a <_realloc_r+0x1e>
 8008430:	4629      	mov	r1, r5
 8008432:	4640      	mov	r0, r8
 8008434:	f7ff f8c0 	bl	80075b8 <_malloc_r>
 8008438:	4607      	mov	r7, r0
 800843a:	2800      	cmp	r0, #0
 800843c:	d0ec      	beq.n	8008418 <_realloc_r+0x1c>
 800843e:	42b5      	cmp	r5, r6
 8008440:	462a      	mov	r2, r5
 8008442:	4621      	mov	r1, r4
 8008444:	bf28      	it	cs
 8008446:	4632      	movcs	r2, r6
 8008448:	f7ff ff86 	bl	8008358 <memcpy>
 800844c:	4621      	mov	r1, r4
 800844e:	4640      	mov	r0, r8
 8008450:	f7ff f83e 	bl	80074d0 <_free_r>
 8008454:	463c      	mov	r4, r7
 8008456:	e7e0      	b.n	800841a <_realloc_r+0x1e>

08008458 <__ascii_wctomb>:
 8008458:	4603      	mov	r3, r0
 800845a:	4608      	mov	r0, r1
 800845c:	b141      	cbz	r1, 8008470 <__ascii_wctomb+0x18>
 800845e:	2aff      	cmp	r2, #255	@ 0xff
 8008460:	d904      	bls.n	800846c <__ascii_wctomb+0x14>
 8008462:	228a      	movs	r2, #138	@ 0x8a
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	f04f 30ff 	mov.w	r0, #4294967295
 800846a:	4770      	bx	lr
 800846c:	700a      	strb	r2, [r1, #0]
 800846e:	2001      	movs	r0, #1
 8008470:	4770      	bx	lr
	...

08008474 <fiprintf>:
 8008474:	b40e      	push	{r1, r2, r3}
 8008476:	b503      	push	{r0, r1, lr}
 8008478:	4601      	mov	r1, r0
 800847a:	ab03      	add	r3, sp, #12
 800847c:	4805      	ldr	r0, [pc, #20]	@ (8008494 <fiprintf+0x20>)
 800847e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008482:	6800      	ldr	r0, [r0, #0]
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	f000 f8c3 	bl	8008610 <_vfiprintf_r>
 800848a:	b002      	add	sp, #8
 800848c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008490:	b003      	add	sp, #12
 8008492:	4770      	bx	lr
 8008494:	20000028 	.word	0x20000028

08008498 <__swhatbuf_r>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	460c      	mov	r4, r1
 800849c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a0:	2900      	cmp	r1, #0
 80084a2:	b096      	sub	sp, #88	@ 0x58
 80084a4:	4615      	mov	r5, r2
 80084a6:	461e      	mov	r6, r3
 80084a8:	da0d      	bge.n	80084c6 <__swhatbuf_r+0x2e>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084b0:	f04f 0100 	mov.w	r1, #0
 80084b4:	bf14      	ite	ne
 80084b6:	2340      	movne	r3, #64	@ 0x40
 80084b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80084bc:	2000      	movs	r0, #0
 80084be:	6031      	str	r1, [r6, #0]
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	b016      	add	sp, #88	@ 0x58
 80084c4:	bd70      	pop	{r4, r5, r6, pc}
 80084c6:	466a      	mov	r2, sp
 80084c8:	f000 f848 	bl	800855c <_fstat_r>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	dbec      	blt.n	80084aa <__swhatbuf_r+0x12>
 80084d0:	9901      	ldr	r1, [sp, #4]
 80084d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80084d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80084da:	4259      	negs	r1, r3
 80084dc:	4159      	adcs	r1, r3
 80084de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084e2:	e7eb      	b.n	80084bc <__swhatbuf_r+0x24>

080084e4 <__smakebuf_r>:
 80084e4:	898b      	ldrh	r3, [r1, #12]
 80084e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084e8:	079d      	lsls	r5, r3, #30
 80084ea:	4606      	mov	r6, r0
 80084ec:	460c      	mov	r4, r1
 80084ee:	d507      	bpl.n	8008500 <__smakebuf_r+0x1c>
 80084f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	6123      	str	r3, [r4, #16]
 80084f8:	2301      	movs	r3, #1
 80084fa:	6163      	str	r3, [r4, #20]
 80084fc:	b003      	add	sp, #12
 80084fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008500:	ab01      	add	r3, sp, #4
 8008502:	466a      	mov	r2, sp
 8008504:	f7ff ffc8 	bl	8008498 <__swhatbuf_r>
 8008508:	9f00      	ldr	r7, [sp, #0]
 800850a:	4605      	mov	r5, r0
 800850c:	4639      	mov	r1, r7
 800850e:	4630      	mov	r0, r6
 8008510:	f7ff f852 	bl	80075b8 <_malloc_r>
 8008514:	b948      	cbnz	r0, 800852a <__smakebuf_r+0x46>
 8008516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851a:	059a      	lsls	r2, r3, #22
 800851c:	d4ee      	bmi.n	80084fc <__smakebuf_r+0x18>
 800851e:	f023 0303 	bic.w	r3, r3, #3
 8008522:	f043 0302 	orr.w	r3, r3, #2
 8008526:	81a3      	strh	r3, [r4, #12]
 8008528:	e7e2      	b.n	80084f0 <__smakebuf_r+0xc>
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	6020      	str	r0, [r4, #0]
 800852e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	9b01      	ldr	r3, [sp, #4]
 8008536:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800853a:	b15b      	cbz	r3, 8008554 <__smakebuf_r+0x70>
 800853c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008540:	4630      	mov	r0, r6
 8008542:	f000 f81d 	bl	8008580 <_isatty_r>
 8008546:	b128      	cbz	r0, 8008554 <__smakebuf_r+0x70>
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	f023 0303 	bic.w	r3, r3, #3
 800854e:	f043 0301 	orr.w	r3, r3, #1
 8008552:	81a3      	strh	r3, [r4, #12]
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	431d      	orrs	r5, r3
 8008558:	81a5      	strh	r5, [r4, #12]
 800855a:	e7cf      	b.n	80084fc <__smakebuf_r+0x18>

0800855c <_fstat_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4d07      	ldr	r5, [pc, #28]	@ (800857c <_fstat_r+0x20>)
 8008560:	2300      	movs	r3, #0
 8008562:	4604      	mov	r4, r0
 8008564:	4608      	mov	r0, r1
 8008566:	4611      	mov	r1, r2
 8008568:	602b      	str	r3, [r5, #0]
 800856a:	f7f9 fe7f 	bl	800226c <_fstat>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	d102      	bne.n	8008578 <_fstat_r+0x1c>
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	b103      	cbz	r3, 8008578 <_fstat_r+0x1c>
 8008576:	6023      	str	r3, [r4, #0]
 8008578:	bd38      	pop	{r3, r4, r5, pc}
 800857a:	bf00      	nop
 800857c:	200008fc 	.word	0x200008fc

08008580 <_isatty_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4d06      	ldr	r5, [pc, #24]	@ (800859c <_isatty_r+0x1c>)
 8008584:	2300      	movs	r3, #0
 8008586:	4604      	mov	r4, r0
 8008588:	4608      	mov	r0, r1
 800858a:	602b      	str	r3, [r5, #0]
 800858c:	f7f9 fe7e 	bl	800228c <_isatty>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_isatty_r+0x1a>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_isatty_r+0x1a>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	200008fc 	.word	0x200008fc

080085a0 <abort>:
 80085a0:	b508      	push	{r3, lr}
 80085a2:	2006      	movs	r0, #6
 80085a4:	f000 f974 	bl	8008890 <raise>
 80085a8:	2001      	movs	r0, #1
 80085aa:	f7f9 fe0f 	bl	80021cc <_exit>

080085ae <_malloc_usable_size_r>:
 80085ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085b2:	1f18      	subs	r0, r3, #4
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	bfbc      	itt	lt
 80085b8:	580b      	ldrlt	r3, [r1, r0]
 80085ba:	18c0      	addlt	r0, r0, r3
 80085bc:	4770      	bx	lr

080085be <__sfputc_r>:
 80085be:	6893      	ldr	r3, [r2, #8]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	b410      	push	{r4}
 80085c6:	6093      	str	r3, [r2, #8]
 80085c8:	da08      	bge.n	80085dc <__sfputc_r+0x1e>
 80085ca:	6994      	ldr	r4, [r2, #24]
 80085cc:	42a3      	cmp	r3, r4
 80085ce:	db01      	blt.n	80085d4 <__sfputc_r+0x16>
 80085d0:	290a      	cmp	r1, #10
 80085d2:	d103      	bne.n	80085dc <__sfputc_r+0x1e>
 80085d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085d8:	f7ff be00 	b.w	80081dc <__swbuf_r>
 80085dc:	6813      	ldr	r3, [r2, #0]
 80085de:	1c58      	adds	r0, r3, #1
 80085e0:	6010      	str	r0, [r2, #0]
 80085e2:	7019      	strb	r1, [r3, #0]
 80085e4:	4608      	mov	r0, r1
 80085e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <__sfputs_r>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	4606      	mov	r6, r0
 80085f0:	460f      	mov	r7, r1
 80085f2:	4614      	mov	r4, r2
 80085f4:	18d5      	adds	r5, r2, r3
 80085f6:	42ac      	cmp	r4, r5
 80085f8:	d101      	bne.n	80085fe <__sfputs_r+0x12>
 80085fa:	2000      	movs	r0, #0
 80085fc:	e007      	b.n	800860e <__sfputs_r+0x22>
 80085fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008602:	463a      	mov	r2, r7
 8008604:	4630      	mov	r0, r6
 8008606:	f7ff ffda 	bl	80085be <__sfputc_r>
 800860a:	1c43      	adds	r3, r0, #1
 800860c:	d1f3      	bne.n	80085f6 <__sfputs_r+0xa>
 800860e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008610 <_vfiprintf_r>:
 8008610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	460d      	mov	r5, r1
 8008616:	b09d      	sub	sp, #116	@ 0x74
 8008618:	4614      	mov	r4, r2
 800861a:	4698      	mov	r8, r3
 800861c:	4606      	mov	r6, r0
 800861e:	b118      	cbz	r0, 8008628 <_vfiprintf_r+0x18>
 8008620:	6a03      	ldr	r3, [r0, #32]
 8008622:	b90b      	cbnz	r3, 8008628 <_vfiprintf_r+0x18>
 8008624:	f7fd ffda 	bl	80065dc <__sinit>
 8008628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800862a:	07d9      	lsls	r1, r3, #31
 800862c:	d405      	bmi.n	800863a <_vfiprintf_r+0x2a>
 800862e:	89ab      	ldrh	r3, [r5, #12]
 8008630:	059a      	lsls	r2, r3, #22
 8008632:	d402      	bmi.n	800863a <_vfiprintf_r+0x2a>
 8008634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008636:	f7fe f8fc 	bl	8006832 <__retarget_lock_acquire_recursive>
 800863a:	89ab      	ldrh	r3, [r5, #12]
 800863c:	071b      	lsls	r3, r3, #28
 800863e:	d501      	bpl.n	8008644 <_vfiprintf_r+0x34>
 8008640:	692b      	ldr	r3, [r5, #16]
 8008642:	b99b      	cbnz	r3, 800866c <_vfiprintf_r+0x5c>
 8008644:	4629      	mov	r1, r5
 8008646:	4630      	mov	r0, r6
 8008648:	f7ff fe06 	bl	8008258 <__swsetup_r>
 800864c:	b170      	cbz	r0, 800866c <_vfiprintf_r+0x5c>
 800864e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008650:	07dc      	lsls	r4, r3, #31
 8008652:	d504      	bpl.n	800865e <_vfiprintf_r+0x4e>
 8008654:	f04f 30ff 	mov.w	r0, #4294967295
 8008658:	b01d      	add	sp, #116	@ 0x74
 800865a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865e:	89ab      	ldrh	r3, [r5, #12]
 8008660:	0598      	lsls	r0, r3, #22
 8008662:	d4f7      	bmi.n	8008654 <_vfiprintf_r+0x44>
 8008664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008666:	f7fe f8e5 	bl	8006834 <__retarget_lock_release_recursive>
 800866a:	e7f3      	b.n	8008654 <_vfiprintf_r+0x44>
 800866c:	2300      	movs	r3, #0
 800866e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008670:	2320      	movs	r3, #32
 8008672:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008676:	f8cd 800c 	str.w	r8, [sp, #12]
 800867a:	2330      	movs	r3, #48	@ 0x30
 800867c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800882c <_vfiprintf_r+0x21c>
 8008680:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008684:	f04f 0901 	mov.w	r9, #1
 8008688:	4623      	mov	r3, r4
 800868a:	469a      	mov	sl, r3
 800868c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008690:	b10a      	cbz	r2, 8008696 <_vfiprintf_r+0x86>
 8008692:	2a25      	cmp	r2, #37	@ 0x25
 8008694:	d1f9      	bne.n	800868a <_vfiprintf_r+0x7a>
 8008696:	ebba 0b04 	subs.w	fp, sl, r4
 800869a:	d00b      	beq.n	80086b4 <_vfiprintf_r+0xa4>
 800869c:	465b      	mov	r3, fp
 800869e:	4622      	mov	r2, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7ff ffa2 	bl	80085ec <__sfputs_r>
 80086a8:	3001      	adds	r0, #1
 80086aa:	f000 80a7 	beq.w	80087fc <_vfiprintf_r+0x1ec>
 80086ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086b0:	445a      	add	r2, fp
 80086b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80086b4:	f89a 3000 	ldrb.w	r3, [sl]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 809f 	beq.w	80087fc <_vfiprintf_r+0x1ec>
 80086be:	2300      	movs	r3, #0
 80086c0:	f04f 32ff 	mov.w	r2, #4294967295
 80086c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086c8:	f10a 0a01 	add.w	sl, sl, #1
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	9307      	str	r3, [sp, #28]
 80086d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80086d6:	4654      	mov	r4, sl
 80086d8:	2205      	movs	r2, #5
 80086da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086de:	4853      	ldr	r0, [pc, #332]	@ (800882c <_vfiprintf_r+0x21c>)
 80086e0:	f7f7 fd96 	bl	8000210 <memchr>
 80086e4:	9a04      	ldr	r2, [sp, #16]
 80086e6:	b9d8      	cbnz	r0, 8008720 <_vfiprintf_r+0x110>
 80086e8:	06d1      	lsls	r1, r2, #27
 80086ea:	bf44      	itt	mi
 80086ec:	2320      	movmi	r3, #32
 80086ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086f2:	0713      	lsls	r3, r2, #28
 80086f4:	bf44      	itt	mi
 80086f6:	232b      	movmi	r3, #43	@ 0x2b
 80086f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008700:	2b2a      	cmp	r3, #42	@ 0x2a
 8008702:	d015      	beq.n	8008730 <_vfiprintf_r+0x120>
 8008704:	9a07      	ldr	r2, [sp, #28]
 8008706:	4654      	mov	r4, sl
 8008708:	2000      	movs	r0, #0
 800870a:	f04f 0c0a 	mov.w	ip, #10
 800870e:	4621      	mov	r1, r4
 8008710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008714:	3b30      	subs	r3, #48	@ 0x30
 8008716:	2b09      	cmp	r3, #9
 8008718:	d94b      	bls.n	80087b2 <_vfiprintf_r+0x1a2>
 800871a:	b1b0      	cbz	r0, 800874a <_vfiprintf_r+0x13a>
 800871c:	9207      	str	r2, [sp, #28]
 800871e:	e014      	b.n	800874a <_vfiprintf_r+0x13a>
 8008720:	eba0 0308 	sub.w	r3, r0, r8
 8008724:	fa09 f303 	lsl.w	r3, r9, r3
 8008728:	4313      	orrs	r3, r2
 800872a:	9304      	str	r3, [sp, #16]
 800872c:	46a2      	mov	sl, r4
 800872e:	e7d2      	b.n	80086d6 <_vfiprintf_r+0xc6>
 8008730:	9b03      	ldr	r3, [sp, #12]
 8008732:	1d19      	adds	r1, r3, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	9103      	str	r1, [sp, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	bfbb      	ittet	lt
 800873c:	425b      	neglt	r3, r3
 800873e:	f042 0202 	orrlt.w	r2, r2, #2
 8008742:	9307      	strge	r3, [sp, #28]
 8008744:	9307      	strlt	r3, [sp, #28]
 8008746:	bfb8      	it	lt
 8008748:	9204      	strlt	r2, [sp, #16]
 800874a:	7823      	ldrb	r3, [r4, #0]
 800874c:	2b2e      	cmp	r3, #46	@ 0x2e
 800874e:	d10a      	bne.n	8008766 <_vfiprintf_r+0x156>
 8008750:	7863      	ldrb	r3, [r4, #1]
 8008752:	2b2a      	cmp	r3, #42	@ 0x2a
 8008754:	d132      	bne.n	80087bc <_vfiprintf_r+0x1ac>
 8008756:	9b03      	ldr	r3, [sp, #12]
 8008758:	1d1a      	adds	r2, r3, #4
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	9203      	str	r2, [sp, #12]
 800875e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008762:	3402      	adds	r4, #2
 8008764:	9305      	str	r3, [sp, #20]
 8008766:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800883c <_vfiprintf_r+0x22c>
 800876a:	7821      	ldrb	r1, [r4, #0]
 800876c:	2203      	movs	r2, #3
 800876e:	4650      	mov	r0, sl
 8008770:	f7f7 fd4e 	bl	8000210 <memchr>
 8008774:	b138      	cbz	r0, 8008786 <_vfiprintf_r+0x176>
 8008776:	9b04      	ldr	r3, [sp, #16]
 8008778:	eba0 000a 	sub.w	r0, r0, sl
 800877c:	2240      	movs	r2, #64	@ 0x40
 800877e:	4082      	lsls	r2, r0
 8008780:	4313      	orrs	r3, r2
 8008782:	3401      	adds	r4, #1
 8008784:	9304      	str	r3, [sp, #16]
 8008786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800878a:	4829      	ldr	r0, [pc, #164]	@ (8008830 <_vfiprintf_r+0x220>)
 800878c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008790:	2206      	movs	r2, #6
 8008792:	f7f7 fd3d 	bl	8000210 <memchr>
 8008796:	2800      	cmp	r0, #0
 8008798:	d03f      	beq.n	800881a <_vfiprintf_r+0x20a>
 800879a:	4b26      	ldr	r3, [pc, #152]	@ (8008834 <_vfiprintf_r+0x224>)
 800879c:	bb1b      	cbnz	r3, 80087e6 <_vfiprintf_r+0x1d6>
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	3307      	adds	r3, #7
 80087a2:	f023 0307 	bic.w	r3, r3, #7
 80087a6:	3308      	adds	r3, #8
 80087a8:	9303      	str	r3, [sp, #12]
 80087aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ac:	443b      	add	r3, r7
 80087ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80087b0:	e76a      	b.n	8008688 <_vfiprintf_r+0x78>
 80087b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80087b6:	460c      	mov	r4, r1
 80087b8:	2001      	movs	r0, #1
 80087ba:	e7a8      	b.n	800870e <_vfiprintf_r+0xfe>
 80087bc:	2300      	movs	r3, #0
 80087be:	3401      	adds	r4, #1
 80087c0:	9305      	str	r3, [sp, #20]
 80087c2:	4619      	mov	r1, r3
 80087c4:	f04f 0c0a 	mov.w	ip, #10
 80087c8:	4620      	mov	r0, r4
 80087ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087ce:	3a30      	subs	r2, #48	@ 0x30
 80087d0:	2a09      	cmp	r2, #9
 80087d2:	d903      	bls.n	80087dc <_vfiprintf_r+0x1cc>
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0c6      	beq.n	8008766 <_vfiprintf_r+0x156>
 80087d8:	9105      	str	r1, [sp, #20]
 80087da:	e7c4      	b.n	8008766 <_vfiprintf_r+0x156>
 80087dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80087e0:	4604      	mov	r4, r0
 80087e2:	2301      	movs	r3, #1
 80087e4:	e7f0      	b.n	80087c8 <_vfiprintf_r+0x1b8>
 80087e6:	ab03      	add	r3, sp, #12
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	462a      	mov	r2, r5
 80087ec:	4b12      	ldr	r3, [pc, #72]	@ (8008838 <_vfiprintf_r+0x228>)
 80087ee:	a904      	add	r1, sp, #16
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7fd faaf 	bl	8005d54 <_printf_float>
 80087f6:	4607      	mov	r7, r0
 80087f8:	1c78      	adds	r0, r7, #1
 80087fa:	d1d6      	bne.n	80087aa <_vfiprintf_r+0x19a>
 80087fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087fe:	07d9      	lsls	r1, r3, #31
 8008800:	d405      	bmi.n	800880e <_vfiprintf_r+0x1fe>
 8008802:	89ab      	ldrh	r3, [r5, #12]
 8008804:	059a      	lsls	r2, r3, #22
 8008806:	d402      	bmi.n	800880e <_vfiprintf_r+0x1fe>
 8008808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800880a:	f7fe f813 	bl	8006834 <__retarget_lock_release_recursive>
 800880e:	89ab      	ldrh	r3, [r5, #12]
 8008810:	065b      	lsls	r3, r3, #25
 8008812:	f53f af1f 	bmi.w	8008654 <_vfiprintf_r+0x44>
 8008816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008818:	e71e      	b.n	8008658 <_vfiprintf_r+0x48>
 800881a:	ab03      	add	r3, sp, #12
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	462a      	mov	r2, r5
 8008820:	4b05      	ldr	r3, [pc, #20]	@ (8008838 <_vfiprintf_r+0x228>)
 8008822:	a904      	add	r1, sp, #16
 8008824:	4630      	mov	r0, r6
 8008826:	f7fd fd2d 	bl	8006284 <_printf_i>
 800882a:	e7e4      	b.n	80087f6 <_vfiprintf_r+0x1e6>
 800882c:	08009040 	.word	0x08009040
 8008830:	0800904a 	.word	0x0800904a
 8008834:	08005d55 	.word	0x08005d55
 8008838:	080085ed 	.word	0x080085ed
 800883c:	08009046 	.word	0x08009046

08008840 <_raise_r>:
 8008840:	291f      	cmp	r1, #31
 8008842:	b538      	push	{r3, r4, r5, lr}
 8008844:	4605      	mov	r5, r0
 8008846:	460c      	mov	r4, r1
 8008848:	d904      	bls.n	8008854 <_raise_r+0x14>
 800884a:	2316      	movs	r3, #22
 800884c:	6003      	str	r3, [r0, #0]
 800884e:	f04f 30ff 	mov.w	r0, #4294967295
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008856:	b112      	cbz	r2, 800885e <_raise_r+0x1e>
 8008858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800885c:	b94b      	cbnz	r3, 8008872 <_raise_r+0x32>
 800885e:	4628      	mov	r0, r5
 8008860:	f000 f830 	bl	80088c4 <_getpid_r>
 8008864:	4622      	mov	r2, r4
 8008866:	4601      	mov	r1, r0
 8008868:	4628      	mov	r0, r5
 800886a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800886e:	f000 b817 	b.w	80088a0 <_kill_r>
 8008872:	2b01      	cmp	r3, #1
 8008874:	d00a      	beq.n	800888c <_raise_r+0x4c>
 8008876:	1c59      	adds	r1, r3, #1
 8008878:	d103      	bne.n	8008882 <_raise_r+0x42>
 800887a:	2316      	movs	r3, #22
 800887c:	6003      	str	r3, [r0, #0]
 800887e:	2001      	movs	r0, #1
 8008880:	e7e7      	b.n	8008852 <_raise_r+0x12>
 8008882:	2100      	movs	r1, #0
 8008884:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008888:	4620      	mov	r0, r4
 800888a:	4798      	blx	r3
 800888c:	2000      	movs	r0, #0
 800888e:	e7e0      	b.n	8008852 <_raise_r+0x12>

08008890 <raise>:
 8008890:	4b02      	ldr	r3, [pc, #8]	@ (800889c <raise+0xc>)
 8008892:	4601      	mov	r1, r0
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	f7ff bfd3 	b.w	8008840 <_raise_r>
 800889a:	bf00      	nop
 800889c:	20000028 	.word	0x20000028

080088a0 <_kill_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4d07      	ldr	r5, [pc, #28]	@ (80088c0 <_kill_r+0x20>)
 80088a4:	2300      	movs	r3, #0
 80088a6:	4604      	mov	r4, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	4611      	mov	r1, r2
 80088ac:	602b      	str	r3, [r5, #0]
 80088ae:	f7f9 fc7d 	bl	80021ac <_kill>
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	d102      	bne.n	80088bc <_kill_r+0x1c>
 80088b6:	682b      	ldr	r3, [r5, #0]
 80088b8:	b103      	cbz	r3, 80088bc <_kill_r+0x1c>
 80088ba:	6023      	str	r3, [r4, #0]
 80088bc:	bd38      	pop	{r3, r4, r5, pc}
 80088be:	bf00      	nop
 80088c0:	200008fc 	.word	0x200008fc

080088c4 <_getpid_r>:
 80088c4:	f7f9 bc6a 	b.w	800219c <_getpid>

080088c8 <_init>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	bf00      	nop
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr

080088d4 <_fini>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	bf00      	nop
 80088d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088da:	bc08      	pop	{r3}
 80088dc:	469e      	mov	lr, r3
 80088de:	4770      	bx	lr
