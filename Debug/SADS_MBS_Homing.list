
SADS_MBS_Homing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d9c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08009f70  08009f70  0000af70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a808  0800a808  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a808  0800a808  0000b808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a810  0800a810  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a810  0800a810  0000b810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a814  0800a814  0000b814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a818  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000930  200001dc  0800a9f4  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b0c  0800a9f4  0000cb0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014033  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c24  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00022e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e08  00000000  00000000  00024030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242b3  00000000  00000000  00024e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c92  00000000  00000000  000490eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d62b5  00000000  00000000  0005fd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cfc  00000000  00000000  00136078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0013bd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009f54 	.word	0x08009f54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009f54 	.word	0x08009f54

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MTi_init>:
float roll, pitch, yaw;

float q0, q1, q2, q3;

void readAndPrintNotification(UART_HandleTypeDef *huart);
void MTi_init(uint8_t sampleRate, UART_HandleTypeDef *huart) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
	m_dataBuffer[0] = XBUS_PREAMBLE;
 8000ee4:	4b39      	ldr	r3, [pc, #228]	@ (8000fcc <MTi_init+0xf4>)
 8000ee6:	22fa      	movs	r2, #250	@ 0xfa
 8000ee8:	701a      	strb	r2, [r3, #0]
	m_dataBuffer[1] = XBUS_MASTERDEVICE;
 8000eea:	4b38      	ldr	r3, [pc, #224]	@ (8000fcc <MTi_init+0xf4>)
 8000eec:	22ff      	movs	r2, #255	@ 0xff
 8000eee:	705a      	strb	r2, [r3, #1]
	state = WAITING_FOR_WAKEUP;
 8000ef0:	4b37      	ldr	r3, [pc, #220]	@ (8000fd0 <MTi_init+0xf8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2120      	movs	r1, #32
 8000efa:	4836      	ldr	r0, [pc, #216]	@ (8000fd4 <MTi_init+0xfc>)
 8000efc:	f002 ff1e 	bl	8003d3c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f00:	2064      	movs	r0, #100	@ 0x64
 8000f02:	f002 fc39 	bl	8003778 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2120      	movs	r1, #32
 8000f0a:	4832      	ldr	r0, [pc, #200]	@ (8000fd4 <MTi_init+0xfc>)
 8000f0c:	f002 ff16 	bl	8003d3c <HAL_GPIO_WritePin>

	while(state != READY) {
 8000f10:	e1a7      	b.n	8001262 <MTi_init+0x38a>
		// HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
		if(checkDataReadyLineMain()) {
 8000f12:	f002 fa63 	bl	80033dc <checkDataReadyLineMain>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d023      	beq.n	8000f64 <MTi_init+0x8c>
			HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_PIPE_STATUS, 1, status, sizeof(status), 100);
 8000f1c:	2364      	movs	r3, #100	@ 0x64
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2304      	movs	r3, #4
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd8 <MTi_init+0x100>)
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	21d6      	movs	r1, #214	@ 0xd6
 8000f2e:	482b      	ldr	r0, [pc, #172]	@ (8000fdc <MTi_init+0x104>)
 8000f30:	f003 f978 	bl	8004224 <HAL_I2C_Mem_Read>
			notificationMessageSize = status[0] | (status[1] << 8);
 8000f34:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <MTi_init+0x100>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <MTi_init+0x100>)
 8000f3c:	785b      	ldrb	r3, [r3, #1]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <MTi_init+0x108>)
 8000f4a:	801a      	strh	r2, [r3, #0]
			measurementMessageSize = status[2] | (status[3] << 8);
 8000f4c:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <MTi_init+0x100>)
 8000f4e:	789b      	ldrb	r3, [r3, #2]
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <MTi_init+0x100>)
 8000f54:	78db      	ldrb	r3, [r3, #3]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <MTi_init+0x10c>)
 8000f62:	801a      	strh	r2, [r3, #0]
		}

		if ((notificationMessageSize && notificationMessageSize < sizeof(m_dataBuffer)) ) {
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <MTi_init+0x108>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 817a 	beq.w	8001262 <MTi_init+0x38a>
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <MTi_init+0x108>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	2bff      	cmp	r3, #255	@ 0xff
 8000f74:	f200 8175 	bhi.w	8001262 <MTi_init+0x38a>
			if(checkDataReadyLineMain()) {
 8000f78:	f002 fa30 	bl	80033dc <checkDataReadyLineMain>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 816f 	beq.w	8001262 <MTi_init+0x38a>
				if(HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_NOTIFICATION_PIPE, 1, &m_dataBuffer[2], notificationMessageSize, 1000) != HAL_OK) {
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <MTi_init+0x108>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f8c:	9202      	str	r2, [sp, #8]
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <MTi_init+0x110>)
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	2205      	movs	r2, #5
 8000f98:	21d6      	movs	r1, #214	@ 0xd6
 8000f9a:	4810      	ldr	r0, [pc, #64]	@ (8000fdc <MTi_init+0x104>)
 8000f9c:	f003 f942 	bl	8004224 <HAL_I2C_Mem_Read>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d028      	beq.n	8000ff8 <MTi_init+0x120>
					len = snprintf(UART_buffer, sizeof(UART_buffer), "Failed to connect to MTi\n");
 8000fa6:	4a11      	ldr	r2, [pc, #68]	@ (8000fec <MTi_init+0x114>)
 8000fa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fac:	4810      	ldr	r0, [pc, #64]	@ (8000ff0 <MTi_init+0x118>)
 8000fae:	f006 fe91 	bl	8007cd4 <sniprintf>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <MTi_init+0x11c>)
 8000fb6:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MTi_init+0x11c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000fc2:	490b      	ldr	r1, [pc, #44]	@ (8000ff0 <MTi_init+0x118>)
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	f005 fc91 	bl	80068ec <HAL_UART_Transmit>

					break;
 8000fca:	e150      	b.n	800126e <MTi_init+0x396>
 8000fcc:	20000300 	.word	0x20000300
 8000fd0:	200002fc 	.word	0x200002fc
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	20000588 	.word	0x20000588
 8000fdc:	200006a8 	.word	0x200006a8
 8000fe0:	20000584 	.word	0x20000584
 8000fe4:	20000586 	.word	0x20000586
 8000fe8:	20000302 	.word	0x20000302
 8000fec:	08009f70 	.word	0x08009f70
 8000ff0:	200001f8 	.word	0x200001f8
 8000ff4:	200002f8 	.word	0x200002f8
				}
				// 3) User xbus.h helper to read the message ID and enter a new program state if needed
				if (Xbus_getMessageId(m_dataBuffer) == XMID_Wakeup && state == WAITING_FOR_WAKEUP)
 8000ff8:	489f      	ldr	r0, [pc, #636]	@ (8001278 <MTi_init+0x3a0>)
 8000ffa:	f002 f94b 	bl	8003294 <Xbus_getMessageId>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b3e      	cmp	r3, #62	@ 0x3e
 8001002:	d12f      	bne.n	8001064 <MTi_init+0x18c>
 8001004:	4b9d      	ldr	r3, [pc, #628]	@ (800127c <MTi_init+0x3a4>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d12b      	bne.n	8001064 <MTi_init+0x18c>
				{
					len = snprintf(UART_buffer, sizeof(UART_buffer), "Got Wakeup\n");
 800100c:	4a9c      	ldr	r2, [pc, #624]	@ (8001280 <MTi_init+0x3a8>)
 800100e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001012:	489c      	ldr	r0, [pc, #624]	@ (8001284 <MTi_init+0x3ac>)
 8001014:	f006 fe5e 	bl	8007cd4 <sniprintf>
 8001018:	4603      	mov	r3, r0
 800101a:	4a9b      	ldr	r2, [pc, #620]	@ (8001288 <MTi_init+0x3b0>)
 800101c:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 800101e:	4b9a      	ldr	r3, [pc, #616]	@ (8001288 <MTi_init+0x3b0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001028:	4996      	ldr	r1, [pc, #600]	@ (8001284 <MTi_init+0x3ac>)
 800102a:	6838      	ldr	r0, [r7, #0]
 800102c:	f005 fc5e 	bl	80068ec <HAL_UART_Transmit>

					Xbus_message(m_xbusTxBuffer, 0xFF, XMID_ReqDid, 0);
 8001030:	2300      	movs	r3, #0
 8001032:	2200      	movs	r2, #0
 8001034:	21ff      	movs	r1, #255	@ 0xff
 8001036:	4895      	ldr	r0, [pc, #596]	@ (800128c <MTi_init+0x3b4>)
 8001038:	f002 f98d 	bl	8003356 <Xbus_message>

					rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
 800103c:	4993      	ldr	r1, [pc, #588]	@ (800128c <MTi_init+0x3b4>)
 800103e:	4894      	ldr	r0, [pc, #592]	@ (8001290 <MTi_init+0x3b8>)
 8001040:	f002 f9dc 	bl	80033fc <Xbus_createRawMessageHelper>
 8001044:	4603      	mov	r3, r0
 8001046:	4a93      	ldr	r2, [pc, #588]	@ (8001294 <MTi_init+0x3bc>)
 8001048:	6013      	str	r3, [r2, #0]
					HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);
 800104a:	4b92      	ldr	r3, [pc, #584]	@ (8001294 <MTi_init+0x3bc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	b29b      	uxth	r3, r3
 8001050:	2264      	movs	r2, #100	@ 0x64
 8001052:	9200      	str	r2, [sp, #0]
 8001054:	4a8e      	ldr	r2, [pc, #568]	@ (8001290 <MTi_init+0x3b8>)
 8001056:	21d6      	movs	r1, #214	@ 0xd6
 8001058:	488f      	ldr	r0, [pc, #572]	@ (8001298 <MTi_init+0x3c0>)
 800105a:	f002 ffe5 	bl	8004028 <HAL_I2C_Master_Transmit>

					state = WAITING_FOR_ID;
 800105e:	4b87      	ldr	r3, [pc, #540]	@ (800127c <MTi_init+0x3a4>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
				}

				if (Xbus_getMessageId(m_dataBuffer) == XMID_DeviceId && state == WAITING_FOR_ID)
 8001064:	4884      	ldr	r0, [pc, #528]	@ (8001278 <MTi_init+0x3a0>)
 8001066:	f002 f915 	bl	8003294 <Xbus_getMessageId>
 800106a:	4603      	mov	r3, r0
 800106c:	2b01      	cmp	r3, #1
 800106e:	f040 80a0 	bne.w	80011b2 <MTi_init+0x2da>
 8001072:	4b82      	ldr	r3, [pc, #520]	@ (800127c <MTi_init+0x3a4>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	f040 809b 	bne.w	80011b2 <MTi_init+0x2da>
				{
					len = snprintf(UART_buffer, sizeof(UART_buffer), "Got Device ID\n");
 800107c:	4a87      	ldr	r2, [pc, #540]	@ (800129c <MTi_init+0x3c4>)
 800107e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001082:	4880      	ldr	r0, [pc, #512]	@ (8001284 <MTi_init+0x3ac>)
 8001084:	f006 fe26 	bl	8007cd4 <sniprintf>
 8001088:	4603      	mov	r3, r0
 800108a:	4a7f      	ldr	r2, [pc, #508]	@ (8001288 <MTi_init+0x3b0>)
 800108c:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 800108e:	4b7e      	ldr	r3, [pc, #504]	@ (8001288 <MTi_init+0x3b0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b29a      	uxth	r2, r3
 8001094:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001098:	497a      	ldr	r1, [pc, #488]	@ (8001284 <MTi_init+0x3ac>)
 800109a:	6838      	ldr	r0, [r7, #0]
 800109c:	f005 fc26 	bl	80068ec <HAL_UART_Transmit>

					// IMPORTANT: be sure to change the length of this message depending on which
					// meausurements you include
					Xbus_message(m_xbusTxBuffer, 0xFF, XMID_SetOutputConfig, 16);
 80010a0:	2310      	movs	r3, #16
 80010a2:	22c0      	movs	r2, #192	@ 0xc0
 80010a4:	21ff      	movs	r1, #255	@ 0xff
 80010a6:	4879      	ldr	r0, [pc, #484]	@ (800128c <MTi_init+0x3b4>)
 80010a8:	f002 f955 	bl	8003356 <Xbus_message>
					// Set Output mode: RotMatrix (0x2020)
					Xbus_getPointerToPayload(m_xbusTxBuffer)[0] = 0x20;
 80010ac:	4877      	ldr	r0, [pc, #476]	@ (800128c <MTi_init+0x3b4>)
 80010ae:	f002 f975 	bl	800339c <Xbus_getPointerToPayload>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2220      	movs	r2, #32
 80010b6:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[1] = 0x20;
 80010b8:	4874      	ldr	r0, [pc, #464]	@ (800128c <MTi_init+0x3b4>)
 80010ba:	f002 f96f 	bl	800339c <Xbus_getPointerToPayload>
 80010be:	4603      	mov	r3, r0
 80010c0:	3301      	adds	r3, #1
 80010c2:	2220      	movs	r2, #32
 80010c4:	701a      	strb	r2, [r3, #0]
					// Set Output rate
					Xbus_getPointerToPayload(m_xbusTxBuffer)[2] = 0x00;
 80010c6:	4871      	ldr	r0, [pc, #452]	@ (800128c <MTi_init+0x3b4>)
 80010c8:	f002 f968 	bl	800339c <Xbus_getPointerToPayload>
 80010cc:	4603      	mov	r3, r0
 80010ce:	3302      	adds	r3, #2
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[3] = sampleRate;
 80010d4:	486d      	ldr	r0, [pc, #436]	@ (800128c <MTi_init+0x3b4>)
 80010d6:	f002 f961 	bl	800339c <Xbus_getPointerToPayload>
 80010da:	4603      	mov	r3, r0
 80010dc:	3303      	adds	r3, #3
 80010de:	79fa      	ldrb	r2, [r7, #7]
 80010e0:	701a      	strb	r2, [r3, #0]

					// Set Output mode: Quaternion (0x2010)
					Xbus_getPointerToPayload(m_xbusTxBuffer)[4] = 0x20;
 80010e2:	486a      	ldr	r0, [pc, #424]	@ (800128c <MTi_init+0x3b4>)
 80010e4:	f002 f95a 	bl	800339c <Xbus_getPointerToPayload>
 80010e8:	4603      	mov	r3, r0
 80010ea:	3304      	adds	r3, #4
 80010ec:	2220      	movs	r2, #32
 80010ee:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[5] = 0x10;
 80010f0:	4866      	ldr	r0, [pc, #408]	@ (800128c <MTi_init+0x3b4>)
 80010f2:	f002 f953 	bl	800339c <Xbus_getPointerToPayload>
 80010f6:	4603      	mov	r3, r0
 80010f8:	3305      	adds	r3, #5
 80010fa:	2210      	movs	r2, #16
 80010fc:	701a      	strb	r2, [r3, #0]
					// Set Output rate
					Xbus_getPointerToPayload(m_xbusTxBuffer)[6] = 0x00;
 80010fe:	4863      	ldr	r0, [pc, #396]	@ (800128c <MTi_init+0x3b4>)
 8001100:	f002 f94c 	bl	800339c <Xbus_getPointerToPayload>
 8001104:	4603      	mov	r3, r0
 8001106:	3306      	adds	r3, #6
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[7] = sampleRate;
 800110c:	485f      	ldr	r0, [pc, #380]	@ (800128c <MTi_init+0x3b4>)
 800110e:	f002 f945 	bl	800339c <Xbus_getPointerToPayload>
 8001112:	4603      	mov	r3, r0
 8001114:	3307      	adds	r3, #7
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	701a      	strb	r2, [r3, #0]

					// Set Output mode: Body Rates (0x8020)
					Xbus_getPointerToPayload(m_xbusTxBuffer)[8] = 0x80;
 800111a:	485c      	ldr	r0, [pc, #368]	@ (800128c <MTi_init+0x3b4>)
 800111c:	f002 f93e 	bl	800339c <Xbus_getPointerToPayload>
 8001120:	4603      	mov	r3, r0
 8001122:	3308      	adds	r3, #8
 8001124:	2280      	movs	r2, #128	@ 0x80
 8001126:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[9] = 0x20;
 8001128:	4858      	ldr	r0, [pc, #352]	@ (800128c <MTi_init+0x3b4>)
 800112a:	f002 f937 	bl	800339c <Xbus_getPointerToPayload>
 800112e:	4603      	mov	r3, r0
 8001130:	3309      	adds	r3, #9
 8001132:	2220      	movs	r2, #32
 8001134:	701a      	strb	r2, [r3, #0]
					// Set Output rate
					Xbus_getPointerToPayload(m_xbusTxBuffer)[10] = 0x00;
 8001136:	4855      	ldr	r0, [pc, #340]	@ (800128c <MTi_init+0x3b4>)
 8001138:	f002 f930 	bl	800339c <Xbus_getPointerToPayload>
 800113c:	4603      	mov	r3, r0
 800113e:	330a      	adds	r3, #10
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[11] = sampleRate;
 8001144:	4851      	ldr	r0, [pc, #324]	@ (800128c <MTi_init+0x3b4>)
 8001146:	f002 f929 	bl	800339c <Xbus_getPointerToPayload>
 800114a:	4603      	mov	r3, r0
 800114c:	330b      	adds	r3, #11
 800114e:	79fa      	ldrb	r2, [r7, #7]
 8001150:	701a      	strb	r2, [r3, #0]

					// Set Output mode: Euler Angles (0x2030)
					Xbus_getPointerToPayload(m_xbusTxBuffer)[12] = 0x20;
 8001152:	484e      	ldr	r0, [pc, #312]	@ (800128c <MTi_init+0x3b4>)
 8001154:	f002 f922 	bl	800339c <Xbus_getPointerToPayload>
 8001158:	4603      	mov	r3, r0
 800115a:	330c      	adds	r3, #12
 800115c:	2220      	movs	r2, #32
 800115e:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[13] = 0x30;
 8001160:	484a      	ldr	r0, [pc, #296]	@ (800128c <MTi_init+0x3b4>)
 8001162:	f002 f91b 	bl	800339c <Xbus_getPointerToPayload>
 8001166:	4603      	mov	r3, r0
 8001168:	330d      	adds	r3, #13
 800116a:	2230      	movs	r2, #48	@ 0x30
 800116c:	701a      	strb	r2, [r3, #0]
					// Set Output rate
					Xbus_getPointerToPayload(m_xbusTxBuffer)[14] = 0x00;
 800116e:	4847      	ldr	r0, [pc, #284]	@ (800128c <MTi_init+0x3b4>)
 8001170:	f002 f914 	bl	800339c <Xbus_getPointerToPayload>
 8001174:	4603      	mov	r3, r0
 8001176:	330e      	adds	r3, #14
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[15] = sampleRate;
 800117c:	4843      	ldr	r0, [pc, #268]	@ (800128c <MTi_init+0x3b4>)
 800117e:	f002 f90d 	bl	800339c <Xbus_getPointerToPayload>
 8001182:	4603      	mov	r3, r0
 8001184:	330f      	adds	r3, #15
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	701a      	strb	r2, [r3, #0]


					rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
 800118a:	4940      	ldr	r1, [pc, #256]	@ (800128c <MTi_init+0x3b4>)
 800118c:	4840      	ldr	r0, [pc, #256]	@ (8001290 <MTi_init+0x3b8>)
 800118e:	f002 f935 	bl	80033fc <Xbus_createRawMessageHelper>
 8001192:	4603      	mov	r3, r0
 8001194:	4a3f      	ldr	r2, [pc, #252]	@ (8001294 <MTi_init+0x3bc>)
 8001196:	6013      	str	r3, [r2, #0]
					HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);
 8001198:	4b3e      	ldr	r3, [pc, #248]	@ (8001294 <MTi_init+0x3bc>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	2264      	movs	r2, #100	@ 0x64
 80011a0:	9200      	str	r2, [sp, #0]
 80011a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001290 <MTi_init+0x3b8>)
 80011a4:	21d6      	movs	r1, #214	@ 0xd6
 80011a6:	483c      	ldr	r0, [pc, #240]	@ (8001298 <MTi_init+0x3c0>)
 80011a8:	f002 ff3e 	bl	8004028 <HAL_I2C_Master_Transmit>

					state = WAITING_FOR_CONFIG_ACK;
 80011ac:	4b33      	ldr	r3, [pc, #204]	@ (800127c <MTi_init+0x3a4>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	701a      	strb	r2, [r3, #0]
				}

				// note: the config ack message is just the output config itself
				if(Xbus_getMessageId(m_dataBuffer) == XMID_OutputConfig && state == WAITING_FOR_CONFIG_ACK)
 80011b2:	4831      	ldr	r0, [pc, #196]	@ (8001278 <MTi_init+0x3a0>)
 80011b4:	f002 f86e 	bl	8003294 <Xbus_getMessageId>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2bc1      	cmp	r3, #193	@ 0xc1
 80011bc:	d151      	bne.n	8001262 <MTi_init+0x38a>
 80011be:	4b2f      	ldr	r3, [pc, #188]	@ (800127c <MTi_init+0x3a4>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d14d      	bne.n	8001262 <MTi_init+0x38a>
				{
					len = snprintf(UART_buffer, sizeof(UART_buffer), "Got config ACK\n");
 80011c6:	4a36      	ldr	r2, [pc, #216]	@ (80012a0 <MTi_init+0x3c8>)
 80011c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011cc:	482d      	ldr	r0, [pc, #180]	@ (8001284 <MTi_init+0x3ac>)
 80011ce:	f006 fd81 	bl	8007cd4 <sniprintf>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001288 <MTi_init+0x3b0>)
 80011d6:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 80011d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <MTi_init+0x3b0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	f242 7310 	movw	r3, #10000	@ 0x2710
 80011e2:	4928      	ldr	r1, [pc, #160]	@ (8001284 <MTi_init+0x3ac>)
 80011e4:	6838      	ldr	r0, [r7, #0]
 80011e6:	f005 fb81 	bl	80068ec <HAL_UART_Transmit>

					uint8_t buffer[2];
					HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_PROTOCOL_INFO, 1, buffer, sizeof(buffer), 100);
 80011ea:	2364      	movs	r3, #100	@ 0x64
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	2302      	movs	r3, #2
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	2201      	movs	r2, #1
 80011fc:	21d6      	movs	r1, #214	@ 0xd6
 80011fe:	4826      	ldr	r0, [pc, #152]	@ (8001298 <MTi_init+0x3c0>)
 8001200:	f003 f810 	bl	8004224 <HAL_I2C_Mem_Read>

					uint8_t version = buffer[0];
 8001204:	7b3b      	ldrb	r3, [r7, #12]
 8001206:	73fb      	strb	r3, [r7, #15]
					uint8_t dataReadyConfig = buffer[1];
 8001208:	7b7b      	ldrb	r3, [r7, #13]
 800120a:	73bb      	strb	r3, [r7, #14]

					len = snprintf(UART_buffer, sizeof(UART_buffer), "Version: %d\nData Ready Pin configuartion: %d\n",version,dataReadyConfig);
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	4613      	mov	r3, r2
 8001214:	4a23      	ldr	r2, [pc, #140]	@ (80012a4 <MTi_init+0x3cc>)
 8001216:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800121a:	481a      	ldr	r0, [pc, #104]	@ (8001284 <MTi_init+0x3ac>)
 800121c:	f006 fd5a 	bl	8007cd4 <sniprintf>
 8001220:	4603      	mov	r3, r0
 8001222:	4a19      	ldr	r2, [pc, #100]	@ (8001288 <MTi_init+0x3b0>)
 8001224:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <MTi_init+0x3b0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29a      	uxth	r2, r3
 800122c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001230:	4914      	ldr	r1, [pc, #80]	@ (8001284 <MTi_init+0x3ac>)
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	f005 fb5a 	bl	80068ec <HAL_UART_Transmit>

					len = snprintf(UART_buffer, sizeof(UART_buffer), "MTi was successfully configured!\n");
 8001238:	4a1b      	ldr	r2, [pc, #108]	@ (80012a8 <MTi_init+0x3d0>)
 800123a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800123e:	4811      	ldr	r0, [pc, #68]	@ (8001284 <MTi_init+0x3ac>)
 8001240:	f006 fd48 	bl	8007cd4 <sniprintf>
 8001244:	4603      	mov	r3, r0
 8001246:	4a10      	ldr	r2, [pc, #64]	@ (8001288 <MTi_init+0x3b0>)
 8001248:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <MTi_init+0x3b0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	b29a      	uxth	r2, r3
 8001250:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001254:	490b      	ldr	r1, [pc, #44]	@ (8001284 <MTi_init+0x3ac>)
 8001256:	6838      	ldr	r0, [r7, #0]
 8001258:	f005 fb48 	bl	80068ec <HAL_UART_Transmit>

//					Xbus_message(m_xbusTxBuffer, 0xFF, XMID_GotoMeasurement, 0);
//					rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
//					HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);

					state = READY;
 800125c:	4b07      	ldr	r3, [pc, #28]	@ (800127c <MTi_init+0x3a4>)
 800125e:	2204      	movs	r2, #4
 8001260:	701a      	strb	r2, [r3, #0]
	while(state != READY) {
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MTi_init+0x3a4>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b04      	cmp	r3, #4
 8001268:	f47f ae53 	bne.w	8000f12 <MTi_init+0x3a>
				}
			}
		}
	}
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000300 	.word	0x20000300
 800127c:	200002fc 	.word	0x200002fc
 8001280:	08009f8c 	.word	0x08009f8c
 8001284:	200001f8 	.word	0x200001f8
 8001288:	200002f8 	.word	0x200002f8
 800128c:	20000400 	.word	0x20000400
 8001290:	20000500 	.word	0x20000500
 8001294:	20000580 	.word	0x20000580
 8001298:	200006a8 	.word	0x200006a8
 800129c:	08009f98 	.word	0x08009f98
 80012a0:	08009fa8 	.word	0x08009fa8
 80012a4:	08009fb8 	.word	0x08009fb8
 80012a8:	08009fe8 	.word	0x08009fe8

080012ac <MTi_manual_init>:

void MTi_manual_init(UART_HandleTypeDef *huart) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80012b8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80012bc:	6018      	str	r0, [r3, #0]
	uint8_t rxChar;
	char txBuffer[256];
	char inputBuffer[256];
	int index = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
	int len = snprintf(txBuffer, sizeof(txBuffer), "Enter a sample rate less than 100:\r\n");
 80012c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80012c8:	4a61      	ldr	r2, [pc, #388]	@ (8001450 <MTi_manual_init+0x1a4>)
 80012ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012ce:	4618      	mov	r0, r3
 80012d0:	f006 fd00 	bl	8007cd4 <sniprintf>
 80012d4:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 80012d8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80012dc:	b29a      	uxth	r2, r3
 80012de:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80012e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80012e6:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	6800      	ldr	r0, [r0, #0]
 80012ee:	f005 fafd 	bl	80068ec <HAL_UART_Transmit>

	// Loop to receive one character at a time
	while (1) {
		// Blocking call to receive one character
		if (HAL_UART_Receive(huart, &rxChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 80012f2:	f207 210b 	addw	r1, r7, #523	@ 0x20b
 80012f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80012fa:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	2201      	movs	r2, #1
 8001304:	6800      	ldr	r0, [r0, #0]
 8001306:	f005 fb7c 	bl	8006a02 <HAL_UART_Receive>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f0      	bne.n	80012f2 <MTi_manual_init+0x46>
			// Optionally echo the character back to the terminal
			HAL_UART_Transmit(huart, &rxChar, 1, 100);
 8001310:	f207 210b 	addw	r1, r7, #523	@ 0x20b
 8001314:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001318:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 800131c:	2364      	movs	r3, #100	@ 0x64
 800131e:	2201      	movs	r2, #1
 8001320:	6800      	ldr	r0, [r0, #0]
 8001322:	f005 fae3 	bl	80068ec <HAL_UART_Transmit>

			// Check if the character is a newline or carriage return (end of input)
			if (rxChar == '\n' || rxChar == '\r') {
 8001326:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 800132a:	2b0a      	cmp	r3, #10
 800132c:	d003      	beq.n	8001336 <MTi_manual_init+0x8a>
 800132e:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8001332:	2b0d      	cmp	r3, #13
 8001334:	d109      	bne.n	800134a <MTi_manual_init+0x9e>
				inputBuffer[index] = '\0';  // Null-terminate the string
 8001336:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800133a:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 800133e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001342:	4413      	add	r3, r2
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
				break;
 8001348:	e038      	b.n	80013bc <MTi_manual_init+0x110>
			} else if (rxChar == 8){
 800134a:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 800134e:	2b08      	cmp	r3, #8
 8001350:	d11a      	bne.n	8001388 <MTi_manual_init+0xdc>
				int len = snprintf(txBuffer, sizeof(txBuffer), "\nInput buffer cleared, re-enter number:\n");
 8001352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001356:	4a3f      	ldr	r2, [pc, #252]	@ (8001454 <MTi_manual_init+0x1a8>)
 8001358:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800135c:	4618      	mov	r0, r3
 800135e:	f006 fcb9 	bl	8007cd4 <sniprintf>
 8001362:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
				HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 8001366:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800136a:	b29a      	uxth	r2, r3
 800136c:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8001370:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001374:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 8001378:	2364      	movs	r3, #100	@ 0x64
 800137a:	6800      	ldr	r0, [r0, #0]
 800137c:	f005 fab6 	bl	80068ec <HAL_UART_Transmit>
				index = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8001386:	e7b4      	b.n	80012f2 <MTi_manual_init+0x46>
			} else {
				// Only store the character if there is still room in the buffer
				if (index < 256 - 1) {
 8001388:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800138c:	2bfe      	cmp	r3, #254	@ 0xfe
 800138e:	dc0c      	bgt.n	80013aa <MTi_manual_init+0xfe>
					inputBuffer[index++] = rxChar;
 8001390:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 800139a:	f897 120b 	ldrb.w	r1, [r7, #523]	@ 0x20b
 800139e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80013a2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80013a6:	54d1      	strb	r1, [r2, r3]
 80013a8:	e7a3      	b.n	80012f2 <MTi_manual_init+0x46>
				} else {
					// If the buffer is full, null-terminate and break out
					inputBuffer[index] = '\0';
 80013aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80013ae:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80013b2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80013b6:	4413      	add	r3, r2
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// Convert the accumulated string to an integer
	int userSampleRate = atoi(inputBuffer);
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4618      	mov	r0, r3
 80013c2:	f005 fee5 	bl	8007190 <atoi>
 80013c6:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
	if (userSampleRate > 100) {
 80013ca:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80013ce:	2b64      	cmp	r3, #100	@ 0x64
 80013d0:	dd17      	ble.n	8001402 <MTi_manual_init+0x156>
		int len = snprintf(txBuffer, sizeof(txBuffer), "Error: ensure sample rate is less than 100\n");
 80013d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80013d6:	4a20      	ldr	r2, [pc, #128]	@ (8001458 <MTi_manual_init+0x1ac>)
 80013d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013dc:	4618      	mov	r0, r3
 80013de:	f006 fc79 	bl	8007cd4 <sniprintf>
 80013e2:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
		HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 80013e6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80013f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80013f4:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80013f8:	2364      	movs	r3, #100	@ 0x64
 80013fa:	6800      	ldr	r0, [r0, #0]
 80013fc:	f005 fa76 	bl	80068ec <HAL_UART_Transmit>
 8001400:	e022      	b.n	8001448 <MTi_manual_init+0x19c>
		return;
	}
	len = snprintf(txBuffer, sizeof(txBuffer), "Setting IMU Sample Rate to %d Hz\n",userSampleRate);
 8001402:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8001406:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800140a:	4a14      	ldr	r2, [pc, #80]	@ (800145c <MTi_manual_init+0x1b0>)
 800140c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001410:	f006 fc60 	bl	8007cd4 <sniprintf>
 8001414:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 8001418:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800141c:	b29a      	uxth	r2, r3
 800141e:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8001422:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001426:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 800142a:	2364      	movs	r3, #100	@ 0x64
 800142c:	6800      	ldr	r0, [r0, #0]
 800142e:	f005 fa5d 	bl	80068ec <HAL_UART_Transmit>
	MTi_init(userSampleRate,huart);
 8001432:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001436:	b2da      	uxtb	r2, r3
 8001438:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800143c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001440:	6819      	ldr	r1, [r3, #0]
 8001442:	4610      	mov	r0, r2
 8001444:	f7ff fd48 	bl	8000ed8 <MTi_init>
}
 8001448:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	0800a00c 	.word	0x0800a00c
 8001454:	0800a034 	.word	0x0800a034
 8001458:	0800a060 	.word	0x0800a060
 800145c:	0800a08c 	.word	0x0800a08c

08001460 <MTi_step>:
	        }
	    }
	}
}

void MTi_step() {
 8001460:	b580      	push	{r7, lr}
 8001462:	b09a      	sub	sp, #104	@ 0x68
 8001464:	af04      	add	r7, sp, #16
	m_dataBuffer[0] = XBUS_PREAMBLE;
 8001466:	4bca      	ldr	r3, [pc, #808]	@ (8001790 <MTi_step+0x330>)
 8001468:	22fa      	movs	r2, #250	@ 0xfa
 800146a:	701a      	strb	r2, [r3, #0]
	m_dataBuffer[1] = XBUS_MASTERDEVICE;
 800146c:	4bc8      	ldr	r3, [pc, #800]	@ (8001790 <MTi_step+0x330>)
 800146e:	22ff      	movs	r2, #255	@ 0xff
 8001470:	705a      	strb	r2, [r3, #1]

	// 1) Read pipe status and save incoming message sizes
	//	len = snprintf(UART_buffer, sizeof(UART_buffer), "Notif: %d, Msg: %d \n", notificationMessageSize,measurementMessageSize);
	//	HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 100);
	if(checkDataReadyLineMain()) {
 8001472:	f001 ffb3 	bl	80033dc <checkDataReadyLineMain>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 8185 	beq.w	8001788 <MTi_step+0x328>
		HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_PIPE_STATUS, 1, status, sizeof(status), 100);
 800147e:	2364      	movs	r3, #100	@ 0x64
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2304      	movs	r3, #4
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	4bc3      	ldr	r3, [pc, #780]	@ (8001794 <MTi_step+0x334>)
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2301      	movs	r3, #1
 800148c:	2204      	movs	r2, #4
 800148e:	21d6      	movs	r1, #214	@ 0xd6
 8001490:	48c1      	ldr	r0, [pc, #772]	@ (8001798 <MTi_step+0x338>)
 8001492:	f002 fec7 	bl	8004224 <HAL_I2C_Mem_Read>

		notificationMessageSize = status[0] | (status[1] << 8);
 8001496:	4bbf      	ldr	r3, [pc, #764]	@ (8001794 <MTi_step+0x334>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b21a      	sxth	r2, r3
 800149c:	4bbd      	ldr	r3, [pc, #756]	@ (8001794 <MTi_step+0x334>)
 800149e:	785b      	ldrb	r3, [r3, #1]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4bbc      	ldr	r3, [pc, #752]	@ (800179c <MTi_step+0x33c>)
 80014ac:	801a      	strh	r2, [r3, #0]
		measurementMessageSize = status[2] | (status[3] << 8);
 80014ae:	4bb9      	ldr	r3, [pc, #740]	@ (8001794 <MTi_step+0x334>)
 80014b0:	789b      	ldrb	r3, [r3, #2]
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	4bb7      	ldr	r3, [pc, #732]	@ (8001794 <MTi_step+0x334>)
 80014b6:	78db      	ldrb	r3, [r3, #3]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21b      	sxth	r3, r3
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4bb7      	ldr	r3, [pc, #732]	@ (80017a0 <MTi_step+0x340>)
 80014c4:	801a      	strh	r2, [r3, #0]


		if (measurementMessageSize && measurementMessageSize < sizeof(m_dataBuffer)) {
 80014c6:	4bb6      	ldr	r3, [pc, #728]	@ (80017a0 <MTi_step+0x340>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 815c 	beq.w	8001788 <MTi_step+0x328>
 80014d0:	4bb3      	ldr	r3, [pc, #716]	@ (80017a0 <MTi_step+0x340>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	2bff      	cmp	r3, #255	@ 0xff
 80014d6:	f200 8157 	bhi.w	8001788 <MTi_step+0x328>
			HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_MEASUREMENT_PIPE, 1, &m_dataBuffer[2], measurementMessageSize, 100);
 80014da:	4bb1      	ldr	r3, [pc, #708]	@ (80017a0 <MTi_step+0x340>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	2264      	movs	r2, #100	@ 0x64
 80014e0:	9202      	str	r2, [sp, #8]
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	4baf      	ldr	r3, [pc, #700]	@ (80017a4 <MTi_step+0x344>)
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2301      	movs	r3, #1
 80014ea:	2206      	movs	r2, #6
 80014ec:	21d6      	movs	r1, #214	@ 0xd6
 80014ee:	48aa      	ldr	r0, [pc, #680]	@ (8001798 <MTi_step+0x338>)
 80014f0:	f002 fe98 	bl	8004224 <HAL_I2C_Mem_Read>

			if(Xbus_getMessageId(m_dataBuffer) == XMID_MtData2) {
 80014f4:	48a6      	ldr	r0, [pc, #664]	@ (8001790 <MTi_step+0x330>)
 80014f6:	f001 fecd 	bl	8003294 <Xbus_getMessageId>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b36      	cmp	r3, #54	@ 0x36
 80014fe:	f040 8143 	bne.w	8001788 <MTi_step+0x328>
                int index = 4;  // Start index for reading the payload
 8001502:	2304      	movs	r3, #4
 8001504:	653b      	str	r3, [r7, #80]	@ 0x50

                uint16_t dataId   = extractUint16(m_dataBuffer, &index);
 8001506:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800150a:	4619      	mov	r1, r3
 800150c:	48a0      	ldr	r0, [pc, #640]	@ (8001790 <MTi_step+0x330>)
 800150e:	f002 f808 	bl	8003522 <extractUint16>
 8001512:	4603      	mov	r3, r0
 8001514:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                uint8_t  dataSize = extractUint8(m_dataBuffer, &index);
 8001518:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800151c:	4619      	mov	r1, r3
 800151e:	489c      	ldr	r0, [pc, #624]	@ (8001790 <MTi_step+0x330>)
 8001520:	f001 ffe7 	bl	80034f2 <extractUint8>
 8001524:	4603      	mov	r3, r0
 8001526:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

                float rotMatrixBuffer[9];
                if (dataId == 0x2020) {
 800152a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800152e:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001532:	4293      	cmp	r3, r2
 8001534:	d159      	bne.n	80015ea <MTi_step+0x18a>
                	rotMatrixBuffer[0] = extractFloat(m_dataBuffer, &index);
 8001536:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800153a:	4619      	mov	r1, r3
 800153c:	4894      	ldr	r0, [pc, #592]	@ (8001790 <MTi_step+0x330>)
 800153e:	f002 f869 	bl	8003614 <extractFloat>
 8001542:	eef0 7a40 	vmov.f32	s15, s0
 8001546:	edc7 7a01 	vstr	s15, [r7, #4]
                	rotMatrixBuffer[1] = extractFloat(m_dataBuffer, &index);
 800154a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800154e:	4619      	mov	r1, r3
 8001550:	488f      	ldr	r0, [pc, #572]	@ (8001790 <MTi_step+0x330>)
 8001552:	f002 f85f 	bl	8003614 <extractFloat>
 8001556:	eef0 7a40 	vmov.f32	s15, s0
 800155a:	edc7 7a02 	vstr	s15, [r7, #8]
                	rotMatrixBuffer[2] = extractFloat(m_dataBuffer, &index);
 800155e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001562:	4619      	mov	r1, r3
 8001564:	488a      	ldr	r0, [pc, #552]	@ (8001790 <MTi_step+0x330>)
 8001566:	f002 f855 	bl	8003614 <extractFloat>
 800156a:	eef0 7a40 	vmov.f32	s15, s0
 800156e:	edc7 7a03 	vstr	s15, [r7, #12]
                	rotMatrixBuffer[3] = extractFloat(m_dataBuffer, &index); // roll
 8001572:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001576:	4619      	mov	r1, r3
 8001578:	4885      	ldr	r0, [pc, #532]	@ (8001790 <MTi_step+0x330>)
 800157a:	f002 f84b 	bl	8003614 <extractFloat>
 800157e:	eef0 7a40 	vmov.f32	s15, s0
 8001582:	edc7 7a04 	vstr	s15, [r7, #16]
                	rotMatrixBuffer[4] = extractFloat(m_dataBuffer, &index); // pitch
 8001586:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800158a:	4619      	mov	r1, r3
 800158c:	4880      	ldr	r0, [pc, #512]	@ (8001790 <MTi_step+0x330>)
 800158e:	f002 f841 	bl	8003614 <extractFloat>
 8001592:	eef0 7a40 	vmov.f32	s15, s0
 8001596:	edc7 7a05 	vstr	s15, [r7, #20]
                	rotMatrixBuffer[5] = extractFloat(m_dataBuffer, &index); // yaw
 800159a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800159e:	4619      	mov	r1, r3
 80015a0:	487b      	ldr	r0, [pc, #492]	@ (8001790 <MTi_step+0x330>)
 80015a2:	f002 f837 	bl	8003614 <extractFloat>
 80015a6:	eef0 7a40 	vmov.f32	s15, s0
 80015aa:	edc7 7a06 	vstr	s15, [r7, #24]
                	rotMatrixBuffer[6] = extractFloat(m_dataBuffer, &index); // roll
 80015ae:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80015b2:	4619      	mov	r1, r3
 80015b4:	4876      	ldr	r0, [pc, #472]	@ (8001790 <MTi_step+0x330>)
 80015b6:	f002 f82d 	bl	8003614 <extractFloat>
 80015ba:	eef0 7a40 	vmov.f32	s15, s0
 80015be:	edc7 7a07 	vstr	s15, [r7, #28]
                	rotMatrixBuffer[7] = extractFloat(m_dataBuffer, &index); // pitch
 80015c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80015c6:	4619      	mov	r1, r3
 80015c8:	4871      	ldr	r0, [pc, #452]	@ (8001790 <MTi_step+0x330>)
 80015ca:	f002 f823 	bl	8003614 <extractFloat>
 80015ce:	eef0 7a40 	vmov.f32	s15, s0
 80015d2:	edc7 7a08 	vstr	s15, [r7, #32]
                	rotMatrixBuffer[8] = extractFloat(m_dataBuffer, &index); // yaw
 80015d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80015da:	4619      	mov	r1, r3
 80015dc:	486c      	ldr	r0, [pc, #432]	@ (8001790 <MTi_step+0x330>)
 80015de:	f002 f819 	bl	8003614 <extractFloat>
 80015e2:	eef0 7a40 	vmov.f32	s15, s0
 80015e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                }

                dataId   = extractUint16(m_dataBuffer, &index);
 80015ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80015ee:	4619      	mov	r1, r3
 80015f0:	4867      	ldr	r0, [pc, #412]	@ (8001790 <MTi_step+0x330>)
 80015f2:	f001 ff96 	bl	8003522 <extractUint16>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				dataSize = extractUint8(m_dataBuffer, &index);
 80015fc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001600:	4619      	mov	r1, r3
 8001602:	4863      	ldr	r0, [pc, #396]	@ (8001790 <MTi_step+0x330>)
 8001604:	f001 ff75 	bl	80034f2 <extractUint8>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				float quatBuffer[4];
				if (dataId == 0x2010) {
 800160e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001612:	f242 0210 	movw	r2, #8208	@ 0x2010
 8001616:	4293      	cmp	r3, r2
 8001618:	d127      	bne.n	800166a <MTi_step+0x20a>
					quatBuffer[0] = extractFloat(m_dataBuffer, &index);
 800161a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800161e:	4619      	mov	r1, r3
 8001620:	485b      	ldr	r0, [pc, #364]	@ (8001790 <MTi_step+0x330>)
 8001622:	f001 fff7 	bl	8003614 <extractFloat>
 8001626:	eef0 7a40 	vmov.f32	s15, s0
 800162a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
					quatBuffer[1] = extractFloat(m_dataBuffer, &index);
 800162e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001632:	4619      	mov	r1, r3
 8001634:	4856      	ldr	r0, [pc, #344]	@ (8001790 <MTi_step+0x330>)
 8001636:	f001 ffed 	bl	8003614 <extractFloat>
 800163a:	eef0 7a40 	vmov.f32	s15, s0
 800163e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
					quatBuffer[2] = extractFloat(m_dataBuffer, &index);
 8001642:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001646:	4619      	mov	r1, r3
 8001648:	4851      	ldr	r0, [pc, #324]	@ (8001790 <MTi_step+0x330>)
 800164a:	f001 ffe3 	bl	8003614 <extractFloat>
 800164e:	eef0 7a40 	vmov.f32	s15, s0
 8001652:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
					quatBuffer[3] = extractFloat(m_dataBuffer, &index);
 8001656:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800165a:	4619      	mov	r1, r3
 800165c:	484c      	ldr	r0, [pc, #304]	@ (8001790 <MTi_step+0x330>)
 800165e:	f001 ffd9 	bl	8003614 <extractFloat>
 8001662:	eef0 7a40 	vmov.f32	s15, s0
 8001666:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
				}
				q0 = quatBuffer[0];
 800166a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800166c:	4a4e      	ldr	r2, [pc, #312]	@ (80017a8 <MTi_step+0x348>)
 800166e:	6013      	str	r3, [r2, #0]
				q1 = quatBuffer[1];
 8001670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001672:	4a4e      	ldr	r2, [pc, #312]	@ (80017ac <MTi_step+0x34c>)
 8001674:	6013      	str	r3, [r2, #0]
				q2 = quatBuffer[2];
 8001676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001678:	4a4d      	ldr	r2, [pc, #308]	@ (80017b0 <MTi_step+0x350>)
 800167a:	6013      	str	r3, [r2, #0]
				q3 = quatBuffer[3];
 800167c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800167e:	4a4d      	ldr	r2, [pc, #308]	@ (80017b4 <MTi_step+0x354>)
 8001680:	6013      	str	r3, [r2, #0]

				dataId   = extractUint16(m_dataBuffer, &index);
 8001682:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001686:	4619      	mov	r1, r3
 8001688:	4841      	ldr	r0, [pc, #260]	@ (8001790 <MTi_step+0x330>)
 800168a:	f001 ff4a 	bl	8003522 <extractUint16>
 800168e:	4603      	mov	r3, r0
 8001690:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				dataSize = extractUint8(m_dataBuffer, &index);
 8001694:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001698:	4619      	mov	r1, r3
 800169a:	483d      	ldr	r0, [pc, #244]	@ (8001790 <MTi_step+0x330>)
 800169c:	f001 ff29 	bl	80034f2 <extractUint8>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				float bodyRateBuffer[3];
				if (dataId == 0x8020) {
 80016a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80016aa:	f248 0220 	movw	r2, #32800	@ 0x8020
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d11d      	bne.n	80016ee <MTi_step+0x28e>
					bodyRateBuffer[0] = extractFloat(m_dataBuffer, &index);
 80016b2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80016b6:	4619      	mov	r1, r3
 80016b8:	4835      	ldr	r0, [pc, #212]	@ (8001790 <MTi_step+0x330>)
 80016ba:	f001 ffab 	bl	8003614 <extractFloat>
 80016be:	eef0 7a40 	vmov.f32	s15, s0
 80016c2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
					bodyRateBuffer[1] = extractFloat(m_dataBuffer, &index);
 80016c6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80016ca:	4619      	mov	r1, r3
 80016cc:	4830      	ldr	r0, [pc, #192]	@ (8001790 <MTi_step+0x330>)
 80016ce:	f001 ffa1 	bl	8003614 <extractFloat>
 80016d2:	eef0 7a40 	vmov.f32	s15, s0
 80016d6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
					bodyRateBuffer[2] = extractFloat(m_dataBuffer, &index);
 80016da:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80016de:	4619      	mov	r1, r3
 80016e0:	482b      	ldr	r0, [pc, #172]	@ (8001790 <MTi_step+0x330>)
 80016e2:	f001 ff97 	bl	8003614 <extractFloat>
 80016e6:	eef0 7a40 	vmov.f32	s15, s0
 80016ea:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
				}
				dataId   = extractUint16(m_dataBuffer, &index);
 80016ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80016f2:	4619      	mov	r1, r3
 80016f4:	4826      	ldr	r0, [pc, #152]	@ (8001790 <MTi_step+0x330>)
 80016f6:	f001 ff14 	bl	8003522 <extractUint16>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				dataSize = extractUint8(m_dataBuffer, &index);
 8001700:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001704:	4619      	mov	r1, r3
 8001706:	4822      	ldr	r0, [pc, #136]	@ (8001790 <MTi_step+0x330>)
 8001708:	f001 fef3 	bl	80034f2 <extractUint8>
 800170c:	4603      	mov	r3, r0
 800170e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

				float eulerAngleBuffer[3];
				if (dataId == 0x2030) {
 8001712:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001716:	f242 0230 	movw	r2, #8240	@ 0x2030
 800171a:	4293      	cmp	r3, r2
 800171c:	d11d      	bne.n	800175a <MTi_step+0x2fa>
					eulerAngleBuffer[0] = extractFloat(m_dataBuffer, &index);
 800171e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001722:	4619      	mov	r1, r3
 8001724:	481a      	ldr	r0, [pc, #104]	@ (8001790 <MTi_step+0x330>)
 8001726:	f001 ff75 	bl	8003614 <extractFloat>
 800172a:	eef0 7a40 	vmov.f32	s15, s0
 800172e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
					eulerAngleBuffer[1] = extractFloat(m_dataBuffer, &index);
 8001732:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001736:	4619      	mov	r1, r3
 8001738:	4815      	ldr	r0, [pc, #84]	@ (8001790 <MTi_step+0x330>)
 800173a:	f001 ff6b 	bl	8003614 <extractFloat>
 800173e:	eef0 7a40 	vmov.f32	s15, s0
 8001742:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
					eulerAngleBuffer[2] = extractFloat(m_dataBuffer, &index);
 8001746:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800174a:	4619      	mov	r1, r3
 800174c:	4810      	ldr	r0, [pc, #64]	@ (8001790 <MTi_step+0x330>)
 800174e:	f001 ff61 	bl	8003614 <extractFloat>
 8001752:	eef0 7a40 	vmov.f32	s15, s0
 8001756:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
				}

				roll = eulerAngleBuffer[0] - roll_mounting_error;
 800175a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800175e:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <MTi_step+0x358>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001768:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <MTi_step+0x35c>)
 800176a:	edc3 7a00 	vstr	s15, [r3]
				pitch = eulerAngleBuffer[1]- pitch_mounting_error;
 800176e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001772:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <MTi_step+0x360>)
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <MTi_step+0x364>)
 800177e:	edc3 7a00 	vstr	s15, [r3]
				yaw = eulerAngleBuffer[2];
 8001782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001784:	4a10      	ldr	r2, [pc, #64]	@ (80017c8 <MTi_step+0x368>)
 8001786:	6013      	str	r3, [r2, #0]
//				len = snprintf(UART_buffer, sizeof(UART_buffer), "Euler Angles: %.2f %.2f %.2f\n",eulerAngleBuffer[0],eulerAngleBuffer[1],eulerAngleBuffer[2]);
//				HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);
			}
		}
	}
}
 8001788:	bf00      	nop
 800178a:	3758      	adds	r7, #88	@ 0x58
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000300 	.word	0x20000300
 8001794:	20000588 	.word	0x20000588
 8001798:	200006a8 	.word	0x200006a8
 800179c:	20000584 	.word	0x20000584
 80017a0:	20000586 	.word	0x20000586
 80017a4:	20000302 	.word	0x20000302
 80017a8:	20000598 	.word	0x20000598
 80017ac:	2000059c 	.word	0x2000059c
 80017b0:	200005a0 	.word	0x200005a0
 80017b4:	200005a4 	.word	0x200005a4
 80017b8:	20000000 	.word	0x20000000
 80017bc:	2000058c 	.word	0x2000058c
 80017c0:	20000004 	.word	0x20000004
 80017c4:	20000590 	.word	0x20000590
 80017c8:	20000594 	.word	0x20000594

080017cc <app_start>:
#define REG_OFFSET        0x00      /* Teenys writable block     */

char txBuffer[256];


void app_start(UART_HandleTypeDef *huart) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	uint8_t rxChar;
	while (1) {
		// Blocking call to receive one character
		int len = snprintf(txBuffer, sizeof(txBuffer), "------ SADS Balance Configuration Tool -----\n");
 80017d4:	4a2e      	ldr	r2, [pc, #184]	@ (8001890 <app_start+0xc4>)
 80017d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017da:	482e      	ldr	r0, [pc, #184]	@ (8001894 <app_start+0xc8>)
 80017dc:	f006 fa7a 	bl	8007cd4 <sniprintf>
 80017e0:	60f8      	str	r0, [r7, #12]
		HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	2364      	movs	r3, #100	@ 0x64
 80017e8:	492a      	ldr	r1, [pc, #168]	@ (8001894 <app_start+0xc8>)
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f005 f87e 	bl	80068ec <HAL_UART_Transmit>
		len = snprintf(txBuffer, sizeof(txBuffer), "Press 'h' to home system\nPress 'm' to go into manual mode\nPress 'i' to configure IMU sample rate\n");
 80017f0:	4a29      	ldr	r2, [pc, #164]	@ (8001898 <app_start+0xcc>)
 80017f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017f6:	4827      	ldr	r0, [pc, #156]	@ (8001894 <app_start+0xc8>)
 80017f8:	f006 fa6c 	bl	8007cd4 <sniprintf>
 80017fc:	60f8      	str	r0, [r7, #12]
		HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	b29a      	uxth	r2, r3
 8001802:	2364      	movs	r3, #100	@ 0x64
 8001804:	4923      	ldr	r1, [pc, #140]	@ (8001894 <app_start+0xc8>)
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f005 f870 	bl	80068ec <HAL_UART_Transmit>

		if (HAL_UART_Receive(huart, &rxChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 800180c:	f107 010b 	add.w	r1, r7, #11
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
 8001814:	2201      	movs	r2, #1
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f005 f8f3 	bl	8006a02 <HAL_UART_Receive>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1d8      	bne.n	80017d4 <app_start+0x8>
			if (rxChar == 'h') {
 8001822:	7afb      	ldrb	r3, [r7, #11]
 8001824:	2b68      	cmp	r3, #104	@ 0x68
 8001826:	d115      	bne.n	8001854 <app_start+0x88>
				len = snprintf(txBuffer, sizeof(txBuffer), "Entering homing routine in 5 seconds, ensure 24V power is connected...\n");
 8001828:	4a1c      	ldr	r2, [pc, #112]	@ (800189c <app_start+0xd0>)
 800182a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800182e:	4819      	ldr	r0, [pc, #100]	@ (8001894 <app_start+0xc8>)
 8001830:	f006 fa50 	bl	8007cd4 <sniprintf>
 8001834:	60f8      	str	r0, [r7, #12]
				HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	b29a      	uxth	r2, r3
 800183a:	2364      	movs	r3, #100	@ 0x64
 800183c:	4915      	ldr	r1, [pc, #84]	@ (8001894 <app_start+0xc8>)
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f005 f854 	bl	80068ec <HAL_UART_Transmit>
				HAL_Delay(5000);
 8001844:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001848:	f001 ff96 	bl	8003778 <HAL_Delay>
				home(huart);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 fcd9 	bl	8002204 <home>
 8001852:	e7bf      	b.n	80017d4 <app_start+0x8>

			} else if(rxChar == 'm') {
 8001854:	7afb      	ldrb	r3, [r7, #11]
 8001856:	2b6d      	cmp	r3, #109	@ 0x6d
 8001858:	d103      	bne.n	8001862 <app_start+0x96>
				manualControl(huart);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fda4 	bl	80023a8 <manualControl>
 8001860:	e7b8      	b.n	80017d4 <app_start+0x8>
			} else if(rxChar == 'i') {
 8001862:	7afb      	ldrb	r3, [r7, #11]
 8001864:	2b69      	cmp	r3, #105	@ 0x69
 8001866:	d103      	bne.n	8001870 <app_start+0xa4>
				MTi_manual_init(huart);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fd1f 	bl	80012ac <MTi_manual_init>
 800186e:	e7b1      	b.n	80017d4 <app_start+0x8>
			} else {
				len = snprintf(txBuffer, sizeof(txBuffer), "Invalid keystroke\n");
 8001870:	4a0b      	ldr	r2, [pc, #44]	@ (80018a0 <app_start+0xd4>)
 8001872:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001876:	4807      	ldr	r0, [pc, #28]	@ (8001894 <app_start+0xc8>)
 8001878:	f006 fa2c 	bl	8007cd4 <sniprintf>
 800187c:	60f8      	str	r0, [r7, #12]
				HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	b29a      	uxth	r2, r3
 8001882:	2364      	movs	r3, #100	@ 0x64
 8001884:	4903      	ldr	r1, [pc, #12]	@ (8001894 <app_start+0xc8>)
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f005 f830 	bl	80068ec <HAL_UART_Transmit>
	while (1) {
 800188c:	e7a2      	b.n	80017d4 <app_start+0x8>
 800188e:	bf00      	nop
 8001890:	0800a0b8 	.word	0x0800a0b8
 8001894:	200005a8 	.word	0x200005a8
 8001898:	0800a0e8 	.word	0x0800a0e8
 800189c:	0800a14c 	.word	0x0800a14c
 80018a0:	0800a194 	.word	0x0800a194

080018a4 <HAL_TIM_PeriodElapsedCallback>:
		}

	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a8:	b098      	sub	sp, #96	@ 0x60
 80018aa:	af0e      	add	r7, sp, #56	@ 0x38
 80018ac:	61f8      	str	r0, [r7, #28]
    if(htim->Instance == TIM3) {
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a32      	ldr	r2, [pc, #200]	@ (800197c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d101      	bne.n	80018bc <HAL_TIM_PeriodElapsedCallback+0x18>
    	MTi_step();
 80018b8:	f7ff fdd2 	bl	8001460 <MTi_step>
//			int len = snprintf(txBuffer, sizeof(txBuffer), "I2C Communication with Teensy Failed\n");
//			HAL_UART_Transmit(&huart3, (uint8_t *)txBuffer, len, 100);
//    	}
    }

    if(htim->Instance == TIM1) {
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d154      	bne.n	8001970 <HAL_TIM_PeriodElapsedCallback+0xcc>
    	int len = snprintf(txBuffer, sizeof(txBuffer), "Roll: %.2f, Pitch: %.2f, Yaw: %.2f      Quat: [ %.2f %.2f %.2f %.2f ]\n",roll,pitch,yaw,q0,q1,q2,q3);
 80018c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe5c 	bl	8000588 <__aeabi_f2d>
 80018d0:	4680      	mov	r8, r0
 80018d2:	4689      	mov	r9, r1
 80018d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001988 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe55 	bl	8000588 <__aeabi_f2d>
 80018de:	4682      	mov	sl, r0
 80018e0:	468b      	mov	fp, r1
 80018e2:	4b2a      	ldr	r3, [pc, #168]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe4e 	bl	8000588 <__aeabi_f2d>
 80018ec:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80018f0:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe47 	bl	8000588 <__aeabi_f2d>
 80018fa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80018fe:	4b25      	ldr	r3, [pc, #148]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe40 	bl	8000588 <__aeabi_f2d>
 8001908:	e9c7 0100 	strd	r0, r1, [r7]
 800190c:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe39 	bl	8000588 <__aeabi_f2d>
 8001916:	4604      	mov	r4, r0
 8001918:	460d      	mov	r5, r1
 800191a:	4b20      	ldr	r3, [pc, #128]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe32 	bl	8000588 <__aeabi_f2d>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800192c:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8001930:	ed97 7b00 	vldr	d7, [r7]
 8001934:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001938:	ed97 7b02 	vldr	d7, [r7, #8]
 800193c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001940:	ed97 7b04 	vldr	d7, [r7, #16]
 8001944:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001948:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800194c:	e9cd 8900 	strd	r8, r9, [sp]
 8001950:	4a13      	ldr	r2, [pc, #76]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001952:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001956:	4813      	ldr	r0, [pc, #76]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001958:	f006 f9bc 	bl	8007cd4 <sniprintf>
 800195c:	6278      	str	r0, [r7, #36]	@ 0x24
    	HAL_UART_Transmit(user_huart, (uint8_t *)txBuffer, len, 10000);
 800195e:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	b29a      	uxth	r2, r3
 8001966:	f242 7310 	movw	r3, #10000	@ 0x2710
 800196a:	490e      	ldr	r1, [pc, #56]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800196c:	f004 ffbe 	bl	80068ec <HAL_UART_Transmit>
    }
}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	@ 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800197a:	bf00      	nop
 800197c:	40000400 	.word	0x40000400
 8001980:	40010000 	.word	0x40010000
 8001984:	2000058c 	.word	0x2000058c
 8001988:	20000590 	.word	0x20000590
 800198c:	20000594 	.word	0x20000594
 8001990:	20000598 	.word	0x20000598
 8001994:	2000059c 	.word	0x2000059c
 8001998:	200005a0 	.word	0x200005a0
 800199c:	200005a4 	.word	0x200005a4
 80019a0:	0800a1a8 	.word	0x0800a1a8
 80019a4:	200005a8 	.word	0x200005a8
 80019a8:	200008b8 	.word	0x200008b8

080019ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b2:	f001 fe6f 	bl	8003694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b6:	f000 f855 	bl	8001a64 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ba:	f000 fa97 	bl	8001eec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019be:	f000 fa41 	bl	8001e44 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80019c2:	f000 f8c1 	bl	8001b48 <MX_I2C1_Init>
  MX_TIM2_Init();
 80019c6:	f000 f96f 	bl	8001ca8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019ca:	f000 f9b9 	bl	8001d40 <MX_TIM3_Init>
  MX_TIM1_Init();
 80019ce:	f000 f919 	bl	8001c04 <MX_TIM1_Init>
  MX_I2C2_Init();
 80019d2:	f000 f8e9 	bl	8001ba8 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 80019d6:	f000 fa5f 	bl	8001e98 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  	user_huart = &huart3;
 80019da:	4b1d      	ldr	r3, [pc, #116]	@ (8001a50 <main+0xa4>)
 80019dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001a54 <main+0xa8>)
 80019de:	601a      	str	r2, [r3, #0]
//    MTI CODE: COMMENT OUT IF NOT CONNECTED OR PROGRAM WILL FAIL TO START
    uint8_t sampleRate = 0x14;
 80019e0:	2314      	movs	r3, #20
 80019e2:	71fb      	strb	r3, [r7, #7]
    MTi_init(sampleRate, user_huart);
 80019e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <main+0xa4>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fa73 	bl	8000ed8 <MTi_init>
    int sample_ARR = (180000000)/((1799+1)*(sampleRate + 3)) - 1;
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	3303      	adds	r3, #3
 80019f6:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	4a16      	ldr	r2, [pc, #88]	@ (8001a58 <main+0xac>)
 8001a00:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a04:	3b01      	subs	r3, #1
 8001a06:	603b      	str	r3, [r7, #0]
    __HAL_TIM_SET_AUTORELOAD(&htim3, sample_ARR);
 8001a08:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <main+0xb0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <main+0xb0>)
 8001a14:	60d3      	str	r3, [r2, #12]
    HAL_TIM_Base_Start_IT(&htim3); // Start TIM3 interrupts to take measurements
 8001a16:	4811      	ldr	r0, [pc, #68]	@ (8001a5c <main+0xb0>)
 8001a18:	f004 f85e 	bl	8005ad8 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	2120      	movs	r1, #32
 8001a20:	480f      	ldr	r0, [pc, #60]	@ (8001a60 <main+0xb4>)
 8001a22:	f002 f98b 	bl	8003d3c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001a26:	2064      	movs	r0, #100	@ 0x64
 8001a28:	f001 fea6 	bl	8003778 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2120      	movs	r1, #32
 8001a30:	480b      	ldr	r0, [pc, #44]	@ (8001a60 <main+0xb4>)
 8001a32:	f002 f983 	bl	8003d3c <HAL_GPIO_WritePin>

	stepperControl_init(user_huart);
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <main+0xa4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fb5a 	bl	80020f4 <stepperControl_init>
	app_start(user_huart);
 8001a40:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <main+0xa4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fec1 	bl	80017cc <app_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a4a:	bf00      	nop
 8001a4c:	e7fd      	b.n	8001a4a <main+0x9e>
 8001a4e:	bf00      	nop
 8001a50:	200008b8 	.word	0x200008b8
 8001a54:	20000870 	.word	0x20000870
 8001a58:	0aba9500 	.word	0x0aba9500
 8001a5c:	200007e0 	.word	0x200007e0
 8001a60:	40020400 	.word	0x40020400

08001a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b094      	sub	sp, #80	@ 0x50
 8001a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	2234      	movs	r2, #52	@ 0x34
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f006 f9a5 	bl	8007dc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <SystemClock_Config+0xdc>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	4a2b      	ldr	r2, [pc, #172]	@ (8001b40 <SystemClock_Config+0xdc>)
 8001a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a98:	4b29      	ldr	r3, [pc, #164]	@ (8001b40 <SystemClock_Config+0xdc>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	4b26      	ldr	r3, [pc, #152]	@ (8001b44 <SystemClock_Config+0xe0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a25      	ldr	r2, [pc, #148]	@ (8001b44 <SystemClock_Config+0xe0>)
 8001aae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <SystemClock_Config+0xe0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac8:	2310      	movs	r3, #16
 8001aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001acc:	2302      	movs	r3, #2
 8001ace:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ad8:	23b4      	movs	r3, #180	@ 0xb4
 8001ada:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001adc:	2302      	movs	r3, #2
 8001ade:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4618      	mov	r0, r3
 8001aee:	f003 fd05 	bl	80054fc <HAL_RCC_OscConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001af8:	f000 faf6 	bl	80020e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001afc:	f003 f964 	bl	8004dc8 <HAL_PWREx_EnableOverDrive>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b06:	f000 faef 	bl	80020e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0a:	230f      	movs	r3, #15
 8001b0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b16:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b20:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	2105      	movs	r1, #5
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 f99d 	bl	8004e68 <HAL_RCC_ClockConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001b34:	f000 fad8 	bl	80020e8 <Error_Handler>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3750      	adds	r7, #80	@ 0x50
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40007000 	.word	0x40007000

08001b48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <MX_I2C1_Init+0x54>)
 8001b4e:	4a14      	ldr	r2, [pc, #80]	@ (8001ba0 <MX_I2C1_Init+0x58>)
 8001b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b52:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <MX_I2C1_Init+0x54>)
 8001b54:	4a13      	ldr	r2, [pc, #76]	@ (8001ba4 <MX_I2C1_Init+0x5c>)
 8001b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001b58:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <MX_I2C1_Init+0x54>)
 8001b5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b5e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b60:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <MX_I2C1_Init+0x54>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b66:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <MX_I2C1_Init+0x54>)
 8001b68:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <MX_I2C1_Init+0x54>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b74:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <MX_I2C1_Init+0x54>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <MX_I2C1_Init+0x54>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <MX_I2C1_Init+0x54>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <MX_I2C1_Init+0x54>)
 8001b88:	f002 f90a 	bl	8003da0 <HAL_I2C_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001b92:	f000 faa9 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200006a8 	.word	0x200006a8
 8001ba0:	40005400 	.word	0x40005400
 8001ba4:	00061a80 	.word	0x00061a80

08001ba8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <MX_I2C2_Init+0x50>)
 8001bae:	4a13      	ldr	r2, [pc, #76]	@ (8001bfc <MX_I2C2_Init+0x54>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <MX_I2C2_Init+0x50>)
 8001bb4:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <MX_I2C2_Init+0x58>)
 8001bb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <MX_I2C2_Init+0x50>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <MX_I2C2_Init+0x50>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <MX_I2C2_Init+0x50>)
 8001bc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <MX_I2C2_Init+0x50>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <MX_I2C2_Init+0x50>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <MX_I2C2_Init+0x50>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <MX_I2C2_Init+0x50>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001be4:	4804      	ldr	r0, [pc, #16]	@ (8001bf8 <MX_I2C2_Init+0x50>)
 8001be6:	f002 f8db 	bl	8003da0 <HAL_I2C_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bf0:	f000 fa7a 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200006fc 	.word	0x200006fc
 8001bfc:	40005800 	.word	0x40005800
 8001c00:	00061a80 	.word	0x00061a80

08001c04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	463b      	mov	r3, r7
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca0 <MX_TIM1_Init+0x9c>)
 8001c22:	4a20      	ldr	r2, [pc, #128]	@ (8001ca4 <MX_TIM1_Init+0xa0>)
 8001c24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17999;
 8001c26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca0 <MX_TIM1_Init+0x9c>)
 8001c28:	f244 624f 	movw	r2, #17999	@ 0x464f
 8001c2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca0 <MX_TIM1_Init+0x9c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001c34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <MX_TIM1_Init+0x9c>)
 8001c36:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001c3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <MX_TIM1_Init+0x9c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <MX_TIM1_Init+0x9c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c48:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <MX_TIM1_Init+0x9c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c4e:	4814      	ldr	r0, [pc, #80]	@ (8001ca0 <MX_TIM1_Init+0x9c>)
 8001c50:	f003 fef2 	bl	8005a38 <HAL_TIM_Base_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c5a:	f000 fa45 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480d      	ldr	r0, [pc, #52]	@ (8001ca0 <MX_TIM1_Init+0x9c>)
 8001c6c:	f004 f978 	bl	8005f60 <HAL_TIM_ConfigClockSource>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c76:	f000 fa37 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c82:	463b      	mov	r3, r7
 8001c84:	4619      	mov	r1, r3
 8001c86:	4806      	ldr	r0, [pc, #24]	@ (8001ca0 <MX_TIM1_Init+0x9c>)
 8001c88:	f004 fd50 	bl	800672c <HAL_TIMEx_MasterConfigSynchronization>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001c92:	f000 fa29 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000750 	.word	0x20000750
 8001ca4:	40010000 	.word	0x40010000

08001ca8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <MX_TIM2_Init+0x94>)
 8001cc6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17999;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <MX_TIM2_Init+0x94>)
 8001cce:	f244 624f 	movw	r2, #17999	@ 0x464f
 8001cd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd4:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <MX_TIM2_Init+0x94>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8001cda:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <MX_TIM2_Init+0x94>)
 8001cdc:	2202      	movs	r2, #2
 8001cde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce0:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <MX_TIM2_Init+0x94>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <MX_TIM2_Init+0x94>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cec:	4813      	ldr	r0, [pc, #76]	@ (8001d3c <MX_TIM2_Init+0x94>)
 8001cee:	f003 fea3 	bl	8005a38 <HAL_TIM_Base_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001cf8:	f000 f9f6 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	4619      	mov	r1, r3
 8001d08:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <MX_TIM2_Init+0x94>)
 8001d0a:	f004 f929 	bl	8005f60 <HAL_TIM_ConfigClockSource>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d14:	f000 f9e8 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d20:	463b      	mov	r3, r7
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <MX_TIM2_Init+0x94>)
 8001d26:	f004 fd01 	bl	800672c <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d30:	f000 f9da 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000798 	.word	0x20000798

08001d40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	@ 0x38
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	f107 0320 	add.w	r3, r7, #32
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
 8001d6c:	615a      	str	r2, [r3, #20]
 8001d6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d70:	4b32      	ldr	r3, [pc, #200]	@ (8001e3c <MX_TIM3_Init+0xfc>)
 8001d72:	4a33      	ldr	r2, [pc, #204]	@ (8001e40 <MX_TIM3_Init+0x100>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1799;
 8001d76:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <MX_TIM3_Init+0xfc>)
 8001d78:	f240 7207 	movw	r2, #1799	@ 0x707
 8001d7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <MX_TIM3_Init+0xfc>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001d84:	4b2d      	ldr	r3, [pc, #180]	@ (8001e3c <MX_TIM3_Init+0xfc>)
 8001d86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e3c <MX_TIM3_Init+0xfc>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d92:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <MX_TIM3_Init+0xfc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d98:	4828      	ldr	r0, [pc, #160]	@ (8001e3c <MX_TIM3_Init+0xfc>)
 8001d9a:	f003 fe4d 	bl	8005a38 <HAL_TIM_Base_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001da4:	f000 f9a0 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001db2:	4619      	mov	r1, r3
 8001db4:	4821      	ldr	r0, [pc, #132]	@ (8001e3c <MX_TIM3_Init+0xfc>)
 8001db6:	f004 f8d3 	bl	8005f60 <HAL_TIM_ConfigClockSource>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001dc0:	f000 f992 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001dc4:	481d      	ldr	r0, [pc, #116]	@ (8001e3c <MX_TIM3_Init+0xfc>)
 8001dc6:	f003 ff26 	bl	8005c16 <HAL_TIM_OC_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001dd0:	f000 f98a 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ddc:	f107 0320 	add.w	r3, r7, #32
 8001de0:	4619      	mov	r1, r3
 8001de2:	4816      	ldr	r0, [pc, #88]	@ (8001e3c <MX_TIM3_Init+0xfc>)
 8001de4:	f004 fca2 	bl	800672c <HAL_TIMEx_MasterConfigSynchronization>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001dee:	f000 f97b 	bl	80020e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8001df6:	2332      	movs	r3, #50	@ 0x32
 8001df8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	4619      	mov	r1, r3
 8001e08:	480c      	ldr	r0, [pc, #48]	@ (8001e3c <MX_TIM3_Init+0xfc>)
 8001e0a:	f004 f84d 	bl	8005ea8 <HAL_TIM_OC_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001e14:	f000 f968 	bl	80020e8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	2204      	movs	r2, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	4806      	ldr	r0, [pc, #24]	@ (8001e3c <MX_TIM3_Init+0xfc>)
 8001e24:	f004 f840 	bl	8005ea8 <HAL_TIM_OC_ConfigChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8001e2e:	f000 f95b 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	3738      	adds	r7, #56	@ 0x38
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200007e0 	.word	0x200007e0
 8001e40:	40000400 	.word	0x40000400

08001e44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e4a:	4a12      	ldr	r2, [pc, #72]	@ (8001e94 <MX_USART2_UART_Init+0x50>)
 8001e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e50:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001e54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	@ (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e7c:	f004 fce6 	bl	800684c <HAL_UART_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e86:	f000 f92f 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000828 	.word	0x20000828
 8001e94:	40004400 	.word	0x40004400

08001e98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ee8 <MX_USART3_UART_Init+0x50>)
 8001ea0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001ea4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ea8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001ed0:	f004 fcbc 	bl	800684c <HAL_UART_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001eda:	f000 f905 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000870 	.word	0x20000870
 8001ee8:	40004800 	.word	0x40004800

08001eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b74      	ldr	r3, [pc, #464]	@ (80020d8 <MX_GPIO_Init+0x1ec>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a73      	ldr	r2, [pc, #460]	@ (80020d8 <MX_GPIO_Init+0x1ec>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b71      	ldr	r3, [pc, #452]	@ (80020d8 <MX_GPIO_Init+0x1ec>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b6d      	ldr	r3, [pc, #436]	@ (80020d8 <MX_GPIO_Init+0x1ec>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a6c      	ldr	r2, [pc, #432]	@ (80020d8 <MX_GPIO_Init+0x1ec>)
 8001f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b6a      	ldr	r3, [pc, #424]	@ (80020d8 <MX_GPIO_Init+0x1ec>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b66      	ldr	r3, [pc, #408]	@ (80020d8 <MX_GPIO_Init+0x1ec>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	4a65      	ldr	r2, [pc, #404]	@ (80020d8 <MX_GPIO_Init+0x1ec>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4a:	4b63      	ldr	r3, [pc, #396]	@ (80020d8 <MX_GPIO_Init+0x1ec>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	4b5f      	ldr	r3, [pc, #380]	@ (80020d8 <MX_GPIO_Init+0x1ec>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	4a5e      	ldr	r2, [pc, #376]	@ (80020d8 <MX_GPIO_Init+0x1ec>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f66:	4b5c      	ldr	r3, [pc, #368]	@ (80020d8 <MX_GPIO_Init+0x1ec>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, I2C_ADD0_Pin|I2C_ADD1_Pin|I2C_ADD2_Pin|PSEL_1_Pin, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8001f78:	4858      	ldr	r0, [pc, #352]	@ (80020dc <MX_GPIO_Init+0x1f0>)
 8001f7a:	f001 fedf 	bl	8003d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP4_Pin|STEP1_Pin|STEP2_Pin|STEP3_Pin
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f24e 0132 	movw	r1, #57394	@ 0xe032
 8001f84:	4856      	ldr	r0, [pc, #344]	@ (80020e0 <MX_GPIO_Init+0x1f4>)
 8001f86:	f001 fed9 	bl	8003d3c <HAL_GPIO_WritePin>
                          |DIR2_Pin|RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PSEL_0_GPIO_Port, PSEL_0_Pin, GPIO_PIN_SET);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	2180      	movs	r1, #128	@ 0x80
 8001f8e:	4855      	ldr	r0, [pc, #340]	@ (80020e4 <MX_GPIO_Init+0x1f8>)
 8001f90:	f001 fed4 	bl	8003d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR3_GPIO_Port, DIR3_Pin, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f9a:	4852      	ldr	r0, [pc, #328]	@ (80020e4 <MX_GPIO_Init+0x1f8>)
 8001f9c:	f001 fece 	bl	8003d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR4_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001fa6:	484d      	ldr	r0, [pc, #308]	@ (80020dc <MX_GPIO_Init+0x1f0>)
 8001fa8:	f001 fec8 	bl	8003d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LIMIT_SWITCH5_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH5_Pin;
 8001fac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fb2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIMIT_SWITCH5_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4848      	ldr	r0, [pc, #288]	@ (80020e4 <MX_GPIO_Init+0x1f8>)
 8001fc4:	f001 fd0e 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_ADD0_Pin I2C_ADD1_Pin I2C_ADD2_Pin DIR4_Pin
                           PSEL_1_Pin DIR1_Pin */
  GPIO_InitStruct.Pin = I2C_ADD0_Pin|I2C_ADD1_Pin|I2C_ADD2_Pin|DIR4_Pin
 8001fc8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001fcc:	617b      	str	r3, [r7, #20]
                          |PSEL_1_Pin|DIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	483e      	ldr	r0, [pc, #248]	@ (80020dc <MX_GPIO_Init+0x1f0>)
 8001fe2:	f001 fcff 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP4_Pin STEP1_Pin STEP2_Pin STEP3_Pin
                           DIR2_Pin */
  GPIO_InitStruct.Pin = STEP4_Pin|STEP1_Pin|STEP2_Pin|STEP3_Pin
 8001fe6:	f24e 0312 	movw	r3, #57362	@ 0xe012
 8001fea:	617b      	str	r3, [r7, #20]
                          |DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fec:	2301      	movs	r3, #1
 8001fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4838      	ldr	r0, [pc, #224]	@ (80020e0 <MX_GPIO_Init+0x1f4>)
 8002000:	f001 fcf0 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH2_Pin LIMIT_SWITCH1_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH2_Pin|LIMIT_SWITCH1_Pin;
 8002004:	2344      	movs	r3, #68	@ 0x44
 8002006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002008:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800200c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4831      	ldr	r0, [pc, #196]	@ (80020e0 <MX_GPIO_Init+0x1f4>)
 800201a:	f001 fce3 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSEL_0_Pin DIR3_Pin */
  GPIO_InitStruct.Pin = PSEL_0_Pin|DIR3_Pin;
 800201e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002024:	2301      	movs	r3, #1
 8002026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4619      	mov	r1, r3
 8002036:	482b      	ldr	r0, [pc, #172]	@ (80020e4 <MX_GPIO_Init+0x1f8>)
 8002038:	f001 fcd4 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH4_Pin LIMIT_SWITCH3_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH4_Pin|LIMIT_SWITCH3_Pin;
 800203c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002042:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	4822      	ldr	r0, [pc, #136]	@ (80020dc <MX_GPIO_Init+0x1f0>)
 8002054:	f001 fcc6 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_READY_Pin */
  GPIO_InitStruct.Pin = DATA_READY_Pin;
 8002058:	2308      	movs	r3, #8
 800205a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800205c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002062:	2302      	movs	r3, #2
 8002064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_READY_GPIO_Port, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	481c      	ldr	r0, [pc, #112]	@ (80020e0 <MX_GPIO_Init+0x1f4>)
 800206e:	f001 fcb9 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8002072:	2320      	movs	r3, #32
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002076:	2301      	movs	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207e:	2302      	movs	r3, #2
 8002080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	4815      	ldr	r0, [pc, #84]	@ (80020e0 <MX_GPIO_Init+0x1f4>)
 800208a:	f001 fcab 	bl	80039e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2008      	movs	r0, #8
 8002094:	f001 fc6f 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002098:	2008      	movs	r0, #8
 800209a:	f001 fc88 	bl	80039ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2009      	movs	r0, #9
 80020a4:	f001 fc67 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80020a8:	2009      	movs	r0, #9
 80020aa:	f001 fc80 	bl	80039ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2017      	movs	r0, #23
 80020b4:	f001 fc5f 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020b8:	2017      	movs	r0, #23
 80020ba:	f001 fc78 	bl	80039ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2028      	movs	r0, #40	@ 0x28
 80020c4:	f001 fc57 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020c8:	2028      	movs	r0, #40	@ 0x28
 80020ca:	f001 fc70 	bl	80039ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	@ 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40020800 	.word	0x40020800

080020e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ec:	b672      	cpsid	i
}
 80020ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <Error_Handler+0x8>

080020f4 <stepperControl_init>:
void sendPosUpdate(char,int);
void resetPositions();
void emergencyStop();
void resetSystem();

void stepperControl_init(UART_HandleTypeDef *huart){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	currentStatus = STANDBY;
 80020fc:	4b38      	ldr	r3, [pc, #224]	@ (80021e0 <stepperControl_init+0xec>)
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
	resetSystem();
 8002102:	f000 fd8b 	bl	8002c1c <resetSystem>
	selected_huart = huart;
 8002106:	4a37      	ldr	r2, [pc, #220]	@ (80021e4 <stepperControl_init+0xf0>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6013      	str	r3, [r2, #0]

	motor4.stepPort = STEP4_GPIO_Port;
 800210c:	4b36      	ldr	r3, [pc, #216]	@ (80021e8 <stepperControl_init+0xf4>)
 800210e:	4a37      	ldr	r2, [pc, #220]	@ (80021ec <stepperControl_init+0xf8>)
 8002110:	601a      	str	r2, [r3, #0]
	motor4.stepPin  = STEP4_Pin;
 8002112:	4b35      	ldr	r3, [pc, #212]	@ (80021e8 <stepperControl_init+0xf4>)
 8002114:	2202      	movs	r2, #2
 8002116:	809a      	strh	r2, [r3, #4]
	motor4.dirPort  = DIR4_GPIO_Port;
 8002118:	4b33      	ldr	r3, [pc, #204]	@ (80021e8 <stepperControl_init+0xf4>)
 800211a:	4a35      	ldr	r2, [pc, #212]	@ (80021f0 <stepperControl_init+0xfc>)
 800211c:	609a      	str	r2, [r3, #8]
	motor4.dirPin   = DIR4_Pin;
 800211e:	4b32      	ldr	r3, [pc, #200]	@ (80021e8 <stepperControl_init+0xf4>)
 8002120:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002124:	819a      	strh	r2, [r3, #12]
	motor4.currentPos = 0;
 8002126:	4b30      	ldr	r3, [pc, #192]	@ (80021e8 <stepperControl_init+0xf4>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
	motor4.desiredPos = 0;
 800212c:	4b2e      	ldr	r3, [pc, #184]	@ (80021e8 <stepperControl_init+0xf4>)
 800212e:	2200      	movs	r2, #0
 8002130:	615a      	str	r2, [r3, #20]
	motor4.toggleCount = 0;
 8002132:	4b2d      	ldr	r3, [pc, #180]	@ (80021e8 <stepperControl_init+0xf4>)
 8002134:	2200      	movs	r2, #0
 8002136:	739a      	strb	r2, [r3, #14]
	motor4.active = 0;
 8002138:	4b2b      	ldr	r3, [pc, #172]	@ (80021e8 <stepperControl_init+0xf4>)
 800213a:	2200      	movs	r2, #0
 800213c:	761a      	strb	r2, [r3, #24]

	motor3.stepPort = STEP3_GPIO_Port;
 800213e:	4b2d      	ldr	r3, [pc, #180]	@ (80021f4 <stepperControl_init+0x100>)
 8002140:	4a2a      	ldr	r2, [pc, #168]	@ (80021ec <stepperControl_init+0xf8>)
 8002142:	601a      	str	r2, [r3, #0]
	motor3.stepPin  = STEP3_Pin;
 8002144:	4b2b      	ldr	r3, [pc, #172]	@ (80021f4 <stepperControl_init+0x100>)
 8002146:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800214a:	809a      	strh	r2, [r3, #4]
	motor3.dirPort  = DIR3_GPIO_Port;
 800214c:	4b29      	ldr	r3, [pc, #164]	@ (80021f4 <stepperControl_init+0x100>)
 800214e:	4a2a      	ldr	r2, [pc, #168]	@ (80021f8 <stepperControl_init+0x104>)
 8002150:	609a      	str	r2, [r3, #8]
	motor3.dirPin   = DIR3_Pin;
 8002152:	4b28      	ldr	r3, [pc, #160]	@ (80021f4 <stepperControl_init+0x100>)
 8002154:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002158:	819a      	strh	r2, [r3, #12]
	motor3.currentPos = 0;
 800215a:	4b26      	ldr	r3, [pc, #152]	@ (80021f4 <stepperControl_init+0x100>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
	motor3.desiredPos = 0;
 8002160:	4b24      	ldr	r3, [pc, #144]	@ (80021f4 <stepperControl_init+0x100>)
 8002162:	2200      	movs	r2, #0
 8002164:	615a      	str	r2, [r3, #20]
	motor3.toggleCount = 0;
 8002166:	4b23      	ldr	r3, [pc, #140]	@ (80021f4 <stepperControl_init+0x100>)
 8002168:	2200      	movs	r2, #0
 800216a:	739a      	strb	r2, [r3, #14]
	motor3.active = 0;
 800216c:	4b21      	ldr	r3, [pc, #132]	@ (80021f4 <stepperControl_init+0x100>)
 800216e:	2200      	movs	r2, #0
 8002170:	761a      	strb	r2, [r3, #24]

    motor2.stepPort = STEP2_GPIO_Port;
 8002172:	4b22      	ldr	r3, [pc, #136]	@ (80021fc <stepperControl_init+0x108>)
 8002174:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <stepperControl_init+0xf8>)
 8002176:	601a      	str	r2, [r3, #0]
	motor2.stepPin  = STEP2_Pin;
 8002178:	4b20      	ldr	r3, [pc, #128]	@ (80021fc <stepperControl_init+0x108>)
 800217a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800217e:	809a      	strh	r2, [r3, #4]
	motor2.dirPort  = DIR2_GPIO_Port;
 8002180:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <stepperControl_init+0x108>)
 8002182:	4a1a      	ldr	r2, [pc, #104]	@ (80021ec <stepperControl_init+0xf8>)
 8002184:	609a      	str	r2, [r3, #8]
	motor2.dirPin   = DIR2_Pin;
 8002186:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <stepperControl_init+0x108>)
 8002188:	2210      	movs	r2, #16
 800218a:	819a      	strh	r2, [r3, #12]
	motor2.currentPos = 0;
 800218c:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <stepperControl_init+0x108>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
	motor2.desiredPos = 0;
 8002192:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <stepperControl_init+0x108>)
 8002194:	2200      	movs	r2, #0
 8002196:	615a      	str	r2, [r3, #20]
	motor2.toggleCount = 0;
 8002198:	4b18      	ldr	r3, [pc, #96]	@ (80021fc <stepperControl_init+0x108>)
 800219a:	2200      	movs	r2, #0
 800219c:	739a      	strb	r2, [r3, #14]
	motor2.active = 0;
 800219e:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <stepperControl_init+0x108>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	761a      	strb	r2, [r3, #24]

	motor1.stepPort = STEP1_GPIO_Port;
 80021a4:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <stepperControl_init+0x10c>)
 80021a6:	4a11      	ldr	r2, [pc, #68]	@ (80021ec <stepperControl_init+0xf8>)
 80021a8:	601a      	str	r2, [r3, #0]
	motor1.stepPin  = STEP1_Pin;
 80021aa:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <stepperControl_init+0x10c>)
 80021ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021b0:	809a      	strh	r2, [r3, #4]
	motor1.dirPort  = DIR1_GPIO_Port;
 80021b2:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <stepperControl_init+0x10c>)
 80021b4:	4a0e      	ldr	r2, [pc, #56]	@ (80021f0 <stepperControl_init+0xfc>)
 80021b6:	609a      	str	r2, [r3, #8]
	motor1.dirPin   = DIR1_Pin;
 80021b8:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <stepperControl_init+0x10c>)
 80021ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021be:	819a      	strh	r2, [r3, #12]
	motor1.currentPos = 0;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <stepperControl_init+0x10c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
	motor1.desiredPos = 0;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <stepperControl_init+0x10c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	615a      	str	r2, [r3, #20]
	motor1.toggleCount = 0;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <stepperControl_init+0x10c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	739a      	strb	r2, [r3, #14]
	motor1.active = 0;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <stepperControl_init+0x10c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	761a      	strb	r2, [r3, #24]
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	200009b2 	.word	0x200009b2
 80021e4:	200009b4 	.word	0x200009b4
 80021e8:	2000093c 	.word	0x2000093c
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40020000 	.word	0x40020000
 80021f4:	20000958 	.word	0x20000958
 80021f8:	40020800 	.word	0x40020800
 80021fc:	20000974 	.word	0x20000974
 8002200:	20000990 	.word	0x20000990

08002204 <home>:

void home(UART_HandleTypeDef *huart){
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	resetPositions();
 800220c:	f000 fcca 	bl	8002ba4 <resetPositions>
	sendVelocityCommand(STEPS_PER_REV);
 8002210:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fc0b 	bl	8002a30 <sendVelocityCommand>
	currentStatus = HOMING;
 800221a:	4b50      	ldr	r3, [pc, #320]	@ (800235c <home+0x158>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
	MOTOR3_READY = 0;
 8002220:	4b4f      	ldr	r3, [pc, #316]	@ (8002360 <home+0x15c>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
	MOTOR4_READY = 0;
 8002226:	4b4f      	ldr	r3, [pc, #316]	@ (8002364 <home+0x160>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
	homing = 1;
 800222c:	4b4e      	ldr	r3, [pc, #312]	@ (8002368 <home+0x164>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]

	sendSinglePosCommand(3,200000);
 8002232:	494e      	ldr	r1, [pc, #312]	@ (800236c <home+0x168>)
 8002234:	2003      	movs	r0, #3
 8002236:	f000 fb7b 	bl	8002930 <sendSinglePosCommand>
	sendSinglePosCommand(4,200000); // I2C call is blocking, spamming buffer okay
 800223a:	494c      	ldr	r1, [pc, #304]	@ (800236c <home+0x168>)
 800223c:	2004      	movs	r0, #4
 800223e:	f000 fb77 	bl	8002930 <sendSinglePosCommand>
	motor3.desiredPos = 100000;
 8002242:	4b4b      	ldr	r3, [pc, #300]	@ (8002370 <home+0x16c>)
 8002244:	4a4b      	ldr	r2, [pc, #300]	@ (8002374 <home+0x170>)
 8002246:	615a      	str	r2, [r3, #20]
	motor3.active = 1;
 8002248:	4b49      	ldr	r3, [pc, #292]	@ (8002370 <home+0x16c>)
 800224a:	2201      	movs	r2, #1
 800224c:	761a      	strb	r2, [r3, #24]
	motor4.desiredPos = 100000;
 800224e:	4b4a      	ldr	r3, [pc, #296]	@ (8002378 <home+0x174>)
 8002250:	4a48      	ldr	r2, [pc, #288]	@ (8002374 <home+0x170>)
 8002252:	615a      	str	r2, [r3, #20]
	motor4.active = 1;
 8002254:	4b48      	ldr	r3, [pc, #288]	@ (8002378 <home+0x174>)
 8002256:	2201      	movs	r2, #1
 8002258:	761a      	strb	r2, [r3, #24]
	int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Motor 3 and 4 Active and Desired Pos Set\n");
 800225a:	4a48      	ldr	r2, [pc, #288]	@ (800237c <home+0x178>)
 800225c:	2180      	movs	r1, #128	@ 0x80
 800225e:	4848      	ldr	r0, [pc, #288]	@ (8002380 <home+0x17c>)
 8002260:	f005 fd38 	bl	8007cd4 <sniprintf>
 8002264:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(selected_huart, (uint8_t *)UART_buffer2, len, 10000);
 8002266:	4b47      	ldr	r3, [pc, #284]	@ (8002384 <home+0x180>)
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	b29a      	uxth	r2, r3
 800226e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002272:	4943      	ldr	r1, [pc, #268]	@ (8002380 <home+0x17c>)
 8002274:	f004 fb3a 	bl	80068ec <HAL_UART_Transmit>
	while((!MOTOR3_READY) || (!MOTOR4_READY)) {
 8002278:	bf00      	nop
 800227a:	4b39      	ldr	r3, [pc, #228]	@ (8002360 <home+0x15c>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0fb      	beq.n	800227a <home+0x76>
 8002282:	4b38      	ldr	r3, [pc, #224]	@ (8002364 <home+0x160>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f7      	beq.n	800227a <home+0x76>

	}

	len = snprintf(UART_buffer2, sizeof(UART_buffer2), "MOT 3 and 4 done, beginning next stage in 10 seconds...\r\n");
 800228a:	4a3f      	ldr	r2, [pc, #252]	@ (8002388 <home+0x184>)
 800228c:	2180      	movs	r1, #128	@ 0x80
 800228e:	483c      	ldr	r0, [pc, #240]	@ (8002380 <home+0x17c>)
 8002290:	f005 fd20 	bl	8007cd4 <sniprintf>
 8002294:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(selected_huart, (uint8_t *)UART_buffer2, len, 10000);
 8002296:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <home+0x180>)
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	b29a      	uxth	r2, r3
 800229e:	f242 7310 	movw	r3, #10000	@ 0x2710
 80022a2:	4937      	ldr	r1, [pc, #220]	@ (8002380 <home+0x17c>)
 80022a4:	f004 fb22 	bl	80068ec <HAL_UART_Transmit>
	HAL_Delay(10000);
 80022a8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80022ac:	f001 fa64 	bl	8003778 <HAL_Delay>

	motor4.active = 0;
 80022b0:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <home+0x174>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	761a      	strb	r2, [r3, #24]
	motor3.active = 0;
 80022b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002370 <home+0x16c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	761a      	strb	r2, [r3, #24]

	sendSinglePosCommand(1,200000);
 80022bc:	492b      	ldr	r1, [pc, #172]	@ (800236c <home+0x168>)
 80022be:	2001      	movs	r0, #1
 80022c0:	f000 fb36 	bl	8002930 <sendSinglePosCommand>
	sendSinglePosCommand(2,200000); // I2C call is blocking, spamming buffer okay
 80022c4:	4929      	ldr	r1, [pc, #164]	@ (800236c <home+0x168>)
 80022c6:	2002      	movs	r0, #2
 80022c8:	f000 fb32 	bl	8002930 <sendSinglePosCommand>

	MOTOR1_READY = 0;
 80022cc:	4b2f      	ldr	r3, [pc, #188]	@ (800238c <home+0x188>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
	MOTOR2_READY = 0;
 80022d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002390 <home+0x18c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]

	motor1.desiredPos = 100000;
 80022d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002394 <home+0x190>)
 80022da:	4a26      	ldr	r2, [pc, #152]	@ (8002374 <home+0x170>)
 80022dc:	615a      	str	r2, [r3, #20]
	motor1.active = 1;
 80022de:	4b2d      	ldr	r3, [pc, #180]	@ (8002394 <home+0x190>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	761a      	strb	r2, [r3, #24]
	motor2.desiredPos = 100000;
 80022e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002398 <home+0x194>)
 80022e6:	4a23      	ldr	r2, [pc, #140]	@ (8002374 <home+0x170>)
 80022e8:	615a      	str	r2, [r3, #20]
	motor2.active = 1;
 80022ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002398 <home+0x194>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	761a      	strb	r2, [r3, #24]

	len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Motor 1 and 2 Active and Desired Pos Set\n");
 80022f0:	4a2a      	ldr	r2, [pc, #168]	@ (800239c <home+0x198>)
 80022f2:	2180      	movs	r1, #128	@ 0x80
 80022f4:	4822      	ldr	r0, [pc, #136]	@ (8002380 <home+0x17c>)
 80022f6:	f005 fced 	bl	8007cd4 <sniprintf>
 80022fa:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(selected_huart, (uint8_t *)UART_buffer2, len, 10000);
 80022fc:	4b21      	ldr	r3, [pc, #132]	@ (8002384 <home+0x180>)
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	b29a      	uxth	r2, r3
 8002304:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002308:	491d      	ldr	r1, [pc, #116]	@ (8002380 <home+0x17c>)
 800230a:	f004 faef 	bl	80068ec <HAL_UART_Transmit>
	while((!MOTOR1_READY) || (!MOTOR2_READY)) {
 800230e:	bf00      	nop
 8002310:	4b1e      	ldr	r3, [pc, #120]	@ (800238c <home+0x188>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0fb      	beq.n	8002310 <home+0x10c>
 8002318:	4b1d      	ldr	r3, [pc, #116]	@ (8002390 <home+0x18c>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f7      	beq.n	8002310 <home+0x10c>

	}



	len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Homing routine finished\n");
 8002320:	4a1f      	ldr	r2, [pc, #124]	@ (80023a0 <home+0x19c>)
 8002322:	2180      	movs	r1, #128	@ 0x80
 8002324:	4816      	ldr	r0, [pc, #88]	@ (8002380 <home+0x17c>)
 8002326:	f005 fcd5 	bl	8007cd4 <sniprintf>
 800232a:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(selected_huart, (uint8_t *)UART_buffer2, len, 10000);
 800232c:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <home+0x180>)
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	b29a      	uxth	r2, r3
 8002334:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002338:	4911      	ldr	r1, [pc, #68]	@ (8002380 <home+0x17c>)
 800233a:	f004 fad7 	bl	80068ec <HAL_UART_Transmit>
	HAL_Delay(2000);
 800233e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002342:	f001 fa19 	bl	8003778 <HAL_Delay>
	currentStatus = STANDBY;
 8002346:	4b05      	ldr	r3, [pc, #20]	@ (800235c <home+0x158>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
	homing = 0;
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <home+0x164>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200009b2 	.word	0x200009b2
 8002360:	200009af 	.word	0x200009af
 8002364:	200009b0 	.word	0x200009b0
 8002368:	200009ac 	.word	0x200009ac
 800236c:	00030d40 	.word	0x00030d40
 8002370:	20000958 	.word	0x20000958
 8002374:	000186a0 	.word	0x000186a0
 8002378:	2000093c 	.word	0x2000093c
 800237c:	0800a1f0 	.word	0x0800a1f0
 8002380:	200008bc 	.word	0x200008bc
 8002384:	200009b4 	.word	0x200009b4
 8002388:	0800a21c 	.word	0x0800a21c
 800238c:	200009ad 	.word	0x200009ad
 8002390:	200009ae 	.word	0x200009ae
 8002394:	20000990 	.word	0x20000990
 8002398:	20000974 	.word	0x20000974
 800239c:	0800a258 	.word	0x0800a258
 80023a0:	0800a284 	.word	0x0800a284
 80023a4:	00000000 	.word	0x00000000

080023a8 <manualControl>:

void manualControl(UART_HandleTypeDef *huart) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80023ae:	af02      	add	r7, sp, #8
 80023b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80023b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80023b8:	6018      	str	r0, [r3, #0]
	currentStatus = MANUAL_CONTROL;
 80023ba:	4bcf      	ldr	r3, [pc, #828]	@ (80026f8 <manualControl+0x350>)
 80023bc:	2202      	movs	r2, #2
 80023be:	701a      	strb	r2, [r3, #0]
		};

		enum axis userAxis;
		char inputBuffer[256];
		uint8_t rxChar;
		int index = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218

		// Prompt the user for input
		char txBuffer[256];

		int len = snprintf(txBuffer, sizeof(txBuffer), "Select an axis 'x' or 'y', or press 'b' to return\r\n");
 80023c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023ca:	4acc      	ldr	r2, [pc, #816]	@ (80026fc <manualControl+0x354>)
 80023cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023d0:	4618      	mov	r0, r3
 80023d2:	f005 fc7f 	bl	8007cd4 <sniprintf>
 80023d6:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 80023da:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80023de:	b29a      	uxth	r2, r3
 80023e0:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80023e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80023e8:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80023ec:	2364      	movs	r3, #100	@ 0x64
 80023ee:	6800      	ldr	r0, [r0, #0]
 80023f0:	f004 fa7c 	bl	80068ec <HAL_UART_Transmit>

		while (1) {
			// Blocking call to receive one character
			if (HAL_UART_Receive(huart, &rxChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 80023f4:	f207 210b 	addw	r1, r7, #523	@ 0x20b
 80023f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80023fc:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
 8002404:	2201      	movs	r2, #1
 8002406:	6800      	ldr	r0, [r0, #0]
 8002408:	f004 fafb 	bl	8006a02 <HAL_UART_Receive>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <manualControl+0x4c>
				if (rxChar == 'x') {
 8002412:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8002416:	2b78      	cmp	r3, #120	@ 0x78
 8002418:	d103      	bne.n	8002422 <manualControl+0x7a>
					userAxis = X_AXIS;
 800241a:	2300      	movs	r3, #0
 800241c:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
					break;
 8002420:	e02b      	b.n	800247a <manualControl+0xd2>

				} else if(rxChar == 'y') {
 8002422:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8002426:	2b79      	cmp	r3, #121	@ 0x79
 8002428:	d103      	bne.n	8002432 <manualControl+0x8a>
					userAxis = Y_AXIS;
 800242a:	2301      	movs	r3, #1
 800242c:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
					break;
 8002430:	e023      	b.n	800247a <manualControl+0xd2>

				} else if(rxChar == 'b' ) {
 8002432:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8002436:	2b62      	cmp	r3, #98	@ 0x62
 8002438:	f000 8155 	beq.w	80026e6 <manualControl+0x33e>
					return;
				} else if(rxChar == 'p' ){
 800243c:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8002440:	2b70      	cmp	r3, #112	@ 0x70
 8002442:	d102      	bne.n	800244a <manualControl+0xa2>
					togglePrintMode();
 8002444:	f000 fa5a 	bl	80028fc <togglePrintMode>
 8002448:	e7d4      	b.n	80023f4 <manualControl+0x4c>
				} else {
					len = snprintf(txBuffer, sizeof(txBuffer), "Invalid keystroke\r\n");
 800244a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800244e:	4aac      	ldr	r2, [pc, #688]	@ (8002700 <manualControl+0x358>)
 8002450:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002454:	4618      	mov	r0, r3
 8002456:	f005 fc3d 	bl	8007cd4 <sniprintf>
 800245a:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
					HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 800245e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002462:	b29a      	uxth	r2, r3
 8002464:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002468:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800246c:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 8002470:	2364      	movs	r3, #100	@ 0x64
 8002472:	6800      	ldr	r0, [r0, #0]
 8002474:	f004 fa3a 	bl	80068ec <HAL_UART_Transmit>
			if (HAL_UART_Receive(huart, &rxChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 8002478:	e7bc      	b.n	80023f4 <manualControl+0x4c>
				}
			}
		}

		len = snprintf(txBuffer, sizeof(txBuffer), "%d, Enter a step number and press Return:\r\n", userAxis);
 800247a:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 800247e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8002482:	4aa0      	ldr	r2, [pc, #640]	@ (8002704 <manualControl+0x35c>)
 8002484:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002488:	f005 fc24 	bl	8007cd4 <sniprintf>
 800248c:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 8002490:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002494:	b29a      	uxth	r2, r3
 8002496:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800249a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800249e:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80024a2:	2364      	movs	r3, #100	@ 0x64
 80024a4:	6800      	ldr	r0, [r0, #0]
 80024a6:	f004 fa21 	bl	80068ec <HAL_UART_Transmit>


		// Loop to receive one character at a time
		while (1) {
			// Blocking call to receive one character
			if (HAL_UART_Receive(huart, &rxChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 80024aa:	f207 210b 	addw	r1, r7, #523	@ 0x20b
 80024ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80024b2:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	2201      	movs	r2, #1
 80024bc:	6800      	ldr	r0, [r0, #0]
 80024be:	f004 faa0 	bl	8006a02 <HAL_UART_Receive>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <manualControl+0x102>
				// Optionally echo the character back to the terminal
				HAL_UART_Transmit(huart, &rxChar, 1, 100);
 80024c8:	f207 210b 	addw	r1, r7, #523	@ 0x20b
 80024cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80024d0:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80024d4:	2364      	movs	r3, #100	@ 0x64
 80024d6:	2201      	movs	r2, #1
 80024d8:	6800      	ldr	r0, [r0, #0]
 80024da:	f004 fa07 	bl	80068ec <HAL_UART_Transmit>

				// Check if the character is a newline or carriage return (end of input)
				if (rxChar == '\n' || rxChar == '\r') {
 80024de:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 80024e2:	2b0a      	cmp	r3, #10
 80024e4:	d003      	beq.n	80024ee <manualControl+0x146>
 80024e6:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 80024ea:	2b0d      	cmp	r3, #13
 80024ec:	d109      	bne.n	8002502 <manualControl+0x15a>
					inputBuffer[index] = '\0';  // Null-terminate the string
 80024ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80024f2:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80024f6:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80024fa:	4413      	add	r3, r2
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
					break;
 8002500:	e038      	b.n	8002574 <manualControl+0x1cc>
				} else if (rxChar == 8){
 8002502:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8002506:	2b08      	cmp	r3, #8
 8002508:	d11a      	bne.n	8002540 <manualControl+0x198>
					int len = snprintf(txBuffer, sizeof(txBuffer), "\nInput buffer cleared, re-enter number:\n");
 800250a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800250e:	4a7e      	ldr	r2, [pc, #504]	@ (8002708 <manualControl+0x360>)
 8002510:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002514:	4618      	mov	r0, r3
 8002516:	f005 fbdd 	bl	8007cd4 <sniprintf>
 800251a:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
					HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 800251e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8002522:	b29a      	uxth	r2, r3
 8002524:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002528:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800252c:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 8002530:	2364      	movs	r3, #100	@ 0x64
 8002532:	6800      	ldr	r0, [r0, #0]
 8002534:	f004 f9da 	bl	80068ec <HAL_UART_Transmit>
					index = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 800253e:	e7b4      	b.n	80024aa <manualControl+0x102>
				} else {
					// Only store the character if there is still room in the buffer
					if (index < 256 - 1) {
 8002540:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8002544:	2bfe      	cmp	r3, #254	@ 0xfe
 8002546:	dc0c      	bgt.n	8002562 <manualControl+0x1ba>
						inputBuffer[index++] = rxChar;
 8002548:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 8002552:	f897 120b 	ldrb.w	r1, [r7, #523]	@ 0x20b
 8002556:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800255a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800255e:	54d1      	strb	r1, [r2, r3]
 8002560:	e7a3      	b.n	80024aa <manualControl+0x102>
					} else {
						// If the buffer is full, null-terminate and break out
						inputBuffer[index] = '\0';
 8002562:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002566:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 800256a:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800256e:	4413      	add	r3, r2
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		// Convert the accumulated string to an integer
		int userSteps = atoi(inputBuffer);
 8002574:	f107 0308 	add.w	r3, r7, #8
 8002578:	4618      	mov	r0, r3
 800257a:	f004 fe09 	bl	8007190 <atoi>
 800257e:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c

		// Send back the result
		len = snprintf(txBuffer, sizeof(txBuffer), "Waiting %d milliseconds to step...\n",(int)(abs(userSteps) * 0.3));
 8002582:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002586:	2b00      	cmp	r3, #0
 8002588:	bfb8      	it	lt
 800258a:	425b      	neglt	r3, r3
 800258c:	4618      	mov	r0, r3
 800258e:	f7fd ffe9 	bl	8000564 <__aeabi_i2d>
 8002592:	a357      	add	r3, pc, #348	@ (adr r3, 80026f0 <manualControl+0x348>)
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	f7fe f84e 	bl	8000638 <__aeabi_dmul>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	f7fe faf8 	bl	8000b98 <__aeabi_d2iz>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80025ae:	4a57      	ldr	r2, [pc, #348]	@ (800270c <manualControl+0x364>)
 80025b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025b4:	f005 fb8e 	bl	8007cd4 <sniprintf>
 80025b8:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 80025bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80025c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025ca:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80025ce:	2364      	movs	r3, #100	@ 0x64
 80025d0:	6800      	ldr	r0, [r0, #0]
 80025d2:	f004 f98b 	bl	80068ec <HAL_UART_Transmit>

		if(userAxis == X_AXIS) {
 80025d6:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d131      	bne.n	8002642 <manualControl+0x29a>
			motor1.currentPos = motor1.currentPos - userSteps;
 80025de:	4b4c      	ldr	r3, [pc, #304]	@ (8002710 <manualControl+0x368>)
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	4a49      	ldr	r2, [pc, #292]	@ (8002710 <manualControl+0x368>)
 80025ea:	6113      	str	r3, [r2, #16]
			motor2.currentPos = motor2.currentPos + userSteps;
 80025ec:	4b49      	ldr	r3, [pc, #292]	@ (8002714 <manualControl+0x36c>)
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80025f4:	4413      	add	r3, r2
 80025f6:	4a47      	ldr	r2, [pc, #284]	@ (8002714 <manualControl+0x36c>)
 80025f8:	6113      	str	r3, [r2, #16]

			sendSingleRelPosCommand(1,-userSteps);
 80025fa:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80025fe:	425b      	negs	r3, r3
 8002600:	4619      	mov	r1, r3
 8002602:	2001      	movs	r0, #1
 8002604:	f000 f9d4 	bl	80029b0 <sendSingleRelPosCommand>
			sendSingleRelPosCommand(2,+userSteps);
 8002608:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 800260c:	2002      	movs	r0, #2
 800260e:	f000 f9cf 	bl	80029b0 <sendSingleRelPosCommand>
			HAL_Delay((int)(abs(userSteps) * 0.3));
 8002612:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002616:	2b00      	cmp	r3, #0
 8002618:	bfb8      	it	lt
 800261a:	425b      	neglt	r3, r3
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd ffa1 	bl	8000564 <__aeabi_i2d>
 8002622:	a333      	add	r3, pc, #204	@ (adr r3, 80026f0 <manualControl+0x348>)
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	f7fe f806 	bl	8000638 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	f7fe fab0 	bl	8000b98 <__aeabi_d2iz>
 8002638:	4603      	mov	r3, r0
 800263a:	4618      	mov	r0, r3
 800263c:	f001 f89c 	bl	8003778 <HAL_Delay>
 8002640:	e034      	b.n	80026ac <manualControl+0x304>

		} else if(userAxis == Y_AXIS) {
 8002642:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8002646:	2b01      	cmp	r3, #1
 8002648:	d130      	bne.n	80026ac <manualControl+0x304>
			motor3.currentPos = motor3.currentPos - userSteps;
 800264a:	4b33      	ldr	r3, [pc, #204]	@ (8002718 <manualControl+0x370>)
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	4a30      	ldr	r2, [pc, #192]	@ (8002718 <manualControl+0x370>)
 8002656:	6113      	str	r3, [r2, #16]
			motor4.currentPos = motor4.currentPos + userSteps;
 8002658:	4b30      	ldr	r3, [pc, #192]	@ (800271c <manualControl+0x374>)
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002660:	4413      	add	r3, r2
 8002662:	4a2e      	ldr	r2, [pc, #184]	@ (800271c <manualControl+0x374>)
 8002664:	6113      	str	r3, [r2, #16]
			sendSingleRelPosCommand(3,-userSteps);
 8002666:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800266a:	425b      	negs	r3, r3
 800266c:	4619      	mov	r1, r3
 800266e:	2003      	movs	r0, #3
 8002670:	f000 f99e 	bl	80029b0 <sendSingleRelPosCommand>
			sendSingleRelPosCommand(4,+userSteps);
 8002674:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 8002678:	2004      	movs	r0, #4
 800267a:	f000 f999 	bl	80029b0 <sendSingleRelPosCommand>
			HAL_Delay((int)(abs(userSteps) * 0.3));
 800267e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002682:	2b00      	cmp	r3, #0
 8002684:	bfb8      	it	lt
 8002686:	425b      	neglt	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff6b 	bl	8000564 <__aeabi_i2d>
 800268e:	a318      	add	r3, pc, #96	@ (adr r3, 80026f0 <manualControl+0x348>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fd ffd0 	bl	8000638 <__aeabi_dmul>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	f7fe fa7a 	bl	8000b98 <__aeabi_d2iz>
 80026a4:	4603      	mov	r3, r0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 f866 	bl	8003778 <HAL_Delay>
		}
		len = snprintf(txBuffer, sizeof(txBuffer), "Mot X Pos: %d, Mot Y Pos: %d\n",motor2.currentPos,motor4.currentPos);
 80026ac:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <manualControl+0x36c>)
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <manualControl+0x374>)
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	4613      	mov	r3, r2
 80026bc:	4a18      	ldr	r2, [pc, #96]	@ (8002720 <manualControl+0x378>)
 80026be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026c2:	f005 fb07 	bl	8007cd4 <sniprintf>
 80026c6:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 80026ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80026d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026d8:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80026dc:	2364      	movs	r3, #100	@ 0x64
 80026de:	6800      	ldr	r0, [r0, #0]
 80026e0:	f004 f904 	bl	80068ec <HAL_UART_Transmit>
	while(1) {
 80026e4:	e66c      	b.n	80023c0 <manualControl+0x18>
					return;
 80026e6:	bf00      	nop
	}
}
 80026e8:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	33333333 	.word	0x33333333
 80026f4:	3fd33333 	.word	0x3fd33333
 80026f8:	200009b2 	.word	0x200009b2
 80026fc:	0800a2a0 	.word	0x0800a2a0
 8002700:	0800a2d4 	.word	0x0800a2d4
 8002704:	0800a2e8 	.word	0x0800a2e8
 8002708:	0800a314 	.word	0x0800a314
 800270c:	0800a340 	.word	0x0800a340
 8002710:	20000990 	.word	0x20000990
 8002714:	20000974 	.word	0x20000974
 8002718:	20000958 	.word	0x20000958
 800271c:	2000093c 	.word	0x2000093c
 8002720:	0800a364 	.word	0x0800a364

08002724 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
	if((currentStatus == MANUAL_CONTROL)) {
 800272e:	4b63      	ldr	r3, [pc, #396]	@ (80028bc <HAL_GPIO_EXTI_Callback+0x198>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d122      	bne.n	800277c <HAL_GPIO_EXTI_Callback+0x58>
	    if ((GPIO_Pin == LIMIT_SWITCH3_Pin) || (GPIO_Pin == LIMIT_SWITCH4_Pin) || (GPIO_Pin == LIMIT_SWITCH1_Pin)|| (GPIO_Pin == LIMIT_SWITCH2_Pin)) {
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800273c:	d009      	beq.n	8002752 <HAL_GPIO_EXTI_Callback+0x2e>
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002744:	d005      	beq.n	8002752 <HAL_GPIO_EXTI_Callback+0x2e>
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	2b40      	cmp	r3, #64	@ 0x40
 800274a:	d002      	beq.n	8002752 <HAL_GPIO_EXTI_Callback+0x2e>
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	2b04      	cmp	r3, #4
 8002750:	d113      	bne.n	800277a <HAL_GPIO_EXTI_Callback+0x56>
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered, entering safemode. Restart program when ready\n");
 8002752:	4a5b      	ldr	r2, [pc, #364]	@ (80028c0 <HAL_GPIO_EXTI_Callback+0x19c>)
 8002754:	2180      	movs	r1, #128	@ 0x80
 8002756:	485b      	ldr	r0, [pc, #364]	@ (80028c4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8002758:	f005 fabc 	bl	8007cd4 <sniprintf>
 800275c:	61f8      	str	r0, [r7, #28]
			HAL_UART_Transmit(selected_huart, (uint8_t *)UART_buffer2, len, 100);
 800275e:	4b5a      	ldr	r3, [pc, #360]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	b29a      	uxth	r2, r3
 8002766:	2364      	movs	r3, #100	@ 0x64
 8002768:	4956      	ldr	r1, [pc, #344]	@ (80028c4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800276a:	f004 f8bf 	bl	80068ec <HAL_UART_Transmit>

			emergencyStop();
 800276e:	f000 f9dd 	bl	8002b2c <emergencyStop>

	        currentStatus = SAFE_MODE;
 8002772:	4b52      	ldr	r3, [pc, #328]	@ (80028bc <HAL_GPIO_EXTI_Callback+0x198>)
 8002774:	2203      	movs	r2, #3
 8002776:	701a      	strb	r2, [r3, #0]
	    if ((GPIO_Pin == LIMIT_SWITCH3_Pin) || (GPIO_Pin == LIMIT_SWITCH4_Pin) || (GPIO_Pin == LIMIT_SWITCH1_Pin)|| (GPIO_Pin == LIMIT_SWITCH2_Pin)) {
 8002778:	e000      	b.n	800277c <HAL_GPIO_EXTI_Callback+0x58>
	    } else {
	    	__NOP();
 800277a:	bf00      	nop
	    }
	}

	if(currentStatus == HOMING) {
 800277c:	4b4f      	ldr	r3, [pc, #316]	@ (80028bc <HAL_GPIO_EXTI_Callback+0x198>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	f040 8096 	bne.w	80028b2 <HAL_GPIO_EXTI_Callback+0x18e>
		if ((GPIO_Pin == LIMIT_SWITCH3_Pin) && (!MOTOR3_READY)) {\
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800278c:	d121      	bne.n	80027d2 <HAL_GPIO_EXTI_Callback+0xae>
 800278e:	4b4f      	ldr	r3, [pc, #316]	@ (80028cc <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d11d      	bne.n	80027d2 <HAL_GPIO_EXTI_Callback+0xae>
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 3!\r\n");
 8002796:	4a4e      	ldr	r2, [pc, #312]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8002798:	2180      	movs	r1, #128	@ 0x80
 800279a:	484a      	ldr	r0, [pc, #296]	@ (80028c4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800279c:	f005 fa9a 	bl	8007cd4 <sniprintf>
 80027a0:	61b8      	str	r0, [r7, #24]
			HAL_UART_Transmit(selected_huart, (uint8_t *)UART_buffer2, len, 100);
 80027a2:	4b49      	ldr	r3, [pc, #292]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	2364      	movs	r3, #100	@ 0x64
 80027ac:	4945      	ldr	r1, [pc, #276]	@ (80028c4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80027ae:	f004 f89d 	bl	80068ec <HAL_UART_Transmit>
			MOTOR3_READY = 1;
 80027b2:	4b46      	ldr	r3, [pc, #280]	@ (80028cc <HAL_GPIO_EXTI_Callback+0x1a8>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
			motor3.currentPos = 0;
 80027b8:	4b46      	ldr	r3, [pc, #280]	@ (80028d4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
			sendPosUpdate(3,HOMING_STEPS_REQ);
 80027be:	f44f 43e1 	mov.w	r3, #28800	@ 0x7080
 80027c2:	4619      	mov	r1, r3
 80027c4:	2003      	movs	r0, #3
 80027c6:	f000 f971 	bl	8002aac <sendPosUpdate>
			sendSinglePosCommand(3,0);
 80027ca:	2100      	movs	r1, #0
 80027cc:	2003      	movs	r0, #3
 80027ce:	f000 f8af 	bl	8002930 <sendSinglePosCommand>


		}
		if ((GPIO_Pin == LIMIT_SWITCH4_Pin) && (!MOTOR4_READY)) {
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027d8:	d121      	bne.n	800281e <HAL_GPIO_EXTI_Callback+0xfa>
 80027da:	4b3f      	ldr	r3, [pc, #252]	@ (80028d8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d11d      	bne.n	800281e <HAL_GPIO_EXTI_Callback+0xfa>
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 4!\r\n");
 80027e2:	4a3e      	ldr	r2, [pc, #248]	@ (80028dc <HAL_GPIO_EXTI_Callback+0x1b8>)
 80027e4:	2180      	movs	r1, #128	@ 0x80
 80027e6:	4837      	ldr	r0, [pc, #220]	@ (80028c4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80027e8:	f005 fa74 	bl	8007cd4 <sniprintf>
 80027ec:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(selected_huart, (uint8_t *)UART_buffer2, len, 100);
 80027ee:	4b36      	ldr	r3, [pc, #216]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	2364      	movs	r3, #100	@ 0x64
 80027f8:	4932      	ldr	r1, [pc, #200]	@ (80028c4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80027fa:	f004 f877 	bl	80068ec <HAL_UART_Transmit>
			MOTOR4_READY = 1;
 80027fe:	4b36      	ldr	r3, [pc, #216]	@ (80028d8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
			motor4.currentPos = 0;
 8002804:	4b36      	ldr	r3, [pc, #216]	@ (80028e0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
			sendPosUpdate(4,HOMING_STEPS_REQ);
 800280a:	f44f 43e1 	mov.w	r3, #28800	@ 0x7080
 800280e:	4619      	mov	r1, r3
 8002810:	2004      	movs	r0, #4
 8002812:	f000 f94b 	bl	8002aac <sendPosUpdate>
			sendSinglePosCommand(4,0);
 8002816:	2100      	movs	r1, #0
 8002818:	2004      	movs	r0, #4
 800281a:	f000 f889 	bl	8002930 <sendSinglePosCommand>

		}
		if ((GPIO_Pin == LIMIT_SWITCH1_Pin) && (!MOTOR1_READY)) {
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	2b40      	cmp	r3, #64	@ 0x40
 8002822:	d121      	bne.n	8002868 <HAL_GPIO_EXTI_Callback+0x144>
 8002824:	4b2f      	ldr	r3, [pc, #188]	@ (80028e4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d11d      	bne.n	8002868 <HAL_GPIO_EXTI_Callback+0x144>
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 1!\r\n");
 800282c:	4a2e      	ldr	r2, [pc, #184]	@ (80028e8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800282e:	2180      	movs	r1, #128	@ 0x80
 8002830:	4824      	ldr	r0, [pc, #144]	@ (80028c4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8002832:	f005 fa4f 	bl	8007cd4 <sniprintf>
 8002836:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(selected_huart, (uint8_t *)UART_buffer2, len, 100);
 8002838:	4b23      	ldr	r3, [pc, #140]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	b29a      	uxth	r2, r3
 8002840:	2364      	movs	r3, #100	@ 0x64
 8002842:	4920      	ldr	r1, [pc, #128]	@ (80028c4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8002844:	f004 f852 	bl	80068ec <HAL_UART_Transmit>
			MOTOR1_READY = 1;
 8002848:	4b26      	ldr	r3, [pc, #152]	@ (80028e4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
			motor1.currentPos = 0;
 800284e:	4b27      	ldr	r3, [pc, #156]	@ (80028ec <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
			sendPosUpdate(1,HOMING_STEPS_REQ);
 8002854:	f44f 43e1 	mov.w	r3, #28800	@ 0x7080
 8002858:	4619      	mov	r1, r3
 800285a:	2001      	movs	r0, #1
 800285c:	f000 f926 	bl	8002aac <sendPosUpdate>
			sendSinglePosCommand(1,0);
 8002860:	2100      	movs	r1, #0
 8002862:	2001      	movs	r0, #1
 8002864:	f000 f864 	bl	8002930 <sendSinglePosCommand>

		}
		if ((GPIO_Pin == LIMIT_SWITCH2_Pin) && (!MOTOR2_READY)) {\
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	2b04      	cmp	r3, #4
 800286c:	d121      	bne.n	80028b2 <HAL_GPIO_EXTI_Callback+0x18e>
 800286e:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d11d      	bne.n	80028b2 <HAL_GPIO_EXTI_Callback+0x18e>
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 2!\r\n");
 8002876:	4a1f      	ldr	r2, [pc, #124]	@ (80028f4 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8002878:	2180      	movs	r1, #128	@ 0x80
 800287a:	4812      	ldr	r0, [pc, #72]	@ (80028c4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800287c:	f005 fa2a 	bl	8007cd4 <sniprintf>
 8002880:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(selected_huart, (uint8_t *)UART_buffer2, len, 100);
 8002882:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	b29a      	uxth	r2, r3
 800288a:	2364      	movs	r3, #100	@ 0x64
 800288c:	490d      	ldr	r1, [pc, #52]	@ (80028c4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800288e:	f004 f82d 	bl	80068ec <HAL_UART_Transmit>
			MOTOR2_READY = 1;
 8002892:	4b17      	ldr	r3, [pc, #92]	@ (80028f0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
			motor2.currentPos = 0;
 8002898:	4b17      	ldr	r3, [pc, #92]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
			sendPosUpdate(2,HOMING_STEPS_REQ);
 800289e:	f44f 43e1 	mov.w	r3, #28800	@ 0x7080
 80028a2:	4619      	mov	r1, r3
 80028a4:	2002      	movs	r0, #2
 80028a6:	f000 f901 	bl	8002aac <sendPosUpdate>
			sendSinglePosCommand(2,0);
 80028aa:	2100      	movs	r1, #0
 80028ac:	2002      	movs	r0, #2
 80028ae:	f000 f83f 	bl	8002930 <sendSinglePosCommand>
		}
	}
}
 80028b2:	bf00      	nop
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200009b2 	.word	0x200009b2
 80028c0:	0800a384 	.word	0x0800a384
 80028c4:	200008bc 	.word	0x200008bc
 80028c8:	200009b4 	.word	0x200009b4
 80028cc:	200009af 	.word	0x200009af
 80028d0:	0800a3c8 	.word	0x0800a3c8
 80028d4:	20000958 	.word	0x20000958
 80028d8:	200009b0 	.word	0x200009b0
 80028dc:	0800a3ec 	.word	0x0800a3ec
 80028e0:	2000093c 	.word	0x2000093c
 80028e4:	200009ad 	.word	0x200009ad
 80028e8:	0800a410 	.word	0x0800a410
 80028ec:	20000990 	.word	0x20000990
 80028f0:	200009ae 	.word	0x200009ae
 80028f4:	0800a434 	.word	0x0800a434
 80028f8:	20000974 	.word	0x20000974

080028fc <togglePrintMode>:

void togglePrintMode() {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	if(printingRollPitch) {
 8002900:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <togglePrintMode+0x2c>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <togglePrintMode+0x1a>
		HAL_TIM_Base_Stop_IT(&htim1);
 8002908:	4808      	ldr	r0, [pc, #32]	@ (800292c <togglePrintMode+0x30>)
 800290a:	f003 f955 	bl	8005bb8 <HAL_TIM_Base_Stop_IT>
		printingRollPitch = 0;
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <togglePrintMode+0x2c>)
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
	} else {
		HAL_TIM_Base_Start_IT(&htim1);
		printingRollPitch = 1;
	}

}
 8002914:	e005      	b.n	8002922 <togglePrintMode+0x26>
		HAL_TIM_Base_Start_IT(&htim1);
 8002916:	4805      	ldr	r0, [pc, #20]	@ (800292c <togglePrintMode+0x30>)
 8002918:	f003 f8de 	bl	8005ad8 <HAL_TIM_Base_Start_IT>
		printingRollPitch = 1;
 800291c:	4b02      	ldr	r3, [pc, #8]	@ (8002928 <togglePrintMode+0x2c>)
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200009b1 	.word	0x200009b1
 800292c:	20000750 	.word	0x20000750

08002930 <sendSinglePosCommand>:
		int len = snprintf(txBuffer, sizeof(txBuffer), "I2C Communication with Teensy Failed\n");
		HAL_UART_Transmit(selected_huart, (uint8_t *)txBuffer, len, 100);
	}
}

void sendSinglePosCommand(char motorNumber, int pos) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b09e      	sub	sp, #120	@ 0x78
 8002934:	af02      	add	r7, sp, #8
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
	int32_t packet[4] = {pos,0,0x05,motorNumber};
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002940:	2300      	movs	r3, #0
 8002942:	663b      	str	r3, [r7, #96]	@ 0x60
 8002944:	2305      	movs	r3, #5
 8002946:	667b      	str	r3, [r7, #100]	@ 0x64
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	66bb      	str	r3, [r7, #104]	@ 0x68
	char txBuffer[64];
	uint8_t teensyTxBuffer[1 + sizeof(packet)];
	teensyTxBuffer[0] = 0x00; // starting register
 800294c:	2300      	movs	r3, #0
 800294e:	723b      	strb	r3, [r7, #8]
	memcpy(&teensyTxBuffer[1], packet, sizeof(packet));
 8002950:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8002954:	f107 0308 	add.w	r3, r7, #8
 8002958:	3301      	adds	r3, #1
 800295a:	2210      	movs	r2, #16
 800295c:	4618      	mov	r0, r3
 800295e:	f005 fab0 	bl	8007ec2 <memcpy>
	if(HAL_I2C_Master_Transmit(&hi2c2, TEENSY_ADDR << 1, teensyTxBuffer, sizeof(teensyTxBuffer), 100) != HAL_OK) {
 8002962:	f107 0208 	add.w	r2, r7, #8
 8002966:	2364      	movs	r3, #100	@ 0x64
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2311      	movs	r3, #17
 800296c:	2184      	movs	r1, #132	@ 0x84
 800296e:	480d      	ldr	r0, [pc, #52]	@ (80029a4 <sendSinglePosCommand+0x74>)
 8002970:	f001 fb5a 	bl	8004028 <HAL_I2C_Master_Transmit>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d010      	beq.n	800299c <sendSinglePosCommand+0x6c>
		int len = snprintf(txBuffer, sizeof(txBuffer), "I2C Communication with Teensy Failed\n");
 800297a:	f107 031c 	add.w	r3, r7, #28
 800297e:	4a0a      	ldr	r2, [pc, #40]	@ (80029a8 <sendSinglePosCommand+0x78>)
 8002980:	2140      	movs	r1, #64	@ 0x40
 8002982:	4618      	mov	r0, r3
 8002984:	f005 f9a6 	bl	8007cd4 <sniprintf>
 8002988:	66f8      	str	r0, [r7, #108]	@ 0x6c
		HAL_UART_Transmit(selected_huart, (uint8_t *)txBuffer, len, 100);
 800298a:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <sendSinglePosCommand+0x7c>)
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002990:	b29a      	uxth	r2, r3
 8002992:	f107 011c 	add.w	r1, r7, #28
 8002996:	2364      	movs	r3, #100	@ 0x64
 8002998:	f003 ffa8 	bl	80068ec <HAL_UART_Transmit>
	}
}
 800299c:	bf00      	nop
 800299e:	3770      	adds	r7, #112	@ 0x70
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	200006fc 	.word	0x200006fc
 80029a8:	0800a458 	.word	0x0800a458
 80029ac:	200009b4 	.word	0x200009b4

080029b0 <sendSingleRelPosCommand>:

void sendSingleRelPosCommand(char motorNumber, int del_pos) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b09e      	sub	sp, #120	@ 0x78
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	4603      	mov	r3, r0
 80029b8:	6039      	str	r1, [r7, #0]
 80029ba:	71fb      	strb	r3, [r7, #7]
	int32_t packet[4] = {del_pos,0,0x07,motorNumber};
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029c0:	2300      	movs	r3, #0
 80029c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80029c4:	2307      	movs	r3, #7
 80029c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	66bb      	str	r3, [r7, #104]	@ 0x68
	char txBuffer[64];
	uint8_t teensyTxBuffer[1 + sizeof(packet)];
	teensyTxBuffer[0] = 0x00; // starting register
 80029cc:	2300      	movs	r3, #0
 80029ce:	723b      	strb	r3, [r7, #8]
	memcpy(&teensyTxBuffer[1], packet, sizeof(packet));
 80029d0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80029d4:	f107 0308 	add.w	r3, r7, #8
 80029d8:	3301      	adds	r3, #1
 80029da:	2210      	movs	r2, #16
 80029dc:	4618      	mov	r0, r3
 80029de:	f005 fa70 	bl	8007ec2 <memcpy>
	if(HAL_I2C_Master_Transmit(&hi2c2, TEENSY_ADDR << 1, teensyTxBuffer, sizeof(teensyTxBuffer), 100) != HAL_OK) {
 80029e2:	f107 0208 	add.w	r2, r7, #8
 80029e6:	2364      	movs	r3, #100	@ 0x64
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2311      	movs	r3, #17
 80029ec:	2184      	movs	r1, #132	@ 0x84
 80029ee:	480d      	ldr	r0, [pc, #52]	@ (8002a24 <sendSingleRelPosCommand+0x74>)
 80029f0:	f001 fb1a 	bl	8004028 <HAL_I2C_Master_Transmit>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d010      	beq.n	8002a1c <sendSingleRelPosCommand+0x6c>
		int len = snprintf(txBuffer, sizeof(txBuffer), "I2C Communication with Teensy Failed\n");
 80029fa:	f107 031c 	add.w	r3, r7, #28
 80029fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <sendSingleRelPosCommand+0x78>)
 8002a00:	2140      	movs	r1, #64	@ 0x40
 8002a02:	4618      	mov	r0, r3
 8002a04:	f005 f966 	bl	8007cd4 <sniprintf>
 8002a08:	66f8      	str	r0, [r7, #108]	@ 0x6c
		HAL_UART_Transmit(selected_huart, (uint8_t *)txBuffer, len, 100);
 8002a0a:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <sendSingleRelPosCommand+0x7c>)
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	f107 011c 	add.w	r1, r7, #28
 8002a16:	2364      	movs	r3, #100	@ 0x64
 8002a18:	f003 ff68 	bl	80068ec <HAL_UART_Transmit>
	}
}
 8002a1c:	bf00      	nop
 8002a1e:	3770      	adds	r7, #112	@ 0x70
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200006fc 	.word	0x200006fc
 8002a28:	0800a458 	.word	0x0800a458
 8002a2c:	200009b4 	.word	0x200009b4

08002a30 <sendVelocityCommand>:

void sendVelocityCommand(int velocity) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b09e      	sub	sp, #120	@ 0x78
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	6078      	str	r0, [r7, #4]
	int32_t packet[4] = {0,0,0x02,velocity};
 8002a38:	2300      	movs	r3, #0
 8002a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a40:	2302      	movs	r3, #2
 8002a42:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	66bb      	str	r3, [r7, #104]	@ 0x68
	char txBuffer[64];
	uint8_t teensyTxBuffer[1 + sizeof(packet)];
	teensyTxBuffer[0] = 0x00; // starting register
 8002a48:	2300      	movs	r3, #0
 8002a4a:	723b      	strb	r3, [r7, #8]
	memcpy(&teensyTxBuffer[1], packet, sizeof(packet));
 8002a4c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8002a50:	f107 0308 	add.w	r3, r7, #8
 8002a54:	3301      	adds	r3, #1
 8002a56:	2210      	movs	r2, #16
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f005 fa32 	bl	8007ec2 <memcpy>
	if(HAL_I2C_Master_Transmit(&hi2c2, TEENSY_ADDR << 1, teensyTxBuffer, sizeof(teensyTxBuffer), 100) != HAL_OK) {
 8002a5e:	f107 0208 	add.w	r2, r7, #8
 8002a62:	2364      	movs	r3, #100	@ 0x64
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2311      	movs	r3, #17
 8002a68:	2184      	movs	r1, #132	@ 0x84
 8002a6a:	480d      	ldr	r0, [pc, #52]	@ (8002aa0 <sendVelocityCommand+0x70>)
 8002a6c:	f001 fadc 	bl	8004028 <HAL_I2C_Master_Transmit>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d010      	beq.n	8002a98 <sendVelocityCommand+0x68>
		int len = snprintf(txBuffer, sizeof(txBuffer), "I2C Communication with Teensy Failed\n");
 8002a76:	f107 031c 	add.w	r3, r7, #28
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa4 <sendVelocityCommand+0x74>)
 8002a7c:	2140      	movs	r1, #64	@ 0x40
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f005 f928 	bl	8007cd4 <sniprintf>
 8002a84:	66f8      	str	r0, [r7, #108]	@ 0x6c
		HAL_UART_Transmit(selected_huart, (uint8_t *)txBuffer, len, 100);
 8002a86:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <sendVelocityCommand+0x78>)
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	f107 011c 	add.w	r1, r7, #28
 8002a92:	2364      	movs	r3, #100	@ 0x64
 8002a94:	f003 ff2a 	bl	80068ec <HAL_UART_Transmit>
	}
}
 8002a98:	bf00      	nop
 8002a9a:	3770      	adds	r7, #112	@ 0x70
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	200006fc 	.word	0x200006fc
 8002aa4:	0800a458 	.word	0x0800a458
 8002aa8:	200009b4 	.word	0x200009b4

08002aac <sendPosUpdate>:

void sendPosUpdate(char motorNumber, int pos) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b09e      	sub	sp, #120	@ 0x78
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	6039      	str	r1, [r7, #0]
 8002ab6:	71fb      	strb	r3, [r7, #7]
	int32_t packet[4] = {pos,0,0x03,motorNumber};
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002abc:	2300      	movs	r3, #0
 8002abe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	66bb      	str	r3, [r7, #104]	@ 0x68
	char txBuffer[64];
	uint8_t teensyTxBuffer[1 + sizeof(packet)];
	teensyTxBuffer[0] = 0x00; // starting register
 8002ac8:	2300      	movs	r3, #0
 8002aca:	723b      	strb	r3, [r7, #8]
	memcpy(&teensyTxBuffer[1], packet, sizeof(packet));
 8002acc:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8002ad0:	f107 0308 	add.w	r3, r7, #8
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f005 f9f2 	bl	8007ec2 <memcpy>
	if(HAL_I2C_Master_Transmit(&hi2c2, TEENSY_ADDR << 1, teensyTxBuffer, sizeof(teensyTxBuffer), 100) != HAL_OK) {
 8002ade:	f107 0208 	add.w	r2, r7, #8
 8002ae2:	2364      	movs	r3, #100	@ 0x64
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2311      	movs	r3, #17
 8002ae8:	2184      	movs	r1, #132	@ 0x84
 8002aea:	480d      	ldr	r0, [pc, #52]	@ (8002b20 <sendPosUpdate+0x74>)
 8002aec:	f001 fa9c 	bl	8004028 <HAL_I2C_Master_Transmit>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d010      	beq.n	8002b18 <sendPosUpdate+0x6c>
		int len = snprintf(txBuffer, sizeof(txBuffer), "I2C Communication with Teensy Failed\n");
 8002af6:	f107 031c 	add.w	r3, r7, #28
 8002afa:	4a0a      	ldr	r2, [pc, #40]	@ (8002b24 <sendPosUpdate+0x78>)
 8002afc:	2140      	movs	r1, #64	@ 0x40
 8002afe:	4618      	mov	r0, r3
 8002b00:	f005 f8e8 	bl	8007cd4 <sniprintf>
 8002b04:	66f8      	str	r0, [r7, #108]	@ 0x6c
		HAL_UART_Transmit(selected_huart, (uint8_t *)txBuffer, len, 100);
 8002b06:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <sendPosUpdate+0x7c>)
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	f107 011c 	add.w	r1, r7, #28
 8002b12:	2364      	movs	r3, #100	@ 0x64
 8002b14:	f003 feea 	bl	80068ec <HAL_UART_Transmit>
	}
}
 8002b18:	bf00      	nop
 8002b1a:	3770      	adds	r7, #112	@ 0x70
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	200006fc 	.word	0x200006fc
 8002b24:	0800a458 	.word	0x0800a458
 8002b28:	200009b4 	.word	0x200009b4

08002b2c <emergencyStop>:

void emergencyStop() {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b09c      	sub	sp, #112	@ 0x70
 8002b30:	af02      	add	r7, sp, #8
	int32_t packet[4] = {0,0,0x04,0};
 8002b32:	2300      	movs	r3, #0
 8002b34:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b36:	2300      	movs	r3, #0
 8002b38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b3e:	2300      	movs	r3, #0
 8002b40:	663b      	str	r3, [r7, #96]	@ 0x60
	char txBuffer[64];
	uint8_t teensyTxBuffer[1 + sizeof(packet)];
	teensyTxBuffer[0] = 0x00; // starting register
 8002b42:	2300      	movs	r3, #0
 8002b44:	703b      	strb	r3, [r7, #0]
	memcpy(&teensyTxBuffer[1], packet, sizeof(packet));
 8002b46:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8002b4a:	463b      	mov	r3, r7
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	2210      	movs	r2, #16
 8002b50:	4618      	mov	r0, r3
 8002b52:	f005 f9b6 	bl	8007ec2 <memcpy>
	if(HAL_I2C_Master_Transmit(&hi2c2, TEENSY_ADDR << 1, teensyTxBuffer, sizeof(teensyTxBuffer), 100) != HAL_OK) {
 8002b56:	463a      	mov	r2, r7
 8002b58:	2364      	movs	r3, #100	@ 0x64
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2311      	movs	r3, #17
 8002b5e:	2184      	movs	r1, #132	@ 0x84
 8002b60:	480d      	ldr	r0, [pc, #52]	@ (8002b98 <emergencyStop+0x6c>)
 8002b62:	f001 fa61 	bl	8004028 <HAL_I2C_Master_Transmit>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d010      	beq.n	8002b8e <emergencyStop+0x62>
		int len = snprintf(txBuffer, sizeof(txBuffer), "I2C Communication with Teensy Failed\n");
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <emergencyStop+0x70>)
 8002b72:	2140      	movs	r1, #64	@ 0x40
 8002b74:	4618      	mov	r0, r3
 8002b76:	f005 f8ad 	bl	8007cd4 <sniprintf>
 8002b7a:	6678      	str	r0, [r7, #100]	@ 0x64
		HAL_UART_Transmit(selected_huart, (uint8_t *)txBuffer, len, 100);
 8002b7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <emergencyStop+0x74>)
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	f107 0114 	add.w	r1, r7, #20
 8002b88:	2364      	movs	r3, #100	@ 0x64
 8002b8a:	f003 feaf 	bl	80068ec <HAL_UART_Transmit>
	}
}
 8002b8e:	bf00      	nop
 8002b90:	3768      	adds	r7, #104	@ 0x68
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200006fc 	.word	0x200006fc
 8002b9c:	0800a458 	.word	0x0800a458
 8002ba0:	200009b4 	.word	0x200009b4

08002ba4 <resetPositions>:

void resetPositions() {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b09c      	sub	sp, #112	@ 0x70
 8002ba8:	af02      	add	r7, sp, #8
	int32_t packet[4] = {0,0,0x06,0};
 8002baa:	2300      	movs	r3, #0
 8002bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bae:	2300      	movs	r3, #0
 8002bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002bb2:	2306      	movs	r3, #6
 8002bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	663b      	str	r3, [r7, #96]	@ 0x60
	char txBuffer[64];
	uint8_t teensyTxBuffer[1 + sizeof(packet)];
	teensyTxBuffer[0] = 0x00; // starting register
 8002bba:	2300      	movs	r3, #0
 8002bbc:	703b      	strb	r3, [r7, #0]
	memcpy(&teensyTxBuffer[1], packet, sizeof(packet));
 8002bbe:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8002bc2:	463b      	mov	r3, r7
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f005 f97a 	bl	8007ec2 <memcpy>
	if(HAL_I2C_Master_Transmit(&hi2c2, TEENSY_ADDR << 1, teensyTxBuffer, sizeof(teensyTxBuffer), 100) != HAL_OK) {
 8002bce:	463a      	mov	r2, r7
 8002bd0:	2364      	movs	r3, #100	@ 0x64
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2311      	movs	r3, #17
 8002bd6:	2184      	movs	r1, #132	@ 0x84
 8002bd8:	480d      	ldr	r0, [pc, #52]	@ (8002c10 <resetPositions+0x6c>)
 8002bda:	f001 fa25 	bl	8004028 <HAL_I2C_Master_Transmit>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <resetPositions+0x62>
		int len = snprintf(txBuffer, sizeof(txBuffer), "I2C Communication with Teensy Failed\n");
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	4a0a      	ldr	r2, [pc, #40]	@ (8002c14 <resetPositions+0x70>)
 8002bea:	2140      	movs	r1, #64	@ 0x40
 8002bec:	4618      	mov	r0, r3
 8002bee:	f005 f871 	bl	8007cd4 <sniprintf>
 8002bf2:	6678      	str	r0, [r7, #100]	@ 0x64
		HAL_UART_Transmit(selected_huart, (uint8_t *)txBuffer, len, 100);
 8002bf4:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <resetPositions+0x74>)
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	f107 0114 	add.w	r1, r7, #20
 8002c00:	2364      	movs	r3, #100	@ 0x64
 8002c02:	f003 fe73 	bl	80068ec <HAL_UART_Transmit>
	}
}
 8002c06:	bf00      	nop
 8002c08:	3768      	adds	r7, #104	@ 0x68
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200006fc 	.word	0x200006fc
 8002c14:	0800a458 	.word	0x0800a458
 8002c18:	200009b4 	.word	0x200009b4

08002c1c <resetSystem>:

void resetSystem() {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b09c      	sub	sp, #112	@ 0x70
 8002c20:	af02      	add	r7, sp, #8
	int32_t packet[4] = {0,0,0x08,0};
 8002c22:	2300      	movs	r3, #0
 8002c24:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c26:	2300      	movs	r3, #0
 8002c28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c2e:	2300      	movs	r3, #0
 8002c30:	663b      	str	r3, [r7, #96]	@ 0x60
	char txBuffer[64];
	uint8_t teensyTxBuffer[1 + sizeof(packet)];
	teensyTxBuffer[0] = 0x00; // starting register
 8002c32:	2300      	movs	r3, #0
 8002c34:	703b      	strb	r3, [r7, #0]
	memcpy(&teensyTxBuffer[1], packet, sizeof(packet));
 8002c36:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8002c3a:	463b      	mov	r3, r7
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	2210      	movs	r2, #16
 8002c40:	4618      	mov	r0, r3
 8002c42:	f005 f93e 	bl	8007ec2 <memcpy>
	if(HAL_I2C_Master_Transmit(&hi2c2, TEENSY_ADDR << 1, teensyTxBuffer, sizeof(teensyTxBuffer), 100) != HAL_OK) {
 8002c46:	463a      	mov	r2, r7
 8002c48:	2364      	movs	r3, #100	@ 0x64
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2311      	movs	r3, #17
 8002c4e:	2184      	movs	r1, #132	@ 0x84
 8002c50:	480d      	ldr	r0, [pc, #52]	@ (8002c88 <resetSystem+0x6c>)
 8002c52:	f001 f9e9 	bl	8004028 <HAL_I2C_Master_Transmit>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d010      	beq.n	8002c7e <resetSystem+0x62>
		int len = snprintf(txBuffer, sizeof(txBuffer), "I2C Communication with Teensy Failed\n");
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	4a0a      	ldr	r2, [pc, #40]	@ (8002c8c <resetSystem+0x70>)
 8002c62:	2140      	movs	r1, #64	@ 0x40
 8002c64:	4618      	mov	r0, r3
 8002c66:	f005 f835 	bl	8007cd4 <sniprintf>
 8002c6a:	6678      	str	r0, [r7, #100]	@ 0x64
		HAL_UART_Transmit(selected_huart, (uint8_t *)txBuffer, len, 100);
 8002c6c:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <resetSystem+0x74>)
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	f107 0114 	add.w	r1, r7, #20
 8002c78:	2364      	movs	r3, #100	@ 0x64
 8002c7a:	f003 fe37 	bl	80068ec <HAL_UART_Transmit>
	}
}
 8002c7e:	bf00      	nop
 8002c80:	3768      	adds	r7, #104	@ 0x68
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200006fc 	.word	0x200006fc
 8002c8c:	0800a458 	.word	0x0800a458
 8002c90:	200009b4 	.word	0x200009b4

08002c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002caa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	4a08      	ldr	r2, [pc, #32]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cc6:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002cd2:	2007      	movs	r0, #7
 8002cd4:	f000 fe44 	bl	8003960 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08c      	sub	sp, #48	@ 0x30
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 031c 	add.w	r3, r7, #28
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a42      	ldr	r2, [pc, #264]	@ (8002e0c <HAL_I2C_MspInit+0x128>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d12d      	bne.n	8002d62 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	4b41      	ldr	r3, [pc, #260]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	4a40      	ldr	r2, [pc, #256]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d16:	4b3e      	ldr	r3, [pc, #248]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d28:	2312      	movs	r3, #18
 8002d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	2303      	movs	r3, #3
 8002d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d34:	2304      	movs	r3, #4
 8002d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d38:	f107 031c 	add.w	r3, r7, #28
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4835      	ldr	r0, [pc, #212]	@ (8002e14 <HAL_I2C_MspInit+0x130>)
 8002d40:	f000 fe50 	bl	80039e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	4b31      	ldr	r3, [pc, #196]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	4a30      	ldr	r2, [pc, #192]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002d4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d52:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d54:	4b2e      	ldr	r3, [pc, #184]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d60:	e050      	b.n	8002e04 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2c      	ldr	r2, [pc, #176]	@ (8002e18 <HAL_I2C_MspInit+0x134>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d14b      	bne.n	8002e04 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	4b27      	ldr	r3, [pc, #156]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	4a26      	ldr	r2, [pc, #152]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002d76:	f043 0302 	orr.w	r3, r3, #2
 8002d7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7c:	4b24      	ldr	r3, [pc, #144]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	4b20      	ldr	r3, [pc, #128]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d90:	4a1f      	ldr	r2, [pc, #124]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002d92:	f043 0304 	orr.w	r3, r3, #4
 8002d96:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d98:	4b1d      	ldr	r3, [pc, #116]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002daa:	2312      	movs	r3, #18
 8002dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002db6:	2304      	movs	r3, #4
 8002db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dba:	f107 031c 	add.w	r3, r7, #28
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4814      	ldr	r0, [pc, #80]	@ (8002e14 <HAL_I2C_MspInit+0x130>)
 8002dc2:	f000 fe0f 	bl	80039e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dcc:	2312      	movs	r3, #18
 8002dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002dd8:	2304      	movs	r3, #4
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ddc:	f107 031c 	add.w	r3, r7, #28
 8002de0:	4619      	mov	r1, r3
 8002de2:	480e      	ldr	r0, [pc, #56]	@ (8002e1c <HAL_I2C_MspInit+0x138>)
 8002de4:	f000 fdfe 	bl	80039e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	4a07      	ldr	r2, [pc, #28]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002df2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002df6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002df8:	4b05      	ldr	r3, [pc, #20]	@ (8002e10 <HAL_I2C_MspInit+0x12c>)
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]
}
 8002e04:	bf00      	nop
 8002e06:	3730      	adds	r7, #48	@ 0x30
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40005400 	.word	0x40005400
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020400 	.word	0x40020400
 8002e18:	40005800 	.word	0x40005800
 8002e1c:	40020800 	.word	0x40020800

08002e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ed8 <HAL_TIM_Base_MspInit+0xb8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d116      	bne.n	8002e60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	4b29      	ldr	r3, [pc, #164]	@ (8002edc <HAL_TIM_Base_MspInit+0xbc>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	4a28      	ldr	r2, [pc, #160]	@ (8002edc <HAL_TIM_Base_MspInit+0xbc>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e42:	4b26      	ldr	r3, [pc, #152]	@ (8002edc <HAL_TIM_Base_MspInit+0xbc>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	2019      	movs	r0, #25
 8002e54:	f000 fd8f 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e58:	2019      	movs	r0, #25
 8002e5a:	f000 fda8 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e5e:	e036      	b.n	8002ece <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e68:	d116      	bne.n	8002e98 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002edc <HAL_TIM_Base_MspInit+0xbc>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	4a1a      	ldr	r2, [pc, #104]	@ (8002edc <HAL_TIM_Base_MspInit+0xbc>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e7a:	4b18      	ldr	r3, [pc, #96]	@ (8002edc <HAL_TIM_Base_MspInit+0xbc>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	201c      	movs	r0, #28
 8002e8c:	f000 fd73 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e90:	201c      	movs	r0, #28
 8002e92:	f000 fd8c 	bl	80039ae <HAL_NVIC_EnableIRQ>
}
 8002e96:	e01a      	b.n	8002ece <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a10      	ldr	r2, [pc, #64]	@ (8002ee0 <HAL_TIM_Base_MspInit+0xc0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d115      	bne.n	8002ece <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <HAL_TIM_Base_MspInit+0xbc>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8002edc <HAL_TIM_Base_MspInit+0xbc>)
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <HAL_TIM_Base_MspInit+0xbc>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	201d      	movs	r0, #29
 8002ec4:	f000 fd57 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ec8:	201d      	movs	r0, #29
 8002eca:	f000 fd70 	bl	80039ae <HAL_NVIC_EnableIRQ>
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40000400 	.word	0x40000400

08002ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08c      	sub	sp, #48	@ 0x30
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eec:	f107 031c 	add.w	r3, r7, #28
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a32      	ldr	r2, [pc, #200]	@ (8002fcc <HAL_UART_MspInit+0xe8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d12c      	bne.n	8002f60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	4b31      	ldr	r3, [pc, #196]	@ (8002fd0 <HAL_UART_MspInit+0xec>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	4a30      	ldr	r2, [pc, #192]	@ (8002fd0 <HAL_UART_MspInit+0xec>)
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f16:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd0 <HAL_UART_MspInit+0xec>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	61bb      	str	r3, [r7, #24]
 8002f20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd0 <HAL_UART_MspInit+0xec>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	4a29      	ldr	r2, [pc, #164]	@ (8002fd0 <HAL_UART_MspInit+0xec>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f32:	4b27      	ldr	r3, [pc, #156]	@ (8002fd0 <HAL_UART_MspInit+0xec>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f3e:	230c      	movs	r3, #12
 8002f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f42:	2302      	movs	r3, #2
 8002f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f4e:	2307      	movs	r3, #7
 8002f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f52:	f107 031c 	add.w	r3, r7, #28
 8002f56:	4619      	mov	r1, r3
 8002f58:	481e      	ldr	r0, [pc, #120]	@ (8002fd4 <HAL_UART_MspInit+0xf0>)
 8002f5a:	f000 fd43 	bl	80039e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f5e:	e031      	b.n	8002fc4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd8 <HAL_UART_MspInit+0xf4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d12c      	bne.n	8002fc4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	4b18      	ldr	r3, [pc, #96]	@ (8002fd0 <HAL_UART_MspInit+0xec>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	4a17      	ldr	r2, [pc, #92]	@ (8002fd0 <HAL_UART_MspInit+0xec>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f7a:	4b15      	ldr	r3, [pc, #84]	@ (8002fd0 <HAL_UART_MspInit+0xec>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b11      	ldr	r3, [pc, #68]	@ (8002fd0 <HAL_UART_MspInit+0xec>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	4a10      	ldr	r2, [pc, #64]	@ (8002fd0 <HAL_UART_MspInit+0xec>)
 8002f90:	f043 0304 	orr.w	r3, r3, #4
 8002f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f96:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd0 <HAL_UART_MspInit+0xec>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fa2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fb4:	2307      	movs	r3, #7
 8002fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb8:	f107 031c 	add.w	r3, r7, #28
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4807      	ldr	r0, [pc, #28]	@ (8002fdc <HAL_UART_MspInit+0xf8>)
 8002fc0:	f000 fd10 	bl	80039e4 <HAL_GPIO_Init>
}
 8002fc4:	bf00      	nop
 8002fc6:	3730      	adds	r7, #48	@ 0x30
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40004400 	.word	0x40004400
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	40004800 	.word	0x40004800
 8002fdc:	40020800 	.word	0x40020800

08002fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fe4:	bf00      	nop
 8002fe6:	e7fd      	b.n	8002fe4 <NMI_Handler+0x4>

08002fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fec:	bf00      	nop
 8002fee:	e7fd      	b.n	8002fec <HardFault_Handler+0x4>

08002ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <MemManage_Handler+0x4>

08002ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <BusFault_Handler+0x4>

08003000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <UsageFault_Handler+0x4>

08003008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003036:	f000 fb7f 	bl	8003738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}

0800303e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH2_Pin);
 8003042:	2004      	movs	r0, #4
 8003044:	f000 fe94 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}

0800304c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DATA_READY_Pin);
 8003050:	2008      	movs	r0, #8
 8003052:	f000 fe8d 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}

0800305a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH1_Pin);
 800305e:	2040      	movs	r0, #64	@ 0x40
 8003060:	f000 fe86 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}

08003068 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800306c:	4802      	ldr	r0, [pc, #8]	@ (8003078 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800306e:	f002 fe2b 	bl	8005cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000750 	.word	0x20000750

0800307c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003080:	4802      	ldr	r0, [pc, #8]	@ (800308c <TIM2_IRQHandler+0x10>)
 8003082:	f002 fe21 	bl	8005cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000798 	.word	0x20000798

08003090 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003094:	4802      	ldr	r0, [pc, #8]	@ (80030a0 <TIM3_IRQHandler+0x10>)
 8003096:	f002 fe17 	bl	8005cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	200007e0 	.word	0x200007e0

080030a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH4_Pin);
 80030a8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80030ac:	f000 fe60 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH3_Pin);
 80030b0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80030b4:	f000 fe5c 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH5_Pin);
 80030b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80030bc:	f000 fe58 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return 1;
 80030c8:	2301      	movs	r3, #1
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <_kill>:

int _kill(int pid, int sig)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030de:	f004 fec3 	bl	8007e68 <__errno>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2216      	movs	r2, #22
 80030e6:	601a      	str	r2, [r3, #0]
  return -1;
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <_exit>:

void _exit (int status)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ffe7 	bl	80030d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003106:	bf00      	nop
 8003108:	e7fd      	b.n	8003106 <_exit+0x12>

0800310a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e00a      	b.n	8003132 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800311c:	f3af 8000 	nop.w
 8003120:	4601      	mov	r1, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	60ba      	str	r2, [r7, #8]
 8003128:	b2ca      	uxtb	r2, r1
 800312a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3301      	adds	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	429a      	cmp	r2, r3
 8003138:	dbf0      	blt.n	800311c <_read+0x12>
  }

  return len;
 800313a:	687b      	ldr	r3, [r7, #4]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e009      	b.n	800316a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	60ba      	str	r2, [r7, #8]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3301      	adds	r3, #1
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	dbf1      	blt.n	8003156 <_write+0x12>
  }
  return len;
 8003172:	687b      	ldr	r3, [r7, #4]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <_close>:

int _close(int file)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031a4:	605a      	str	r2, [r3, #4]
  return 0;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <_isatty>:

int _isatty(int file)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031bc:	2301      	movs	r3, #1
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b085      	sub	sp, #20
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031ec:	4a14      	ldr	r2, [pc, #80]	@ (8003240 <_sbrk+0x5c>)
 80031ee:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <_sbrk+0x60>)
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031f8:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003200:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <_sbrk+0x64>)
 8003202:	4a12      	ldr	r2, [pc, #72]	@ (800324c <_sbrk+0x68>)
 8003204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <_sbrk+0x64>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	429a      	cmp	r2, r3
 8003212:	d207      	bcs.n	8003224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003214:	f004 fe28 	bl	8007e68 <__errno>
 8003218:	4603      	mov	r3, r0
 800321a:	220c      	movs	r2, #12
 800321c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
 8003222:	e009      	b.n	8003238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003224:	4b08      	ldr	r3, [pc, #32]	@ (8003248 <_sbrk+0x64>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800322a:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <_sbrk+0x64>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	4a05      	ldr	r2, [pc, #20]	@ (8003248 <_sbrk+0x64>)
 8003234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003236:	68fb      	ldr	r3, [r7, #12]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20020000 	.word	0x20020000
 8003244:	00000400 	.word	0x00000400
 8003248:	200009b8 	.word	0x200009b8
 800324c:	20000b10 	.word	0x20000b10

08003250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003254:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <SystemInit+0x20>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325a:	4a05      	ldr	r2, [pc, #20]	@ (8003270 <SystemInit+0x20>)
 800325c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <Xbus_setBusId>:
}

/*! \brief Sets xbus Bus identifier
*/
void Xbus_setBusId(uint8_t* xbusMessage, uint8_t busId)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
	xbusMessage[OFFSET_TO_BID] = busId & 0xff;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3301      	adds	r3, #1
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	701a      	strb	r2, [r3, #0]
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <Xbus_getMessageId>:

/*! \brief Returns xbus Message identifier
*/
int Xbus_getMessageId(const uint8_t* xbusMessage)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	return (xbusMessage[OFFSET_TO_MID] & 0xff);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3302      	adds	r3, #2
 80032a0:	781b      	ldrb	r3, [r3, #0]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <Xbus_setMessageId>:

/*! \brief Sets xbus Message identifier
*/
void Xbus_setMessageId(uint8_t* xbusMessage, uint8_t messageId)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	70fb      	strb	r3, [r7, #3]
	xbusMessage[OFFSET_TO_MID] = messageId & 0xff;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3302      	adds	r3, #2
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	701a      	strb	r2, [r3, #0]
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <Xbus_getPayloadLength>:

/*! \brief Returns xbus message (payload) length
*/
int Xbus_getPayloadLength(const uint8_t* xbusMessage)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
	int length = xbusMessage[OFFSET_TO_LEN] & 0xff;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3303      	adds	r3, #3
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	60fb      	str	r3, [r7, #12]
	if (length != LENGTH_EXTENDER_BYTE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2bff      	cmp	r3, #255	@ 0xff
 80032e2:	d001      	beq.n	80032e8 <Xbus_getPayloadLength+0x1a>
		return length;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	e00b      	b.n	8003300 <Xbus_getPayloadLength+0x32>
	else
	{
		int result = (xbusMessage[OFFSET_TO_LEN + 2] & 0xff);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3305      	adds	r3, #5
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	60bb      	str	r3, [r7, #8]
		result += (xbusMessage[OFFSET_TO_LEN + 1] & 0xff) << 8;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	4413      	add	r3, r2
 80032fc:	60bb      	str	r3, [r7, #8]
		return result;
 80032fe:	68bb      	ldr	r3, [r7, #8]
	}
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <Xbus_setPayloadLength>:

/*! \brief Sets xbus message (payload) length
*/
void Xbus_setPayloadLength(uint8_t* xbusMessage, uint16_t payloadLength)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	807b      	strh	r3, [r7, #2]
	if (payloadLength < 255)
 8003318:	887b      	ldrh	r3, [r7, #2]
 800331a:	2bfe      	cmp	r3, #254	@ 0xfe
 800331c:	d805      	bhi.n	800332a <Xbus_setPayloadLength+0x1e>
		xbusMessage[OFFSET_TO_LEN] = payloadLength & 0xff;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3303      	adds	r3, #3
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	701a      	strb	r2, [r3, #0]
	{
		xbusMessage[OFFSET_TO_LEN] = LENGTH_EXTENDER_BYTE;
		xbusMessage[OFFSET_TO_LEN + 1] = (payloadLength >> 8) & 0xff;
		xbusMessage[OFFSET_TO_LEN + 2] = payloadLength & 0xff;
	}
}
 8003328:	e00f      	b.n	800334a <Xbus_setPayloadLength+0x3e>
		xbusMessage[OFFSET_TO_LEN] = LENGTH_EXTENDER_BYTE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3303      	adds	r3, #3
 800332e:	22ff      	movs	r2, #255	@ 0xff
 8003330:	701a      	strb	r2, [r3, #0]
		xbusMessage[OFFSET_TO_LEN + 1] = (payloadLength >> 8) & 0xff;
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	b29a      	uxth	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	701a      	strb	r2, [r3, #0]
		xbusMessage[OFFSET_TO_LEN + 2] = payloadLength & 0xff;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3305      	adds	r3, #5
 8003344:	887a      	ldrh	r2, [r7, #2]
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <Xbus_message>:

/*! \brief Initialize a xbus message with BID, MID and Length
*/
void Xbus_message(uint8_t* xbusMessage, uint8_t bid, uint8_t mid, uint16_t len)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	4608      	mov	r0, r1
 8003360:	4611      	mov	r1, r2
 8003362:	461a      	mov	r2, r3
 8003364:	4603      	mov	r3, r0
 8003366:	70fb      	strb	r3, [r7, #3]
 8003368:	460b      	mov	r3, r1
 800336a:	70bb      	strb	r3, [r7, #2]
 800336c:	4613      	mov	r3, r2
 800336e:	803b      	strh	r3, [r7, #0]
	xbusMessage[0] = 0xFA;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	22fa      	movs	r2, #250	@ 0xfa
 8003374:	701a      	strb	r2, [r3, #0]
	Xbus_setBusId(xbusMessage, bid);
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	4619      	mov	r1, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff ff7a 	bl	8003274 <Xbus_setBusId>
	Xbus_setMessageId(xbusMessage, mid);
 8003380:	78bb      	ldrb	r3, [r7, #2]
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff92 	bl	80032ae <Xbus_setMessageId>
	Xbus_setPayloadLength(xbusMessage, len);
 800338a:	883b      	ldrh	r3, [r7, #0]
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffbc 	bl	800330c <Xbus_setPayloadLength>
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <Xbus_getPointerToPayload>:
}

/*! \brief Returns pointer to payload of an xbus message
*/
uint8_t* Xbus_getPointerToPayload(uint8_t* xbusMessage)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	if ((xbusMessage[OFFSET_TO_LEN] & 0xff) == LENGTH_EXTENDER_BYTE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3303      	adds	r3, #3
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2bff      	cmp	r3, #255	@ 0xff
 80033ac:	d102      	bne.n	80033b4 <Xbus_getPointerToPayload+0x18>
		return xbusMessage + OFFSET_TO_PAYLOAD_EXT;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3306      	adds	r3, #6
 80033b2:	e001      	b.n	80033b8 <Xbus_getPointerToPayload+0x1c>
	else
		return xbusMessage + OFFSET_TO_PAYLOAD;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <Xbus_getConstPointerToPayload>:

/*! \brief Returns a const pointer to payload of an xbus message
*/
uint8_t const* Xbus_getConstPointerToPayload(uint8_t const* xbusMessage)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	return Xbus_getPointerToPayload((uint8_t*)xbusMessage);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ffe5 	bl	800339c <Xbus_getPointerToPayload>
 80033d2:	4603      	mov	r3, r0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <checkDataReadyLineMain>:
	checksum &= 0xff;
	return (checksum == 0);
}

bool checkDataReadyLineMain()
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(DATA_READY_PORT, DATA_READY_PIN) == GPIO_PIN_SET;
 80033e0:	2108      	movs	r1, #8
 80033e2:	4805      	ldr	r0, [pc, #20]	@ (80033f8 <checkDataReadyLineMain+0x1c>)
 80033e4:	f000 fc92 	bl	8003d0c <HAL_GPIO_ReadPin>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	bf0c      	ite	eq
 80033ee:	2301      	moveq	r3, #1
 80033f0:	2300      	movne	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40020400 	.word	0x40020400

080033fc <Xbus_createRawMessageHelper>:

size_t Xbus_createRawMessageHelper(uint8_t* dest, uint8_t const* message)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
	int n;
	uint8_t checksum;
	uint16_t length;
	uint8_t* dptr = dest;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	60fb      	str	r3, [r7, #12]

	length = Xbus_getPayloadLength(message);
 800340a:	6838      	ldr	r0, [r7, #0]
 800340c:	f7ff ff5f 	bl	80032ce <Xbus_getPayloadLength>
 8003410:	4603      	mov	r3, r0
 8003412:	817b      	strh	r3, [r7, #10]

	*dptr++ = XBUS_CONTROL_PIPE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	60fa      	str	r2, [r7, #12]
 800341a:	2203      	movs	r2, #3
 800341c:	701a      	strb	r2, [r3, #0]

	checksum = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	74fb      	strb	r3, [r7, #19]
	checksum -= XBUS_MASTERDEVICE;
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	3301      	adds	r3, #1
 8003426:	74fb      	strb	r3, [r7, #19]

	*dptr = Xbus_getMessageId(message);
 8003428:	6838      	ldr	r0, [r7, #0]
 800342a:	f7ff ff33 	bl	8003294 <Xbus_getMessageId>
 800342e:	4603      	mov	r3, r0
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	701a      	strb	r2, [r3, #0]
	checksum -= *dptr++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	60fa      	str	r2, [r7, #12]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	7cfa      	ldrb	r2, [r7, #19]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	74fb      	strb	r3, [r7, #19]

	if (length < XBUS_EXTENDED_LENGTH)
 8003444:	897b      	ldrh	r3, [r7, #10]
 8003446:	2bfe      	cmp	r3, #254	@ 0xfe
 8003448:	d80b      	bhi.n	8003462 <Xbus_createRawMessageHelper+0x66>
	{
		*dptr = length;
 800344a:	897b      	ldrh	r3, [r7, #10]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	60fa      	str	r2, [r7, #12]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	7cfa      	ldrb	r2, [r7, #19]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	74fb      	strb	r3, [r7, #19]
 8003460:	e021      	b.n	80034a6 <Xbus_createRawMessageHelper+0xaa>
	}
	else
	{
		*dptr = XBUS_EXTENDED_LENGTH;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	22ff      	movs	r2, #255	@ 0xff
 8003466:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	60fa      	str	r2, [r7, #12]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	7cfa      	ldrb	r2, [r7, #19]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	74fb      	strb	r3, [r7, #19]
		*dptr = length >> 8;
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	b29b      	uxth	r3, r3
 800347c:	b2da      	uxtb	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	60fa      	str	r2, [r7, #12]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	7cfa      	ldrb	r2, [r7, #19]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	74fb      	strb	r3, [r7, #19]
		*dptr = length & 0xFF;
 8003490:	897b      	ldrh	r3, [r7, #10]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	60fa      	str	r2, [r7, #12]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	7cfa      	ldrb	r2, [r7, #19]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	74fb      	strb	r3, [r7, #19]
	}

	for (n = 0; n < length; n++)
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	e012      	b.n	80034d2 <Xbus_createRawMessageHelper+0xd6>
	{
		*dptr = Xbus_getConstPointerToPayload(message)[n];
 80034ac:	6838      	ldr	r0, [r7, #0]
 80034ae:	f7ff ff89 	bl	80033c4 <Xbus_getConstPointerToPayload>
 80034b2:	4602      	mov	r2, r0
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	4413      	add	r3, r2
 80034b8:	781a      	ldrb	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	60fa      	str	r2, [r7, #12]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	7cfa      	ldrb	r2, [r7, #19]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	74fb      	strb	r3, [r7, #19]
	for (n = 0; n < length; n++)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3301      	adds	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	897b      	ldrh	r3, [r7, #10]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	dbe8      	blt.n	80034ac <Xbus_createRawMessageHelper+0xb0>
	}

	*dptr++ = checksum;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	60fa      	str	r2, [r7, #12]
 80034e0:	7cfa      	ldrb	r2, [r7, #19]
 80034e2:	701a      	strb	r2, [r3, #0]

	return dptr - dest;
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	1ad3      	subs	r3, r2, r3
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <extractUint8>:

uint8_t extractUint8(const uint8_t *data, int *index) {
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
    uint8_t result = data[*index];
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	73fb      	strb	r3, [r7, #15]
    (*index)++;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	601a      	str	r2, [r3, #0]
    return result;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <extractUint16>:

/* Extract a 16-bit unsigned integer from data in big-endian order.
   The first byte becomes the high 8 bits and the second byte the low 8 bits. */
uint16_t extractUint16(const uint8_t *data, int *index) {
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	81fb      	strh	r3, [r7, #14]
    result |= ((uint16_t)data[*index]) << 8;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	b21a      	sxth	r2, r3
 8003540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003544:	4313      	orrs	r3, r2
 8003546:	b21b      	sxth	r3, r3
 8003548:	81fb      	strh	r3, [r7, #14]
    (*index)++;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	601a      	str	r2, [r3, #0]
    result |= ((uint16_t)data[*index]);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	89fb      	ldrh	r3, [r7, #14]
 8003564:	4313      	orrs	r3, r2
 8003566:	81fb      	strh	r3, [r7, #14]
    (*index)++;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	601a      	str	r2, [r3, #0]
    return result;
 8003572:	89fb      	ldrh	r3, [r7, #14]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <extractUint32>:

/* Extract a 32-bit unsigned integer from data in big-endian order.
   The first byte is shifted to the most significant position, etc. */
uint32_t extractUint32(const uint8_t *data, int *index) {
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
    uint32_t result = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
    result |= ((uint32_t)data[*index]) << 24;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	061b      	lsls	r3, r3, #24
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
    (*index)++;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]) << 16;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	041b      	lsls	r3, r3, #16
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
    (*index)++;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]) << 8;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
    (*index)++;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
    (*index)++;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	601a      	str	r2, [r3, #0]
    return result;
 8003606:	68fb      	ldr	r3, [r7, #12]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <extractFloat>:

/* Extract a float by first reading 4 bytes as a 32-bit unsigned integer
   and then copying them into a float. */
float extractFloat(const uint8_t *data, int *index) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
    uint32_t temp = extractUint32(data, index);
 800361e:	6839      	ldr	r1, [r7, #0]
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff ffad 	bl	8003580 <extractUint32>
 8003626:	4603      	mov	r3, r0
 8003628:	60fb      	str	r3, [r7, #12]
    float result;
    memcpy(&result, &temp, sizeof(result));
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	60bb      	str	r3, [r7, #8]
    return result;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	ee07 3a90 	vmov	s15, r3
}
 8003634:	eeb0 0a67 	vmov.f32	s0, s15
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003678 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003644:	f7ff fe04 	bl	8003250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003648:	480c      	ldr	r0, [pc, #48]	@ (800367c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800364a:	490d      	ldr	r1, [pc, #52]	@ (8003680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800364c:	4a0d      	ldr	r2, [pc, #52]	@ (8003684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800364e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003650:	e002      	b.n	8003658 <LoopCopyDataInit>

08003652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003656:	3304      	adds	r3, #4

08003658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800365a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800365c:	d3f9      	bcc.n	8003652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800365e:	4a0a      	ldr	r2, [pc, #40]	@ (8003688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003660:	4c0a      	ldr	r4, [pc, #40]	@ (800368c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003664:	e001      	b.n	800366a <LoopFillZerobss>

08003666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003668:	3204      	adds	r2, #4

0800366a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800366a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800366c:	d3fb      	bcc.n	8003666 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800366e:	f004 fc01 	bl	8007e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003672:	f7fe f99b 	bl	80019ac <main>
  bx  lr    
 8003676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800367c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003680:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003684:	0800a818 	.word	0x0800a818
  ldr r2, =_sbss
 8003688:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800368c:	20000b0c 	.word	0x20000b0c

08003690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003690:	e7fe      	b.n	8003690 <ADC_IRQHandler>
	...

08003694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003698:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <HAL_Init+0x40>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0d      	ldr	r2, [pc, #52]	@ (80036d4 <HAL_Init+0x40>)
 800369e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_Init+0x40>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <HAL_Init+0x40>)
 80036aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b0:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <HAL_Init+0x40>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a07      	ldr	r2, [pc, #28]	@ (80036d4 <HAL_Init+0x40>)
 80036b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036bc:	2003      	movs	r0, #3
 80036be:	f000 f94f 	bl	8003960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036c2:	2000      	movs	r0, #0
 80036c4:	f000 f808 	bl	80036d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036c8:	f7ff fae4 	bl	8002c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023c00 	.word	0x40023c00

080036d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036e0:	4b12      	ldr	r3, [pc, #72]	@ (800372c <HAL_InitTick+0x54>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b12      	ldr	r3, [pc, #72]	@ (8003730 <HAL_InitTick+0x58>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f967 	bl	80039ca <HAL_SYSTICK_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00e      	b.n	8003724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b0f      	cmp	r3, #15
 800370a:	d80a      	bhi.n	8003722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800370c:	2200      	movs	r2, #0
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	f000 f92f 	bl	8003976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003718:	4a06      	ldr	r2, [pc, #24]	@ (8003734 <HAL_InitTick+0x5c>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000008 	.word	0x20000008
 8003730:	20000010 	.word	0x20000010
 8003734:	2000000c 	.word	0x2000000c

08003738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <HAL_IncTick+0x20>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b06      	ldr	r3, [pc, #24]	@ (800375c <HAL_IncTick+0x24>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a04      	ldr	r2, [pc, #16]	@ (800375c <HAL_IncTick+0x24>)
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000010 	.word	0x20000010
 800375c:	200009bc 	.word	0x200009bc

08003760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return uwTick;
 8003764:	4b03      	ldr	r3, [pc, #12]	@ (8003774 <HAL_GetTick+0x14>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	200009bc 	.word	0x200009bc

08003778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003780:	f7ff ffee 	bl	8003760 <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d005      	beq.n	800379e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <HAL_Delay+0x44>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800379e:	bf00      	nop
 80037a0:	f7ff ffde 	bl	8003760 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d8f7      	bhi.n	80037a0 <HAL_Delay+0x28>
  {
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000010 	.word	0x20000010

080037c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f2:	4a04      	ldr	r2, [pc, #16]	@ (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	60d3      	str	r3, [r2, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800380c:	4b04      	ldr	r3, [pc, #16]	@ (8003820 <__NVIC_GetPriorityGrouping+0x18>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 0307 	and.w	r3, r3, #7
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	db0b      	blt.n	800384e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4907      	ldr	r1, [pc, #28]	@ (800385c <__NVIC_EnableIRQ+0x38>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2001      	movs	r0, #1
 8003846:	fa00 f202 	lsl.w	r2, r0, r2
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000e100 	.word	0xe000e100

08003860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	2b00      	cmp	r3, #0
 8003872:	db0a      	blt.n	800388a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	490c      	ldr	r1, [pc, #48]	@ (80038ac <__NVIC_SetPriority+0x4c>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	0112      	lsls	r2, r2, #4
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	440b      	add	r3, r1
 8003884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003888:	e00a      	b.n	80038a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4908      	ldr	r1, [pc, #32]	@ (80038b0 <__NVIC_SetPriority+0x50>)
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	3b04      	subs	r3, #4
 8003898:	0112      	lsls	r2, r2, #4
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	440b      	add	r3, r1
 800389e:	761a      	strb	r2, [r3, #24]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000e100 	.word	0xe000e100
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	@ 0x24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f1c3 0307 	rsb	r3, r3, #7
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	bf28      	it	cs
 80038d2:	2304      	movcs	r3, #4
 80038d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3304      	adds	r3, #4
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d902      	bls.n	80038e4 <NVIC_EncodePriority+0x30>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3b03      	subs	r3, #3
 80038e2:	e000      	b.n	80038e6 <NVIC_EncodePriority+0x32>
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43da      	mvns	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	401a      	ands	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	43d9      	mvns	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	4313      	orrs	r3, r2
         );
}
 800390e:	4618      	mov	r0, r3
 8003910:	3724      	adds	r7, #36	@ 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800392c:	d301      	bcc.n	8003932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800392e:	2301      	movs	r3, #1
 8003930:	e00f      	b.n	8003952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003932:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <SysTick_Config+0x40>)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800393a:	210f      	movs	r1, #15
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	f7ff ff8e 	bl	8003860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003944:	4b05      	ldr	r3, [pc, #20]	@ (800395c <SysTick_Config+0x40>)
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394a:	4b04      	ldr	r3, [pc, #16]	@ (800395c <SysTick_Config+0x40>)
 800394c:	2207      	movs	r2, #7
 800394e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	e000e010 	.word	0xe000e010

08003960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff29 	bl	80037c0 <__NVIC_SetPriorityGrouping>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	4603      	mov	r3, r0
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003988:	f7ff ff3e 	bl	8003808 <__NVIC_GetPriorityGrouping>
 800398c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	6978      	ldr	r0, [r7, #20]
 8003994:	f7ff ff8e 	bl	80038b4 <NVIC_EncodePriority>
 8003998:	4602      	mov	r2, r0
 800399a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff5d 	bl	8003860 <__NVIC_SetPriority>
}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	4603      	mov	r3, r0
 80039b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff31 	bl	8003824 <__NVIC_EnableIRQ>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ffa2 	bl	800391c <SysTick_Config>
 80039d8:	4603      	mov	r3, r0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	@ 0x24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	e165      	b.n	8003ccc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a00:	2201      	movs	r2, #1
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4013      	ands	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	f040 8154 	bne.w	8003cc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d005      	beq.n	8003a36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d130      	bne.n	8003a98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	2203      	movs	r2, #3
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 0201 	and.w	r2, r3, #1
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d017      	beq.n	8003ad4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	2203      	movs	r2, #3
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d123      	bne.n	8003b28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	08da      	lsrs	r2, r3, #3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3208      	adds	r2, #8
 8003ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	220f      	movs	r2, #15
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	08da      	lsrs	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3208      	adds	r2, #8
 8003b22:	69b9      	ldr	r1, [r7, #24]
 8003b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	2203      	movs	r2, #3
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 0203 	and.w	r2, r3, #3
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80ae 	beq.w	8003cc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ce4 <HAL_GPIO_Init+0x300>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	4a5c      	ldr	r2, [pc, #368]	@ (8003ce4 <HAL_GPIO_Init+0x300>)
 8003b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b7a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ce4 <HAL_GPIO_Init+0x300>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b86:	4a58      	ldr	r2, [pc, #352]	@ (8003ce8 <HAL_GPIO_Init+0x304>)
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	220f      	movs	r2, #15
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a4f      	ldr	r2, [pc, #316]	@ (8003cec <HAL_GPIO_Init+0x308>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d025      	beq.n	8003bfe <HAL_GPIO_Init+0x21a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4e      	ldr	r2, [pc, #312]	@ (8003cf0 <HAL_GPIO_Init+0x30c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01f      	beq.n	8003bfa <HAL_GPIO_Init+0x216>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a4d      	ldr	r2, [pc, #308]	@ (8003cf4 <HAL_GPIO_Init+0x310>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d019      	beq.n	8003bf6 <HAL_GPIO_Init+0x212>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a4c      	ldr	r2, [pc, #304]	@ (8003cf8 <HAL_GPIO_Init+0x314>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_GPIO_Init+0x20e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a4b      	ldr	r2, [pc, #300]	@ (8003cfc <HAL_GPIO_Init+0x318>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00d      	beq.n	8003bee <HAL_GPIO_Init+0x20a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a4a      	ldr	r2, [pc, #296]	@ (8003d00 <HAL_GPIO_Init+0x31c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d007      	beq.n	8003bea <HAL_GPIO_Init+0x206>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a49      	ldr	r2, [pc, #292]	@ (8003d04 <HAL_GPIO_Init+0x320>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_GPIO_Init+0x202>
 8003be2:	2306      	movs	r3, #6
 8003be4:	e00c      	b.n	8003c00 <HAL_GPIO_Init+0x21c>
 8003be6:	2307      	movs	r3, #7
 8003be8:	e00a      	b.n	8003c00 <HAL_GPIO_Init+0x21c>
 8003bea:	2305      	movs	r3, #5
 8003bec:	e008      	b.n	8003c00 <HAL_GPIO_Init+0x21c>
 8003bee:	2304      	movs	r3, #4
 8003bf0:	e006      	b.n	8003c00 <HAL_GPIO_Init+0x21c>
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e004      	b.n	8003c00 <HAL_GPIO_Init+0x21c>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e002      	b.n	8003c00 <HAL_GPIO_Init+0x21c>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <HAL_GPIO_Init+0x21c>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	f002 0203 	and.w	r2, r2, #3
 8003c06:	0092      	lsls	r2, r2, #2
 8003c08:	4093      	lsls	r3, r2
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c10:	4935      	ldr	r1, [pc, #212]	@ (8003ce8 <HAL_GPIO_Init+0x304>)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	089b      	lsrs	r3, r3, #2
 8003c16:	3302      	adds	r3, #2
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d08 <HAL_GPIO_Init+0x324>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	43db      	mvns	r3, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c42:	4a31      	ldr	r2, [pc, #196]	@ (8003d08 <HAL_GPIO_Init+0x324>)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c48:	4b2f      	ldr	r3, [pc, #188]	@ (8003d08 <HAL_GPIO_Init+0x324>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c6c:	4a26      	ldr	r2, [pc, #152]	@ (8003d08 <HAL_GPIO_Init+0x324>)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c72:	4b25      	ldr	r3, [pc, #148]	@ (8003d08 <HAL_GPIO_Init+0x324>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c96:	4a1c      	ldr	r2, [pc, #112]	@ (8003d08 <HAL_GPIO_Init+0x324>)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d08 <HAL_GPIO_Init+0x324>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cc0:	4a11      	ldr	r2, [pc, #68]	@ (8003d08 <HAL_GPIO_Init+0x324>)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	2b0f      	cmp	r3, #15
 8003cd0:	f67f ae96 	bls.w	8003a00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	3724      	adds	r7, #36	@ 0x24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40013800 	.word	0x40013800
 8003cec:	40020000 	.word	0x40020000
 8003cf0:	40020400 	.word	0x40020400
 8003cf4:	40020800 	.word	0x40020800
 8003cf8:	40020c00 	.word	0x40020c00
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40021400 	.word	0x40021400
 8003d04:	40021800 	.word	0x40021800
 8003d08:	40013c00 	.word	0x40013c00

08003d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	887b      	ldrh	r3, [r7, #2]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
 8003d28:	e001      	b.n	8003d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	807b      	strh	r3, [r7, #2]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d4c:	787b      	ldrb	r3, [r7, #1]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d58:	e003      	b.n	8003d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d5a:	887b      	ldrh	r3, [r7, #2]
 8003d5c:	041a      	lsls	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	619a      	str	r2, [r3, #24]
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d7a:	4b08      	ldr	r3, [pc, #32]	@ (8003d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d006      	beq.n	8003d94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d86:	4a05      	ldr	r2, [pc, #20]	@ (8003d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fcc8 	bl	8002724 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40013c00 	.word	0x40013c00

08003da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e12b      	b.n	800400a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fe ff8c 	bl	8002ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2224      	movs	r2, #36	@ 0x24
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e04:	f001 f922 	bl	800504c <HAL_RCC_GetPCLK1Freq>
 8003e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4a81      	ldr	r2, [pc, #516]	@ (8004014 <HAL_I2C_Init+0x274>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d807      	bhi.n	8003e24 <HAL_I2C_Init+0x84>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a80      	ldr	r2, [pc, #512]	@ (8004018 <HAL_I2C_Init+0x278>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bf94      	ite	ls
 8003e1c:	2301      	movls	r3, #1
 8003e1e:	2300      	movhi	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e006      	b.n	8003e32 <HAL_I2C_Init+0x92>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4a7d      	ldr	r2, [pc, #500]	@ (800401c <HAL_I2C_Init+0x27c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	bf94      	ite	ls
 8003e2c:	2301      	movls	r3, #1
 8003e2e:	2300      	movhi	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0e7      	b.n	800400a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a78      	ldr	r2, [pc, #480]	@ (8004020 <HAL_I2C_Init+0x280>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	0c9b      	lsrs	r3, r3, #18
 8003e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4a6a      	ldr	r2, [pc, #424]	@ (8004014 <HAL_I2C_Init+0x274>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d802      	bhi.n	8003e74 <HAL_I2C_Init+0xd4>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	3301      	adds	r3, #1
 8003e72:	e009      	b.n	8003e88 <HAL_I2C_Init+0xe8>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	4a69      	ldr	r2, [pc, #420]	@ (8004024 <HAL_I2C_Init+0x284>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	099b      	lsrs	r3, r3, #6
 8003e86:	3301      	adds	r3, #1
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	495c      	ldr	r1, [pc, #368]	@ (8004014 <HAL_I2C_Init+0x274>)
 8003ea4:	428b      	cmp	r3, r1
 8003ea6:	d819      	bhi.n	8003edc <HAL_I2C_Init+0x13c>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e59      	subs	r1, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eb6:	1c59      	adds	r1, r3, #1
 8003eb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ebc:	400b      	ands	r3, r1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_I2C_Init+0x138>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1e59      	subs	r1, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed6:	e051      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	e04f      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d111      	bne.n	8003f08 <HAL_I2C_Init+0x168>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e58      	subs	r0, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	440b      	add	r3, r1
 8003ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e012      	b.n	8003f2e <HAL_I2C_Init+0x18e>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1e58      	subs	r0, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	0099      	lsls	r1, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_I2C_Init+0x196>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e022      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10e      	bne.n	8003f5c <HAL_I2C_Init+0x1bc>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1e58      	subs	r0, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	460b      	mov	r3, r1
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	440b      	add	r3, r1
 8003f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f50:	3301      	adds	r3, #1
 8003f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f5a:	e00f      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1e58      	subs	r0, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	0099      	lsls	r1, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f72:	3301      	adds	r3, #1
 8003f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	6809      	ldr	r1, [r1, #0]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003faa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6911      	ldr	r1, [r2, #16]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68d2      	ldr	r2, [r2, #12]
 8003fb6:	4311      	orrs	r1, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	000186a0 	.word	0x000186a0
 8004018:	001e847f 	.word	0x001e847f
 800401c:	003d08ff 	.word	0x003d08ff
 8004020:	431bde83 	.word	0x431bde83
 8004024:	10624dd3 	.word	0x10624dd3

08004028 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	607a      	str	r2, [r7, #4]
 8004032:	461a      	mov	r2, r3
 8004034:	460b      	mov	r3, r1
 8004036:	817b      	strh	r3, [r7, #10]
 8004038:	4613      	mov	r3, r2
 800403a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7ff fb90 	bl	8003760 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b20      	cmp	r3, #32
 800404c:	f040 80e0 	bne.w	8004210 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	2319      	movs	r3, #25
 8004056:	2201      	movs	r2, #1
 8004058:	4970      	ldr	r1, [pc, #448]	@ (800421c <HAL_I2C_Master_Transmit+0x1f4>)
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fc7e 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004066:	2302      	movs	r3, #2
 8004068:	e0d3      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_I2C_Master_Transmit+0x50>
 8004074:	2302      	movs	r3, #2
 8004076:	e0cc      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b01      	cmp	r3, #1
 800408c:	d007      	beq.n	800409e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2221      	movs	r2, #33	@ 0x21
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2210      	movs	r2, #16
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	893a      	ldrh	r2, [r7, #8]
 80040ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4a50      	ldr	r2, [pc, #320]	@ (8004220 <HAL_I2C_Master_Transmit+0x1f8>)
 80040de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040e0:	8979      	ldrh	r1, [r7, #10]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	6a3a      	ldr	r2, [r7, #32]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 face 	bl	8004688 <I2C_MasterRequestWrite>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e08d      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800410c:	e066      	b.n	80041dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	6a39      	ldr	r1, [r7, #32]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fd3c 	bl	8004b90 <I2C_WaitOnTXEFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	2b04      	cmp	r3, #4
 8004124:	d107      	bne.n	8004136 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004134:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e06b      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	781a      	ldrb	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b04      	cmp	r3, #4
 8004176:	d11b      	bne.n	80041b0 <HAL_I2C_Master_Transmit+0x188>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417c:	2b00      	cmp	r3, #0
 800417e:	d017      	beq.n	80041b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	781a      	ldrb	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	6a39      	ldr	r1, [r7, #32]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fd33 	bl	8004c20 <I2C_WaitOnBTFFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00d      	beq.n	80041dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d107      	bne.n	80041d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e01a      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d194      	bne.n	800410e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	00100002 	.word	0x00100002
 8004220:	ffff0000 	.word	0xffff0000

08004224 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08c      	sub	sp, #48	@ 0x30
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	4608      	mov	r0, r1
 800422e:	4611      	mov	r1, r2
 8004230:	461a      	mov	r2, r3
 8004232:	4603      	mov	r3, r0
 8004234:	817b      	strh	r3, [r7, #10]
 8004236:	460b      	mov	r3, r1
 8004238:	813b      	strh	r3, [r7, #8]
 800423a:	4613      	mov	r3, r2
 800423c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800423e:	f7ff fa8f 	bl	8003760 <HAL_GetTick>
 8004242:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b20      	cmp	r3, #32
 800424e:	f040 8214 	bne.w	800467a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	2319      	movs	r3, #25
 8004258:	2201      	movs	r2, #1
 800425a:	497b      	ldr	r1, [pc, #492]	@ (8004448 <HAL_I2C_Mem_Read+0x224>)
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fb7d 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004268:	2302      	movs	r3, #2
 800426a:	e207      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_I2C_Mem_Read+0x56>
 8004276:	2302      	movs	r3, #2
 8004278:	e200      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d007      	beq.n	80042a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2222      	movs	r2, #34	@ 0x22
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2240      	movs	r2, #64	@ 0x40
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80042d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4a5b      	ldr	r2, [pc, #364]	@ (800444c <HAL_I2C_Mem_Read+0x228>)
 80042e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042e2:	88f8      	ldrh	r0, [r7, #6]
 80042e4:	893a      	ldrh	r2, [r7, #8]
 80042e6:	8979      	ldrh	r1, [r7, #10]
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	4603      	mov	r3, r0
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fa4a 	bl	800478c <I2C_RequestMemoryRead>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e1bc      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004306:	2b00      	cmp	r3, #0
 8004308:	d113      	bne.n	8004332 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430a:	2300      	movs	r3, #0
 800430c:	623b      	str	r3, [r7, #32]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	623b      	str	r3, [r7, #32]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	623b      	str	r3, [r7, #32]
 800431e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	e190      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004336:	2b01      	cmp	r3, #1
 8004338:	d11b      	bne.n	8004372 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e170      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004376:	2b02      	cmp	r3, #2
 8004378:	d11b      	bne.n	80043b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004388:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004398:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	e150      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043c8:	e144      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	f200 80f1 	bhi.w	80045b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d123      	bne.n	8004424 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fc65 	bl	8004cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e145      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004422:	e117      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004428:	2b02      	cmp	r3, #2
 800442a:	d14e      	bne.n	80044ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800442c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004432:	2200      	movs	r2, #0
 8004434:	4906      	ldr	r1, [pc, #24]	@ (8004450 <HAL_I2C_Mem_Read+0x22c>)
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 fa90 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e11a      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
 8004446:	bf00      	nop
 8004448:	00100002 	.word	0x00100002
 800444c:	ffff0000 	.word	0xffff0000
 8004450:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044c8:	e0c4      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d0:	2200      	movs	r2, #0
 80044d2:	496c      	ldr	r1, [pc, #432]	@ (8004684 <HAL_I2C_Mem_Read+0x460>)
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fa41 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0cb      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452c:	2200      	movs	r2, #0
 800452e:	4955      	ldr	r1, [pc, #340]	@ (8004684 <HAL_I2C_Mem_Read+0x460>)
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fa13 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e09d      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800454e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045b4:	e04e      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fb78 	bl	8004cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e058      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b04      	cmp	r3, #4
 8004608:	d124      	bne.n	8004654 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460e:	2b03      	cmp	r3, #3
 8004610:	d107      	bne.n	8004622 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004620:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004658:	2b00      	cmp	r3, #0
 800465a:	f47f aeb6 	bne.w	80043ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	e000      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800467a:	2302      	movs	r3, #2
  }
}
 800467c:	4618      	mov	r0, r3
 800467e:	3728      	adds	r7, #40	@ 0x28
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	00010004 	.word	0x00010004

08004688 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	607a      	str	r2, [r7, #4]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	460b      	mov	r3, r1
 8004696:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d006      	beq.n	80046b2 <I2C_MasterRequestWrite+0x2a>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d003      	beq.n	80046b2 <I2C_MasterRequestWrite+0x2a>
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046b0:	d108      	bne.n	80046c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e00b      	b.n	80046dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c8:	2b12      	cmp	r3, #18
 80046ca:	d107      	bne.n	80046dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f937 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00d      	beq.n	8004710 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004702:	d103      	bne.n	800470c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800470a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e035      	b.n	800477c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004718:	d108      	bne.n	800472c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800471a:	897b      	ldrh	r3, [r7, #10]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	461a      	mov	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004728:	611a      	str	r2, [r3, #16]
 800472a:	e01b      	b.n	8004764 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800472c:	897b      	ldrh	r3, [r7, #10]
 800472e:	11db      	asrs	r3, r3, #7
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f003 0306 	and.w	r3, r3, #6
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f063 030f 	orn	r3, r3, #15
 800473c:	b2da      	uxtb	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	490e      	ldr	r1, [pc, #56]	@ (8004784 <I2C_MasterRequestWrite+0xfc>)
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f980 	bl	8004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e010      	b.n	800477c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800475a:	897b      	ldrh	r3, [r7, #10]
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	4907      	ldr	r1, [pc, #28]	@ (8004788 <I2C_MasterRequestWrite+0x100>)
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f970 	bl	8004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	00010008 	.word	0x00010008
 8004788:	00010002 	.word	0x00010002

0800478c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	4608      	mov	r0, r1
 8004796:	4611      	mov	r1, r2
 8004798:	461a      	mov	r2, r3
 800479a:	4603      	mov	r3, r0
 800479c:	817b      	strh	r3, [r7, #10]
 800479e:	460b      	mov	r3, r1
 80047a0:	813b      	strh	r3, [r7, #8]
 80047a2:	4613      	mov	r3, r2
 80047a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f8c2 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ec:	d103      	bne.n	80047f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e0aa      	b.n	8004950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047fa:	897b      	ldrh	r3, [r7, #10]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004808:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	6a3a      	ldr	r2, [r7, #32]
 800480e:	4952      	ldr	r1, [pc, #328]	@ (8004958 <I2C_RequestMemoryRead+0x1cc>)
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f91d 	bl	8004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e097      	b.n	8004950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004838:	6a39      	ldr	r1, [r7, #32]
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f9a8 	bl	8004b90 <I2C_WaitOnTXEFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	2b04      	cmp	r3, #4
 800484c:	d107      	bne.n	800485e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800485c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e076      	b.n	8004950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d105      	bne.n	8004874 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004868:	893b      	ldrh	r3, [r7, #8]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	611a      	str	r2, [r3, #16]
 8004872:	e021      	b.n	80048b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004874:	893b      	ldrh	r3, [r7, #8]
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	b29b      	uxth	r3, r3
 800487a:	b2da      	uxtb	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004884:	6a39      	ldr	r1, [r7, #32]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f982 	bl	8004b90 <I2C_WaitOnTXEFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00d      	beq.n	80048ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	2b04      	cmp	r3, #4
 8004898:	d107      	bne.n	80048aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e050      	b.n	8004950 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048ae:	893b      	ldrh	r3, [r7, #8]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ba:	6a39      	ldr	r1, [r7, #32]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f967 	bl	8004b90 <I2C_WaitOnTXEFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00d      	beq.n	80048e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d107      	bne.n	80048e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e035      	b.n	8004950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f82b 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00d      	beq.n	8004928 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800491a:	d103      	bne.n	8004924 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004922:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e013      	b.n	8004950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004928:	897b      	ldrh	r3, [r7, #10]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	b2da      	uxtb	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	6a3a      	ldr	r2, [r7, #32]
 800493c:	4906      	ldr	r1, [pc, #24]	@ (8004958 <I2C_RequestMemoryRead+0x1cc>)
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f886 	bl	8004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	00010002 	.word	0x00010002

0800495c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800496c:	e048      	b.n	8004a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d044      	beq.n	8004a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004976:	f7fe fef3 	bl	8003760 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d139      	bne.n	8004a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	0c1b      	lsrs	r3, r3, #16
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b01      	cmp	r3, #1
 8004994:	d10d      	bne.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	43da      	mvns	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4013      	ands	r3, r2
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	e00c      	b.n	80049cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	43da      	mvns	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4013      	ands	r3, r2
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d116      	bne.n	8004a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e023      	b.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	0c1b      	lsrs	r3, r3, #16
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d10d      	bne.n	8004a26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	43da      	mvns	r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	4013      	ands	r3, r2
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2301      	moveq	r3, #1
 8004a1e:	2300      	movne	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	e00c      	b.n	8004a40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	43da      	mvns	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4013      	ands	r3, r2
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf0c      	ite	eq
 8004a38:	2301      	moveq	r3, #1
 8004a3a:	2300      	movne	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	461a      	mov	r2, r3
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d093      	beq.n	800496e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a5e:	e071      	b.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a6e:	d123      	bne.n	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa4:	f043 0204 	orr.w	r2, r3, #4
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e067      	b.n	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d041      	beq.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac0:	f7fe fe4e 	bl	8003760 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d302      	bcc.n	8004ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d136      	bne.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	0c1b      	lsrs	r3, r3, #16
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d10c      	bne.n	8004afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	43da      	mvns	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4013      	ands	r3, r2
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	bf14      	ite	ne
 8004af2:	2301      	movne	r3, #1
 8004af4:	2300      	moveq	r3, #0
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	e00b      	b.n	8004b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	43da      	mvns	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf14      	ite	ne
 8004b0c:	2301      	movne	r3, #1
 8004b0e:	2300      	moveq	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d016      	beq.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b30:	f043 0220 	orr.w	r2, r3, #32
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e021      	b.n	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	0c1b      	lsrs	r3, r3, #16
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d10c      	bne.n	8004b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	43da      	mvns	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e00b      	b.n	8004b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	43da      	mvns	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4013      	ands	r3, r2
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bf14      	ite	ne
 8004b7a:	2301      	movne	r3, #1
 8004b7c:	2300      	moveq	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f47f af6d 	bne.w	8004a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b9c:	e034      	b.n	8004c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f8e3 	bl	8004d6a <I2C_IsAcknowledgeFailed>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e034      	b.n	8004c18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb4:	d028      	beq.n	8004c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb6:	f7fe fdd3 	bl	8003760 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d11d      	bne.n	8004c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd6:	2b80      	cmp	r3, #128	@ 0x80
 8004bd8:	d016      	beq.n	8004c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf4:	f043 0220 	orr.w	r2, r3, #32
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e007      	b.n	8004c18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c12:	2b80      	cmp	r3, #128	@ 0x80
 8004c14:	d1c3      	bne.n	8004b9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c2c:	e034      	b.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f89b 	bl	8004d6a <I2C_IsAcknowledgeFailed>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e034      	b.n	8004ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d028      	beq.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fe fd8b 	bl	8003760 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d11d      	bne.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d016      	beq.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e007      	b.n	8004ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d1c3      	bne.n	8004c2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cbc:	e049      	b.n	8004d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	d119      	bne.n	8004d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0210 	mvn.w	r2, #16
 8004cd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e030      	b.n	8004d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d00:	f7fe fd2e 	bl	8003760 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d302      	bcc.n	8004d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d11d      	bne.n	8004d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d20:	2b40      	cmp	r3, #64	@ 0x40
 8004d22:	d016      	beq.n	8004d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	f043 0220 	orr.w	r2, r3, #32
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e007      	b.n	8004d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d5c:	2b40      	cmp	r3, #64	@ 0x40
 8004d5e:	d1ae      	bne.n	8004cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d80:	d11b      	bne.n	8004dba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d8a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	f043 0204 	orr.w	r2, r3, #4
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	4b20      	ldr	r3, [pc, #128]	@ (8004e58 <HAL_PWREx_EnableOverDrive+0x90>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	4a1f      	ldr	r2, [pc, #124]	@ (8004e58 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004de2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e58 <HAL_PWREx_EnableOverDrive+0x90>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004dee:	4b1b      	ldr	r3, [pc, #108]	@ (8004e5c <HAL_PWREx_EnableOverDrive+0x94>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004df4:	f7fe fcb4 	bl	8003760 <HAL_GetTick>
 8004df8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dfa:	e009      	b.n	8004e10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004dfc:	f7fe fcb0 	bl	8003760 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e0a:	d901      	bls.n	8004e10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e01f      	b.n	8004e50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e10:	4b13      	ldr	r3, [pc, #76]	@ (8004e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e1c:	d1ee      	bne.n	8004dfc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e1e:	4b11      	ldr	r3, [pc, #68]	@ (8004e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e24:	f7fe fc9c 	bl	8003760 <HAL_GetTick>
 8004e28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e2a:	e009      	b.n	8004e40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e2c:	f7fe fc98 	bl	8003760 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e3a:	d901      	bls.n	8004e40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e007      	b.n	8004e50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e40:	4b07      	ldr	r3, [pc, #28]	@ (8004e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e4c:	d1ee      	bne.n	8004e2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	420e0040 	.word	0x420e0040
 8004e60:	40007000 	.word	0x40007000
 8004e64:	420e0044 	.word	0x420e0044

08004e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0cc      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e7c:	4b68      	ldr	r3, [pc, #416]	@ (8005020 <HAL_RCC_ClockConfig+0x1b8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d90c      	bls.n	8004ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8a:	4b65      	ldr	r3, [pc, #404]	@ (8005020 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e92:	4b63      	ldr	r3, [pc, #396]	@ (8005020 <HAL_RCC_ClockConfig+0x1b8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0b8      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d020      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ebc:	4b59      	ldr	r3, [pc, #356]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	4a58      	ldr	r2, [pc, #352]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ec6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ed4:	4b53      	ldr	r3, [pc, #332]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a52      	ldr	r2, [pc, #328]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee0:	4b50      	ldr	r3, [pc, #320]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	494d      	ldr	r1, [pc, #308]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d044      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d107      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f06:	4b47      	ldr	r3, [pc, #284]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d119      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e07f      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d003      	beq.n	8004f26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d107      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f26:	4b3f      	ldr	r3, [pc, #252]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e06f      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f36:	4b3b      	ldr	r3, [pc, #236]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e067      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f46:	4b37      	ldr	r3, [pc, #220]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f023 0203 	bic.w	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4934      	ldr	r1, [pc, #208]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f58:	f7fe fc02 	bl	8003760 <HAL_GetTick>
 8004f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f60:	f7fe fbfe 	bl	8003760 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e04f      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	4b2b      	ldr	r3, [pc, #172]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 020c 	and.w	r2, r3, #12
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d1eb      	bne.n	8004f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f88:	4b25      	ldr	r3, [pc, #148]	@ (8005020 <HAL_RCC_ClockConfig+0x1b8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d20c      	bcs.n	8004fb0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f96:	4b22      	ldr	r3, [pc, #136]	@ (8005020 <HAL_RCC_ClockConfig+0x1b8>)
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9e:	4b20      	ldr	r3, [pc, #128]	@ (8005020 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e032      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fbc:	4b19      	ldr	r3, [pc, #100]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4916      	ldr	r1, [pc, #88]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d009      	beq.n	8004fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fda:	4b12      	ldr	r3, [pc, #72]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	490e      	ldr	r1, [pc, #56]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fee:	f000 f855 	bl	800509c <HAL_RCC_GetSysClockFreq>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	091b      	lsrs	r3, r3, #4
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	490a      	ldr	r1, [pc, #40]	@ (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8005000:	5ccb      	ldrb	r3, [r1, r3]
 8005002:	fa22 f303 	lsr.w	r3, r2, r3
 8005006:	4a09      	ldr	r2, [pc, #36]	@ (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8005008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800500a:	4b09      	ldr	r3, [pc, #36]	@ (8005030 <HAL_RCC_ClockConfig+0x1c8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fe fb62 	bl	80036d8 <HAL_InitTick>

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40023c00 	.word	0x40023c00
 8005024:	40023800 	.word	0x40023800
 8005028:	0800a480 	.word	0x0800a480
 800502c:	20000008 	.word	0x20000008
 8005030:	2000000c 	.word	0x2000000c

08005034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005038:	4b03      	ldr	r3, [pc, #12]	@ (8005048 <HAL_RCC_GetHCLKFreq+0x14>)
 800503a:	681b      	ldr	r3, [r3, #0]
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000008 	.word	0x20000008

0800504c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005050:	f7ff fff0 	bl	8005034 <HAL_RCC_GetHCLKFreq>
 8005054:	4602      	mov	r2, r0
 8005056:	4b05      	ldr	r3, [pc, #20]	@ (800506c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	0a9b      	lsrs	r3, r3, #10
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	4903      	ldr	r1, [pc, #12]	@ (8005070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005062:	5ccb      	ldrb	r3, [r1, r3]
 8005064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005068:	4618      	mov	r0, r3
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40023800 	.word	0x40023800
 8005070:	0800a490 	.word	0x0800a490

08005074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005078:	f7ff ffdc 	bl	8005034 <HAL_RCC_GetHCLKFreq>
 800507c:	4602      	mov	r2, r0
 800507e:	4b05      	ldr	r3, [pc, #20]	@ (8005094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	0b5b      	lsrs	r3, r3, #13
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	4903      	ldr	r1, [pc, #12]	@ (8005098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800508a:	5ccb      	ldrb	r3, [r1, r3]
 800508c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005090:	4618      	mov	r0, r3
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40023800 	.word	0x40023800
 8005098:	0800a490 	.word	0x0800a490

0800509c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800509c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050a0:	b0ae      	sub	sp, #184	@ 0xb8
 80050a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050c2:	4bcb      	ldr	r3, [pc, #812]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b0c      	cmp	r3, #12
 80050cc:	f200 8206 	bhi.w	80054dc <HAL_RCC_GetSysClockFreq+0x440>
 80050d0:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	0800510d 	.word	0x0800510d
 80050dc:	080054dd 	.word	0x080054dd
 80050e0:	080054dd 	.word	0x080054dd
 80050e4:	080054dd 	.word	0x080054dd
 80050e8:	08005115 	.word	0x08005115
 80050ec:	080054dd 	.word	0x080054dd
 80050f0:	080054dd 	.word	0x080054dd
 80050f4:	080054dd 	.word	0x080054dd
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	080054dd 	.word	0x080054dd
 8005100:	080054dd 	.word	0x080054dd
 8005104:	080054dd 	.word	0x080054dd
 8005108:	0800530d 	.word	0x0800530d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800510c:	4bb9      	ldr	r3, [pc, #740]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800510e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005112:	e1e7      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005114:	4bb8      	ldr	r3, [pc, #736]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005116:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800511a:	e1e3      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800511c:	4bb4      	ldr	r3, [pc, #720]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005124:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005128:	4bb1      	ldr	r3, [pc, #708]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d071      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005134:	4bae      	ldr	r3, [pc, #696]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	099b      	lsrs	r3, r3, #6
 800513a:	2200      	movs	r2, #0
 800513c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005140:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005144:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005150:	2300      	movs	r3, #0
 8005152:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800515a:	4622      	mov	r2, r4
 800515c:	462b      	mov	r3, r5
 800515e:	f04f 0000 	mov.w	r0, #0
 8005162:	f04f 0100 	mov.w	r1, #0
 8005166:	0159      	lsls	r1, r3, #5
 8005168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800516c:	0150      	lsls	r0, r2, #5
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4621      	mov	r1, r4
 8005174:	1a51      	subs	r1, r2, r1
 8005176:	6439      	str	r1, [r7, #64]	@ 0x40
 8005178:	4629      	mov	r1, r5
 800517a:	eb63 0301 	sbc.w	r3, r3, r1
 800517e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800518c:	4649      	mov	r1, r9
 800518e:	018b      	lsls	r3, r1, #6
 8005190:	4641      	mov	r1, r8
 8005192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005196:	4641      	mov	r1, r8
 8005198:	018a      	lsls	r2, r1, #6
 800519a:	4641      	mov	r1, r8
 800519c:	1a51      	subs	r1, r2, r1
 800519e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051a0:	4649      	mov	r1, r9
 80051a2:	eb63 0301 	sbc.w	r3, r3, r1
 80051a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80051b4:	4649      	mov	r1, r9
 80051b6:	00cb      	lsls	r3, r1, #3
 80051b8:	4641      	mov	r1, r8
 80051ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051be:	4641      	mov	r1, r8
 80051c0:	00ca      	lsls	r2, r1, #3
 80051c2:	4610      	mov	r0, r2
 80051c4:	4619      	mov	r1, r3
 80051c6:	4603      	mov	r3, r0
 80051c8:	4622      	mov	r2, r4
 80051ca:	189b      	adds	r3, r3, r2
 80051cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ce:	462b      	mov	r3, r5
 80051d0:	460a      	mov	r2, r1
 80051d2:	eb42 0303 	adc.w	r3, r2, r3
 80051d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051e4:	4629      	mov	r1, r5
 80051e6:	024b      	lsls	r3, r1, #9
 80051e8:	4621      	mov	r1, r4
 80051ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051ee:	4621      	mov	r1, r4
 80051f0:	024a      	lsls	r2, r1, #9
 80051f2:	4610      	mov	r0, r2
 80051f4:	4619      	mov	r1, r3
 80051f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005200:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005204:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005208:	f7fb fcee 	bl	8000be8 <__aeabi_uldivmod>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4613      	mov	r3, r2
 8005212:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005216:	e067      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005218:	4b75      	ldr	r3, [pc, #468]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	099b      	lsrs	r3, r3, #6
 800521e:	2200      	movs	r2, #0
 8005220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005224:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005228:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800522c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005230:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005232:	2300      	movs	r3, #0
 8005234:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005236:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800523a:	4622      	mov	r2, r4
 800523c:	462b      	mov	r3, r5
 800523e:	f04f 0000 	mov.w	r0, #0
 8005242:	f04f 0100 	mov.w	r1, #0
 8005246:	0159      	lsls	r1, r3, #5
 8005248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800524c:	0150      	lsls	r0, r2, #5
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4621      	mov	r1, r4
 8005254:	1a51      	subs	r1, r2, r1
 8005256:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005258:	4629      	mov	r1, r5
 800525a:	eb63 0301 	sbc.w	r3, r3, r1
 800525e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800526c:	4649      	mov	r1, r9
 800526e:	018b      	lsls	r3, r1, #6
 8005270:	4641      	mov	r1, r8
 8005272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005276:	4641      	mov	r1, r8
 8005278:	018a      	lsls	r2, r1, #6
 800527a:	4641      	mov	r1, r8
 800527c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005280:	4649      	mov	r1, r9
 8005282:	eb63 0b01 	sbc.w	fp, r3, r1
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005292:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005296:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800529a:	4692      	mov	sl, r2
 800529c:	469b      	mov	fp, r3
 800529e:	4623      	mov	r3, r4
 80052a0:	eb1a 0303 	adds.w	r3, sl, r3
 80052a4:	623b      	str	r3, [r7, #32]
 80052a6:	462b      	mov	r3, r5
 80052a8:	eb4b 0303 	adc.w	r3, fp, r3
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80052ba:	4629      	mov	r1, r5
 80052bc:	028b      	lsls	r3, r1, #10
 80052be:	4621      	mov	r1, r4
 80052c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052c4:	4621      	mov	r1, r4
 80052c6:	028a      	lsls	r2, r1, #10
 80052c8:	4610      	mov	r0, r2
 80052ca:	4619      	mov	r1, r3
 80052cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052d0:	2200      	movs	r2, #0
 80052d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80052d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80052d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80052da:	f7fb fc85 	bl	8000be8 <__aeabi_uldivmod>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4613      	mov	r3, r2
 80052e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052e8:	4b41      	ldr	r3, [pc, #260]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	0c1b      	lsrs	r3, r3, #16
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	3301      	adds	r3, #1
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80052fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005302:	fbb2 f3f3 	udiv	r3, r2, r3
 8005306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800530a:	e0eb      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800530c:	4b38      	ldr	r3, [pc, #224]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005314:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005318:	4b35      	ldr	r3, [pc, #212]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d06b      	beq.n	80053fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005324:	4b32      	ldr	r3, [pc, #200]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	099b      	lsrs	r3, r3, #6
 800532a:	2200      	movs	r2, #0
 800532c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800532e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005336:	663b      	str	r3, [r7, #96]	@ 0x60
 8005338:	2300      	movs	r3, #0
 800533a:	667b      	str	r3, [r7, #100]	@ 0x64
 800533c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005340:	4622      	mov	r2, r4
 8005342:	462b      	mov	r3, r5
 8005344:	f04f 0000 	mov.w	r0, #0
 8005348:	f04f 0100 	mov.w	r1, #0
 800534c:	0159      	lsls	r1, r3, #5
 800534e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005352:	0150      	lsls	r0, r2, #5
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4621      	mov	r1, r4
 800535a:	1a51      	subs	r1, r2, r1
 800535c:	61b9      	str	r1, [r7, #24]
 800535e:	4629      	mov	r1, r5
 8005360:	eb63 0301 	sbc.w	r3, r3, r1
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005372:	4659      	mov	r1, fp
 8005374:	018b      	lsls	r3, r1, #6
 8005376:	4651      	mov	r1, sl
 8005378:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800537c:	4651      	mov	r1, sl
 800537e:	018a      	lsls	r2, r1, #6
 8005380:	4651      	mov	r1, sl
 8005382:	ebb2 0801 	subs.w	r8, r2, r1
 8005386:	4659      	mov	r1, fp
 8005388:	eb63 0901 	sbc.w	r9, r3, r1
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005398:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800539c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053a0:	4690      	mov	r8, r2
 80053a2:	4699      	mov	r9, r3
 80053a4:	4623      	mov	r3, r4
 80053a6:	eb18 0303 	adds.w	r3, r8, r3
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	462b      	mov	r3, r5
 80053ae:	eb49 0303 	adc.w	r3, r9, r3
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80053c0:	4629      	mov	r1, r5
 80053c2:	024b      	lsls	r3, r1, #9
 80053c4:	4621      	mov	r1, r4
 80053c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053ca:	4621      	mov	r1, r4
 80053cc:	024a      	lsls	r2, r1, #9
 80053ce:	4610      	mov	r0, r2
 80053d0:	4619      	mov	r1, r3
 80053d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053d6:	2200      	movs	r2, #0
 80053d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80053dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053e0:	f7fb fc02 	bl	8000be8 <__aeabi_uldivmod>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4613      	mov	r3, r2
 80053ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053ee:	e065      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x420>
 80053f0:	40023800 	.word	0x40023800
 80053f4:	00f42400 	.word	0x00f42400
 80053f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053fc:	4b3d      	ldr	r3, [pc, #244]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	099b      	lsrs	r3, r3, #6
 8005402:	2200      	movs	r2, #0
 8005404:	4618      	mov	r0, r3
 8005406:	4611      	mov	r1, r2
 8005408:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800540c:	653b      	str	r3, [r7, #80]	@ 0x50
 800540e:	2300      	movs	r3, #0
 8005410:	657b      	str	r3, [r7, #84]	@ 0x54
 8005412:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005416:	4642      	mov	r2, r8
 8005418:	464b      	mov	r3, r9
 800541a:	f04f 0000 	mov.w	r0, #0
 800541e:	f04f 0100 	mov.w	r1, #0
 8005422:	0159      	lsls	r1, r3, #5
 8005424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005428:	0150      	lsls	r0, r2, #5
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	4641      	mov	r1, r8
 8005430:	1a51      	subs	r1, r2, r1
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	4649      	mov	r1, r9
 8005436:	eb63 0301 	sbc.w	r3, r3, r1
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005448:	4659      	mov	r1, fp
 800544a:	018b      	lsls	r3, r1, #6
 800544c:	4651      	mov	r1, sl
 800544e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005452:	4651      	mov	r1, sl
 8005454:	018a      	lsls	r2, r1, #6
 8005456:	4651      	mov	r1, sl
 8005458:	1a54      	subs	r4, r2, r1
 800545a:	4659      	mov	r1, fp
 800545c:	eb63 0501 	sbc.w	r5, r3, r1
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	00eb      	lsls	r3, r5, #3
 800546a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546e:	00e2      	lsls	r2, r4, #3
 8005470:	4614      	mov	r4, r2
 8005472:	461d      	mov	r5, r3
 8005474:	4643      	mov	r3, r8
 8005476:	18e3      	adds	r3, r4, r3
 8005478:	603b      	str	r3, [r7, #0]
 800547a:	464b      	mov	r3, r9
 800547c:	eb45 0303 	adc.w	r3, r5, r3
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800548e:	4629      	mov	r1, r5
 8005490:	028b      	lsls	r3, r1, #10
 8005492:	4621      	mov	r1, r4
 8005494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005498:	4621      	mov	r1, r4
 800549a:	028a      	lsls	r2, r1, #10
 800549c:	4610      	mov	r0, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054a4:	2200      	movs	r2, #0
 80054a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80054aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054ae:	f7fb fb9b 	bl	8000be8 <__aeabi_uldivmod>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4613      	mov	r3, r2
 80054b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80054bc:	4b0d      	ldr	r3, [pc, #52]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	0f1b      	lsrs	r3, r3, #28
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80054ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80054ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80054d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054da:	e003      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054dc:	4b06      	ldr	r3, [pc, #24]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80054de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	37b8      	adds	r7, #184	@ 0xb8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054f2:	bf00      	nop
 80054f4:	40023800 	.word	0x40023800
 80054f8:	00f42400 	.word	0x00f42400

080054fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e28d      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8083 	beq.w	8005622 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800551c:	4b94      	ldr	r3, [pc, #592]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 030c 	and.w	r3, r3, #12
 8005524:	2b04      	cmp	r3, #4
 8005526:	d019      	beq.n	800555c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005528:	4b91      	ldr	r3, [pc, #580]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 030c 	and.w	r3, r3, #12
        || \
 8005530:	2b08      	cmp	r3, #8
 8005532:	d106      	bne.n	8005542 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005534:	4b8e      	ldr	r3, [pc, #568]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800553c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005540:	d00c      	beq.n	800555c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005542:	4b8b      	ldr	r3, [pc, #556]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800554a:	2b0c      	cmp	r3, #12
 800554c:	d112      	bne.n	8005574 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800554e:	4b88      	ldr	r3, [pc, #544]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800555a:	d10b      	bne.n	8005574 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800555c:	4b84      	ldr	r3, [pc, #528]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d05b      	beq.n	8005620 <HAL_RCC_OscConfig+0x124>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d157      	bne.n	8005620 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e25a      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800557c:	d106      	bne.n	800558c <HAL_RCC_OscConfig+0x90>
 800557e:	4b7c      	ldr	r3, [pc, #496]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a7b      	ldr	r2, [pc, #492]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e01d      	b.n	80055c8 <HAL_RCC_OscConfig+0xcc>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005594:	d10c      	bne.n	80055b0 <HAL_RCC_OscConfig+0xb4>
 8005596:	4b76      	ldr	r3, [pc, #472]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a75      	ldr	r2, [pc, #468]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 800559c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	4b73      	ldr	r3, [pc, #460]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a72      	ldr	r2, [pc, #456]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 80055a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e00b      	b.n	80055c8 <HAL_RCC_OscConfig+0xcc>
 80055b0:	4b6f      	ldr	r3, [pc, #444]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a6e      	ldr	r2, [pc, #440]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 80055b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	4b6c      	ldr	r3, [pc, #432]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a6b      	ldr	r2, [pc, #428]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 80055c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d013      	beq.n	80055f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d0:	f7fe f8c6 	bl	8003760 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d8:	f7fe f8c2 	bl	8003760 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b64      	cmp	r3, #100	@ 0x64
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e21f      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ea:	4b61      	ldr	r3, [pc, #388]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f0      	beq.n	80055d8 <HAL_RCC_OscConfig+0xdc>
 80055f6:	e014      	b.n	8005622 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7fe f8b2 	bl	8003760 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005600:	f7fe f8ae 	bl	8003760 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	@ 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e20b      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005612:	4b57      	ldr	r3, [pc, #348]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f0      	bne.n	8005600 <HAL_RCC_OscConfig+0x104>
 800561e:	e000      	b.n	8005622 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d06f      	beq.n	800570e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800562e:	4b50      	ldr	r3, [pc, #320]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
 8005636:	2b00      	cmp	r3, #0
 8005638:	d017      	beq.n	800566a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800563a:	4b4d      	ldr	r3, [pc, #308]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005642:	2b08      	cmp	r3, #8
 8005644:	d105      	bne.n	8005652 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005646:	4b4a      	ldr	r3, [pc, #296]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005652:	4b47      	ldr	r3, [pc, #284]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800565a:	2b0c      	cmp	r3, #12
 800565c:	d11c      	bne.n	8005698 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800565e:	4b44      	ldr	r3, [pc, #272]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d116      	bne.n	8005698 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800566a:	4b41      	ldr	r3, [pc, #260]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_RCC_OscConfig+0x186>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d001      	beq.n	8005682 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e1d3      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005682:	4b3b      	ldr	r3, [pc, #236]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4937      	ldr	r1, [pc, #220]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005692:	4313      	orrs	r3, r2
 8005694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005696:	e03a      	b.n	800570e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d020      	beq.n	80056e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a0:	4b34      	ldr	r3, [pc, #208]	@ (8005774 <HAL_RCC_OscConfig+0x278>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a6:	f7fe f85b 	bl	8003760 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ae:	f7fe f857 	bl	8003760 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e1b4      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0f0      	beq.n	80056ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056cc:	4b28      	ldr	r3, [pc, #160]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4925      	ldr	r1, [pc, #148]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	600b      	str	r3, [r1, #0]
 80056e0:	e015      	b.n	800570e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056e2:	4b24      	ldr	r3, [pc, #144]	@ (8005774 <HAL_RCC_OscConfig+0x278>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fe f83a 	bl	8003760 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f0:	f7fe f836 	bl	8003760 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e193      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005702:	4b1b      	ldr	r3, [pc, #108]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d036      	beq.n	8005788 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005722:	4b15      	ldr	r3, [pc, #84]	@ (8005778 <HAL_RCC_OscConfig+0x27c>)
 8005724:	2201      	movs	r2, #1
 8005726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005728:	f7fe f81a 	bl	8003760 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005730:	f7fe f816 	bl	8003760 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e173      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005742:	4b0b      	ldr	r3, [pc, #44]	@ (8005770 <HAL_RCC_OscConfig+0x274>)
 8005744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0x234>
 800574e:	e01b      	b.n	8005788 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005750:	4b09      	ldr	r3, [pc, #36]	@ (8005778 <HAL_RCC_OscConfig+0x27c>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005756:	f7fe f803 	bl	8003760 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800575c:	e00e      	b.n	800577c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800575e:	f7fd ffff 	bl	8003760 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d907      	bls.n	800577c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e15c      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
 8005770:	40023800 	.word	0x40023800
 8005774:	42470000 	.word	0x42470000
 8005778:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800577c:	4b8a      	ldr	r3, [pc, #552]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 800577e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1ea      	bne.n	800575e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8097 	beq.w	80058c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800579a:	4b83      	ldr	r3, [pc, #524]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10f      	bne.n	80057c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a6:	2300      	movs	r3, #0
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	4b7f      	ldr	r3, [pc, #508]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ae:	4a7e      	ldr	r2, [pc, #504]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 80057b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80057b6:	4b7c      	ldr	r3, [pc, #496]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057be:	60bb      	str	r3, [r7, #8]
 80057c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c2:	2301      	movs	r3, #1
 80057c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c6:	4b79      	ldr	r3, [pc, #484]	@ (80059ac <HAL_RCC_OscConfig+0x4b0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d118      	bne.n	8005804 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057d2:	4b76      	ldr	r3, [pc, #472]	@ (80059ac <HAL_RCC_OscConfig+0x4b0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a75      	ldr	r2, [pc, #468]	@ (80059ac <HAL_RCC_OscConfig+0x4b0>)
 80057d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057de:	f7fd ffbf 	bl	8003760 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e6:	f7fd ffbb 	bl	8003760 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e118      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f8:	4b6c      	ldr	r3, [pc, #432]	@ (80059ac <HAL_RCC_OscConfig+0x4b0>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0f0      	beq.n	80057e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d106      	bne.n	800581a <HAL_RCC_OscConfig+0x31e>
 800580c:	4b66      	ldr	r3, [pc, #408]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005810:	4a65      	ldr	r2, [pc, #404]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	6713      	str	r3, [r2, #112]	@ 0x70
 8005818:	e01c      	b.n	8005854 <HAL_RCC_OscConfig+0x358>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b05      	cmp	r3, #5
 8005820:	d10c      	bne.n	800583c <HAL_RCC_OscConfig+0x340>
 8005822:	4b61      	ldr	r3, [pc, #388]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005826:	4a60      	ldr	r2, [pc, #384]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 8005828:	f043 0304 	orr.w	r3, r3, #4
 800582c:	6713      	str	r3, [r2, #112]	@ 0x70
 800582e:	4b5e      	ldr	r3, [pc, #376]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005832:	4a5d      	ldr	r2, [pc, #372]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	6713      	str	r3, [r2, #112]	@ 0x70
 800583a:	e00b      	b.n	8005854 <HAL_RCC_OscConfig+0x358>
 800583c:	4b5a      	ldr	r3, [pc, #360]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 800583e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005840:	4a59      	ldr	r2, [pc, #356]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 8005842:	f023 0301 	bic.w	r3, r3, #1
 8005846:	6713      	str	r3, [r2, #112]	@ 0x70
 8005848:	4b57      	ldr	r3, [pc, #348]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 800584a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800584c:	4a56      	ldr	r2, [pc, #344]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 800584e:	f023 0304 	bic.w	r3, r3, #4
 8005852:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d015      	beq.n	8005888 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585c:	f7fd ff80 	bl	8003760 <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005862:	e00a      	b.n	800587a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005864:	f7fd ff7c 	bl	8003760 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005872:	4293      	cmp	r3, r2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e0d7      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587a:	4b4b      	ldr	r3, [pc, #300]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0ee      	beq.n	8005864 <HAL_RCC_OscConfig+0x368>
 8005886:	e014      	b.n	80058b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005888:	f7fd ff6a 	bl	8003760 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588e:	e00a      	b.n	80058a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005890:	f7fd ff66 	bl	8003760 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800589e:	4293      	cmp	r3, r2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e0c1      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a6:	4b40      	ldr	r3, [pc, #256]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1ee      	bne.n	8005890 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058b2:	7dfb      	ldrb	r3, [r7, #23]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d105      	bne.n	80058c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058b8:	4b3b      	ldr	r3, [pc, #236]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 80058ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058bc:	4a3a      	ldr	r2, [pc, #232]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 80058be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80ad 	beq.w	8005a28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058ce:	4b36      	ldr	r3, [pc, #216]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d060      	beq.n	800599c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d145      	bne.n	800596e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e2:	4b33      	ldr	r3, [pc, #204]	@ (80059b0 <HAL_RCC_OscConfig+0x4b4>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e8:	f7fd ff3a 	bl	8003760 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f0:	f7fd ff36 	bl	8003760 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e093      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005902:	4b29      	ldr	r3, [pc, #164]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f0      	bne.n	80058f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69da      	ldr	r2, [r3, #28]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591c:	019b      	lsls	r3, r3, #6
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005924:	085b      	lsrs	r3, r3, #1
 8005926:	3b01      	subs	r3, #1
 8005928:	041b      	lsls	r3, r3, #16
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005930:	061b      	lsls	r3, r3, #24
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005938:	071b      	lsls	r3, r3, #28
 800593a:	491b      	ldr	r1, [pc, #108]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 800593c:	4313      	orrs	r3, r2
 800593e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005940:	4b1b      	ldr	r3, [pc, #108]	@ (80059b0 <HAL_RCC_OscConfig+0x4b4>)
 8005942:	2201      	movs	r2, #1
 8005944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005946:	f7fd ff0b 	bl	8003760 <HAL_GetTick>
 800594a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594c:	e008      	b.n	8005960 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800594e:	f7fd ff07 	bl	8003760 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e064      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005960:	4b11      	ldr	r3, [pc, #68]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0f0      	beq.n	800594e <HAL_RCC_OscConfig+0x452>
 800596c:	e05c      	b.n	8005a28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800596e:	4b10      	ldr	r3, [pc, #64]	@ (80059b0 <HAL_RCC_OscConfig+0x4b4>)
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005974:	f7fd fef4 	bl	8003760 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800597c:	f7fd fef0 	bl	8003760 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e04d      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598e:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <HAL_RCC_OscConfig+0x4ac>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f0      	bne.n	800597c <HAL_RCC_OscConfig+0x480>
 800599a:	e045      	b.n	8005a28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d107      	bne.n	80059b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e040      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
 80059a8:	40023800 	.word	0x40023800
 80059ac:	40007000 	.word	0x40007000
 80059b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005a34 <HAL_RCC_OscConfig+0x538>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d030      	beq.n	8005a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d129      	bne.n	8005a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d122      	bne.n	8005a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80059e4:	4013      	ands	r3, r2
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d119      	bne.n	8005a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	3b01      	subs	r3, #1
 80059fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d10f      	bne.n	8005a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d107      	bne.n	8005a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d001      	beq.n	8005a28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40023800 	.word	0x40023800

08005a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e041      	b.n	8005ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fd f9de 	bl	8002e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f000 fb62 	bl	8006140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d001      	beq.n	8005af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e04e      	b.n	8005b8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a23      	ldr	r2, [pc, #140]	@ (8005b9c <HAL_TIM_Base_Start_IT+0xc4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d022      	beq.n	8005b58 <HAL_TIM_Base_Start_IT+0x80>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1a:	d01d      	beq.n	8005b58 <HAL_TIM_Base_Start_IT+0x80>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d018      	beq.n	8005b58 <HAL_TIM_Base_Start_IT+0x80>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ba4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d013      	beq.n	8005b58 <HAL_TIM_Base_Start_IT+0x80>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00e      	beq.n	8005b58 <HAL_TIM_Base_Start_IT+0x80>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005bac <HAL_TIM_Base_Start_IT+0xd4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d009      	beq.n	8005b58 <HAL_TIM_Base_Start_IT+0x80>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a19      	ldr	r2, [pc, #100]	@ (8005bb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <HAL_TIM_Base_Start_IT+0x80>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a18      	ldr	r2, [pc, #96]	@ (8005bb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d111      	bne.n	8005b7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b06      	cmp	r3, #6
 8005b68:	d010      	beq.n	8005b8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0201 	orr.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7a:	e007      	b.n	8005b8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40010000 	.word	0x40010000
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40000800 	.word	0x40000800
 8005ba8:	40000c00 	.word	0x40000c00
 8005bac:	40010400 	.word	0x40010400
 8005bb0:	40014000 	.word	0x40014000
 8005bb4:	40001800 	.word	0x40001800

08005bb8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0201 	bic.w	r2, r2, #1
 8005bce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6a1a      	ldr	r2, [r3, #32]
 8005bd6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10f      	bne.n	8005c00 <HAL_TIM_Base_Stop_IT+0x48>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6a1a      	ldr	r2, [r3, #32]
 8005be6:	f240 4344 	movw	r3, #1092	@ 0x444
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d107      	bne.n	8005c00 <HAL_TIM_Base_Stop_IT+0x48>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0201 	bic.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e041      	b.n	8005cac <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d106      	bne.n	8005c42 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f839 	bl	8005cb4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2202      	movs	r2, #2
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3304      	adds	r3, #4
 8005c52:	4619      	mov	r1, r3
 8005c54:	4610      	mov	r0, r2
 8005c56:	f000 fa73 	bl	8006140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d020      	beq.n	8005d2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01b      	beq.n	8005d2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0202 	mvn.w	r2, #2
 8005cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f9f5 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005d18:	e005      	b.n	8005d26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f9e7 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f9f8 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d020      	beq.n	8005d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01b      	beq.n	8005d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0204 	mvn.w	r2, #4
 8005d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f9cf 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005d64:	e005      	b.n	8005d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f9c1 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f9d2 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d020      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01b      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0208 	mvn.w	r2, #8
 8005d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2204      	movs	r2, #4
 8005d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f9a9 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005db0:	e005      	b.n	8005dbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f99b 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f9ac 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d020      	beq.n	8005e10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01b      	beq.n	8005e10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0210 	mvn.w	r2, #16
 8005de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2208      	movs	r2, #8
 8005de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f983 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005dfc:	e005      	b.n	8005e0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f975 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f986 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00c      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0201 	mvn.w	r2, #1
 8005e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fb fd38 	bl	80018a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00c      	beq.n	8005e58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fcf0 	bl	8006838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00c      	beq.n	8005e7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f957 	bl	800612a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00c      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d007      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0220 	mvn.w	r2, #32
 8005e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fcc2 	bl	8006824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ea0:	bf00      	nop
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e048      	b.n	8005f58 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b0c      	cmp	r3, #12
 8005ed2:	d839      	bhi.n	8005f48 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8005edc <HAL_TIM_OC_ConfigChannel+0x34>)
 8005ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eda:	bf00      	nop
 8005edc:	08005f11 	.word	0x08005f11
 8005ee0:	08005f49 	.word	0x08005f49
 8005ee4:	08005f49 	.word	0x08005f49
 8005ee8:	08005f49 	.word	0x08005f49
 8005eec:	08005f1f 	.word	0x08005f1f
 8005ef0:	08005f49 	.word	0x08005f49
 8005ef4:	08005f49 	.word	0x08005f49
 8005ef8:	08005f49 	.word	0x08005f49
 8005efc:	08005f2d 	.word	0x08005f2d
 8005f00:	08005f49 	.word	0x08005f49
 8005f04:	08005f49 	.word	0x08005f49
 8005f08:	08005f49 	.word	0x08005f49
 8005f0c:	08005f3b 	.word	0x08005f3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 f9be 	bl	8006298 <TIM_OC1_SetConfig>
      break;
 8005f1c:	e017      	b.n	8005f4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fa27 	bl	8006378 <TIM_OC2_SetConfig>
      break;
 8005f2a:	e010      	b.n	8005f4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fa96 	bl	8006464 <TIM_OC3_SetConfig>
      break;
 8005f38:	e009      	b.n	8005f4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fb03 	bl	800654c <TIM_OC4_SetConfig>
      break;
 8005f46:	e002      	b.n	8005f4e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_TIM_ConfigClockSource+0x1c>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e0b4      	b.n	80060e6 <HAL_TIM_ConfigClockSource+0x186>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb4:	d03e      	beq.n	8006034 <HAL_TIM_ConfigClockSource+0xd4>
 8005fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fba:	f200 8087 	bhi.w	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc2:	f000 8086 	beq.w	80060d2 <HAL_TIM_ConfigClockSource+0x172>
 8005fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fca:	d87f      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fcc:	2b70      	cmp	r3, #112	@ 0x70
 8005fce:	d01a      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0xa6>
 8005fd0:	2b70      	cmp	r3, #112	@ 0x70
 8005fd2:	d87b      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fd4:	2b60      	cmp	r3, #96	@ 0x60
 8005fd6:	d050      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x11a>
 8005fd8:	2b60      	cmp	r3, #96	@ 0x60
 8005fda:	d877      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fdc:	2b50      	cmp	r3, #80	@ 0x50
 8005fde:	d03c      	beq.n	800605a <HAL_TIM_ConfigClockSource+0xfa>
 8005fe0:	2b50      	cmp	r3, #80	@ 0x50
 8005fe2:	d873      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fe4:	2b40      	cmp	r3, #64	@ 0x40
 8005fe6:	d058      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x13a>
 8005fe8:	2b40      	cmp	r3, #64	@ 0x40
 8005fea:	d86f      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fec:	2b30      	cmp	r3, #48	@ 0x30
 8005fee:	d064      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x15a>
 8005ff0:	2b30      	cmp	r3, #48	@ 0x30
 8005ff2:	d86b      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d060      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x15a>
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d867      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d05c      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x15a>
 8006000:	2b10      	cmp	r3, #16
 8006002:	d05a      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x15a>
 8006004:	e062      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006016:	f000 fb69 	bl	80066ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	609a      	str	r2, [r3, #8]
      break;
 8006032:	e04f      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006044:	f000 fb52 	bl	80066ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006056:	609a      	str	r2, [r3, #8]
      break;
 8006058:	e03c      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006066:	461a      	mov	r2, r3
 8006068:	f000 fac6 	bl	80065f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2150      	movs	r1, #80	@ 0x50
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fb1f 	bl	80066b6 <TIM_ITRx_SetConfig>
      break;
 8006078:	e02c      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006086:	461a      	mov	r2, r3
 8006088:	f000 fae5 	bl	8006656 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2160      	movs	r1, #96	@ 0x60
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fb0f 	bl	80066b6 <TIM_ITRx_SetConfig>
      break;
 8006098:	e01c      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a6:	461a      	mov	r2, r3
 80060a8:	f000 faa6 	bl	80065f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2140      	movs	r1, #64	@ 0x40
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 faff 	bl	80066b6 <TIM_ITRx_SetConfig>
      break;
 80060b8:	e00c      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4619      	mov	r1, r3
 80060c4:	4610      	mov	r0, r2
 80060c6:	f000 faf6 	bl	80066b6 <TIM_ITRx_SetConfig>
      break;
 80060ca:	e003      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	73fb      	strb	r3, [r7, #15]
      break;
 80060d0:	e000      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a46      	ldr	r2, [pc, #280]	@ (800626c <TIM_Base_SetConfig+0x12c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d013      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800615e:	d00f      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a43      	ldr	r2, [pc, #268]	@ (8006270 <TIM_Base_SetConfig+0x130>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00b      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a42      	ldr	r2, [pc, #264]	@ (8006274 <TIM_Base_SetConfig+0x134>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a41      	ldr	r2, [pc, #260]	@ (8006278 <TIM_Base_SetConfig+0x138>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a40      	ldr	r2, [pc, #256]	@ (800627c <TIM_Base_SetConfig+0x13c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d108      	bne.n	8006192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a35      	ldr	r2, [pc, #212]	@ (800626c <TIM_Base_SetConfig+0x12c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d02b      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a0:	d027      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a32      	ldr	r2, [pc, #200]	@ (8006270 <TIM_Base_SetConfig+0x130>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d023      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a31      	ldr	r2, [pc, #196]	@ (8006274 <TIM_Base_SetConfig+0x134>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d01f      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a30      	ldr	r2, [pc, #192]	@ (8006278 <TIM_Base_SetConfig+0x138>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01b      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a2f      	ldr	r2, [pc, #188]	@ (800627c <TIM_Base_SetConfig+0x13c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d017      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006280 <TIM_Base_SetConfig+0x140>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a2d      	ldr	r2, [pc, #180]	@ (8006284 <TIM_Base_SetConfig+0x144>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00f      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006288 <TIM_Base_SetConfig+0x148>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00b      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2b      	ldr	r2, [pc, #172]	@ (800628c <TIM_Base_SetConfig+0x14c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d007      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006290 <TIM_Base_SetConfig+0x150>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a29      	ldr	r2, [pc, #164]	@ (8006294 <TIM_Base_SetConfig+0x154>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d108      	bne.n	8006204 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a10      	ldr	r2, [pc, #64]	@ (800626c <TIM_Base_SetConfig+0x12c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_Base_SetConfig+0xf8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a12      	ldr	r2, [pc, #72]	@ (800627c <TIM_Base_SetConfig+0x13c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d103      	bne.n	8006240 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b01      	cmp	r3, #1
 8006250:	d105      	bne.n	800625e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f023 0201 	bic.w	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	611a      	str	r2, [r3, #16]
  }
}
 800625e:	bf00      	nop
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40010000 	.word	0x40010000
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40010400 	.word	0x40010400
 8006280:	40014000 	.word	0x40014000
 8006284:	40014400 	.word	0x40014400
 8006288:	40014800 	.word	0x40014800
 800628c:	40001800 	.word	0x40001800
 8006290:	40001c00 	.word	0x40001c00
 8006294:	40002000 	.word	0x40002000

08006298 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	f023 0201 	bic.w	r2, r3, #1
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0303 	bic.w	r3, r3, #3
 80062ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f023 0302 	bic.w	r3, r3, #2
 80062e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a20      	ldr	r2, [pc, #128]	@ (8006370 <TIM_OC1_SetConfig+0xd8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d003      	beq.n	80062fc <TIM_OC1_SetConfig+0x64>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006374 <TIM_OC1_SetConfig+0xdc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d10c      	bne.n	8006316 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f023 0308 	bic.w	r3, r3, #8
 8006302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f023 0304 	bic.w	r3, r3, #4
 8006314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a15      	ldr	r2, [pc, #84]	@ (8006370 <TIM_OC1_SetConfig+0xd8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d003      	beq.n	8006326 <TIM_OC1_SetConfig+0x8e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a14      	ldr	r2, [pc, #80]	@ (8006374 <TIM_OC1_SetConfig+0xdc>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d111      	bne.n	800634a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800632c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	621a      	str	r2, [r3, #32]
}
 8006364:	bf00      	nop
 8006366:	371c      	adds	r7, #28
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	40010000 	.word	0x40010000
 8006374:	40010400 	.word	0x40010400

08006378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f023 0210 	bic.w	r2, r3, #16
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f023 0320 	bic.w	r3, r3, #32
 80063c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a22      	ldr	r2, [pc, #136]	@ (800645c <TIM_OC2_SetConfig+0xe4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_OC2_SetConfig+0x68>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a21      	ldr	r2, [pc, #132]	@ (8006460 <TIM_OC2_SetConfig+0xe8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d10d      	bne.n	80063fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a17      	ldr	r2, [pc, #92]	@ (800645c <TIM_OC2_SetConfig+0xe4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_OC2_SetConfig+0x94>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a16      	ldr	r2, [pc, #88]	@ (8006460 <TIM_OC2_SetConfig+0xe8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d113      	bne.n	8006434 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800641a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	621a      	str	r2, [r3, #32]
}
 800644e:	bf00      	nop
 8006450:	371c      	adds	r7, #28
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40010000 	.word	0x40010000
 8006460:	40010400 	.word	0x40010400

08006464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a21      	ldr	r2, [pc, #132]	@ (8006544 <TIM_OC3_SetConfig+0xe0>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d003      	beq.n	80064ca <TIM_OC3_SetConfig+0x66>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a20      	ldr	r2, [pc, #128]	@ (8006548 <TIM_OC3_SetConfig+0xe4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d10d      	bne.n	80064e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	021b      	lsls	r3, r3, #8
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a16      	ldr	r2, [pc, #88]	@ (8006544 <TIM_OC3_SetConfig+0xe0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d003      	beq.n	80064f6 <TIM_OC3_SetConfig+0x92>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a15      	ldr	r2, [pc, #84]	@ (8006548 <TIM_OC3_SetConfig+0xe4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d113      	bne.n	800651e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	621a      	str	r2, [r3, #32]
}
 8006538:	bf00      	nop
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	40010000 	.word	0x40010000
 8006548:	40010400 	.word	0x40010400

0800654c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800657a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	021b      	lsls	r3, r3, #8
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	031b      	lsls	r3, r3, #12
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a12      	ldr	r2, [pc, #72]	@ (80065f0 <TIM_OC4_SetConfig+0xa4>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <TIM_OC4_SetConfig+0x68>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a11      	ldr	r2, [pc, #68]	@ (80065f4 <TIM_OC4_SetConfig+0xa8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d109      	bne.n	80065c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	019b      	lsls	r3, r3, #6
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	621a      	str	r2, [r3, #32]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	40010000 	.word	0x40010000
 80065f4:	40010400 	.word	0x40010400

080065f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f023 0201 	bic.w	r2, r3, #1
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f023 030a 	bic.w	r3, r3, #10
 8006634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	621a      	str	r2, [r3, #32]
}
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006656:	b480      	push	{r7}
 8006658:	b087      	sub	sp, #28
 800665a:	af00      	add	r7, sp, #0
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	f023 0210 	bic.w	r2, r3, #16
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006680:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	031b      	lsls	r3, r3, #12
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006692:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b085      	sub	sp, #20
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f043 0307 	orr.w	r3, r3, #7
 80066d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	609a      	str	r2, [r3, #8]
}
 80066e0:	bf00      	nop
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006706:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	021a      	lsls	r2, r3, #8
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	431a      	orrs	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4313      	orrs	r3, r2
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	609a      	str	r2, [r3, #8]
}
 8006720:	bf00      	nop
 8006722:	371c      	adds	r7, #28
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006740:	2302      	movs	r3, #2
 8006742:	e05a      	b.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a21      	ldr	r2, [pc, #132]	@ (8006808 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d022      	beq.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006790:	d01d      	beq.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a1d      	ldr	r2, [pc, #116]	@ (800680c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d018      	beq.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006810 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d013      	beq.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006814 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00e      	beq.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a18      	ldr	r2, [pc, #96]	@ (8006818 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d009      	beq.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a17      	ldr	r2, [pc, #92]	@ (800681c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d004      	beq.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a15      	ldr	r2, [pc, #84]	@ (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d10c      	bne.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40010000 	.word	0x40010000
 800680c:	40000400 	.word	0x40000400
 8006810:	40000800 	.word	0x40000800
 8006814:	40000c00 	.word	0x40000c00
 8006818:	40010400 	.word	0x40010400
 800681c:	40014000 	.word	0x40014000
 8006820:	40001800 	.word	0x40001800

08006824 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e042      	b.n	80068e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7fc fb36 	bl	8002ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2224      	movs	r2, #36	@ 0x24
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800688e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fa09 	bl	8006ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695a      	ldr	r2, [r3, #20]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08a      	sub	sp, #40	@ 0x28
 80068f0:	af02      	add	r7, sp, #8
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	603b      	str	r3, [r7, #0]
 80068f8:	4613      	mov	r3, r2
 80068fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b20      	cmp	r3, #32
 800690a:	d175      	bne.n	80069f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <HAL_UART_Transmit+0x2c>
 8006912:	88fb      	ldrh	r3, [r7, #6]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e06e      	b.n	80069fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2221      	movs	r2, #33	@ 0x21
 8006926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800692a:	f7fc ff19 	bl	8003760 <HAL_GetTick>
 800692e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	88fa      	ldrh	r2, [r7, #6]
 8006934:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	88fa      	ldrh	r2, [r7, #6]
 800693a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006944:	d108      	bne.n	8006958 <HAL_UART_Transmit+0x6c>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d104      	bne.n	8006958 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	61bb      	str	r3, [r7, #24]
 8006956:	e003      	b.n	8006960 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800695c:	2300      	movs	r3, #0
 800695e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006960:	e02e      	b.n	80069c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2200      	movs	r2, #0
 800696a:	2180      	movs	r1, #128	@ 0x80
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 f8df 	bl	8006b30 <UART_WaitOnFlagUntilTimeout>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d005      	beq.n	8006984 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e03a      	b.n	80069fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10b      	bne.n	80069a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006998:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	3302      	adds	r3, #2
 800699e:	61bb      	str	r3, [r7, #24]
 80069a0:	e007      	b.n	80069b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	781a      	ldrb	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	3301      	adds	r3, #1
 80069b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1cb      	bne.n	8006962 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2200      	movs	r2, #0
 80069d2:	2140      	movs	r1, #64	@ 0x40
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f8ab 	bl	8006b30 <UART_WaitOnFlagUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e006      	b.n	80069fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	e000      	b.n	80069fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b08a      	sub	sp, #40	@ 0x28
 8006a06:	af02      	add	r7, sp, #8
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	603b      	str	r3, [r7, #0]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	f040 8081 	bne.w	8006b26 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <HAL_UART_Receive+0x2e>
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e079      	b.n	8006b28 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2222      	movs	r2, #34	@ 0x22
 8006a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a48:	f7fc fe8a 	bl	8003760 <HAL_GetTick>
 8006a4c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	88fa      	ldrh	r2, [r7, #6]
 8006a52:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	88fa      	ldrh	r2, [r7, #6]
 8006a58:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a62:	d108      	bne.n	8006a76 <HAL_UART_Receive+0x74>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	e003      	b.n	8006a7e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006a7e:	e047      	b.n	8006b10 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2200      	movs	r2, #0
 8006a88:	2120      	movs	r1, #32
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f850 	bl	8006b30 <UART_WaitOnFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d005      	beq.n	8006aa2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e042      	b.n	8006b28 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10c      	bne.n	8006ac2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	3302      	adds	r3, #2
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	e01f      	b.n	8006b02 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aca:	d007      	beq.n	8006adc <HAL_UART_Receive+0xda>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <HAL_UART_Receive+0xe8>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d106      	bne.n	8006aea <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	e008      	b.n	8006afc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	3301      	adds	r3, #1
 8006b00:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1b2      	bne.n	8006a80 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e000      	b.n	8006b28 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006b26:	2302      	movs	r3, #2
  }
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3720      	adds	r7, #32
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	603b      	str	r3, [r7, #0]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b40:	e03b      	b.n	8006bba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b48:	d037      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4a:	f7fc fe09 	bl	8003760 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	6a3a      	ldr	r2, [r7, #32]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d302      	bcc.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e03a      	b.n	8006bda <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d023      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2b80      	cmp	r3, #128	@ 0x80
 8006b76:	d020      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b40      	cmp	r3, #64	@ 0x40
 8006b7c:	d01d      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0308 	and.w	r3, r3, #8
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d116      	bne.n	8006bba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 f81d 	bl	8006be2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2208      	movs	r2, #8
 8006bac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e00f      	b.n	8006bda <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	bf0c      	ite	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	2300      	movne	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d0b4      	beq.n	8006b42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b095      	sub	sp, #84	@ 0x54
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	330c      	adds	r3, #12
 8006bf0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	330c      	adds	r3, #12
 8006c08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3314      	adds	r3, #20
 8006c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3314      	adds	r3, #20
 8006c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e5      	bne.n	8006c1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d119      	bne.n	8006c8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	330c      	adds	r3, #12
 8006c60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f023 0310 	bic.w	r3, r3, #16
 8006c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	330c      	adds	r3, #12
 8006c78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c7a:	61ba      	str	r2, [r7, #24]
 8006c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6979      	ldr	r1, [r7, #20]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	613b      	str	r3, [r7, #16]
   return(result);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e5      	bne.n	8006c5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c9c:	bf00      	nop
 8006c9e:	3754      	adds	r7, #84	@ 0x54
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cac:	b0c0      	sub	sp, #256	@ 0x100
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc4:	68d9      	ldr	r1, [r3, #12]
 8006cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	ea40 0301 	orr.w	r3, r0, r1
 8006cd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006d00:	f021 010c 	bic.w	r1, r1, #12
 8006d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d0e:	430b      	orrs	r3, r1
 8006d10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d22:	6999      	ldr	r1, [r3, #24]
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	ea40 0301 	orr.w	r3, r0, r1
 8006d2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4b8f      	ldr	r3, [pc, #572]	@ (8006f74 <UART_SetConfig+0x2cc>)
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d005      	beq.n	8006d48 <UART_SetConfig+0xa0>
 8006d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b8d      	ldr	r3, [pc, #564]	@ (8006f78 <UART_SetConfig+0x2d0>)
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d104      	bne.n	8006d52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d48:	f7fe f994 	bl	8005074 <HAL_RCC_GetPCLK2Freq>
 8006d4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d50:	e003      	b.n	8006d5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d52:	f7fe f97b 	bl	800504c <HAL_RCC_GetPCLK1Freq>
 8006d56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d64:	f040 810c 	bne.w	8006f80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	1891      	adds	r1, r2, r2
 8006d80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d82:	415b      	adcs	r3, r3
 8006d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	eb12 0801 	adds.w	r8, r2, r1
 8006d90:	4629      	mov	r1, r5
 8006d92:	eb43 0901 	adc.w	r9, r3, r1
 8006d96:	f04f 0200 	mov.w	r2, #0
 8006d9a:	f04f 0300 	mov.w	r3, #0
 8006d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006daa:	4690      	mov	r8, r2
 8006dac:	4699      	mov	r9, r3
 8006dae:	4623      	mov	r3, r4
 8006db0:	eb18 0303 	adds.w	r3, r8, r3
 8006db4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006db8:	462b      	mov	r3, r5
 8006dba:	eb49 0303 	adc.w	r3, r9, r3
 8006dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006dce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006dd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	18db      	adds	r3, r3, r3
 8006dda:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ddc:	4613      	mov	r3, r2
 8006dde:	eb42 0303 	adc.w	r3, r2, r3
 8006de2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006de4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006de8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006dec:	f7f9 fefc 	bl	8000be8 <__aeabi_uldivmod>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4b61      	ldr	r3, [pc, #388]	@ (8006f7c <UART_SetConfig+0x2d4>)
 8006df6:	fba3 2302 	umull	r2, r3, r3, r2
 8006dfa:	095b      	lsrs	r3, r3, #5
 8006dfc:	011c      	lsls	r4, r3, #4
 8006dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006e0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006e10:	4642      	mov	r2, r8
 8006e12:	464b      	mov	r3, r9
 8006e14:	1891      	adds	r1, r2, r2
 8006e16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006e18:	415b      	adcs	r3, r3
 8006e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e20:	4641      	mov	r1, r8
 8006e22:	eb12 0a01 	adds.w	sl, r2, r1
 8006e26:	4649      	mov	r1, r9
 8006e28:	eb43 0b01 	adc.w	fp, r3, r1
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	f04f 0300 	mov.w	r3, #0
 8006e34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e40:	4692      	mov	sl, r2
 8006e42:	469b      	mov	fp, r3
 8006e44:	4643      	mov	r3, r8
 8006e46:	eb1a 0303 	adds.w	r3, sl, r3
 8006e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e4e:	464b      	mov	r3, r9
 8006e50:	eb4b 0303 	adc.w	r3, fp, r3
 8006e54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	18db      	adds	r3, r3, r3
 8006e70:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e72:	4613      	mov	r3, r2
 8006e74:	eb42 0303 	adc.w	r3, r2, r3
 8006e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e82:	f7f9 feb1 	bl	8000be8 <__aeabi_uldivmod>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f7c <UART_SetConfig+0x2d4>)
 8006e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	2264      	movs	r2, #100	@ 0x64
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	1acb      	subs	r3, r1, r3
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006ea2:	4b36      	ldr	r3, [pc, #216]	@ (8006f7c <UART_SetConfig+0x2d4>)
 8006ea4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006eb0:	441c      	add	r4, r3
 8006eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ebc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ec0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	1891      	adds	r1, r2, r2
 8006eca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ecc:	415b      	adcs	r3, r3
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ed0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ed4:	4641      	mov	r1, r8
 8006ed6:	1851      	adds	r1, r2, r1
 8006ed8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006eda:	4649      	mov	r1, r9
 8006edc:	414b      	adcs	r3, r1
 8006ede:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	f04f 0300 	mov.w	r3, #0
 8006ee8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006eec:	4659      	mov	r1, fp
 8006eee:	00cb      	lsls	r3, r1, #3
 8006ef0:	4651      	mov	r1, sl
 8006ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ef6:	4651      	mov	r1, sl
 8006ef8:	00ca      	lsls	r2, r1, #3
 8006efa:	4610      	mov	r0, r2
 8006efc:	4619      	mov	r1, r3
 8006efe:	4603      	mov	r3, r0
 8006f00:	4642      	mov	r2, r8
 8006f02:	189b      	adds	r3, r3, r2
 8006f04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f08:	464b      	mov	r3, r9
 8006f0a:	460a      	mov	r2, r1
 8006f0c:	eb42 0303 	adc.w	r3, r2, r3
 8006f10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f28:	460b      	mov	r3, r1
 8006f2a:	18db      	adds	r3, r3, r3
 8006f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f2e:	4613      	mov	r3, r2
 8006f30:	eb42 0303 	adc.w	r3, r2, r3
 8006f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006f3e:	f7f9 fe53 	bl	8000be8 <__aeabi_uldivmod>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4b0d      	ldr	r3, [pc, #52]	@ (8006f7c <UART_SetConfig+0x2d4>)
 8006f48:	fba3 1302 	umull	r1, r3, r3, r2
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	2164      	movs	r1, #100	@ 0x64
 8006f50:	fb01 f303 	mul.w	r3, r1, r3
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	3332      	adds	r3, #50	@ 0x32
 8006f5a:	4a08      	ldr	r2, [pc, #32]	@ (8006f7c <UART_SetConfig+0x2d4>)
 8006f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f60:	095b      	lsrs	r3, r3, #5
 8006f62:	f003 0207 	and.w	r2, r3, #7
 8006f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4422      	add	r2, r4
 8006f6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f70:	e106      	b.n	8007180 <UART_SetConfig+0x4d8>
 8006f72:	bf00      	nop
 8006f74:	40011000 	.word	0x40011000
 8006f78:	40011400 	.word	0x40011400
 8006f7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f92:	4642      	mov	r2, r8
 8006f94:	464b      	mov	r3, r9
 8006f96:	1891      	adds	r1, r2, r2
 8006f98:	6239      	str	r1, [r7, #32]
 8006f9a:	415b      	adcs	r3, r3
 8006f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fa2:	4641      	mov	r1, r8
 8006fa4:	1854      	adds	r4, r2, r1
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	eb43 0501 	adc.w	r5, r3, r1
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	f04f 0300 	mov.w	r3, #0
 8006fb4:	00eb      	lsls	r3, r5, #3
 8006fb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fba:	00e2      	lsls	r2, r4, #3
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	461d      	mov	r5, r3
 8006fc0:	4643      	mov	r3, r8
 8006fc2:	18e3      	adds	r3, r4, r3
 8006fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fc8:	464b      	mov	r3, r9
 8006fca:	eb45 0303 	adc.w	r3, r5, r3
 8006fce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fe2:	f04f 0200 	mov.w	r2, #0
 8006fe6:	f04f 0300 	mov.w	r3, #0
 8006fea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006fee:	4629      	mov	r1, r5
 8006ff0:	008b      	lsls	r3, r1, #2
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	008a      	lsls	r2, r1, #2
 8006ffc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007000:	f7f9 fdf2 	bl	8000be8 <__aeabi_uldivmod>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4b60      	ldr	r3, [pc, #384]	@ (800718c <UART_SetConfig+0x4e4>)
 800700a:	fba3 2302 	umull	r2, r3, r3, r2
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	011c      	lsls	r4, r3, #4
 8007012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007016:	2200      	movs	r2, #0
 8007018:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800701c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007020:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	1891      	adds	r1, r2, r2
 800702a:	61b9      	str	r1, [r7, #24]
 800702c:	415b      	adcs	r3, r3
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007034:	4641      	mov	r1, r8
 8007036:	1851      	adds	r1, r2, r1
 8007038:	6139      	str	r1, [r7, #16]
 800703a:	4649      	mov	r1, r9
 800703c:	414b      	adcs	r3, r1
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800704c:	4659      	mov	r1, fp
 800704e:	00cb      	lsls	r3, r1, #3
 8007050:	4651      	mov	r1, sl
 8007052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007056:	4651      	mov	r1, sl
 8007058:	00ca      	lsls	r2, r1, #3
 800705a:	4610      	mov	r0, r2
 800705c:	4619      	mov	r1, r3
 800705e:	4603      	mov	r3, r0
 8007060:	4642      	mov	r2, r8
 8007062:	189b      	adds	r3, r3, r2
 8007064:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007068:	464b      	mov	r3, r9
 800706a:	460a      	mov	r2, r1
 800706c:	eb42 0303 	adc.w	r3, r2, r3
 8007070:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800707e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007080:	f04f 0200 	mov.w	r2, #0
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800708c:	4649      	mov	r1, r9
 800708e:	008b      	lsls	r3, r1, #2
 8007090:	4641      	mov	r1, r8
 8007092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007096:	4641      	mov	r1, r8
 8007098:	008a      	lsls	r2, r1, #2
 800709a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800709e:	f7f9 fda3 	bl	8000be8 <__aeabi_uldivmod>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	4b38      	ldr	r3, [pc, #224]	@ (800718c <UART_SetConfig+0x4e4>)
 80070aa:	fba3 2301 	umull	r2, r3, r3, r1
 80070ae:	095b      	lsrs	r3, r3, #5
 80070b0:	2264      	movs	r2, #100	@ 0x64
 80070b2:	fb02 f303 	mul.w	r3, r2, r3
 80070b6:	1acb      	subs	r3, r1, r3
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	3332      	adds	r3, #50	@ 0x32
 80070bc:	4a33      	ldr	r2, [pc, #204]	@ (800718c <UART_SetConfig+0x4e4>)
 80070be:	fba2 2303 	umull	r2, r3, r2, r3
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070c8:	441c      	add	r4, r3
 80070ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ce:	2200      	movs	r2, #0
 80070d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80070d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80070d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80070d8:	4642      	mov	r2, r8
 80070da:	464b      	mov	r3, r9
 80070dc:	1891      	adds	r1, r2, r2
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	415b      	adcs	r3, r3
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070e8:	4641      	mov	r1, r8
 80070ea:	1851      	adds	r1, r2, r1
 80070ec:	6039      	str	r1, [r7, #0]
 80070ee:	4649      	mov	r1, r9
 80070f0:	414b      	adcs	r3, r1
 80070f2:	607b      	str	r3, [r7, #4]
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 0300 	mov.w	r3, #0
 80070fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007100:	4659      	mov	r1, fp
 8007102:	00cb      	lsls	r3, r1, #3
 8007104:	4651      	mov	r1, sl
 8007106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800710a:	4651      	mov	r1, sl
 800710c:	00ca      	lsls	r2, r1, #3
 800710e:	4610      	mov	r0, r2
 8007110:	4619      	mov	r1, r3
 8007112:	4603      	mov	r3, r0
 8007114:	4642      	mov	r2, r8
 8007116:	189b      	adds	r3, r3, r2
 8007118:	66bb      	str	r3, [r7, #104]	@ 0x68
 800711a:	464b      	mov	r3, r9
 800711c:	460a      	mov	r2, r1
 800711e:	eb42 0303 	adc.w	r3, r2, r3
 8007122:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	663b      	str	r3, [r7, #96]	@ 0x60
 800712e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	f04f 0300 	mov.w	r3, #0
 8007138:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800713c:	4649      	mov	r1, r9
 800713e:	008b      	lsls	r3, r1, #2
 8007140:	4641      	mov	r1, r8
 8007142:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007146:	4641      	mov	r1, r8
 8007148:	008a      	lsls	r2, r1, #2
 800714a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800714e:	f7f9 fd4b 	bl	8000be8 <__aeabi_uldivmod>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4b0d      	ldr	r3, [pc, #52]	@ (800718c <UART_SetConfig+0x4e4>)
 8007158:	fba3 1302 	umull	r1, r3, r3, r2
 800715c:	095b      	lsrs	r3, r3, #5
 800715e:	2164      	movs	r1, #100	@ 0x64
 8007160:	fb01 f303 	mul.w	r3, r1, r3
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	3332      	adds	r3, #50	@ 0x32
 800716a:	4a08      	ldr	r2, [pc, #32]	@ (800718c <UART_SetConfig+0x4e4>)
 800716c:	fba2 2303 	umull	r2, r3, r2, r3
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	f003 020f 	and.w	r2, r3, #15
 8007176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4422      	add	r2, r4
 800717e:	609a      	str	r2, [r3, #8]
}
 8007180:	bf00      	nop
 8007182:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007186:	46bd      	mov	sp, r7
 8007188:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800718c:	51eb851f 	.word	0x51eb851f

08007190 <atoi>:
 8007190:	220a      	movs	r2, #10
 8007192:	2100      	movs	r1, #0
 8007194:	f000 b87a 	b.w	800728c <strtol>

08007198 <_strtol_l.constprop.0>:
 8007198:	2b24      	cmp	r3, #36	@ 0x24
 800719a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800719e:	4686      	mov	lr, r0
 80071a0:	4690      	mov	r8, r2
 80071a2:	d801      	bhi.n	80071a8 <_strtol_l.constprop.0+0x10>
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d106      	bne.n	80071b6 <_strtol_l.constprop.0+0x1e>
 80071a8:	f000 fe5e 	bl	8007e68 <__errno>
 80071ac:	2316      	movs	r3, #22
 80071ae:	6003      	str	r3, [r0, #0]
 80071b0:	2000      	movs	r0, #0
 80071b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b6:	4834      	ldr	r0, [pc, #208]	@ (8007288 <_strtol_l.constprop.0+0xf0>)
 80071b8:	460d      	mov	r5, r1
 80071ba:	462a      	mov	r2, r5
 80071bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071c0:	5d06      	ldrb	r6, [r0, r4]
 80071c2:	f016 0608 	ands.w	r6, r6, #8
 80071c6:	d1f8      	bne.n	80071ba <_strtol_l.constprop.0+0x22>
 80071c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80071ca:	d12d      	bne.n	8007228 <_strtol_l.constprop.0+0x90>
 80071cc:	782c      	ldrb	r4, [r5, #0]
 80071ce:	2601      	movs	r6, #1
 80071d0:	1c95      	adds	r5, r2, #2
 80071d2:	f033 0210 	bics.w	r2, r3, #16
 80071d6:	d109      	bne.n	80071ec <_strtol_l.constprop.0+0x54>
 80071d8:	2c30      	cmp	r4, #48	@ 0x30
 80071da:	d12a      	bne.n	8007232 <_strtol_l.constprop.0+0x9a>
 80071dc:	782a      	ldrb	r2, [r5, #0]
 80071de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80071e2:	2a58      	cmp	r2, #88	@ 0x58
 80071e4:	d125      	bne.n	8007232 <_strtol_l.constprop.0+0x9a>
 80071e6:	786c      	ldrb	r4, [r5, #1]
 80071e8:	2310      	movs	r3, #16
 80071ea:	3502      	adds	r5, #2
 80071ec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80071f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80071f4:	2200      	movs	r2, #0
 80071f6:	fbbc f9f3 	udiv	r9, ip, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	fb03 ca19 	mls	sl, r3, r9, ip
 8007200:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007204:	2f09      	cmp	r7, #9
 8007206:	d81b      	bhi.n	8007240 <_strtol_l.constprop.0+0xa8>
 8007208:	463c      	mov	r4, r7
 800720a:	42a3      	cmp	r3, r4
 800720c:	dd27      	ble.n	800725e <_strtol_l.constprop.0+0xc6>
 800720e:	1c57      	adds	r7, r2, #1
 8007210:	d007      	beq.n	8007222 <_strtol_l.constprop.0+0x8a>
 8007212:	4581      	cmp	r9, r0
 8007214:	d320      	bcc.n	8007258 <_strtol_l.constprop.0+0xc0>
 8007216:	d101      	bne.n	800721c <_strtol_l.constprop.0+0x84>
 8007218:	45a2      	cmp	sl, r4
 800721a:	db1d      	blt.n	8007258 <_strtol_l.constprop.0+0xc0>
 800721c:	fb00 4003 	mla	r0, r0, r3, r4
 8007220:	2201      	movs	r2, #1
 8007222:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007226:	e7eb      	b.n	8007200 <_strtol_l.constprop.0+0x68>
 8007228:	2c2b      	cmp	r4, #43	@ 0x2b
 800722a:	bf04      	itt	eq
 800722c:	782c      	ldrbeq	r4, [r5, #0]
 800722e:	1c95      	addeq	r5, r2, #2
 8007230:	e7cf      	b.n	80071d2 <_strtol_l.constprop.0+0x3a>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1da      	bne.n	80071ec <_strtol_l.constprop.0+0x54>
 8007236:	2c30      	cmp	r4, #48	@ 0x30
 8007238:	bf0c      	ite	eq
 800723a:	2308      	moveq	r3, #8
 800723c:	230a      	movne	r3, #10
 800723e:	e7d5      	b.n	80071ec <_strtol_l.constprop.0+0x54>
 8007240:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007244:	2f19      	cmp	r7, #25
 8007246:	d801      	bhi.n	800724c <_strtol_l.constprop.0+0xb4>
 8007248:	3c37      	subs	r4, #55	@ 0x37
 800724a:	e7de      	b.n	800720a <_strtol_l.constprop.0+0x72>
 800724c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007250:	2f19      	cmp	r7, #25
 8007252:	d804      	bhi.n	800725e <_strtol_l.constprop.0+0xc6>
 8007254:	3c57      	subs	r4, #87	@ 0x57
 8007256:	e7d8      	b.n	800720a <_strtol_l.constprop.0+0x72>
 8007258:	f04f 32ff 	mov.w	r2, #4294967295
 800725c:	e7e1      	b.n	8007222 <_strtol_l.constprop.0+0x8a>
 800725e:	1c53      	adds	r3, r2, #1
 8007260:	d108      	bne.n	8007274 <_strtol_l.constprop.0+0xdc>
 8007262:	2322      	movs	r3, #34	@ 0x22
 8007264:	f8ce 3000 	str.w	r3, [lr]
 8007268:	4660      	mov	r0, ip
 800726a:	f1b8 0f00 	cmp.w	r8, #0
 800726e:	d0a0      	beq.n	80071b2 <_strtol_l.constprop.0+0x1a>
 8007270:	1e69      	subs	r1, r5, #1
 8007272:	e006      	b.n	8007282 <_strtol_l.constprop.0+0xea>
 8007274:	b106      	cbz	r6, 8007278 <_strtol_l.constprop.0+0xe0>
 8007276:	4240      	negs	r0, r0
 8007278:	f1b8 0f00 	cmp.w	r8, #0
 800727c:	d099      	beq.n	80071b2 <_strtol_l.constprop.0+0x1a>
 800727e:	2a00      	cmp	r2, #0
 8007280:	d1f6      	bne.n	8007270 <_strtol_l.constprop.0+0xd8>
 8007282:	f8c8 1000 	str.w	r1, [r8]
 8007286:	e794      	b.n	80071b2 <_strtol_l.constprop.0+0x1a>
 8007288:	0800a499 	.word	0x0800a499

0800728c <strtol>:
 800728c:	4613      	mov	r3, r2
 800728e:	460a      	mov	r2, r1
 8007290:	4601      	mov	r1, r0
 8007292:	4802      	ldr	r0, [pc, #8]	@ (800729c <strtol+0x10>)
 8007294:	6800      	ldr	r0, [r0, #0]
 8007296:	f7ff bf7f 	b.w	8007198 <_strtol_l.constprop.0>
 800729a:	bf00      	nop
 800729c:	20000020 	.word	0x20000020

080072a0 <__cvt>:
 80072a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072a4:	ec57 6b10 	vmov	r6, r7, d0
 80072a8:	2f00      	cmp	r7, #0
 80072aa:	460c      	mov	r4, r1
 80072ac:	4619      	mov	r1, r3
 80072ae:	463b      	mov	r3, r7
 80072b0:	bfbb      	ittet	lt
 80072b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80072b6:	461f      	movlt	r7, r3
 80072b8:	2300      	movge	r3, #0
 80072ba:	232d      	movlt	r3, #45	@ 0x2d
 80072bc:	700b      	strb	r3, [r1, #0]
 80072be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80072c4:	4691      	mov	r9, r2
 80072c6:	f023 0820 	bic.w	r8, r3, #32
 80072ca:	bfbc      	itt	lt
 80072cc:	4632      	movlt	r2, r6
 80072ce:	4616      	movlt	r6, r2
 80072d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072d4:	d005      	beq.n	80072e2 <__cvt+0x42>
 80072d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80072da:	d100      	bne.n	80072de <__cvt+0x3e>
 80072dc:	3401      	adds	r4, #1
 80072de:	2102      	movs	r1, #2
 80072e0:	e000      	b.n	80072e4 <__cvt+0x44>
 80072e2:	2103      	movs	r1, #3
 80072e4:	ab03      	add	r3, sp, #12
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	ab02      	add	r3, sp, #8
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	ec47 6b10 	vmov	d0, r6, r7
 80072f0:	4653      	mov	r3, sl
 80072f2:	4622      	mov	r2, r4
 80072f4:	f000 fe7c 	bl	8007ff0 <_dtoa_r>
 80072f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80072fc:	4605      	mov	r5, r0
 80072fe:	d119      	bne.n	8007334 <__cvt+0x94>
 8007300:	f019 0f01 	tst.w	r9, #1
 8007304:	d00e      	beq.n	8007324 <__cvt+0x84>
 8007306:	eb00 0904 	add.w	r9, r0, r4
 800730a:	2200      	movs	r2, #0
 800730c:	2300      	movs	r3, #0
 800730e:	4630      	mov	r0, r6
 8007310:	4639      	mov	r1, r7
 8007312:	f7f9 fbf9 	bl	8000b08 <__aeabi_dcmpeq>
 8007316:	b108      	cbz	r0, 800731c <__cvt+0x7c>
 8007318:	f8cd 900c 	str.w	r9, [sp, #12]
 800731c:	2230      	movs	r2, #48	@ 0x30
 800731e:	9b03      	ldr	r3, [sp, #12]
 8007320:	454b      	cmp	r3, r9
 8007322:	d31e      	bcc.n	8007362 <__cvt+0xc2>
 8007324:	9b03      	ldr	r3, [sp, #12]
 8007326:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007328:	1b5b      	subs	r3, r3, r5
 800732a:	4628      	mov	r0, r5
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	b004      	add	sp, #16
 8007330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007334:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007338:	eb00 0904 	add.w	r9, r0, r4
 800733c:	d1e5      	bne.n	800730a <__cvt+0x6a>
 800733e:	7803      	ldrb	r3, [r0, #0]
 8007340:	2b30      	cmp	r3, #48	@ 0x30
 8007342:	d10a      	bne.n	800735a <__cvt+0xba>
 8007344:	2200      	movs	r2, #0
 8007346:	2300      	movs	r3, #0
 8007348:	4630      	mov	r0, r6
 800734a:	4639      	mov	r1, r7
 800734c:	f7f9 fbdc 	bl	8000b08 <__aeabi_dcmpeq>
 8007350:	b918      	cbnz	r0, 800735a <__cvt+0xba>
 8007352:	f1c4 0401 	rsb	r4, r4, #1
 8007356:	f8ca 4000 	str.w	r4, [sl]
 800735a:	f8da 3000 	ldr.w	r3, [sl]
 800735e:	4499      	add	r9, r3
 8007360:	e7d3      	b.n	800730a <__cvt+0x6a>
 8007362:	1c59      	adds	r1, r3, #1
 8007364:	9103      	str	r1, [sp, #12]
 8007366:	701a      	strb	r2, [r3, #0]
 8007368:	e7d9      	b.n	800731e <__cvt+0x7e>

0800736a <__exponent>:
 800736a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800736c:	2900      	cmp	r1, #0
 800736e:	bfba      	itte	lt
 8007370:	4249      	neglt	r1, r1
 8007372:	232d      	movlt	r3, #45	@ 0x2d
 8007374:	232b      	movge	r3, #43	@ 0x2b
 8007376:	2909      	cmp	r1, #9
 8007378:	7002      	strb	r2, [r0, #0]
 800737a:	7043      	strb	r3, [r0, #1]
 800737c:	dd29      	ble.n	80073d2 <__exponent+0x68>
 800737e:	f10d 0307 	add.w	r3, sp, #7
 8007382:	461d      	mov	r5, r3
 8007384:	270a      	movs	r7, #10
 8007386:	461a      	mov	r2, r3
 8007388:	fbb1 f6f7 	udiv	r6, r1, r7
 800738c:	fb07 1416 	mls	r4, r7, r6, r1
 8007390:	3430      	adds	r4, #48	@ 0x30
 8007392:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007396:	460c      	mov	r4, r1
 8007398:	2c63      	cmp	r4, #99	@ 0x63
 800739a:	f103 33ff 	add.w	r3, r3, #4294967295
 800739e:	4631      	mov	r1, r6
 80073a0:	dcf1      	bgt.n	8007386 <__exponent+0x1c>
 80073a2:	3130      	adds	r1, #48	@ 0x30
 80073a4:	1e94      	subs	r4, r2, #2
 80073a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80073aa:	1c41      	adds	r1, r0, #1
 80073ac:	4623      	mov	r3, r4
 80073ae:	42ab      	cmp	r3, r5
 80073b0:	d30a      	bcc.n	80073c8 <__exponent+0x5e>
 80073b2:	f10d 0309 	add.w	r3, sp, #9
 80073b6:	1a9b      	subs	r3, r3, r2
 80073b8:	42ac      	cmp	r4, r5
 80073ba:	bf88      	it	hi
 80073bc:	2300      	movhi	r3, #0
 80073be:	3302      	adds	r3, #2
 80073c0:	4403      	add	r3, r0
 80073c2:	1a18      	subs	r0, r3, r0
 80073c4:	b003      	add	sp, #12
 80073c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80073cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80073d0:	e7ed      	b.n	80073ae <__exponent+0x44>
 80073d2:	2330      	movs	r3, #48	@ 0x30
 80073d4:	3130      	adds	r1, #48	@ 0x30
 80073d6:	7083      	strb	r3, [r0, #2]
 80073d8:	70c1      	strb	r1, [r0, #3]
 80073da:	1d03      	adds	r3, r0, #4
 80073dc:	e7f1      	b.n	80073c2 <__exponent+0x58>
	...

080073e0 <_printf_float>:
 80073e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	b08d      	sub	sp, #52	@ 0x34
 80073e6:	460c      	mov	r4, r1
 80073e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80073ec:	4616      	mov	r6, r2
 80073ee:	461f      	mov	r7, r3
 80073f0:	4605      	mov	r5, r0
 80073f2:	f000 fcef 	bl	8007dd4 <_localeconv_r>
 80073f6:	6803      	ldr	r3, [r0, #0]
 80073f8:	9304      	str	r3, [sp, #16]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7f8 ff58 	bl	80002b0 <strlen>
 8007400:	2300      	movs	r3, #0
 8007402:	930a      	str	r3, [sp, #40]	@ 0x28
 8007404:	f8d8 3000 	ldr.w	r3, [r8]
 8007408:	9005      	str	r0, [sp, #20]
 800740a:	3307      	adds	r3, #7
 800740c:	f023 0307 	bic.w	r3, r3, #7
 8007410:	f103 0208 	add.w	r2, r3, #8
 8007414:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007418:	f8d4 b000 	ldr.w	fp, [r4]
 800741c:	f8c8 2000 	str.w	r2, [r8]
 8007420:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007424:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007428:	9307      	str	r3, [sp, #28]
 800742a:	f8cd 8018 	str.w	r8, [sp, #24]
 800742e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007436:	4b9c      	ldr	r3, [pc, #624]	@ (80076a8 <_printf_float+0x2c8>)
 8007438:	f04f 32ff 	mov.w	r2, #4294967295
 800743c:	f7f9 fb96 	bl	8000b6c <__aeabi_dcmpun>
 8007440:	bb70      	cbnz	r0, 80074a0 <_printf_float+0xc0>
 8007442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007446:	4b98      	ldr	r3, [pc, #608]	@ (80076a8 <_printf_float+0x2c8>)
 8007448:	f04f 32ff 	mov.w	r2, #4294967295
 800744c:	f7f9 fb70 	bl	8000b30 <__aeabi_dcmple>
 8007450:	bb30      	cbnz	r0, 80074a0 <_printf_float+0xc0>
 8007452:	2200      	movs	r2, #0
 8007454:	2300      	movs	r3, #0
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	f7f9 fb5f 	bl	8000b1c <__aeabi_dcmplt>
 800745e:	b110      	cbz	r0, 8007466 <_printf_float+0x86>
 8007460:	232d      	movs	r3, #45	@ 0x2d
 8007462:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007466:	4a91      	ldr	r2, [pc, #580]	@ (80076ac <_printf_float+0x2cc>)
 8007468:	4b91      	ldr	r3, [pc, #580]	@ (80076b0 <_printf_float+0x2d0>)
 800746a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800746e:	bf94      	ite	ls
 8007470:	4690      	movls	r8, r2
 8007472:	4698      	movhi	r8, r3
 8007474:	2303      	movs	r3, #3
 8007476:	6123      	str	r3, [r4, #16]
 8007478:	f02b 0304 	bic.w	r3, fp, #4
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	f04f 0900 	mov.w	r9, #0
 8007482:	9700      	str	r7, [sp, #0]
 8007484:	4633      	mov	r3, r6
 8007486:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007488:	4621      	mov	r1, r4
 800748a:	4628      	mov	r0, r5
 800748c:	f000 f9d2 	bl	8007834 <_printf_common>
 8007490:	3001      	adds	r0, #1
 8007492:	f040 808d 	bne.w	80075b0 <_printf_float+0x1d0>
 8007496:	f04f 30ff 	mov.w	r0, #4294967295
 800749a:	b00d      	add	sp, #52	@ 0x34
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	4640      	mov	r0, r8
 80074a6:	4649      	mov	r1, r9
 80074a8:	f7f9 fb60 	bl	8000b6c <__aeabi_dcmpun>
 80074ac:	b140      	cbz	r0, 80074c0 <_printf_float+0xe0>
 80074ae:	464b      	mov	r3, r9
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	bfbc      	itt	lt
 80074b4:	232d      	movlt	r3, #45	@ 0x2d
 80074b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80074ba:	4a7e      	ldr	r2, [pc, #504]	@ (80076b4 <_printf_float+0x2d4>)
 80074bc:	4b7e      	ldr	r3, [pc, #504]	@ (80076b8 <_printf_float+0x2d8>)
 80074be:	e7d4      	b.n	800746a <_printf_float+0x8a>
 80074c0:	6863      	ldr	r3, [r4, #4]
 80074c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80074c6:	9206      	str	r2, [sp, #24]
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	d13b      	bne.n	8007544 <_printf_float+0x164>
 80074cc:	2306      	movs	r3, #6
 80074ce:	6063      	str	r3, [r4, #4]
 80074d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80074d4:	2300      	movs	r3, #0
 80074d6:	6022      	str	r2, [r4, #0]
 80074d8:	9303      	str	r3, [sp, #12]
 80074da:	ab0a      	add	r3, sp, #40	@ 0x28
 80074dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80074e0:	ab09      	add	r3, sp, #36	@ 0x24
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	6861      	ldr	r1, [r4, #4]
 80074e6:	ec49 8b10 	vmov	d0, r8, r9
 80074ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80074ee:	4628      	mov	r0, r5
 80074f0:	f7ff fed6 	bl	80072a0 <__cvt>
 80074f4:	9b06      	ldr	r3, [sp, #24]
 80074f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074f8:	2b47      	cmp	r3, #71	@ 0x47
 80074fa:	4680      	mov	r8, r0
 80074fc:	d129      	bne.n	8007552 <_printf_float+0x172>
 80074fe:	1cc8      	adds	r0, r1, #3
 8007500:	db02      	blt.n	8007508 <_printf_float+0x128>
 8007502:	6863      	ldr	r3, [r4, #4]
 8007504:	4299      	cmp	r1, r3
 8007506:	dd41      	ble.n	800758c <_printf_float+0x1ac>
 8007508:	f1aa 0a02 	sub.w	sl, sl, #2
 800750c:	fa5f fa8a 	uxtb.w	sl, sl
 8007510:	3901      	subs	r1, #1
 8007512:	4652      	mov	r2, sl
 8007514:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007518:	9109      	str	r1, [sp, #36]	@ 0x24
 800751a:	f7ff ff26 	bl	800736a <__exponent>
 800751e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007520:	1813      	adds	r3, r2, r0
 8007522:	2a01      	cmp	r2, #1
 8007524:	4681      	mov	r9, r0
 8007526:	6123      	str	r3, [r4, #16]
 8007528:	dc02      	bgt.n	8007530 <_printf_float+0x150>
 800752a:	6822      	ldr	r2, [r4, #0]
 800752c:	07d2      	lsls	r2, r2, #31
 800752e:	d501      	bpl.n	8007534 <_printf_float+0x154>
 8007530:	3301      	adds	r3, #1
 8007532:	6123      	str	r3, [r4, #16]
 8007534:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0a2      	beq.n	8007482 <_printf_float+0xa2>
 800753c:	232d      	movs	r3, #45	@ 0x2d
 800753e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007542:	e79e      	b.n	8007482 <_printf_float+0xa2>
 8007544:	9a06      	ldr	r2, [sp, #24]
 8007546:	2a47      	cmp	r2, #71	@ 0x47
 8007548:	d1c2      	bne.n	80074d0 <_printf_float+0xf0>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1c0      	bne.n	80074d0 <_printf_float+0xf0>
 800754e:	2301      	movs	r3, #1
 8007550:	e7bd      	b.n	80074ce <_printf_float+0xee>
 8007552:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007556:	d9db      	bls.n	8007510 <_printf_float+0x130>
 8007558:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800755c:	d118      	bne.n	8007590 <_printf_float+0x1b0>
 800755e:	2900      	cmp	r1, #0
 8007560:	6863      	ldr	r3, [r4, #4]
 8007562:	dd0b      	ble.n	800757c <_printf_float+0x19c>
 8007564:	6121      	str	r1, [r4, #16]
 8007566:	b913      	cbnz	r3, 800756e <_printf_float+0x18e>
 8007568:	6822      	ldr	r2, [r4, #0]
 800756a:	07d0      	lsls	r0, r2, #31
 800756c:	d502      	bpl.n	8007574 <_printf_float+0x194>
 800756e:	3301      	adds	r3, #1
 8007570:	440b      	add	r3, r1
 8007572:	6123      	str	r3, [r4, #16]
 8007574:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007576:	f04f 0900 	mov.w	r9, #0
 800757a:	e7db      	b.n	8007534 <_printf_float+0x154>
 800757c:	b913      	cbnz	r3, 8007584 <_printf_float+0x1a4>
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	07d2      	lsls	r2, r2, #31
 8007582:	d501      	bpl.n	8007588 <_printf_float+0x1a8>
 8007584:	3302      	adds	r3, #2
 8007586:	e7f4      	b.n	8007572 <_printf_float+0x192>
 8007588:	2301      	movs	r3, #1
 800758a:	e7f2      	b.n	8007572 <_printf_float+0x192>
 800758c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007592:	4299      	cmp	r1, r3
 8007594:	db05      	blt.n	80075a2 <_printf_float+0x1c2>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	6121      	str	r1, [r4, #16]
 800759a:	07d8      	lsls	r0, r3, #31
 800759c:	d5ea      	bpl.n	8007574 <_printf_float+0x194>
 800759e:	1c4b      	adds	r3, r1, #1
 80075a0:	e7e7      	b.n	8007572 <_printf_float+0x192>
 80075a2:	2900      	cmp	r1, #0
 80075a4:	bfd4      	ite	le
 80075a6:	f1c1 0202 	rsble	r2, r1, #2
 80075aa:	2201      	movgt	r2, #1
 80075ac:	4413      	add	r3, r2
 80075ae:	e7e0      	b.n	8007572 <_printf_float+0x192>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	055a      	lsls	r2, r3, #21
 80075b4:	d407      	bmi.n	80075c6 <_printf_float+0x1e6>
 80075b6:	6923      	ldr	r3, [r4, #16]
 80075b8:	4642      	mov	r2, r8
 80075ba:	4631      	mov	r1, r6
 80075bc:	4628      	mov	r0, r5
 80075be:	47b8      	blx	r7
 80075c0:	3001      	adds	r0, #1
 80075c2:	d12b      	bne.n	800761c <_printf_float+0x23c>
 80075c4:	e767      	b.n	8007496 <_printf_float+0xb6>
 80075c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075ca:	f240 80dd 	bls.w	8007788 <_printf_float+0x3a8>
 80075ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075d2:	2200      	movs	r2, #0
 80075d4:	2300      	movs	r3, #0
 80075d6:	f7f9 fa97 	bl	8000b08 <__aeabi_dcmpeq>
 80075da:	2800      	cmp	r0, #0
 80075dc:	d033      	beq.n	8007646 <_printf_float+0x266>
 80075de:	4a37      	ldr	r2, [pc, #220]	@ (80076bc <_printf_float+0x2dc>)
 80075e0:	2301      	movs	r3, #1
 80075e2:	4631      	mov	r1, r6
 80075e4:	4628      	mov	r0, r5
 80075e6:	47b8      	blx	r7
 80075e8:	3001      	adds	r0, #1
 80075ea:	f43f af54 	beq.w	8007496 <_printf_float+0xb6>
 80075ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80075f2:	4543      	cmp	r3, r8
 80075f4:	db02      	blt.n	80075fc <_printf_float+0x21c>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	07d8      	lsls	r0, r3, #31
 80075fa:	d50f      	bpl.n	800761c <_printf_float+0x23c>
 80075fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007600:	4631      	mov	r1, r6
 8007602:	4628      	mov	r0, r5
 8007604:	47b8      	blx	r7
 8007606:	3001      	adds	r0, #1
 8007608:	f43f af45 	beq.w	8007496 <_printf_float+0xb6>
 800760c:	f04f 0900 	mov.w	r9, #0
 8007610:	f108 38ff 	add.w	r8, r8, #4294967295
 8007614:	f104 0a1a 	add.w	sl, r4, #26
 8007618:	45c8      	cmp	r8, r9
 800761a:	dc09      	bgt.n	8007630 <_printf_float+0x250>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	079b      	lsls	r3, r3, #30
 8007620:	f100 8103 	bmi.w	800782a <_printf_float+0x44a>
 8007624:	68e0      	ldr	r0, [r4, #12]
 8007626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007628:	4298      	cmp	r0, r3
 800762a:	bfb8      	it	lt
 800762c:	4618      	movlt	r0, r3
 800762e:	e734      	b.n	800749a <_printf_float+0xba>
 8007630:	2301      	movs	r3, #1
 8007632:	4652      	mov	r2, sl
 8007634:	4631      	mov	r1, r6
 8007636:	4628      	mov	r0, r5
 8007638:	47b8      	blx	r7
 800763a:	3001      	adds	r0, #1
 800763c:	f43f af2b 	beq.w	8007496 <_printf_float+0xb6>
 8007640:	f109 0901 	add.w	r9, r9, #1
 8007644:	e7e8      	b.n	8007618 <_printf_float+0x238>
 8007646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	dc39      	bgt.n	80076c0 <_printf_float+0x2e0>
 800764c:	4a1b      	ldr	r2, [pc, #108]	@ (80076bc <_printf_float+0x2dc>)
 800764e:	2301      	movs	r3, #1
 8007650:	4631      	mov	r1, r6
 8007652:	4628      	mov	r0, r5
 8007654:	47b8      	blx	r7
 8007656:	3001      	adds	r0, #1
 8007658:	f43f af1d 	beq.w	8007496 <_printf_float+0xb6>
 800765c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007660:	ea59 0303 	orrs.w	r3, r9, r3
 8007664:	d102      	bne.n	800766c <_printf_float+0x28c>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	07d9      	lsls	r1, r3, #31
 800766a:	d5d7      	bpl.n	800761c <_printf_float+0x23c>
 800766c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007670:	4631      	mov	r1, r6
 8007672:	4628      	mov	r0, r5
 8007674:	47b8      	blx	r7
 8007676:	3001      	adds	r0, #1
 8007678:	f43f af0d 	beq.w	8007496 <_printf_float+0xb6>
 800767c:	f04f 0a00 	mov.w	sl, #0
 8007680:	f104 0b1a 	add.w	fp, r4, #26
 8007684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007686:	425b      	negs	r3, r3
 8007688:	4553      	cmp	r3, sl
 800768a:	dc01      	bgt.n	8007690 <_printf_float+0x2b0>
 800768c:	464b      	mov	r3, r9
 800768e:	e793      	b.n	80075b8 <_printf_float+0x1d8>
 8007690:	2301      	movs	r3, #1
 8007692:	465a      	mov	r2, fp
 8007694:	4631      	mov	r1, r6
 8007696:	4628      	mov	r0, r5
 8007698:	47b8      	blx	r7
 800769a:	3001      	adds	r0, #1
 800769c:	f43f aefb 	beq.w	8007496 <_printf_float+0xb6>
 80076a0:	f10a 0a01 	add.w	sl, sl, #1
 80076a4:	e7ee      	b.n	8007684 <_printf_float+0x2a4>
 80076a6:	bf00      	nop
 80076a8:	7fefffff 	.word	0x7fefffff
 80076ac:	0800a599 	.word	0x0800a599
 80076b0:	0800a59d 	.word	0x0800a59d
 80076b4:	0800a5a1 	.word	0x0800a5a1
 80076b8:	0800a5a5 	.word	0x0800a5a5
 80076bc:	0800a5a9 	.word	0x0800a5a9
 80076c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076c6:	4553      	cmp	r3, sl
 80076c8:	bfa8      	it	ge
 80076ca:	4653      	movge	r3, sl
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	4699      	mov	r9, r3
 80076d0:	dc36      	bgt.n	8007740 <_printf_float+0x360>
 80076d2:	f04f 0b00 	mov.w	fp, #0
 80076d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076da:	f104 021a 	add.w	r2, r4, #26
 80076de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076e0:	9306      	str	r3, [sp, #24]
 80076e2:	eba3 0309 	sub.w	r3, r3, r9
 80076e6:	455b      	cmp	r3, fp
 80076e8:	dc31      	bgt.n	800774e <_printf_float+0x36e>
 80076ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ec:	459a      	cmp	sl, r3
 80076ee:	dc3a      	bgt.n	8007766 <_printf_float+0x386>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	07da      	lsls	r2, r3, #31
 80076f4:	d437      	bmi.n	8007766 <_printf_float+0x386>
 80076f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076f8:	ebaa 0903 	sub.w	r9, sl, r3
 80076fc:	9b06      	ldr	r3, [sp, #24]
 80076fe:	ebaa 0303 	sub.w	r3, sl, r3
 8007702:	4599      	cmp	r9, r3
 8007704:	bfa8      	it	ge
 8007706:	4699      	movge	r9, r3
 8007708:	f1b9 0f00 	cmp.w	r9, #0
 800770c:	dc33      	bgt.n	8007776 <_printf_float+0x396>
 800770e:	f04f 0800 	mov.w	r8, #0
 8007712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007716:	f104 0b1a 	add.w	fp, r4, #26
 800771a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771c:	ebaa 0303 	sub.w	r3, sl, r3
 8007720:	eba3 0309 	sub.w	r3, r3, r9
 8007724:	4543      	cmp	r3, r8
 8007726:	f77f af79 	ble.w	800761c <_printf_float+0x23c>
 800772a:	2301      	movs	r3, #1
 800772c:	465a      	mov	r2, fp
 800772e:	4631      	mov	r1, r6
 8007730:	4628      	mov	r0, r5
 8007732:	47b8      	blx	r7
 8007734:	3001      	adds	r0, #1
 8007736:	f43f aeae 	beq.w	8007496 <_printf_float+0xb6>
 800773a:	f108 0801 	add.w	r8, r8, #1
 800773e:	e7ec      	b.n	800771a <_printf_float+0x33a>
 8007740:	4642      	mov	r2, r8
 8007742:	4631      	mov	r1, r6
 8007744:	4628      	mov	r0, r5
 8007746:	47b8      	blx	r7
 8007748:	3001      	adds	r0, #1
 800774a:	d1c2      	bne.n	80076d2 <_printf_float+0x2f2>
 800774c:	e6a3      	b.n	8007496 <_printf_float+0xb6>
 800774e:	2301      	movs	r3, #1
 8007750:	4631      	mov	r1, r6
 8007752:	4628      	mov	r0, r5
 8007754:	9206      	str	r2, [sp, #24]
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	f43f ae9c 	beq.w	8007496 <_printf_float+0xb6>
 800775e:	9a06      	ldr	r2, [sp, #24]
 8007760:	f10b 0b01 	add.w	fp, fp, #1
 8007764:	e7bb      	b.n	80076de <_printf_float+0x2fe>
 8007766:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800776a:	4631      	mov	r1, r6
 800776c:	4628      	mov	r0, r5
 800776e:	47b8      	blx	r7
 8007770:	3001      	adds	r0, #1
 8007772:	d1c0      	bne.n	80076f6 <_printf_float+0x316>
 8007774:	e68f      	b.n	8007496 <_printf_float+0xb6>
 8007776:	9a06      	ldr	r2, [sp, #24]
 8007778:	464b      	mov	r3, r9
 800777a:	4442      	add	r2, r8
 800777c:	4631      	mov	r1, r6
 800777e:	4628      	mov	r0, r5
 8007780:	47b8      	blx	r7
 8007782:	3001      	adds	r0, #1
 8007784:	d1c3      	bne.n	800770e <_printf_float+0x32e>
 8007786:	e686      	b.n	8007496 <_printf_float+0xb6>
 8007788:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800778c:	f1ba 0f01 	cmp.w	sl, #1
 8007790:	dc01      	bgt.n	8007796 <_printf_float+0x3b6>
 8007792:	07db      	lsls	r3, r3, #31
 8007794:	d536      	bpl.n	8007804 <_printf_float+0x424>
 8007796:	2301      	movs	r3, #1
 8007798:	4642      	mov	r2, r8
 800779a:	4631      	mov	r1, r6
 800779c:	4628      	mov	r0, r5
 800779e:	47b8      	blx	r7
 80077a0:	3001      	adds	r0, #1
 80077a2:	f43f ae78 	beq.w	8007496 <_printf_float+0xb6>
 80077a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077aa:	4631      	mov	r1, r6
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b8      	blx	r7
 80077b0:	3001      	adds	r0, #1
 80077b2:	f43f ae70 	beq.w	8007496 <_printf_float+0xb6>
 80077b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077ba:	2200      	movs	r2, #0
 80077bc:	2300      	movs	r3, #0
 80077be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077c2:	f7f9 f9a1 	bl	8000b08 <__aeabi_dcmpeq>
 80077c6:	b9c0      	cbnz	r0, 80077fa <_printf_float+0x41a>
 80077c8:	4653      	mov	r3, sl
 80077ca:	f108 0201 	add.w	r2, r8, #1
 80077ce:	4631      	mov	r1, r6
 80077d0:	4628      	mov	r0, r5
 80077d2:	47b8      	blx	r7
 80077d4:	3001      	adds	r0, #1
 80077d6:	d10c      	bne.n	80077f2 <_printf_float+0x412>
 80077d8:	e65d      	b.n	8007496 <_printf_float+0xb6>
 80077da:	2301      	movs	r3, #1
 80077dc:	465a      	mov	r2, fp
 80077de:	4631      	mov	r1, r6
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b8      	blx	r7
 80077e4:	3001      	adds	r0, #1
 80077e6:	f43f ae56 	beq.w	8007496 <_printf_float+0xb6>
 80077ea:	f108 0801 	add.w	r8, r8, #1
 80077ee:	45d0      	cmp	r8, sl
 80077f0:	dbf3      	blt.n	80077da <_printf_float+0x3fa>
 80077f2:	464b      	mov	r3, r9
 80077f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80077f8:	e6df      	b.n	80075ba <_printf_float+0x1da>
 80077fa:	f04f 0800 	mov.w	r8, #0
 80077fe:	f104 0b1a 	add.w	fp, r4, #26
 8007802:	e7f4      	b.n	80077ee <_printf_float+0x40e>
 8007804:	2301      	movs	r3, #1
 8007806:	4642      	mov	r2, r8
 8007808:	e7e1      	b.n	80077ce <_printf_float+0x3ee>
 800780a:	2301      	movs	r3, #1
 800780c:	464a      	mov	r2, r9
 800780e:	4631      	mov	r1, r6
 8007810:	4628      	mov	r0, r5
 8007812:	47b8      	blx	r7
 8007814:	3001      	adds	r0, #1
 8007816:	f43f ae3e 	beq.w	8007496 <_printf_float+0xb6>
 800781a:	f108 0801 	add.w	r8, r8, #1
 800781e:	68e3      	ldr	r3, [r4, #12]
 8007820:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007822:	1a5b      	subs	r3, r3, r1
 8007824:	4543      	cmp	r3, r8
 8007826:	dcf0      	bgt.n	800780a <_printf_float+0x42a>
 8007828:	e6fc      	b.n	8007624 <_printf_float+0x244>
 800782a:	f04f 0800 	mov.w	r8, #0
 800782e:	f104 0919 	add.w	r9, r4, #25
 8007832:	e7f4      	b.n	800781e <_printf_float+0x43e>

08007834 <_printf_common>:
 8007834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007838:	4616      	mov	r6, r2
 800783a:	4698      	mov	r8, r3
 800783c:	688a      	ldr	r2, [r1, #8]
 800783e:	690b      	ldr	r3, [r1, #16]
 8007840:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007844:	4293      	cmp	r3, r2
 8007846:	bfb8      	it	lt
 8007848:	4613      	movlt	r3, r2
 800784a:	6033      	str	r3, [r6, #0]
 800784c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007850:	4607      	mov	r7, r0
 8007852:	460c      	mov	r4, r1
 8007854:	b10a      	cbz	r2, 800785a <_printf_common+0x26>
 8007856:	3301      	adds	r3, #1
 8007858:	6033      	str	r3, [r6, #0]
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	0699      	lsls	r1, r3, #26
 800785e:	bf42      	ittt	mi
 8007860:	6833      	ldrmi	r3, [r6, #0]
 8007862:	3302      	addmi	r3, #2
 8007864:	6033      	strmi	r3, [r6, #0]
 8007866:	6825      	ldr	r5, [r4, #0]
 8007868:	f015 0506 	ands.w	r5, r5, #6
 800786c:	d106      	bne.n	800787c <_printf_common+0x48>
 800786e:	f104 0a19 	add.w	sl, r4, #25
 8007872:	68e3      	ldr	r3, [r4, #12]
 8007874:	6832      	ldr	r2, [r6, #0]
 8007876:	1a9b      	subs	r3, r3, r2
 8007878:	42ab      	cmp	r3, r5
 800787a:	dc26      	bgt.n	80078ca <_printf_common+0x96>
 800787c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007880:	6822      	ldr	r2, [r4, #0]
 8007882:	3b00      	subs	r3, #0
 8007884:	bf18      	it	ne
 8007886:	2301      	movne	r3, #1
 8007888:	0692      	lsls	r2, r2, #26
 800788a:	d42b      	bmi.n	80078e4 <_printf_common+0xb0>
 800788c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007890:	4641      	mov	r1, r8
 8007892:	4638      	mov	r0, r7
 8007894:	47c8      	blx	r9
 8007896:	3001      	adds	r0, #1
 8007898:	d01e      	beq.n	80078d8 <_printf_common+0xa4>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	6922      	ldr	r2, [r4, #16]
 800789e:	f003 0306 	and.w	r3, r3, #6
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	bf02      	ittt	eq
 80078a6:	68e5      	ldreq	r5, [r4, #12]
 80078a8:	6833      	ldreq	r3, [r6, #0]
 80078aa:	1aed      	subeq	r5, r5, r3
 80078ac:	68a3      	ldr	r3, [r4, #8]
 80078ae:	bf0c      	ite	eq
 80078b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078b4:	2500      	movne	r5, #0
 80078b6:	4293      	cmp	r3, r2
 80078b8:	bfc4      	itt	gt
 80078ba:	1a9b      	subgt	r3, r3, r2
 80078bc:	18ed      	addgt	r5, r5, r3
 80078be:	2600      	movs	r6, #0
 80078c0:	341a      	adds	r4, #26
 80078c2:	42b5      	cmp	r5, r6
 80078c4:	d11a      	bne.n	80078fc <_printf_common+0xc8>
 80078c6:	2000      	movs	r0, #0
 80078c8:	e008      	b.n	80078dc <_printf_common+0xa8>
 80078ca:	2301      	movs	r3, #1
 80078cc:	4652      	mov	r2, sl
 80078ce:	4641      	mov	r1, r8
 80078d0:	4638      	mov	r0, r7
 80078d2:	47c8      	blx	r9
 80078d4:	3001      	adds	r0, #1
 80078d6:	d103      	bne.n	80078e0 <_printf_common+0xac>
 80078d8:	f04f 30ff 	mov.w	r0, #4294967295
 80078dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e0:	3501      	adds	r5, #1
 80078e2:	e7c6      	b.n	8007872 <_printf_common+0x3e>
 80078e4:	18e1      	adds	r1, r4, r3
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	2030      	movs	r0, #48	@ 0x30
 80078ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078ee:	4422      	add	r2, r4
 80078f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078f8:	3302      	adds	r3, #2
 80078fa:	e7c7      	b.n	800788c <_printf_common+0x58>
 80078fc:	2301      	movs	r3, #1
 80078fe:	4622      	mov	r2, r4
 8007900:	4641      	mov	r1, r8
 8007902:	4638      	mov	r0, r7
 8007904:	47c8      	blx	r9
 8007906:	3001      	adds	r0, #1
 8007908:	d0e6      	beq.n	80078d8 <_printf_common+0xa4>
 800790a:	3601      	adds	r6, #1
 800790c:	e7d9      	b.n	80078c2 <_printf_common+0x8e>
	...

08007910 <_printf_i>:
 8007910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007914:	7e0f      	ldrb	r7, [r1, #24]
 8007916:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007918:	2f78      	cmp	r7, #120	@ 0x78
 800791a:	4691      	mov	r9, r2
 800791c:	4680      	mov	r8, r0
 800791e:	460c      	mov	r4, r1
 8007920:	469a      	mov	sl, r3
 8007922:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007926:	d807      	bhi.n	8007938 <_printf_i+0x28>
 8007928:	2f62      	cmp	r7, #98	@ 0x62
 800792a:	d80a      	bhi.n	8007942 <_printf_i+0x32>
 800792c:	2f00      	cmp	r7, #0
 800792e:	f000 80d2 	beq.w	8007ad6 <_printf_i+0x1c6>
 8007932:	2f58      	cmp	r7, #88	@ 0x58
 8007934:	f000 80b9 	beq.w	8007aaa <_printf_i+0x19a>
 8007938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800793c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007940:	e03a      	b.n	80079b8 <_printf_i+0xa8>
 8007942:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007946:	2b15      	cmp	r3, #21
 8007948:	d8f6      	bhi.n	8007938 <_printf_i+0x28>
 800794a:	a101      	add	r1, pc, #4	@ (adr r1, 8007950 <_printf_i+0x40>)
 800794c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007950:	080079a9 	.word	0x080079a9
 8007954:	080079bd 	.word	0x080079bd
 8007958:	08007939 	.word	0x08007939
 800795c:	08007939 	.word	0x08007939
 8007960:	08007939 	.word	0x08007939
 8007964:	08007939 	.word	0x08007939
 8007968:	080079bd 	.word	0x080079bd
 800796c:	08007939 	.word	0x08007939
 8007970:	08007939 	.word	0x08007939
 8007974:	08007939 	.word	0x08007939
 8007978:	08007939 	.word	0x08007939
 800797c:	08007abd 	.word	0x08007abd
 8007980:	080079e7 	.word	0x080079e7
 8007984:	08007a77 	.word	0x08007a77
 8007988:	08007939 	.word	0x08007939
 800798c:	08007939 	.word	0x08007939
 8007990:	08007adf 	.word	0x08007adf
 8007994:	08007939 	.word	0x08007939
 8007998:	080079e7 	.word	0x080079e7
 800799c:	08007939 	.word	0x08007939
 80079a0:	08007939 	.word	0x08007939
 80079a4:	08007a7f 	.word	0x08007a7f
 80079a8:	6833      	ldr	r3, [r6, #0]
 80079aa:	1d1a      	adds	r2, r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6032      	str	r2, [r6, #0]
 80079b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079b8:	2301      	movs	r3, #1
 80079ba:	e09d      	b.n	8007af8 <_printf_i+0x1e8>
 80079bc:	6833      	ldr	r3, [r6, #0]
 80079be:	6820      	ldr	r0, [r4, #0]
 80079c0:	1d19      	adds	r1, r3, #4
 80079c2:	6031      	str	r1, [r6, #0]
 80079c4:	0606      	lsls	r6, r0, #24
 80079c6:	d501      	bpl.n	80079cc <_printf_i+0xbc>
 80079c8:	681d      	ldr	r5, [r3, #0]
 80079ca:	e003      	b.n	80079d4 <_printf_i+0xc4>
 80079cc:	0645      	lsls	r5, r0, #25
 80079ce:	d5fb      	bpl.n	80079c8 <_printf_i+0xb8>
 80079d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079d4:	2d00      	cmp	r5, #0
 80079d6:	da03      	bge.n	80079e0 <_printf_i+0xd0>
 80079d8:	232d      	movs	r3, #45	@ 0x2d
 80079da:	426d      	negs	r5, r5
 80079dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079e0:	4859      	ldr	r0, [pc, #356]	@ (8007b48 <_printf_i+0x238>)
 80079e2:	230a      	movs	r3, #10
 80079e4:	e011      	b.n	8007a0a <_printf_i+0xfa>
 80079e6:	6821      	ldr	r1, [r4, #0]
 80079e8:	6833      	ldr	r3, [r6, #0]
 80079ea:	0608      	lsls	r0, r1, #24
 80079ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80079f0:	d402      	bmi.n	80079f8 <_printf_i+0xe8>
 80079f2:	0649      	lsls	r1, r1, #25
 80079f4:	bf48      	it	mi
 80079f6:	b2ad      	uxthmi	r5, r5
 80079f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80079fa:	4853      	ldr	r0, [pc, #332]	@ (8007b48 <_printf_i+0x238>)
 80079fc:	6033      	str	r3, [r6, #0]
 80079fe:	bf14      	ite	ne
 8007a00:	230a      	movne	r3, #10
 8007a02:	2308      	moveq	r3, #8
 8007a04:	2100      	movs	r1, #0
 8007a06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a0a:	6866      	ldr	r6, [r4, #4]
 8007a0c:	60a6      	str	r6, [r4, #8]
 8007a0e:	2e00      	cmp	r6, #0
 8007a10:	bfa2      	ittt	ge
 8007a12:	6821      	ldrge	r1, [r4, #0]
 8007a14:	f021 0104 	bicge.w	r1, r1, #4
 8007a18:	6021      	strge	r1, [r4, #0]
 8007a1a:	b90d      	cbnz	r5, 8007a20 <_printf_i+0x110>
 8007a1c:	2e00      	cmp	r6, #0
 8007a1e:	d04b      	beq.n	8007ab8 <_printf_i+0x1a8>
 8007a20:	4616      	mov	r6, r2
 8007a22:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a26:	fb03 5711 	mls	r7, r3, r1, r5
 8007a2a:	5dc7      	ldrb	r7, [r0, r7]
 8007a2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a30:	462f      	mov	r7, r5
 8007a32:	42bb      	cmp	r3, r7
 8007a34:	460d      	mov	r5, r1
 8007a36:	d9f4      	bls.n	8007a22 <_printf_i+0x112>
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d10b      	bne.n	8007a54 <_printf_i+0x144>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	07df      	lsls	r7, r3, #31
 8007a40:	d508      	bpl.n	8007a54 <_printf_i+0x144>
 8007a42:	6923      	ldr	r3, [r4, #16]
 8007a44:	6861      	ldr	r1, [r4, #4]
 8007a46:	4299      	cmp	r1, r3
 8007a48:	bfde      	ittt	le
 8007a4a:	2330      	movle	r3, #48	@ 0x30
 8007a4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a54:	1b92      	subs	r2, r2, r6
 8007a56:	6122      	str	r2, [r4, #16]
 8007a58:	f8cd a000 	str.w	sl, [sp]
 8007a5c:	464b      	mov	r3, r9
 8007a5e:	aa03      	add	r2, sp, #12
 8007a60:	4621      	mov	r1, r4
 8007a62:	4640      	mov	r0, r8
 8007a64:	f7ff fee6 	bl	8007834 <_printf_common>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d14a      	bne.n	8007b02 <_printf_i+0x1f2>
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	b004      	add	sp, #16
 8007a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	f043 0320 	orr.w	r3, r3, #32
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	4833      	ldr	r0, [pc, #204]	@ (8007b4c <_printf_i+0x23c>)
 8007a80:	2778      	movs	r7, #120	@ 0x78
 8007a82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	6831      	ldr	r1, [r6, #0]
 8007a8a:	061f      	lsls	r7, r3, #24
 8007a8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a90:	d402      	bmi.n	8007a98 <_printf_i+0x188>
 8007a92:	065f      	lsls	r7, r3, #25
 8007a94:	bf48      	it	mi
 8007a96:	b2ad      	uxthmi	r5, r5
 8007a98:	6031      	str	r1, [r6, #0]
 8007a9a:	07d9      	lsls	r1, r3, #31
 8007a9c:	bf44      	itt	mi
 8007a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8007aa2:	6023      	strmi	r3, [r4, #0]
 8007aa4:	b11d      	cbz	r5, 8007aae <_printf_i+0x19e>
 8007aa6:	2310      	movs	r3, #16
 8007aa8:	e7ac      	b.n	8007a04 <_printf_i+0xf4>
 8007aaa:	4827      	ldr	r0, [pc, #156]	@ (8007b48 <_printf_i+0x238>)
 8007aac:	e7e9      	b.n	8007a82 <_printf_i+0x172>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	f023 0320 	bic.w	r3, r3, #32
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	e7f6      	b.n	8007aa6 <_printf_i+0x196>
 8007ab8:	4616      	mov	r6, r2
 8007aba:	e7bd      	b.n	8007a38 <_printf_i+0x128>
 8007abc:	6833      	ldr	r3, [r6, #0]
 8007abe:	6825      	ldr	r5, [r4, #0]
 8007ac0:	6961      	ldr	r1, [r4, #20]
 8007ac2:	1d18      	adds	r0, r3, #4
 8007ac4:	6030      	str	r0, [r6, #0]
 8007ac6:	062e      	lsls	r6, r5, #24
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	d501      	bpl.n	8007ad0 <_printf_i+0x1c0>
 8007acc:	6019      	str	r1, [r3, #0]
 8007ace:	e002      	b.n	8007ad6 <_printf_i+0x1c6>
 8007ad0:	0668      	lsls	r0, r5, #25
 8007ad2:	d5fb      	bpl.n	8007acc <_printf_i+0x1bc>
 8007ad4:	8019      	strh	r1, [r3, #0]
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	6123      	str	r3, [r4, #16]
 8007ada:	4616      	mov	r6, r2
 8007adc:	e7bc      	b.n	8007a58 <_printf_i+0x148>
 8007ade:	6833      	ldr	r3, [r6, #0]
 8007ae0:	1d1a      	adds	r2, r3, #4
 8007ae2:	6032      	str	r2, [r6, #0]
 8007ae4:	681e      	ldr	r6, [r3, #0]
 8007ae6:	6862      	ldr	r2, [r4, #4]
 8007ae8:	2100      	movs	r1, #0
 8007aea:	4630      	mov	r0, r6
 8007aec:	f7f8 fb90 	bl	8000210 <memchr>
 8007af0:	b108      	cbz	r0, 8007af6 <_printf_i+0x1e6>
 8007af2:	1b80      	subs	r0, r0, r6
 8007af4:	6060      	str	r0, [r4, #4]
 8007af6:	6863      	ldr	r3, [r4, #4]
 8007af8:	6123      	str	r3, [r4, #16]
 8007afa:	2300      	movs	r3, #0
 8007afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b00:	e7aa      	b.n	8007a58 <_printf_i+0x148>
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	4632      	mov	r2, r6
 8007b06:	4649      	mov	r1, r9
 8007b08:	4640      	mov	r0, r8
 8007b0a:	47d0      	blx	sl
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d0ad      	beq.n	8007a6c <_printf_i+0x15c>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	079b      	lsls	r3, r3, #30
 8007b14:	d413      	bmi.n	8007b3e <_printf_i+0x22e>
 8007b16:	68e0      	ldr	r0, [r4, #12]
 8007b18:	9b03      	ldr	r3, [sp, #12]
 8007b1a:	4298      	cmp	r0, r3
 8007b1c:	bfb8      	it	lt
 8007b1e:	4618      	movlt	r0, r3
 8007b20:	e7a6      	b.n	8007a70 <_printf_i+0x160>
 8007b22:	2301      	movs	r3, #1
 8007b24:	4632      	mov	r2, r6
 8007b26:	4649      	mov	r1, r9
 8007b28:	4640      	mov	r0, r8
 8007b2a:	47d0      	blx	sl
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d09d      	beq.n	8007a6c <_printf_i+0x15c>
 8007b30:	3501      	adds	r5, #1
 8007b32:	68e3      	ldr	r3, [r4, #12]
 8007b34:	9903      	ldr	r1, [sp, #12]
 8007b36:	1a5b      	subs	r3, r3, r1
 8007b38:	42ab      	cmp	r3, r5
 8007b3a:	dcf2      	bgt.n	8007b22 <_printf_i+0x212>
 8007b3c:	e7eb      	b.n	8007b16 <_printf_i+0x206>
 8007b3e:	2500      	movs	r5, #0
 8007b40:	f104 0619 	add.w	r6, r4, #25
 8007b44:	e7f5      	b.n	8007b32 <_printf_i+0x222>
 8007b46:	bf00      	nop
 8007b48:	0800a5ab 	.word	0x0800a5ab
 8007b4c:	0800a5bc 	.word	0x0800a5bc

08007b50 <std>:
 8007b50:	2300      	movs	r3, #0
 8007b52:	b510      	push	{r4, lr}
 8007b54:	4604      	mov	r4, r0
 8007b56:	e9c0 3300 	strd	r3, r3, [r0]
 8007b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b5e:	6083      	str	r3, [r0, #8]
 8007b60:	8181      	strh	r1, [r0, #12]
 8007b62:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b64:	81c2      	strh	r2, [r0, #14]
 8007b66:	6183      	str	r3, [r0, #24]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	2208      	movs	r2, #8
 8007b6c:	305c      	adds	r0, #92	@ 0x5c
 8007b6e:	f000 f928 	bl	8007dc2 <memset>
 8007b72:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba8 <std+0x58>)
 8007b74:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b76:	4b0d      	ldr	r3, [pc, #52]	@ (8007bac <std+0x5c>)
 8007b78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb0 <std+0x60>)
 8007b7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb4 <std+0x64>)
 8007b80:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b82:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb8 <std+0x68>)
 8007b84:	6224      	str	r4, [r4, #32]
 8007b86:	429c      	cmp	r4, r3
 8007b88:	d006      	beq.n	8007b98 <std+0x48>
 8007b8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b8e:	4294      	cmp	r4, r2
 8007b90:	d002      	beq.n	8007b98 <std+0x48>
 8007b92:	33d0      	adds	r3, #208	@ 0xd0
 8007b94:	429c      	cmp	r4, r3
 8007b96:	d105      	bne.n	8007ba4 <std+0x54>
 8007b98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ba0:	f000 b98c 	b.w	8007ebc <__retarget_lock_init_recursive>
 8007ba4:	bd10      	pop	{r4, pc}
 8007ba6:	bf00      	nop
 8007ba8:	08007d3d 	.word	0x08007d3d
 8007bac:	08007d5f 	.word	0x08007d5f
 8007bb0:	08007d97 	.word	0x08007d97
 8007bb4:	08007dbb 	.word	0x08007dbb
 8007bb8:	200009c0 	.word	0x200009c0

08007bbc <stdio_exit_handler>:
 8007bbc:	4a02      	ldr	r2, [pc, #8]	@ (8007bc8 <stdio_exit_handler+0xc>)
 8007bbe:	4903      	ldr	r1, [pc, #12]	@ (8007bcc <stdio_exit_handler+0x10>)
 8007bc0:	4803      	ldr	r0, [pc, #12]	@ (8007bd0 <stdio_exit_handler+0x14>)
 8007bc2:	f000 b869 	b.w	8007c98 <_fwalk_sglue>
 8007bc6:	bf00      	nop
 8007bc8:	20000014 	.word	0x20000014
 8007bcc:	08009835 	.word	0x08009835
 8007bd0:	20000024 	.word	0x20000024

08007bd4 <cleanup_stdio>:
 8007bd4:	6841      	ldr	r1, [r0, #4]
 8007bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007c08 <cleanup_stdio+0x34>)
 8007bd8:	4299      	cmp	r1, r3
 8007bda:	b510      	push	{r4, lr}
 8007bdc:	4604      	mov	r4, r0
 8007bde:	d001      	beq.n	8007be4 <cleanup_stdio+0x10>
 8007be0:	f001 fe28 	bl	8009834 <_fflush_r>
 8007be4:	68a1      	ldr	r1, [r4, #8]
 8007be6:	4b09      	ldr	r3, [pc, #36]	@ (8007c0c <cleanup_stdio+0x38>)
 8007be8:	4299      	cmp	r1, r3
 8007bea:	d002      	beq.n	8007bf2 <cleanup_stdio+0x1e>
 8007bec:	4620      	mov	r0, r4
 8007bee:	f001 fe21 	bl	8009834 <_fflush_r>
 8007bf2:	68e1      	ldr	r1, [r4, #12]
 8007bf4:	4b06      	ldr	r3, [pc, #24]	@ (8007c10 <cleanup_stdio+0x3c>)
 8007bf6:	4299      	cmp	r1, r3
 8007bf8:	d004      	beq.n	8007c04 <cleanup_stdio+0x30>
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c00:	f001 be18 	b.w	8009834 <_fflush_r>
 8007c04:	bd10      	pop	{r4, pc}
 8007c06:	bf00      	nop
 8007c08:	200009c0 	.word	0x200009c0
 8007c0c:	20000a28 	.word	0x20000a28
 8007c10:	20000a90 	.word	0x20000a90

08007c14 <global_stdio_init.part.0>:
 8007c14:	b510      	push	{r4, lr}
 8007c16:	4b0b      	ldr	r3, [pc, #44]	@ (8007c44 <global_stdio_init.part.0+0x30>)
 8007c18:	4c0b      	ldr	r4, [pc, #44]	@ (8007c48 <global_stdio_init.part.0+0x34>)
 8007c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8007c4c <global_stdio_init.part.0+0x38>)
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	2200      	movs	r2, #0
 8007c22:	2104      	movs	r1, #4
 8007c24:	f7ff ff94 	bl	8007b50 <std>
 8007c28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	2109      	movs	r1, #9
 8007c30:	f7ff ff8e 	bl	8007b50 <std>
 8007c34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c38:	2202      	movs	r2, #2
 8007c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c3e:	2112      	movs	r1, #18
 8007c40:	f7ff bf86 	b.w	8007b50 <std>
 8007c44:	20000af8 	.word	0x20000af8
 8007c48:	200009c0 	.word	0x200009c0
 8007c4c:	08007bbd 	.word	0x08007bbd

08007c50 <__sfp_lock_acquire>:
 8007c50:	4801      	ldr	r0, [pc, #4]	@ (8007c58 <__sfp_lock_acquire+0x8>)
 8007c52:	f000 b934 	b.w	8007ebe <__retarget_lock_acquire_recursive>
 8007c56:	bf00      	nop
 8007c58:	20000b01 	.word	0x20000b01

08007c5c <__sfp_lock_release>:
 8007c5c:	4801      	ldr	r0, [pc, #4]	@ (8007c64 <__sfp_lock_release+0x8>)
 8007c5e:	f000 b92f 	b.w	8007ec0 <__retarget_lock_release_recursive>
 8007c62:	bf00      	nop
 8007c64:	20000b01 	.word	0x20000b01

08007c68 <__sinit>:
 8007c68:	b510      	push	{r4, lr}
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	f7ff fff0 	bl	8007c50 <__sfp_lock_acquire>
 8007c70:	6a23      	ldr	r3, [r4, #32]
 8007c72:	b11b      	cbz	r3, 8007c7c <__sinit+0x14>
 8007c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c78:	f7ff bff0 	b.w	8007c5c <__sfp_lock_release>
 8007c7c:	4b04      	ldr	r3, [pc, #16]	@ (8007c90 <__sinit+0x28>)
 8007c7e:	6223      	str	r3, [r4, #32]
 8007c80:	4b04      	ldr	r3, [pc, #16]	@ (8007c94 <__sinit+0x2c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1f5      	bne.n	8007c74 <__sinit+0xc>
 8007c88:	f7ff ffc4 	bl	8007c14 <global_stdio_init.part.0>
 8007c8c:	e7f2      	b.n	8007c74 <__sinit+0xc>
 8007c8e:	bf00      	nop
 8007c90:	08007bd5 	.word	0x08007bd5
 8007c94:	20000af8 	.word	0x20000af8

08007c98 <_fwalk_sglue>:
 8007c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	4688      	mov	r8, r1
 8007ca0:	4614      	mov	r4, r2
 8007ca2:	2600      	movs	r6, #0
 8007ca4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ca8:	f1b9 0901 	subs.w	r9, r9, #1
 8007cac:	d505      	bpl.n	8007cba <_fwalk_sglue+0x22>
 8007cae:	6824      	ldr	r4, [r4, #0]
 8007cb0:	2c00      	cmp	r4, #0
 8007cb2:	d1f7      	bne.n	8007ca4 <_fwalk_sglue+0xc>
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cba:	89ab      	ldrh	r3, [r5, #12]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d907      	bls.n	8007cd0 <_fwalk_sglue+0x38>
 8007cc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	d003      	beq.n	8007cd0 <_fwalk_sglue+0x38>
 8007cc8:	4629      	mov	r1, r5
 8007cca:	4638      	mov	r0, r7
 8007ccc:	47c0      	blx	r8
 8007cce:	4306      	orrs	r6, r0
 8007cd0:	3568      	adds	r5, #104	@ 0x68
 8007cd2:	e7e9      	b.n	8007ca8 <_fwalk_sglue+0x10>

08007cd4 <sniprintf>:
 8007cd4:	b40c      	push	{r2, r3}
 8007cd6:	b530      	push	{r4, r5, lr}
 8007cd8:	4b17      	ldr	r3, [pc, #92]	@ (8007d38 <sniprintf+0x64>)
 8007cda:	1e0c      	subs	r4, r1, #0
 8007cdc:	681d      	ldr	r5, [r3, #0]
 8007cde:	b09d      	sub	sp, #116	@ 0x74
 8007ce0:	da08      	bge.n	8007cf4 <sniprintf+0x20>
 8007ce2:	238b      	movs	r3, #139	@ 0x8b
 8007ce4:	602b      	str	r3, [r5, #0]
 8007ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cea:	b01d      	add	sp, #116	@ 0x74
 8007cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cf0:	b002      	add	sp, #8
 8007cf2:	4770      	bx	lr
 8007cf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007cf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007cfc:	bf14      	ite	ne
 8007cfe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d02:	4623      	moveq	r3, r4
 8007d04:	9304      	str	r3, [sp, #16]
 8007d06:	9307      	str	r3, [sp, #28]
 8007d08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d0c:	9002      	str	r0, [sp, #8]
 8007d0e:	9006      	str	r0, [sp, #24]
 8007d10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d14:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007d16:	ab21      	add	r3, sp, #132	@ 0x84
 8007d18:	a902      	add	r1, sp, #8
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	f001 fc09 	bl	8009534 <_svfiprintf_r>
 8007d22:	1c43      	adds	r3, r0, #1
 8007d24:	bfbc      	itt	lt
 8007d26:	238b      	movlt	r3, #139	@ 0x8b
 8007d28:	602b      	strlt	r3, [r5, #0]
 8007d2a:	2c00      	cmp	r4, #0
 8007d2c:	d0dd      	beq.n	8007cea <sniprintf+0x16>
 8007d2e:	9b02      	ldr	r3, [sp, #8]
 8007d30:	2200      	movs	r2, #0
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	e7d9      	b.n	8007cea <sniprintf+0x16>
 8007d36:	bf00      	nop
 8007d38:	20000020 	.word	0x20000020

08007d3c <__sread>:
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	460c      	mov	r4, r1
 8007d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d44:	f000 f86c 	bl	8007e20 <_read_r>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	bfab      	itete	ge
 8007d4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d50:	181b      	addge	r3, r3, r0
 8007d52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d56:	bfac      	ite	ge
 8007d58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d5a:	81a3      	strhlt	r3, [r4, #12]
 8007d5c:	bd10      	pop	{r4, pc}

08007d5e <__swrite>:
 8007d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d62:	461f      	mov	r7, r3
 8007d64:	898b      	ldrh	r3, [r1, #12]
 8007d66:	05db      	lsls	r3, r3, #23
 8007d68:	4605      	mov	r5, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	4616      	mov	r6, r2
 8007d6e:	d505      	bpl.n	8007d7c <__swrite+0x1e>
 8007d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d74:	2302      	movs	r3, #2
 8007d76:	2200      	movs	r2, #0
 8007d78:	f000 f840 	bl	8007dfc <_lseek_r>
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d86:	81a3      	strh	r3, [r4, #12]
 8007d88:	4632      	mov	r2, r6
 8007d8a:	463b      	mov	r3, r7
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d92:	f000 b857 	b.w	8007e44 <_write_r>

08007d96 <__sseek>:
 8007d96:	b510      	push	{r4, lr}
 8007d98:	460c      	mov	r4, r1
 8007d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9e:	f000 f82d 	bl	8007dfc <_lseek_r>
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	bf15      	itete	ne
 8007da8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007daa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007dae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007db2:	81a3      	strheq	r3, [r4, #12]
 8007db4:	bf18      	it	ne
 8007db6:	81a3      	strhne	r3, [r4, #12]
 8007db8:	bd10      	pop	{r4, pc}

08007dba <__sclose>:
 8007dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dbe:	f000 b80d 	b.w	8007ddc <_close_r>

08007dc2 <memset>:
 8007dc2:	4402      	add	r2, r0
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d100      	bne.n	8007dcc <memset+0xa>
 8007dca:	4770      	bx	lr
 8007dcc:	f803 1b01 	strb.w	r1, [r3], #1
 8007dd0:	e7f9      	b.n	8007dc6 <memset+0x4>
	...

08007dd4 <_localeconv_r>:
 8007dd4:	4800      	ldr	r0, [pc, #0]	@ (8007dd8 <_localeconv_r+0x4>)
 8007dd6:	4770      	bx	lr
 8007dd8:	20000160 	.word	0x20000160

08007ddc <_close_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4d06      	ldr	r5, [pc, #24]	@ (8007df8 <_close_r+0x1c>)
 8007de0:	2300      	movs	r3, #0
 8007de2:	4604      	mov	r4, r0
 8007de4:	4608      	mov	r0, r1
 8007de6:	602b      	str	r3, [r5, #0]
 8007de8:	f7fb f9c8 	bl	800317c <_close>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d102      	bne.n	8007df6 <_close_r+0x1a>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b103      	cbz	r3, 8007df6 <_close_r+0x1a>
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	20000afc 	.word	0x20000afc

08007dfc <_lseek_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	4d07      	ldr	r5, [pc, #28]	@ (8007e1c <_lseek_r+0x20>)
 8007e00:	4604      	mov	r4, r0
 8007e02:	4608      	mov	r0, r1
 8007e04:	4611      	mov	r1, r2
 8007e06:	2200      	movs	r2, #0
 8007e08:	602a      	str	r2, [r5, #0]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f7fb f9dd 	bl	80031ca <_lseek>
 8007e10:	1c43      	adds	r3, r0, #1
 8007e12:	d102      	bne.n	8007e1a <_lseek_r+0x1e>
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	b103      	cbz	r3, 8007e1a <_lseek_r+0x1e>
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	20000afc 	.word	0x20000afc

08007e20 <_read_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4d07      	ldr	r5, [pc, #28]	@ (8007e40 <_read_r+0x20>)
 8007e24:	4604      	mov	r4, r0
 8007e26:	4608      	mov	r0, r1
 8007e28:	4611      	mov	r1, r2
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	602a      	str	r2, [r5, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f7fb f96b 	bl	800310a <_read>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d102      	bne.n	8007e3e <_read_r+0x1e>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	b103      	cbz	r3, 8007e3e <_read_r+0x1e>
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	20000afc 	.word	0x20000afc

08007e44 <_write_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	4d07      	ldr	r5, [pc, #28]	@ (8007e64 <_write_r+0x20>)
 8007e48:	4604      	mov	r4, r0
 8007e4a:	4608      	mov	r0, r1
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	602a      	str	r2, [r5, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f7fb f976 	bl	8003144 <_write>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d102      	bne.n	8007e62 <_write_r+0x1e>
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	b103      	cbz	r3, 8007e62 <_write_r+0x1e>
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
 8007e64:	20000afc 	.word	0x20000afc

08007e68 <__errno>:
 8007e68:	4b01      	ldr	r3, [pc, #4]	@ (8007e70 <__errno+0x8>)
 8007e6a:	6818      	ldr	r0, [r3, #0]
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	20000020 	.word	0x20000020

08007e74 <__libc_init_array>:
 8007e74:	b570      	push	{r4, r5, r6, lr}
 8007e76:	4d0d      	ldr	r5, [pc, #52]	@ (8007eac <__libc_init_array+0x38>)
 8007e78:	4c0d      	ldr	r4, [pc, #52]	@ (8007eb0 <__libc_init_array+0x3c>)
 8007e7a:	1b64      	subs	r4, r4, r5
 8007e7c:	10a4      	asrs	r4, r4, #2
 8007e7e:	2600      	movs	r6, #0
 8007e80:	42a6      	cmp	r6, r4
 8007e82:	d109      	bne.n	8007e98 <__libc_init_array+0x24>
 8007e84:	4d0b      	ldr	r5, [pc, #44]	@ (8007eb4 <__libc_init_array+0x40>)
 8007e86:	4c0c      	ldr	r4, [pc, #48]	@ (8007eb8 <__libc_init_array+0x44>)
 8007e88:	f002 f864 	bl	8009f54 <_init>
 8007e8c:	1b64      	subs	r4, r4, r5
 8007e8e:	10a4      	asrs	r4, r4, #2
 8007e90:	2600      	movs	r6, #0
 8007e92:	42a6      	cmp	r6, r4
 8007e94:	d105      	bne.n	8007ea2 <__libc_init_array+0x2e>
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e9c:	4798      	blx	r3
 8007e9e:	3601      	adds	r6, #1
 8007ea0:	e7ee      	b.n	8007e80 <__libc_init_array+0xc>
 8007ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea6:	4798      	blx	r3
 8007ea8:	3601      	adds	r6, #1
 8007eaa:	e7f2      	b.n	8007e92 <__libc_init_array+0x1e>
 8007eac:	0800a810 	.word	0x0800a810
 8007eb0:	0800a810 	.word	0x0800a810
 8007eb4:	0800a810 	.word	0x0800a810
 8007eb8:	0800a814 	.word	0x0800a814

08007ebc <__retarget_lock_init_recursive>:
 8007ebc:	4770      	bx	lr

08007ebe <__retarget_lock_acquire_recursive>:
 8007ebe:	4770      	bx	lr

08007ec0 <__retarget_lock_release_recursive>:
 8007ec0:	4770      	bx	lr

08007ec2 <memcpy>:
 8007ec2:	440a      	add	r2, r1
 8007ec4:	4291      	cmp	r1, r2
 8007ec6:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eca:	d100      	bne.n	8007ece <memcpy+0xc>
 8007ecc:	4770      	bx	lr
 8007ece:	b510      	push	{r4, lr}
 8007ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ed8:	4291      	cmp	r1, r2
 8007eda:	d1f9      	bne.n	8007ed0 <memcpy+0xe>
 8007edc:	bd10      	pop	{r4, pc}

08007ede <quorem>:
 8007ede:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee2:	6903      	ldr	r3, [r0, #16]
 8007ee4:	690c      	ldr	r4, [r1, #16]
 8007ee6:	42a3      	cmp	r3, r4
 8007ee8:	4607      	mov	r7, r0
 8007eea:	db7e      	blt.n	8007fea <quorem+0x10c>
 8007eec:	3c01      	subs	r4, #1
 8007eee:	f101 0814 	add.w	r8, r1, #20
 8007ef2:	00a3      	lsls	r3, r4, #2
 8007ef4:	f100 0514 	add.w	r5, r0, #20
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007efe:	9301      	str	r3, [sp, #4]
 8007f00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f10:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f14:	d32e      	bcc.n	8007f74 <quorem+0x96>
 8007f16:	f04f 0a00 	mov.w	sl, #0
 8007f1a:	46c4      	mov	ip, r8
 8007f1c:	46ae      	mov	lr, r5
 8007f1e:	46d3      	mov	fp, sl
 8007f20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f24:	b298      	uxth	r0, r3
 8007f26:	fb06 a000 	mla	r0, r6, r0, sl
 8007f2a:	0c02      	lsrs	r2, r0, #16
 8007f2c:	0c1b      	lsrs	r3, r3, #16
 8007f2e:	fb06 2303 	mla	r3, r6, r3, r2
 8007f32:	f8de 2000 	ldr.w	r2, [lr]
 8007f36:	b280      	uxth	r0, r0
 8007f38:	b292      	uxth	r2, r2
 8007f3a:	1a12      	subs	r2, r2, r0
 8007f3c:	445a      	add	r2, fp
 8007f3e:	f8de 0000 	ldr.w	r0, [lr]
 8007f42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007f4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007f50:	b292      	uxth	r2, r2
 8007f52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f56:	45e1      	cmp	r9, ip
 8007f58:	f84e 2b04 	str.w	r2, [lr], #4
 8007f5c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f60:	d2de      	bcs.n	8007f20 <quorem+0x42>
 8007f62:	9b00      	ldr	r3, [sp, #0]
 8007f64:	58eb      	ldr	r3, [r5, r3]
 8007f66:	b92b      	cbnz	r3, 8007f74 <quorem+0x96>
 8007f68:	9b01      	ldr	r3, [sp, #4]
 8007f6a:	3b04      	subs	r3, #4
 8007f6c:	429d      	cmp	r5, r3
 8007f6e:	461a      	mov	r2, r3
 8007f70:	d32f      	bcc.n	8007fd2 <quorem+0xf4>
 8007f72:	613c      	str	r4, [r7, #16]
 8007f74:	4638      	mov	r0, r7
 8007f76:	f001 f979 	bl	800926c <__mcmp>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	db25      	blt.n	8007fca <quorem+0xec>
 8007f7e:	4629      	mov	r1, r5
 8007f80:	2000      	movs	r0, #0
 8007f82:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f86:	f8d1 c000 	ldr.w	ip, [r1]
 8007f8a:	fa1f fe82 	uxth.w	lr, r2
 8007f8e:	fa1f f38c 	uxth.w	r3, ip
 8007f92:	eba3 030e 	sub.w	r3, r3, lr
 8007f96:	4403      	add	r3, r0
 8007f98:	0c12      	lsrs	r2, r2, #16
 8007f9a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007f9e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fa8:	45c1      	cmp	r9, r8
 8007faa:	f841 3b04 	str.w	r3, [r1], #4
 8007fae:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007fb2:	d2e6      	bcs.n	8007f82 <quorem+0xa4>
 8007fb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fbc:	b922      	cbnz	r2, 8007fc8 <quorem+0xea>
 8007fbe:	3b04      	subs	r3, #4
 8007fc0:	429d      	cmp	r5, r3
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	d30b      	bcc.n	8007fde <quorem+0x100>
 8007fc6:	613c      	str	r4, [r7, #16]
 8007fc8:	3601      	adds	r6, #1
 8007fca:	4630      	mov	r0, r6
 8007fcc:	b003      	add	sp, #12
 8007fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd2:	6812      	ldr	r2, [r2, #0]
 8007fd4:	3b04      	subs	r3, #4
 8007fd6:	2a00      	cmp	r2, #0
 8007fd8:	d1cb      	bne.n	8007f72 <quorem+0x94>
 8007fda:	3c01      	subs	r4, #1
 8007fdc:	e7c6      	b.n	8007f6c <quorem+0x8e>
 8007fde:	6812      	ldr	r2, [r2, #0]
 8007fe0:	3b04      	subs	r3, #4
 8007fe2:	2a00      	cmp	r2, #0
 8007fe4:	d1ef      	bne.n	8007fc6 <quorem+0xe8>
 8007fe6:	3c01      	subs	r4, #1
 8007fe8:	e7ea      	b.n	8007fc0 <quorem+0xe2>
 8007fea:	2000      	movs	r0, #0
 8007fec:	e7ee      	b.n	8007fcc <quorem+0xee>
	...

08007ff0 <_dtoa_r>:
 8007ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	69c7      	ldr	r7, [r0, #28]
 8007ff6:	b099      	sub	sp, #100	@ 0x64
 8007ff8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ffc:	ec55 4b10 	vmov	r4, r5, d0
 8008000:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008002:	9109      	str	r1, [sp, #36]	@ 0x24
 8008004:	4683      	mov	fp, r0
 8008006:	920e      	str	r2, [sp, #56]	@ 0x38
 8008008:	9313      	str	r3, [sp, #76]	@ 0x4c
 800800a:	b97f      	cbnz	r7, 800802c <_dtoa_r+0x3c>
 800800c:	2010      	movs	r0, #16
 800800e:	f000 fdfd 	bl	8008c0c <malloc>
 8008012:	4602      	mov	r2, r0
 8008014:	f8cb 001c 	str.w	r0, [fp, #28]
 8008018:	b920      	cbnz	r0, 8008024 <_dtoa_r+0x34>
 800801a:	4ba7      	ldr	r3, [pc, #668]	@ (80082b8 <_dtoa_r+0x2c8>)
 800801c:	21ef      	movs	r1, #239	@ 0xef
 800801e:	48a7      	ldr	r0, [pc, #668]	@ (80082bc <_dtoa_r+0x2cc>)
 8008020:	f001 fc5a 	bl	80098d8 <__assert_func>
 8008024:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008028:	6007      	str	r7, [r0, #0]
 800802a:	60c7      	str	r7, [r0, #12]
 800802c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008030:	6819      	ldr	r1, [r3, #0]
 8008032:	b159      	cbz	r1, 800804c <_dtoa_r+0x5c>
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	604a      	str	r2, [r1, #4]
 8008038:	2301      	movs	r3, #1
 800803a:	4093      	lsls	r3, r2
 800803c:	608b      	str	r3, [r1, #8]
 800803e:	4658      	mov	r0, fp
 8008040:	f000 feda 	bl	8008df8 <_Bfree>
 8008044:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	1e2b      	subs	r3, r5, #0
 800804e:	bfb9      	ittee	lt
 8008050:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008054:	9303      	strlt	r3, [sp, #12]
 8008056:	2300      	movge	r3, #0
 8008058:	6033      	strge	r3, [r6, #0]
 800805a:	9f03      	ldr	r7, [sp, #12]
 800805c:	4b98      	ldr	r3, [pc, #608]	@ (80082c0 <_dtoa_r+0x2d0>)
 800805e:	bfbc      	itt	lt
 8008060:	2201      	movlt	r2, #1
 8008062:	6032      	strlt	r2, [r6, #0]
 8008064:	43bb      	bics	r3, r7
 8008066:	d112      	bne.n	800808e <_dtoa_r+0x9e>
 8008068:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800806a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008074:	4323      	orrs	r3, r4
 8008076:	f000 854d 	beq.w	8008b14 <_dtoa_r+0xb24>
 800807a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800807c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80082d4 <_dtoa_r+0x2e4>
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 854f 	beq.w	8008b24 <_dtoa_r+0xb34>
 8008086:	f10a 0303 	add.w	r3, sl, #3
 800808a:	f000 bd49 	b.w	8008b20 <_dtoa_r+0xb30>
 800808e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008092:	2200      	movs	r2, #0
 8008094:	ec51 0b17 	vmov	r0, r1, d7
 8008098:	2300      	movs	r3, #0
 800809a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800809e:	f7f8 fd33 	bl	8000b08 <__aeabi_dcmpeq>
 80080a2:	4680      	mov	r8, r0
 80080a4:	b158      	cbz	r0, 80080be <_dtoa_r+0xce>
 80080a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80080a8:	2301      	movs	r3, #1
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080ae:	b113      	cbz	r3, 80080b6 <_dtoa_r+0xc6>
 80080b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80080b2:	4b84      	ldr	r3, [pc, #528]	@ (80082c4 <_dtoa_r+0x2d4>)
 80080b4:	6013      	str	r3, [r2, #0]
 80080b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80082d8 <_dtoa_r+0x2e8>
 80080ba:	f000 bd33 	b.w	8008b24 <_dtoa_r+0xb34>
 80080be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80080c2:	aa16      	add	r2, sp, #88	@ 0x58
 80080c4:	a917      	add	r1, sp, #92	@ 0x5c
 80080c6:	4658      	mov	r0, fp
 80080c8:	f001 f980 	bl	80093cc <__d2b>
 80080cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80080d0:	4681      	mov	r9, r0
 80080d2:	2e00      	cmp	r6, #0
 80080d4:	d077      	beq.n	80081c6 <_dtoa_r+0x1d6>
 80080d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80080dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80080e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80080ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80080f0:	4619      	mov	r1, r3
 80080f2:	2200      	movs	r2, #0
 80080f4:	4b74      	ldr	r3, [pc, #464]	@ (80082c8 <_dtoa_r+0x2d8>)
 80080f6:	f7f8 f8e7 	bl	80002c8 <__aeabi_dsub>
 80080fa:	a369      	add	r3, pc, #420	@ (adr r3, 80082a0 <_dtoa_r+0x2b0>)
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	f7f8 fa9a 	bl	8000638 <__aeabi_dmul>
 8008104:	a368      	add	r3, pc, #416	@ (adr r3, 80082a8 <_dtoa_r+0x2b8>)
 8008106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810a:	f7f8 f8df 	bl	80002cc <__adddf3>
 800810e:	4604      	mov	r4, r0
 8008110:	4630      	mov	r0, r6
 8008112:	460d      	mov	r5, r1
 8008114:	f7f8 fa26 	bl	8000564 <__aeabi_i2d>
 8008118:	a365      	add	r3, pc, #404	@ (adr r3, 80082b0 <_dtoa_r+0x2c0>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	f7f8 fa8b 	bl	8000638 <__aeabi_dmul>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f7f8 f8cf 	bl	80002cc <__adddf3>
 800812e:	4604      	mov	r4, r0
 8008130:	460d      	mov	r5, r1
 8008132:	f7f8 fd31 	bl	8000b98 <__aeabi_d2iz>
 8008136:	2200      	movs	r2, #0
 8008138:	4607      	mov	r7, r0
 800813a:	2300      	movs	r3, #0
 800813c:	4620      	mov	r0, r4
 800813e:	4629      	mov	r1, r5
 8008140:	f7f8 fcec 	bl	8000b1c <__aeabi_dcmplt>
 8008144:	b140      	cbz	r0, 8008158 <_dtoa_r+0x168>
 8008146:	4638      	mov	r0, r7
 8008148:	f7f8 fa0c 	bl	8000564 <__aeabi_i2d>
 800814c:	4622      	mov	r2, r4
 800814e:	462b      	mov	r3, r5
 8008150:	f7f8 fcda 	bl	8000b08 <__aeabi_dcmpeq>
 8008154:	b900      	cbnz	r0, 8008158 <_dtoa_r+0x168>
 8008156:	3f01      	subs	r7, #1
 8008158:	2f16      	cmp	r7, #22
 800815a:	d851      	bhi.n	8008200 <_dtoa_r+0x210>
 800815c:	4b5b      	ldr	r3, [pc, #364]	@ (80082cc <_dtoa_r+0x2dc>)
 800815e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800816a:	f7f8 fcd7 	bl	8000b1c <__aeabi_dcmplt>
 800816e:	2800      	cmp	r0, #0
 8008170:	d048      	beq.n	8008204 <_dtoa_r+0x214>
 8008172:	3f01      	subs	r7, #1
 8008174:	2300      	movs	r3, #0
 8008176:	9312      	str	r3, [sp, #72]	@ 0x48
 8008178:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800817a:	1b9b      	subs	r3, r3, r6
 800817c:	1e5a      	subs	r2, r3, #1
 800817e:	bf44      	itt	mi
 8008180:	f1c3 0801 	rsbmi	r8, r3, #1
 8008184:	2300      	movmi	r3, #0
 8008186:	9208      	str	r2, [sp, #32]
 8008188:	bf54      	ite	pl
 800818a:	f04f 0800 	movpl.w	r8, #0
 800818e:	9308      	strmi	r3, [sp, #32]
 8008190:	2f00      	cmp	r7, #0
 8008192:	db39      	blt.n	8008208 <_dtoa_r+0x218>
 8008194:	9b08      	ldr	r3, [sp, #32]
 8008196:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008198:	443b      	add	r3, r7
 800819a:	9308      	str	r3, [sp, #32]
 800819c:	2300      	movs	r3, #0
 800819e:	930a      	str	r3, [sp, #40]	@ 0x28
 80081a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081a2:	2b09      	cmp	r3, #9
 80081a4:	d864      	bhi.n	8008270 <_dtoa_r+0x280>
 80081a6:	2b05      	cmp	r3, #5
 80081a8:	bfc4      	itt	gt
 80081aa:	3b04      	subgt	r3, #4
 80081ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80081ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b0:	f1a3 0302 	sub.w	r3, r3, #2
 80081b4:	bfcc      	ite	gt
 80081b6:	2400      	movgt	r4, #0
 80081b8:	2401      	movle	r4, #1
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d863      	bhi.n	8008286 <_dtoa_r+0x296>
 80081be:	e8df f003 	tbb	[pc, r3]
 80081c2:	372a      	.short	0x372a
 80081c4:	5535      	.short	0x5535
 80081c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80081ca:	441e      	add	r6, r3
 80081cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80081d0:	2b20      	cmp	r3, #32
 80081d2:	bfc1      	itttt	gt
 80081d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80081d8:	409f      	lslgt	r7, r3
 80081da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80081de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80081e2:	bfd6      	itet	le
 80081e4:	f1c3 0320 	rsble	r3, r3, #32
 80081e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80081ec:	fa04 f003 	lslle.w	r0, r4, r3
 80081f0:	f7f8 f9a8 	bl	8000544 <__aeabi_ui2d>
 80081f4:	2201      	movs	r2, #1
 80081f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80081fa:	3e01      	subs	r6, #1
 80081fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80081fe:	e777      	b.n	80080f0 <_dtoa_r+0x100>
 8008200:	2301      	movs	r3, #1
 8008202:	e7b8      	b.n	8008176 <_dtoa_r+0x186>
 8008204:	9012      	str	r0, [sp, #72]	@ 0x48
 8008206:	e7b7      	b.n	8008178 <_dtoa_r+0x188>
 8008208:	427b      	negs	r3, r7
 800820a:	930a      	str	r3, [sp, #40]	@ 0x28
 800820c:	2300      	movs	r3, #0
 800820e:	eba8 0807 	sub.w	r8, r8, r7
 8008212:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008214:	e7c4      	b.n	80081a0 <_dtoa_r+0x1b0>
 8008216:	2300      	movs	r3, #0
 8008218:	930b      	str	r3, [sp, #44]	@ 0x2c
 800821a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800821c:	2b00      	cmp	r3, #0
 800821e:	dc35      	bgt.n	800828c <_dtoa_r+0x29c>
 8008220:	2301      	movs	r3, #1
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	9307      	str	r3, [sp, #28]
 8008226:	461a      	mov	r2, r3
 8008228:	920e      	str	r2, [sp, #56]	@ 0x38
 800822a:	e00b      	b.n	8008244 <_dtoa_r+0x254>
 800822c:	2301      	movs	r3, #1
 800822e:	e7f3      	b.n	8008218 <_dtoa_r+0x228>
 8008230:	2300      	movs	r3, #0
 8008232:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008236:	18fb      	adds	r3, r7, r3
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	3301      	adds	r3, #1
 800823c:	2b01      	cmp	r3, #1
 800823e:	9307      	str	r3, [sp, #28]
 8008240:	bfb8      	it	lt
 8008242:	2301      	movlt	r3, #1
 8008244:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008248:	2100      	movs	r1, #0
 800824a:	2204      	movs	r2, #4
 800824c:	f102 0514 	add.w	r5, r2, #20
 8008250:	429d      	cmp	r5, r3
 8008252:	d91f      	bls.n	8008294 <_dtoa_r+0x2a4>
 8008254:	6041      	str	r1, [r0, #4]
 8008256:	4658      	mov	r0, fp
 8008258:	f000 fd8e 	bl	8008d78 <_Balloc>
 800825c:	4682      	mov	sl, r0
 800825e:	2800      	cmp	r0, #0
 8008260:	d13c      	bne.n	80082dc <_dtoa_r+0x2ec>
 8008262:	4b1b      	ldr	r3, [pc, #108]	@ (80082d0 <_dtoa_r+0x2e0>)
 8008264:	4602      	mov	r2, r0
 8008266:	f240 11af 	movw	r1, #431	@ 0x1af
 800826a:	e6d8      	b.n	800801e <_dtoa_r+0x2e>
 800826c:	2301      	movs	r3, #1
 800826e:	e7e0      	b.n	8008232 <_dtoa_r+0x242>
 8008270:	2401      	movs	r4, #1
 8008272:	2300      	movs	r3, #0
 8008274:	9309      	str	r3, [sp, #36]	@ 0x24
 8008276:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008278:	f04f 33ff 	mov.w	r3, #4294967295
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	9307      	str	r3, [sp, #28]
 8008280:	2200      	movs	r2, #0
 8008282:	2312      	movs	r3, #18
 8008284:	e7d0      	b.n	8008228 <_dtoa_r+0x238>
 8008286:	2301      	movs	r3, #1
 8008288:	930b      	str	r3, [sp, #44]	@ 0x2c
 800828a:	e7f5      	b.n	8008278 <_dtoa_r+0x288>
 800828c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	9307      	str	r3, [sp, #28]
 8008292:	e7d7      	b.n	8008244 <_dtoa_r+0x254>
 8008294:	3101      	adds	r1, #1
 8008296:	0052      	lsls	r2, r2, #1
 8008298:	e7d8      	b.n	800824c <_dtoa_r+0x25c>
 800829a:	bf00      	nop
 800829c:	f3af 8000 	nop.w
 80082a0:	636f4361 	.word	0x636f4361
 80082a4:	3fd287a7 	.word	0x3fd287a7
 80082a8:	8b60c8b3 	.word	0x8b60c8b3
 80082ac:	3fc68a28 	.word	0x3fc68a28
 80082b0:	509f79fb 	.word	0x509f79fb
 80082b4:	3fd34413 	.word	0x3fd34413
 80082b8:	0800a5da 	.word	0x0800a5da
 80082bc:	0800a5f1 	.word	0x0800a5f1
 80082c0:	7ff00000 	.word	0x7ff00000
 80082c4:	0800a5aa 	.word	0x0800a5aa
 80082c8:	3ff80000 	.word	0x3ff80000
 80082cc:	0800a6e8 	.word	0x0800a6e8
 80082d0:	0800a649 	.word	0x0800a649
 80082d4:	0800a5d6 	.word	0x0800a5d6
 80082d8:	0800a5a9 	.word	0x0800a5a9
 80082dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80082e0:	6018      	str	r0, [r3, #0]
 80082e2:	9b07      	ldr	r3, [sp, #28]
 80082e4:	2b0e      	cmp	r3, #14
 80082e6:	f200 80a4 	bhi.w	8008432 <_dtoa_r+0x442>
 80082ea:	2c00      	cmp	r4, #0
 80082ec:	f000 80a1 	beq.w	8008432 <_dtoa_r+0x442>
 80082f0:	2f00      	cmp	r7, #0
 80082f2:	dd33      	ble.n	800835c <_dtoa_r+0x36c>
 80082f4:	4bad      	ldr	r3, [pc, #692]	@ (80085ac <_dtoa_r+0x5bc>)
 80082f6:	f007 020f 	and.w	r2, r7, #15
 80082fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082fe:	ed93 7b00 	vldr	d7, [r3]
 8008302:	05f8      	lsls	r0, r7, #23
 8008304:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008308:	ea4f 1427 	mov.w	r4, r7, asr #4
 800830c:	d516      	bpl.n	800833c <_dtoa_r+0x34c>
 800830e:	4ba8      	ldr	r3, [pc, #672]	@ (80085b0 <_dtoa_r+0x5c0>)
 8008310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008314:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008318:	f7f8 fab8 	bl	800088c <__aeabi_ddiv>
 800831c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008320:	f004 040f 	and.w	r4, r4, #15
 8008324:	2603      	movs	r6, #3
 8008326:	4da2      	ldr	r5, [pc, #648]	@ (80085b0 <_dtoa_r+0x5c0>)
 8008328:	b954      	cbnz	r4, 8008340 <_dtoa_r+0x350>
 800832a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800832e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008332:	f7f8 faab 	bl	800088c <__aeabi_ddiv>
 8008336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800833a:	e028      	b.n	800838e <_dtoa_r+0x39e>
 800833c:	2602      	movs	r6, #2
 800833e:	e7f2      	b.n	8008326 <_dtoa_r+0x336>
 8008340:	07e1      	lsls	r1, r4, #31
 8008342:	d508      	bpl.n	8008356 <_dtoa_r+0x366>
 8008344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008348:	e9d5 2300 	ldrd	r2, r3, [r5]
 800834c:	f7f8 f974 	bl	8000638 <__aeabi_dmul>
 8008350:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008354:	3601      	adds	r6, #1
 8008356:	1064      	asrs	r4, r4, #1
 8008358:	3508      	adds	r5, #8
 800835a:	e7e5      	b.n	8008328 <_dtoa_r+0x338>
 800835c:	f000 80d2 	beq.w	8008504 <_dtoa_r+0x514>
 8008360:	427c      	negs	r4, r7
 8008362:	4b92      	ldr	r3, [pc, #584]	@ (80085ac <_dtoa_r+0x5bc>)
 8008364:	4d92      	ldr	r5, [pc, #584]	@ (80085b0 <_dtoa_r+0x5c0>)
 8008366:	f004 020f 	and.w	r2, r4, #15
 800836a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008376:	f7f8 f95f 	bl	8000638 <__aeabi_dmul>
 800837a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800837e:	1124      	asrs	r4, r4, #4
 8008380:	2300      	movs	r3, #0
 8008382:	2602      	movs	r6, #2
 8008384:	2c00      	cmp	r4, #0
 8008386:	f040 80b2 	bne.w	80084ee <_dtoa_r+0x4fe>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1d3      	bne.n	8008336 <_dtoa_r+0x346>
 800838e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008390:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 80b7 	beq.w	8008508 <_dtoa_r+0x518>
 800839a:	4b86      	ldr	r3, [pc, #536]	@ (80085b4 <_dtoa_r+0x5c4>)
 800839c:	2200      	movs	r2, #0
 800839e:	4620      	mov	r0, r4
 80083a0:	4629      	mov	r1, r5
 80083a2:	f7f8 fbbb 	bl	8000b1c <__aeabi_dcmplt>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	f000 80ae 	beq.w	8008508 <_dtoa_r+0x518>
 80083ac:	9b07      	ldr	r3, [sp, #28]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 80aa 	beq.w	8008508 <_dtoa_r+0x518>
 80083b4:	9b00      	ldr	r3, [sp, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	dd37      	ble.n	800842a <_dtoa_r+0x43a>
 80083ba:	1e7b      	subs	r3, r7, #1
 80083bc:	9304      	str	r3, [sp, #16]
 80083be:	4620      	mov	r0, r4
 80083c0:	4b7d      	ldr	r3, [pc, #500]	@ (80085b8 <_dtoa_r+0x5c8>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	4629      	mov	r1, r5
 80083c6:	f7f8 f937 	bl	8000638 <__aeabi_dmul>
 80083ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083ce:	9c00      	ldr	r4, [sp, #0]
 80083d0:	3601      	adds	r6, #1
 80083d2:	4630      	mov	r0, r6
 80083d4:	f7f8 f8c6 	bl	8000564 <__aeabi_i2d>
 80083d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083dc:	f7f8 f92c 	bl	8000638 <__aeabi_dmul>
 80083e0:	4b76      	ldr	r3, [pc, #472]	@ (80085bc <_dtoa_r+0x5cc>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	f7f7 ff72 	bl	80002cc <__adddf3>
 80083e8:	4605      	mov	r5, r0
 80083ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80083ee:	2c00      	cmp	r4, #0
 80083f0:	f040 808d 	bne.w	800850e <_dtoa_r+0x51e>
 80083f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083f8:	4b71      	ldr	r3, [pc, #452]	@ (80085c0 <_dtoa_r+0x5d0>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	f7f7 ff64 	bl	80002c8 <__aeabi_dsub>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008408:	462a      	mov	r2, r5
 800840a:	4633      	mov	r3, r6
 800840c:	f7f8 fba4 	bl	8000b58 <__aeabi_dcmpgt>
 8008410:	2800      	cmp	r0, #0
 8008412:	f040 828b 	bne.w	800892c <_dtoa_r+0x93c>
 8008416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800841a:	462a      	mov	r2, r5
 800841c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008420:	f7f8 fb7c 	bl	8000b1c <__aeabi_dcmplt>
 8008424:	2800      	cmp	r0, #0
 8008426:	f040 8128 	bne.w	800867a <_dtoa_r+0x68a>
 800842a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800842e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008432:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008434:	2b00      	cmp	r3, #0
 8008436:	f2c0 815a 	blt.w	80086ee <_dtoa_r+0x6fe>
 800843a:	2f0e      	cmp	r7, #14
 800843c:	f300 8157 	bgt.w	80086ee <_dtoa_r+0x6fe>
 8008440:	4b5a      	ldr	r3, [pc, #360]	@ (80085ac <_dtoa_r+0x5bc>)
 8008442:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008446:	ed93 7b00 	vldr	d7, [r3]
 800844a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800844c:	2b00      	cmp	r3, #0
 800844e:	ed8d 7b00 	vstr	d7, [sp]
 8008452:	da03      	bge.n	800845c <_dtoa_r+0x46c>
 8008454:	9b07      	ldr	r3, [sp, #28]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f340 8101 	ble.w	800865e <_dtoa_r+0x66e>
 800845c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008460:	4656      	mov	r6, sl
 8008462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008466:	4620      	mov	r0, r4
 8008468:	4629      	mov	r1, r5
 800846a:	f7f8 fa0f 	bl	800088c <__aeabi_ddiv>
 800846e:	f7f8 fb93 	bl	8000b98 <__aeabi_d2iz>
 8008472:	4680      	mov	r8, r0
 8008474:	f7f8 f876 	bl	8000564 <__aeabi_i2d>
 8008478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800847c:	f7f8 f8dc 	bl	8000638 <__aeabi_dmul>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	4620      	mov	r0, r4
 8008486:	4629      	mov	r1, r5
 8008488:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800848c:	f7f7 ff1c 	bl	80002c8 <__aeabi_dsub>
 8008490:	f806 4b01 	strb.w	r4, [r6], #1
 8008494:	9d07      	ldr	r5, [sp, #28]
 8008496:	eba6 040a 	sub.w	r4, r6, sl
 800849a:	42a5      	cmp	r5, r4
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	f040 8117 	bne.w	80086d2 <_dtoa_r+0x6e2>
 80084a4:	f7f7 ff12 	bl	80002cc <__adddf3>
 80084a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084ac:	4604      	mov	r4, r0
 80084ae:	460d      	mov	r5, r1
 80084b0:	f7f8 fb52 	bl	8000b58 <__aeabi_dcmpgt>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	f040 80f9 	bne.w	80086ac <_dtoa_r+0x6bc>
 80084ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084be:	4620      	mov	r0, r4
 80084c0:	4629      	mov	r1, r5
 80084c2:	f7f8 fb21 	bl	8000b08 <__aeabi_dcmpeq>
 80084c6:	b118      	cbz	r0, 80084d0 <_dtoa_r+0x4e0>
 80084c8:	f018 0f01 	tst.w	r8, #1
 80084cc:	f040 80ee 	bne.w	80086ac <_dtoa_r+0x6bc>
 80084d0:	4649      	mov	r1, r9
 80084d2:	4658      	mov	r0, fp
 80084d4:	f000 fc90 	bl	8008df8 <_Bfree>
 80084d8:	2300      	movs	r3, #0
 80084da:	7033      	strb	r3, [r6, #0]
 80084dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084de:	3701      	adds	r7, #1
 80084e0:	601f      	str	r7, [r3, #0]
 80084e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 831d 	beq.w	8008b24 <_dtoa_r+0xb34>
 80084ea:	601e      	str	r6, [r3, #0]
 80084ec:	e31a      	b.n	8008b24 <_dtoa_r+0xb34>
 80084ee:	07e2      	lsls	r2, r4, #31
 80084f0:	d505      	bpl.n	80084fe <_dtoa_r+0x50e>
 80084f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084f6:	f7f8 f89f 	bl	8000638 <__aeabi_dmul>
 80084fa:	3601      	adds	r6, #1
 80084fc:	2301      	movs	r3, #1
 80084fe:	1064      	asrs	r4, r4, #1
 8008500:	3508      	adds	r5, #8
 8008502:	e73f      	b.n	8008384 <_dtoa_r+0x394>
 8008504:	2602      	movs	r6, #2
 8008506:	e742      	b.n	800838e <_dtoa_r+0x39e>
 8008508:	9c07      	ldr	r4, [sp, #28]
 800850a:	9704      	str	r7, [sp, #16]
 800850c:	e761      	b.n	80083d2 <_dtoa_r+0x3e2>
 800850e:	4b27      	ldr	r3, [pc, #156]	@ (80085ac <_dtoa_r+0x5bc>)
 8008510:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008512:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008516:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800851a:	4454      	add	r4, sl
 800851c:	2900      	cmp	r1, #0
 800851e:	d053      	beq.n	80085c8 <_dtoa_r+0x5d8>
 8008520:	4928      	ldr	r1, [pc, #160]	@ (80085c4 <_dtoa_r+0x5d4>)
 8008522:	2000      	movs	r0, #0
 8008524:	f7f8 f9b2 	bl	800088c <__aeabi_ddiv>
 8008528:	4633      	mov	r3, r6
 800852a:	462a      	mov	r2, r5
 800852c:	f7f7 fecc 	bl	80002c8 <__aeabi_dsub>
 8008530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008534:	4656      	mov	r6, sl
 8008536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800853a:	f7f8 fb2d 	bl	8000b98 <__aeabi_d2iz>
 800853e:	4605      	mov	r5, r0
 8008540:	f7f8 f810 	bl	8000564 <__aeabi_i2d>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800854c:	f7f7 febc 	bl	80002c8 <__aeabi_dsub>
 8008550:	3530      	adds	r5, #48	@ 0x30
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800855a:	f806 5b01 	strb.w	r5, [r6], #1
 800855e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008562:	f7f8 fadb 	bl	8000b1c <__aeabi_dcmplt>
 8008566:	2800      	cmp	r0, #0
 8008568:	d171      	bne.n	800864e <_dtoa_r+0x65e>
 800856a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800856e:	4911      	ldr	r1, [pc, #68]	@ (80085b4 <_dtoa_r+0x5c4>)
 8008570:	2000      	movs	r0, #0
 8008572:	f7f7 fea9 	bl	80002c8 <__aeabi_dsub>
 8008576:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800857a:	f7f8 facf 	bl	8000b1c <__aeabi_dcmplt>
 800857e:	2800      	cmp	r0, #0
 8008580:	f040 8095 	bne.w	80086ae <_dtoa_r+0x6be>
 8008584:	42a6      	cmp	r6, r4
 8008586:	f43f af50 	beq.w	800842a <_dtoa_r+0x43a>
 800858a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800858e:	4b0a      	ldr	r3, [pc, #40]	@ (80085b8 <_dtoa_r+0x5c8>)
 8008590:	2200      	movs	r2, #0
 8008592:	f7f8 f851 	bl	8000638 <__aeabi_dmul>
 8008596:	4b08      	ldr	r3, [pc, #32]	@ (80085b8 <_dtoa_r+0x5c8>)
 8008598:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800859c:	2200      	movs	r2, #0
 800859e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a2:	f7f8 f849 	bl	8000638 <__aeabi_dmul>
 80085a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085aa:	e7c4      	b.n	8008536 <_dtoa_r+0x546>
 80085ac:	0800a6e8 	.word	0x0800a6e8
 80085b0:	0800a6c0 	.word	0x0800a6c0
 80085b4:	3ff00000 	.word	0x3ff00000
 80085b8:	40240000 	.word	0x40240000
 80085bc:	401c0000 	.word	0x401c0000
 80085c0:	40140000 	.word	0x40140000
 80085c4:	3fe00000 	.word	0x3fe00000
 80085c8:	4631      	mov	r1, r6
 80085ca:	4628      	mov	r0, r5
 80085cc:	f7f8 f834 	bl	8000638 <__aeabi_dmul>
 80085d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80085d6:	4656      	mov	r6, sl
 80085d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085dc:	f7f8 fadc 	bl	8000b98 <__aeabi_d2iz>
 80085e0:	4605      	mov	r5, r0
 80085e2:	f7f7 ffbf 	bl	8000564 <__aeabi_i2d>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ee:	f7f7 fe6b 	bl	80002c8 <__aeabi_dsub>
 80085f2:	3530      	adds	r5, #48	@ 0x30
 80085f4:	f806 5b01 	strb.w	r5, [r6], #1
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	42a6      	cmp	r6, r4
 80085fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	d124      	bne.n	8008652 <_dtoa_r+0x662>
 8008608:	4bac      	ldr	r3, [pc, #688]	@ (80088bc <_dtoa_r+0x8cc>)
 800860a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800860e:	f7f7 fe5d 	bl	80002cc <__adddf3>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800861a:	f7f8 fa9d 	bl	8000b58 <__aeabi_dcmpgt>
 800861e:	2800      	cmp	r0, #0
 8008620:	d145      	bne.n	80086ae <_dtoa_r+0x6be>
 8008622:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008626:	49a5      	ldr	r1, [pc, #660]	@ (80088bc <_dtoa_r+0x8cc>)
 8008628:	2000      	movs	r0, #0
 800862a:	f7f7 fe4d 	bl	80002c8 <__aeabi_dsub>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008636:	f7f8 fa71 	bl	8000b1c <__aeabi_dcmplt>
 800863a:	2800      	cmp	r0, #0
 800863c:	f43f aef5 	beq.w	800842a <_dtoa_r+0x43a>
 8008640:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008642:	1e73      	subs	r3, r6, #1
 8008644:	9315      	str	r3, [sp, #84]	@ 0x54
 8008646:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800864a:	2b30      	cmp	r3, #48	@ 0x30
 800864c:	d0f8      	beq.n	8008640 <_dtoa_r+0x650>
 800864e:	9f04      	ldr	r7, [sp, #16]
 8008650:	e73e      	b.n	80084d0 <_dtoa_r+0x4e0>
 8008652:	4b9b      	ldr	r3, [pc, #620]	@ (80088c0 <_dtoa_r+0x8d0>)
 8008654:	f7f7 fff0 	bl	8000638 <__aeabi_dmul>
 8008658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800865c:	e7bc      	b.n	80085d8 <_dtoa_r+0x5e8>
 800865e:	d10c      	bne.n	800867a <_dtoa_r+0x68a>
 8008660:	4b98      	ldr	r3, [pc, #608]	@ (80088c4 <_dtoa_r+0x8d4>)
 8008662:	2200      	movs	r2, #0
 8008664:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008668:	f7f7 ffe6 	bl	8000638 <__aeabi_dmul>
 800866c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008670:	f7f8 fa68 	bl	8000b44 <__aeabi_dcmpge>
 8008674:	2800      	cmp	r0, #0
 8008676:	f000 8157 	beq.w	8008928 <_dtoa_r+0x938>
 800867a:	2400      	movs	r4, #0
 800867c:	4625      	mov	r5, r4
 800867e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008680:	43db      	mvns	r3, r3
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	4656      	mov	r6, sl
 8008686:	2700      	movs	r7, #0
 8008688:	4621      	mov	r1, r4
 800868a:	4658      	mov	r0, fp
 800868c:	f000 fbb4 	bl	8008df8 <_Bfree>
 8008690:	2d00      	cmp	r5, #0
 8008692:	d0dc      	beq.n	800864e <_dtoa_r+0x65e>
 8008694:	b12f      	cbz	r7, 80086a2 <_dtoa_r+0x6b2>
 8008696:	42af      	cmp	r7, r5
 8008698:	d003      	beq.n	80086a2 <_dtoa_r+0x6b2>
 800869a:	4639      	mov	r1, r7
 800869c:	4658      	mov	r0, fp
 800869e:	f000 fbab 	bl	8008df8 <_Bfree>
 80086a2:	4629      	mov	r1, r5
 80086a4:	4658      	mov	r0, fp
 80086a6:	f000 fba7 	bl	8008df8 <_Bfree>
 80086aa:	e7d0      	b.n	800864e <_dtoa_r+0x65e>
 80086ac:	9704      	str	r7, [sp, #16]
 80086ae:	4633      	mov	r3, r6
 80086b0:	461e      	mov	r6, r3
 80086b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086b6:	2a39      	cmp	r2, #57	@ 0x39
 80086b8:	d107      	bne.n	80086ca <_dtoa_r+0x6da>
 80086ba:	459a      	cmp	sl, r3
 80086bc:	d1f8      	bne.n	80086b0 <_dtoa_r+0x6c0>
 80086be:	9a04      	ldr	r2, [sp, #16]
 80086c0:	3201      	adds	r2, #1
 80086c2:	9204      	str	r2, [sp, #16]
 80086c4:	2230      	movs	r2, #48	@ 0x30
 80086c6:	f88a 2000 	strb.w	r2, [sl]
 80086ca:	781a      	ldrb	r2, [r3, #0]
 80086cc:	3201      	adds	r2, #1
 80086ce:	701a      	strb	r2, [r3, #0]
 80086d0:	e7bd      	b.n	800864e <_dtoa_r+0x65e>
 80086d2:	4b7b      	ldr	r3, [pc, #492]	@ (80088c0 <_dtoa_r+0x8d0>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	f7f7 ffaf 	bl	8000638 <__aeabi_dmul>
 80086da:	2200      	movs	r2, #0
 80086dc:	2300      	movs	r3, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	460d      	mov	r5, r1
 80086e2:	f7f8 fa11 	bl	8000b08 <__aeabi_dcmpeq>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	f43f aebb 	beq.w	8008462 <_dtoa_r+0x472>
 80086ec:	e6f0      	b.n	80084d0 <_dtoa_r+0x4e0>
 80086ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80086f0:	2a00      	cmp	r2, #0
 80086f2:	f000 80db 	beq.w	80088ac <_dtoa_r+0x8bc>
 80086f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086f8:	2a01      	cmp	r2, #1
 80086fa:	f300 80bf 	bgt.w	800887c <_dtoa_r+0x88c>
 80086fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008700:	2a00      	cmp	r2, #0
 8008702:	f000 80b7 	beq.w	8008874 <_dtoa_r+0x884>
 8008706:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800870a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800870c:	4646      	mov	r6, r8
 800870e:	9a08      	ldr	r2, [sp, #32]
 8008710:	2101      	movs	r1, #1
 8008712:	441a      	add	r2, r3
 8008714:	4658      	mov	r0, fp
 8008716:	4498      	add	r8, r3
 8008718:	9208      	str	r2, [sp, #32]
 800871a:	f000 fc21 	bl	8008f60 <__i2b>
 800871e:	4605      	mov	r5, r0
 8008720:	b15e      	cbz	r6, 800873a <_dtoa_r+0x74a>
 8008722:	9b08      	ldr	r3, [sp, #32]
 8008724:	2b00      	cmp	r3, #0
 8008726:	dd08      	ble.n	800873a <_dtoa_r+0x74a>
 8008728:	42b3      	cmp	r3, r6
 800872a:	9a08      	ldr	r2, [sp, #32]
 800872c:	bfa8      	it	ge
 800872e:	4633      	movge	r3, r6
 8008730:	eba8 0803 	sub.w	r8, r8, r3
 8008734:	1af6      	subs	r6, r6, r3
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	9308      	str	r3, [sp, #32]
 800873a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800873c:	b1f3      	cbz	r3, 800877c <_dtoa_r+0x78c>
 800873e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 80b7 	beq.w	80088b4 <_dtoa_r+0x8c4>
 8008746:	b18c      	cbz	r4, 800876c <_dtoa_r+0x77c>
 8008748:	4629      	mov	r1, r5
 800874a:	4622      	mov	r2, r4
 800874c:	4658      	mov	r0, fp
 800874e:	f000 fcc7 	bl	80090e0 <__pow5mult>
 8008752:	464a      	mov	r2, r9
 8008754:	4601      	mov	r1, r0
 8008756:	4605      	mov	r5, r0
 8008758:	4658      	mov	r0, fp
 800875a:	f000 fc17 	bl	8008f8c <__multiply>
 800875e:	4649      	mov	r1, r9
 8008760:	9004      	str	r0, [sp, #16]
 8008762:	4658      	mov	r0, fp
 8008764:	f000 fb48 	bl	8008df8 <_Bfree>
 8008768:	9b04      	ldr	r3, [sp, #16]
 800876a:	4699      	mov	r9, r3
 800876c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800876e:	1b1a      	subs	r2, r3, r4
 8008770:	d004      	beq.n	800877c <_dtoa_r+0x78c>
 8008772:	4649      	mov	r1, r9
 8008774:	4658      	mov	r0, fp
 8008776:	f000 fcb3 	bl	80090e0 <__pow5mult>
 800877a:	4681      	mov	r9, r0
 800877c:	2101      	movs	r1, #1
 800877e:	4658      	mov	r0, fp
 8008780:	f000 fbee 	bl	8008f60 <__i2b>
 8008784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008786:	4604      	mov	r4, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 81cf 	beq.w	8008b2c <_dtoa_r+0xb3c>
 800878e:	461a      	mov	r2, r3
 8008790:	4601      	mov	r1, r0
 8008792:	4658      	mov	r0, fp
 8008794:	f000 fca4 	bl	80090e0 <__pow5mult>
 8008798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879a:	2b01      	cmp	r3, #1
 800879c:	4604      	mov	r4, r0
 800879e:	f300 8095 	bgt.w	80088cc <_dtoa_r+0x8dc>
 80087a2:	9b02      	ldr	r3, [sp, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f040 8087 	bne.w	80088b8 <_dtoa_r+0x8c8>
 80087aa:	9b03      	ldr	r3, [sp, #12]
 80087ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f040 8089 	bne.w	80088c8 <_dtoa_r+0x8d8>
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087bc:	0d1b      	lsrs	r3, r3, #20
 80087be:	051b      	lsls	r3, r3, #20
 80087c0:	b12b      	cbz	r3, 80087ce <_dtoa_r+0x7de>
 80087c2:	9b08      	ldr	r3, [sp, #32]
 80087c4:	3301      	adds	r3, #1
 80087c6:	9308      	str	r3, [sp, #32]
 80087c8:	f108 0801 	add.w	r8, r8, #1
 80087cc:	2301      	movs	r3, #1
 80087ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80087d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 81b0 	beq.w	8008b38 <_dtoa_r+0xb48>
 80087d8:	6923      	ldr	r3, [r4, #16]
 80087da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087de:	6918      	ldr	r0, [r3, #16]
 80087e0:	f000 fb72 	bl	8008ec8 <__hi0bits>
 80087e4:	f1c0 0020 	rsb	r0, r0, #32
 80087e8:	9b08      	ldr	r3, [sp, #32]
 80087ea:	4418      	add	r0, r3
 80087ec:	f010 001f 	ands.w	r0, r0, #31
 80087f0:	d077      	beq.n	80088e2 <_dtoa_r+0x8f2>
 80087f2:	f1c0 0320 	rsb	r3, r0, #32
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	dd6b      	ble.n	80088d2 <_dtoa_r+0x8e2>
 80087fa:	9b08      	ldr	r3, [sp, #32]
 80087fc:	f1c0 001c 	rsb	r0, r0, #28
 8008800:	4403      	add	r3, r0
 8008802:	4480      	add	r8, r0
 8008804:	4406      	add	r6, r0
 8008806:	9308      	str	r3, [sp, #32]
 8008808:	f1b8 0f00 	cmp.w	r8, #0
 800880c:	dd05      	ble.n	800881a <_dtoa_r+0x82a>
 800880e:	4649      	mov	r1, r9
 8008810:	4642      	mov	r2, r8
 8008812:	4658      	mov	r0, fp
 8008814:	f000 fcbe 	bl	8009194 <__lshift>
 8008818:	4681      	mov	r9, r0
 800881a:	9b08      	ldr	r3, [sp, #32]
 800881c:	2b00      	cmp	r3, #0
 800881e:	dd05      	ble.n	800882c <_dtoa_r+0x83c>
 8008820:	4621      	mov	r1, r4
 8008822:	461a      	mov	r2, r3
 8008824:	4658      	mov	r0, fp
 8008826:	f000 fcb5 	bl	8009194 <__lshift>
 800882a:	4604      	mov	r4, r0
 800882c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800882e:	2b00      	cmp	r3, #0
 8008830:	d059      	beq.n	80088e6 <_dtoa_r+0x8f6>
 8008832:	4621      	mov	r1, r4
 8008834:	4648      	mov	r0, r9
 8008836:	f000 fd19 	bl	800926c <__mcmp>
 800883a:	2800      	cmp	r0, #0
 800883c:	da53      	bge.n	80088e6 <_dtoa_r+0x8f6>
 800883e:	1e7b      	subs	r3, r7, #1
 8008840:	9304      	str	r3, [sp, #16]
 8008842:	4649      	mov	r1, r9
 8008844:	2300      	movs	r3, #0
 8008846:	220a      	movs	r2, #10
 8008848:	4658      	mov	r0, fp
 800884a:	f000 faf7 	bl	8008e3c <__multadd>
 800884e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008850:	4681      	mov	r9, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 8172 	beq.w	8008b3c <_dtoa_r+0xb4c>
 8008858:	2300      	movs	r3, #0
 800885a:	4629      	mov	r1, r5
 800885c:	220a      	movs	r2, #10
 800885e:	4658      	mov	r0, fp
 8008860:	f000 faec 	bl	8008e3c <__multadd>
 8008864:	9b00      	ldr	r3, [sp, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	4605      	mov	r5, r0
 800886a:	dc67      	bgt.n	800893c <_dtoa_r+0x94c>
 800886c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800886e:	2b02      	cmp	r3, #2
 8008870:	dc41      	bgt.n	80088f6 <_dtoa_r+0x906>
 8008872:	e063      	b.n	800893c <_dtoa_r+0x94c>
 8008874:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008876:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800887a:	e746      	b.n	800870a <_dtoa_r+0x71a>
 800887c:	9b07      	ldr	r3, [sp, #28]
 800887e:	1e5c      	subs	r4, r3, #1
 8008880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008882:	42a3      	cmp	r3, r4
 8008884:	bfbf      	itttt	lt
 8008886:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008888:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800888a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800888c:	1ae3      	sublt	r3, r4, r3
 800888e:	bfb4      	ite	lt
 8008890:	18d2      	addlt	r2, r2, r3
 8008892:	1b1c      	subge	r4, r3, r4
 8008894:	9b07      	ldr	r3, [sp, #28]
 8008896:	bfbc      	itt	lt
 8008898:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800889a:	2400      	movlt	r4, #0
 800889c:	2b00      	cmp	r3, #0
 800889e:	bfb5      	itete	lt
 80088a0:	eba8 0603 	sublt.w	r6, r8, r3
 80088a4:	9b07      	ldrge	r3, [sp, #28]
 80088a6:	2300      	movlt	r3, #0
 80088a8:	4646      	movge	r6, r8
 80088aa:	e730      	b.n	800870e <_dtoa_r+0x71e>
 80088ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80088ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80088b0:	4646      	mov	r6, r8
 80088b2:	e735      	b.n	8008720 <_dtoa_r+0x730>
 80088b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088b6:	e75c      	b.n	8008772 <_dtoa_r+0x782>
 80088b8:	2300      	movs	r3, #0
 80088ba:	e788      	b.n	80087ce <_dtoa_r+0x7de>
 80088bc:	3fe00000 	.word	0x3fe00000
 80088c0:	40240000 	.word	0x40240000
 80088c4:	40140000 	.word	0x40140000
 80088c8:	9b02      	ldr	r3, [sp, #8]
 80088ca:	e780      	b.n	80087ce <_dtoa_r+0x7de>
 80088cc:	2300      	movs	r3, #0
 80088ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80088d0:	e782      	b.n	80087d8 <_dtoa_r+0x7e8>
 80088d2:	d099      	beq.n	8008808 <_dtoa_r+0x818>
 80088d4:	9a08      	ldr	r2, [sp, #32]
 80088d6:	331c      	adds	r3, #28
 80088d8:	441a      	add	r2, r3
 80088da:	4498      	add	r8, r3
 80088dc:	441e      	add	r6, r3
 80088de:	9208      	str	r2, [sp, #32]
 80088e0:	e792      	b.n	8008808 <_dtoa_r+0x818>
 80088e2:	4603      	mov	r3, r0
 80088e4:	e7f6      	b.n	80088d4 <_dtoa_r+0x8e4>
 80088e6:	9b07      	ldr	r3, [sp, #28]
 80088e8:	9704      	str	r7, [sp, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	dc20      	bgt.n	8008930 <_dtoa_r+0x940>
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	dd1e      	ble.n	8008934 <_dtoa_r+0x944>
 80088f6:	9b00      	ldr	r3, [sp, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f47f aec0 	bne.w	800867e <_dtoa_r+0x68e>
 80088fe:	4621      	mov	r1, r4
 8008900:	2205      	movs	r2, #5
 8008902:	4658      	mov	r0, fp
 8008904:	f000 fa9a 	bl	8008e3c <__multadd>
 8008908:	4601      	mov	r1, r0
 800890a:	4604      	mov	r4, r0
 800890c:	4648      	mov	r0, r9
 800890e:	f000 fcad 	bl	800926c <__mcmp>
 8008912:	2800      	cmp	r0, #0
 8008914:	f77f aeb3 	ble.w	800867e <_dtoa_r+0x68e>
 8008918:	4656      	mov	r6, sl
 800891a:	2331      	movs	r3, #49	@ 0x31
 800891c:	f806 3b01 	strb.w	r3, [r6], #1
 8008920:	9b04      	ldr	r3, [sp, #16]
 8008922:	3301      	adds	r3, #1
 8008924:	9304      	str	r3, [sp, #16]
 8008926:	e6ae      	b.n	8008686 <_dtoa_r+0x696>
 8008928:	9c07      	ldr	r4, [sp, #28]
 800892a:	9704      	str	r7, [sp, #16]
 800892c:	4625      	mov	r5, r4
 800892e:	e7f3      	b.n	8008918 <_dtoa_r+0x928>
 8008930:	9b07      	ldr	r3, [sp, #28]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 8104 	beq.w	8008b44 <_dtoa_r+0xb54>
 800893c:	2e00      	cmp	r6, #0
 800893e:	dd05      	ble.n	800894c <_dtoa_r+0x95c>
 8008940:	4629      	mov	r1, r5
 8008942:	4632      	mov	r2, r6
 8008944:	4658      	mov	r0, fp
 8008946:	f000 fc25 	bl	8009194 <__lshift>
 800894a:	4605      	mov	r5, r0
 800894c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800894e:	2b00      	cmp	r3, #0
 8008950:	d05a      	beq.n	8008a08 <_dtoa_r+0xa18>
 8008952:	6869      	ldr	r1, [r5, #4]
 8008954:	4658      	mov	r0, fp
 8008956:	f000 fa0f 	bl	8008d78 <_Balloc>
 800895a:	4606      	mov	r6, r0
 800895c:	b928      	cbnz	r0, 800896a <_dtoa_r+0x97a>
 800895e:	4b84      	ldr	r3, [pc, #528]	@ (8008b70 <_dtoa_r+0xb80>)
 8008960:	4602      	mov	r2, r0
 8008962:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008966:	f7ff bb5a 	b.w	800801e <_dtoa_r+0x2e>
 800896a:	692a      	ldr	r2, [r5, #16]
 800896c:	3202      	adds	r2, #2
 800896e:	0092      	lsls	r2, r2, #2
 8008970:	f105 010c 	add.w	r1, r5, #12
 8008974:	300c      	adds	r0, #12
 8008976:	f7ff faa4 	bl	8007ec2 <memcpy>
 800897a:	2201      	movs	r2, #1
 800897c:	4631      	mov	r1, r6
 800897e:	4658      	mov	r0, fp
 8008980:	f000 fc08 	bl	8009194 <__lshift>
 8008984:	f10a 0301 	add.w	r3, sl, #1
 8008988:	9307      	str	r3, [sp, #28]
 800898a:	9b00      	ldr	r3, [sp, #0]
 800898c:	4453      	add	r3, sl
 800898e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008990:	9b02      	ldr	r3, [sp, #8]
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	462f      	mov	r7, r5
 8008998:	930a      	str	r3, [sp, #40]	@ 0x28
 800899a:	4605      	mov	r5, r0
 800899c:	9b07      	ldr	r3, [sp, #28]
 800899e:	4621      	mov	r1, r4
 80089a0:	3b01      	subs	r3, #1
 80089a2:	4648      	mov	r0, r9
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	f7ff fa9a 	bl	8007ede <quorem>
 80089aa:	4639      	mov	r1, r7
 80089ac:	9002      	str	r0, [sp, #8]
 80089ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80089b2:	4648      	mov	r0, r9
 80089b4:	f000 fc5a 	bl	800926c <__mcmp>
 80089b8:	462a      	mov	r2, r5
 80089ba:	9008      	str	r0, [sp, #32]
 80089bc:	4621      	mov	r1, r4
 80089be:	4658      	mov	r0, fp
 80089c0:	f000 fc70 	bl	80092a4 <__mdiff>
 80089c4:	68c2      	ldr	r2, [r0, #12]
 80089c6:	4606      	mov	r6, r0
 80089c8:	bb02      	cbnz	r2, 8008a0c <_dtoa_r+0xa1c>
 80089ca:	4601      	mov	r1, r0
 80089cc:	4648      	mov	r0, r9
 80089ce:	f000 fc4d 	bl	800926c <__mcmp>
 80089d2:	4602      	mov	r2, r0
 80089d4:	4631      	mov	r1, r6
 80089d6:	4658      	mov	r0, fp
 80089d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80089da:	f000 fa0d 	bl	8008df8 <_Bfree>
 80089de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089e2:	9e07      	ldr	r6, [sp, #28]
 80089e4:	ea43 0102 	orr.w	r1, r3, r2
 80089e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ea:	4319      	orrs	r1, r3
 80089ec:	d110      	bne.n	8008a10 <_dtoa_r+0xa20>
 80089ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80089f2:	d029      	beq.n	8008a48 <_dtoa_r+0xa58>
 80089f4:	9b08      	ldr	r3, [sp, #32]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	dd02      	ble.n	8008a00 <_dtoa_r+0xa10>
 80089fa:	9b02      	ldr	r3, [sp, #8]
 80089fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008a00:	9b00      	ldr	r3, [sp, #0]
 8008a02:	f883 8000 	strb.w	r8, [r3]
 8008a06:	e63f      	b.n	8008688 <_dtoa_r+0x698>
 8008a08:	4628      	mov	r0, r5
 8008a0a:	e7bb      	b.n	8008984 <_dtoa_r+0x994>
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	e7e1      	b.n	80089d4 <_dtoa_r+0x9e4>
 8008a10:	9b08      	ldr	r3, [sp, #32]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	db04      	blt.n	8008a20 <_dtoa_r+0xa30>
 8008a16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a1c:	430b      	orrs	r3, r1
 8008a1e:	d120      	bne.n	8008a62 <_dtoa_r+0xa72>
 8008a20:	2a00      	cmp	r2, #0
 8008a22:	dded      	ble.n	8008a00 <_dtoa_r+0xa10>
 8008a24:	4649      	mov	r1, r9
 8008a26:	2201      	movs	r2, #1
 8008a28:	4658      	mov	r0, fp
 8008a2a:	f000 fbb3 	bl	8009194 <__lshift>
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4681      	mov	r9, r0
 8008a32:	f000 fc1b 	bl	800926c <__mcmp>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	dc03      	bgt.n	8008a42 <_dtoa_r+0xa52>
 8008a3a:	d1e1      	bne.n	8008a00 <_dtoa_r+0xa10>
 8008a3c:	f018 0f01 	tst.w	r8, #1
 8008a40:	d0de      	beq.n	8008a00 <_dtoa_r+0xa10>
 8008a42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a46:	d1d8      	bne.n	80089fa <_dtoa_r+0xa0a>
 8008a48:	9a00      	ldr	r2, [sp, #0]
 8008a4a:	2339      	movs	r3, #57	@ 0x39
 8008a4c:	7013      	strb	r3, [r2, #0]
 8008a4e:	4633      	mov	r3, r6
 8008a50:	461e      	mov	r6, r3
 8008a52:	3b01      	subs	r3, #1
 8008a54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008a58:	2a39      	cmp	r2, #57	@ 0x39
 8008a5a:	d052      	beq.n	8008b02 <_dtoa_r+0xb12>
 8008a5c:	3201      	adds	r2, #1
 8008a5e:	701a      	strb	r2, [r3, #0]
 8008a60:	e612      	b.n	8008688 <_dtoa_r+0x698>
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	dd07      	ble.n	8008a76 <_dtoa_r+0xa86>
 8008a66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a6a:	d0ed      	beq.n	8008a48 <_dtoa_r+0xa58>
 8008a6c:	9a00      	ldr	r2, [sp, #0]
 8008a6e:	f108 0301 	add.w	r3, r8, #1
 8008a72:	7013      	strb	r3, [r2, #0]
 8008a74:	e608      	b.n	8008688 <_dtoa_r+0x698>
 8008a76:	9b07      	ldr	r3, [sp, #28]
 8008a78:	9a07      	ldr	r2, [sp, #28]
 8008a7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d028      	beq.n	8008ad6 <_dtoa_r+0xae6>
 8008a84:	4649      	mov	r1, r9
 8008a86:	2300      	movs	r3, #0
 8008a88:	220a      	movs	r2, #10
 8008a8a:	4658      	mov	r0, fp
 8008a8c:	f000 f9d6 	bl	8008e3c <__multadd>
 8008a90:	42af      	cmp	r7, r5
 8008a92:	4681      	mov	r9, r0
 8008a94:	f04f 0300 	mov.w	r3, #0
 8008a98:	f04f 020a 	mov.w	r2, #10
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	4658      	mov	r0, fp
 8008aa0:	d107      	bne.n	8008ab2 <_dtoa_r+0xac2>
 8008aa2:	f000 f9cb 	bl	8008e3c <__multadd>
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	9b07      	ldr	r3, [sp, #28]
 8008aac:	3301      	adds	r3, #1
 8008aae:	9307      	str	r3, [sp, #28]
 8008ab0:	e774      	b.n	800899c <_dtoa_r+0x9ac>
 8008ab2:	f000 f9c3 	bl	8008e3c <__multadd>
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	4607      	mov	r7, r0
 8008aba:	2300      	movs	r3, #0
 8008abc:	220a      	movs	r2, #10
 8008abe:	4658      	mov	r0, fp
 8008ac0:	f000 f9bc 	bl	8008e3c <__multadd>
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	e7f0      	b.n	8008aaa <_dtoa_r+0xaba>
 8008ac8:	9b00      	ldr	r3, [sp, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	bfcc      	ite	gt
 8008ace:	461e      	movgt	r6, r3
 8008ad0:	2601      	movle	r6, #1
 8008ad2:	4456      	add	r6, sl
 8008ad4:	2700      	movs	r7, #0
 8008ad6:	4649      	mov	r1, r9
 8008ad8:	2201      	movs	r2, #1
 8008ada:	4658      	mov	r0, fp
 8008adc:	f000 fb5a 	bl	8009194 <__lshift>
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	4681      	mov	r9, r0
 8008ae4:	f000 fbc2 	bl	800926c <__mcmp>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	dcb0      	bgt.n	8008a4e <_dtoa_r+0xa5e>
 8008aec:	d102      	bne.n	8008af4 <_dtoa_r+0xb04>
 8008aee:	f018 0f01 	tst.w	r8, #1
 8008af2:	d1ac      	bne.n	8008a4e <_dtoa_r+0xa5e>
 8008af4:	4633      	mov	r3, r6
 8008af6:	461e      	mov	r6, r3
 8008af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008afc:	2a30      	cmp	r2, #48	@ 0x30
 8008afe:	d0fa      	beq.n	8008af6 <_dtoa_r+0xb06>
 8008b00:	e5c2      	b.n	8008688 <_dtoa_r+0x698>
 8008b02:	459a      	cmp	sl, r3
 8008b04:	d1a4      	bne.n	8008a50 <_dtoa_r+0xa60>
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	9304      	str	r3, [sp, #16]
 8008b0c:	2331      	movs	r3, #49	@ 0x31
 8008b0e:	f88a 3000 	strb.w	r3, [sl]
 8008b12:	e5b9      	b.n	8008688 <_dtoa_r+0x698>
 8008b14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008b74 <_dtoa_r+0xb84>
 8008b1a:	b11b      	cbz	r3, 8008b24 <_dtoa_r+0xb34>
 8008b1c:	f10a 0308 	add.w	r3, sl, #8
 8008b20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008b22:	6013      	str	r3, [r2, #0]
 8008b24:	4650      	mov	r0, sl
 8008b26:	b019      	add	sp, #100	@ 0x64
 8008b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	f77f ae37 	ble.w	80087a2 <_dtoa_r+0x7b2>
 8008b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b36:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b38:	2001      	movs	r0, #1
 8008b3a:	e655      	b.n	80087e8 <_dtoa_r+0x7f8>
 8008b3c:	9b00      	ldr	r3, [sp, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f77f aed6 	ble.w	80088f0 <_dtoa_r+0x900>
 8008b44:	4656      	mov	r6, sl
 8008b46:	4621      	mov	r1, r4
 8008b48:	4648      	mov	r0, r9
 8008b4a:	f7ff f9c8 	bl	8007ede <quorem>
 8008b4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b52:	f806 8b01 	strb.w	r8, [r6], #1
 8008b56:	9b00      	ldr	r3, [sp, #0]
 8008b58:	eba6 020a 	sub.w	r2, r6, sl
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	ddb3      	ble.n	8008ac8 <_dtoa_r+0xad8>
 8008b60:	4649      	mov	r1, r9
 8008b62:	2300      	movs	r3, #0
 8008b64:	220a      	movs	r2, #10
 8008b66:	4658      	mov	r0, fp
 8008b68:	f000 f968 	bl	8008e3c <__multadd>
 8008b6c:	4681      	mov	r9, r0
 8008b6e:	e7ea      	b.n	8008b46 <_dtoa_r+0xb56>
 8008b70:	0800a649 	.word	0x0800a649
 8008b74:	0800a5cd 	.word	0x0800a5cd

08008b78 <_free_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	2900      	cmp	r1, #0
 8008b7e:	d041      	beq.n	8008c04 <_free_r+0x8c>
 8008b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b84:	1f0c      	subs	r4, r1, #4
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	bfb8      	it	lt
 8008b8a:	18e4      	addlt	r4, r4, r3
 8008b8c:	f000 f8e8 	bl	8008d60 <__malloc_lock>
 8008b90:	4a1d      	ldr	r2, [pc, #116]	@ (8008c08 <_free_r+0x90>)
 8008b92:	6813      	ldr	r3, [r2, #0]
 8008b94:	b933      	cbnz	r3, 8008ba4 <_free_r+0x2c>
 8008b96:	6063      	str	r3, [r4, #4]
 8008b98:	6014      	str	r4, [r2, #0]
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ba0:	f000 b8e4 	b.w	8008d6c <__malloc_unlock>
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	d908      	bls.n	8008bba <_free_r+0x42>
 8008ba8:	6820      	ldr	r0, [r4, #0]
 8008baa:	1821      	adds	r1, r4, r0
 8008bac:	428b      	cmp	r3, r1
 8008bae:	bf01      	itttt	eq
 8008bb0:	6819      	ldreq	r1, [r3, #0]
 8008bb2:	685b      	ldreq	r3, [r3, #4]
 8008bb4:	1809      	addeq	r1, r1, r0
 8008bb6:	6021      	streq	r1, [r4, #0]
 8008bb8:	e7ed      	b.n	8008b96 <_free_r+0x1e>
 8008bba:	461a      	mov	r2, r3
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	b10b      	cbz	r3, 8008bc4 <_free_r+0x4c>
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	d9fa      	bls.n	8008bba <_free_r+0x42>
 8008bc4:	6811      	ldr	r1, [r2, #0]
 8008bc6:	1850      	adds	r0, r2, r1
 8008bc8:	42a0      	cmp	r0, r4
 8008bca:	d10b      	bne.n	8008be4 <_free_r+0x6c>
 8008bcc:	6820      	ldr	r0, [r4, #0]
 8008bce:	4401      	add	r1, r0
 8008bd0:	1850      	adds	r0, r2, r1
 8008bd2:	4283      	cmp	r3, r0
 8008bd4:	6011      	str	r1, [r2, #0]
 8008bd6:	d1e0      	bne.n	8008b9a <_free_r+0x22>
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	6053      	str	r3, [r2, #4]
 8008bde:	4408      	add	r0, r1
 8008be0:	6010      	str	r0, [r2, #0]
 8008be2:	e7da      	b.n	8008b9a <_free_r+0x22>
 8008be4:	d902      	bls.n	8008bec <_free_r+0x74>
 8008be6:	230c      	movs	r3, #12
 8008be8:	602b      	str	r3, [r5, #0]
 8008bea:	e7d6      	b.n	8008b9a <_free_r+0x22>
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	1821      	adds	r1, r4, r0
 8008bf0:	428b      	cmp	r3, r1
 8008bf2:	bf04      	itt	eq
 8008bf4:	6819      	ldreq	r1, [r3, #0]
 8008bf6:	685b      	ldreq	r3, [r3, #4]
 8008bf8:	6063      	str	r3, [r4, #4]
 8008bfa:	bf04      	itt	eq
 8008bfc:	1809      	addeq	r1, r1, r0
 8008bfe:	6021      	streq	r1, [r4, #0]
 8008c00:	6054      	str	r4, [r2, #4]
 8008c02:	e7ca      	b.n	8008b9a <_free_r+0x22>
 8008c04:	bd38      	pop	{r3, r4, r5, pc}
 8008c06:	bf00      	nop
 8008c08:	20000b08 	.word	0x20000b08

08008c0c <malloc>:
 8008c0c:	4b02      	ldr	r3, [pc, #8]	@ (8008c18 <malloc+0xc>)
 8008c0e:	4601      	mov	r1, r0
 8008c10:	6818      	ldr	r0, [r3, #0]
 8008c12:	f000 b825 	b.w	8008c60 <_malloc_r>
 8008c16:	bf00      	nop
 8008c18:	20000020 	.word	0x20000020

08008c1c <sbrk_aligned>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	4e0f      	ldr	r6, [pc, #60]	@ (8008c5c <sbrk_aligned+0x40>)
 8008c20:	460c      	mov	r4, r1
 8008c22:	6831      	ldr	r1, [r6, #0]
 8008c24:	4605      	mov	r5, r0
 8008c26:	b911      	cbnz	r1, 8008c2e <sbrk_aligned+0x12>
 8008c28:	f000 fe46 	bl	80098b8 <_sbrk_r>
 8008c2c:	6030      	str	r0, [r6, #0]
 8008c2e:	4621      	mov	r1, r4
 8008c30:	4628      	mov	r0, r5
 8008c32:	f000 fe41 	bl	80098b8 <_sbrk_r>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d103      	bne.n	8008c42 <sbrk_aligned+0x26>
 8008c3a:	f04f 34ff 	mov.w	r4, #4294967295
 8008c3e:	4620      	mov	r0, r4
 8008c40:	bd70      	pop	{r4, r5, r6, pc}
 8008c42:	1cc4      	adds	r4, r0, #3
 8008c44:	f024 0403 	bic.w	r4, r4, #3
 8008c48:	42a0      	cmp	r0, r4
 8008c4a:	d0f8      	beq.n	8008c3e <sbrk_aligned+0x22>
 8008c4c:	1a21      	subs	r1, r4, r0
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f000 fe32 	bl	80098b8 <_sbrk_r>
 8008c54:	3001      	adds	r0, #1
 8008c56:	d1f2      	bne.n	8008c3e <sbrk_aligned+0x22>
 8008c58:	e7ef      	b.n	8008c3a <sbrk_aligned+0x1e>
 8008c5a:	bf00      	nop
 8008c5c:	20000b04 	.word	0x20000b04

08008c60 <_malloc_r>:
 8008c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c64:	1ccd      	adds	r5, r1, #3
 8008c66:	f025 0503 	bic.w	r5, r5, #3
 8008c6a:	3508      	adds	r5, #8
 8008c6c:	2d0c      	cmp	r5, #12
 8008c6e:	bf38      	it	cc
 8008c70:	250c      	movcc	r5, #12
 8008c72:	2d00      	cmp	r5, #0
 8008c74:	4606      	mov	r6, r0
 8008c76:	db01      	blt.n	8008c7c <_malloc_r+0x1c>
 8008c78:	42a9      	cmp	r1, r5
 8008c7a:	d904      	bls.n	8008c86 <_malloc_r+0x26>
 8008c7c:	230c      	movs	r3, #12
 8008c7e:	6033      	str	r3, [r6, #0]
 8008c80:	2000      	movs	r0, #0
 8008c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d5c <_malloc_r+0xfc>
 8008c8a:	f000 f869 	bl	8008d60 <__malloc_lock>
 8008c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c92:	461c      	mov	r4, r3
 8008c94:	bb44      	cbnz	r4, 8008ce8 <_malloc_r+0x88>
 8008c96:	4629      	mov	r1, r5
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f7ff ffbf 	bl	8008c1c <sbrk_aligned>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	d158      	bne.n	8008d56 <_malloc_r+0xf6>
 8008ca4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ca8:	4627      	mov	r7, r4
 8008caa:	2f00      	cmp	r7, #0
 8008cac:	d143      	bne.n	8008d36 <_malloc_r+0xd6>
 8008cae:	2c00      	cmp	r4, #0
 8008cb0:	d04b      	beq.n	8008d4a <_malloc_r+0xea>
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	4639      	mov	r1, r7
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	eb04 0903 	add.w	r9, r4, r3
 8008cbc:	f000 fdfc 	bl	80098b8 <_sbrk_r>
 8008cc0:	4581      	cmp	r9, r0
 8008cc2:	d142      	bne.n	8008d4a <_malloc_r+0xea>
 8008cc4:	6821      	ldr	r1, [r4, #0]
 8008cc6:	1a6d      	subs	r5, r5, r1
 8008cc8:	4629      	mov	r1, r5
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7ff ffa6 	bl	8008c1c <sbrk_aligned>
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d03a      	beq.n	8008d4a <_malloc_r+0xea>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	442b      	add	r3, r5
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	f8d8 3000 	ldr.w	r3, [r8]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	bb62      	cbnz	r2, 8008d3c <_malloc_r+0xdc>
 8008ce2:	f8c8 7000 	str.w	r7, [r8]
 8008ce6:	e00f      	b.n	8008d08 <_malloc_r+0xa8>
 8008ce8:	6822      	ldr	r2, [r4, #0]
 8008cea:	1b52      	subs	r2, r2, r5
 8008cec:	d420      	bmi.n	8008d30 <_malloc_r+0xd0>
 8008cee:	2a0b      	cmp	r2, #11
 8008cf0:	d917      	bls.n	8008d22 <_malloc_r+0xc2>
 8008cf2:	1961      	adds	r1, r4, r5
 8008cf4:	42a3      	cmp	r3, r4
 8008cf6:	6025      	str	r5, [r4, #0]
 8008cf8:	bf18      	it	ne
 8008cfa:	6059      	strne	r1, [r3, #4]
 8008cfc:	6863      	ldr	r3, [r4, #4]
 8008cfe:	bf08      	it	eq
 8008d00:	f8c8 1000 	streq.w	r1, [r8]
 8008d04:	5162      	str	r2, [r4, r5]
 8008d06:	604b      	str	r3, [r1, #4]
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f000 f82f 	bl	8008d6c <__malloc_unlock>
 8008d0e:	f104 000b 	add.w	r0, r4, #11
 8008d12:	1d23      	adds	r3, r4, #4
 8008d14:	f020 0007 	bic.w	r0, r0, #7
 8008d18:	1ac2      	subs	r2, r0, r3
 8008d1a:	bf1c      	itt	ne
 8008d1c:	1a1b      	subne	r3, r3, r0
 8008d1e:	50a3      	strne	r3, [r4, r2]
 8008d20:	e7af      	b.n	8008c82 <_malloc_r+0x22>
 8008d22:	6862      	ldr	r2, [r4, #4]
 8008d24:	42a3      	cmp	r3, r4
 8008d26:	bf0c      	ite	eq
 8008d28:	f8c8 2000 	streq.w	r2, [r8]
 8008d2c:	605a      	strne	r2, [r3, #4]
 8008d2e:	e7eb      	b.n	8008d08 <_malloc_r+0xa8>
 8008d30:	4623      	mov	r3, r4
 8008d32:	6864      	ldr	r4, [r4, #4]
 8008d34:	e7ae      	b.n	8008c94 <_malloc_r+0x34>
 8008d36:	463c      	mov	r4, r7
 8008d38:	687f      	ldr	r7, [r7, #4]
 8008d3a:	e7b6      	b.n	8008caa <_malloc_r+0x4a>
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	42a3      	cmp	r3, r4
 8008d42:	d1fb      	bne.n	8008d3c <_malloc_r+0xdc>
 8008d44:	2300      	movs	r3, #0
 8008d46:	6053      	str	r3, [r2, #4]
 8008d48:	e7de      	b.n	8008d08 <_malloc_r+0xa8>
 8008d4a:	230c      	movs	r3, #12
 8008d4c:	6033      	str	r3, [r6, #0]
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f000 f80c 	bl	8008d6c <__malloc_unlock>
 8008d54:	e794      	b.n	8008c80 <_malloc_r+0x20>
 8008d56:	6005      	str	r5, [r0, #0]
 8008d58:	e7d6      	b.n	8008d08 <_malloc_r+0xa8>
 8008d5a:	bf00      	nop
 8008d5c:	20000b08 	.word	0x20000b08

08008d60 <__malloc_lock>:
 8008d60:	4801      	ldr	r0, [pc, #4]	@ (8008d68 <__malloc_lock+0x8>)
 8008d62:	f7ff b8ac 	b.w	8007ebe <__retarget_lock_acquire_recursive>
 8008d66:	bf00      	nop
 8008d68:	20000b00 	.word	0x20000b00

08008d6c <__malloc_unlock>:
 8008d6c:	4801      	ldr	r0, [pc, #4]	@ (8008d74 <__malloc_unlock+0x8>)
 8008d6e:	f7ff b8a7 	b.w	8007ec0 <__retarget_lock_release_recursive>
 8008d72:	bf00      	nop
 8008d74:	20000b00 	.word	0x20000b00

08008d78 <_Balloc>:
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	69c6      	ldr	r6, [r0, #28]
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	460d      	mov	r5, r1
 8008d80:	b976      	cbnz	r6, 8008da0 <_Balloc+0x28>
 8008d82:	2010      	movs	r0, #16
 8008d84:	f7ff ff42 	bl	8008c0c <malloc>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	61e0      	str	r0, [r4, #28]
 8008d8c:	b920      	cbnz	r0, 8008d98 <_Balloc+0x20>
 8008d8e:	4b18      	ldr	r3, [pc, #96]	@ (8008df0 <_Balloc+0x78>)
 8008d90:	4818      	ldr	r0, [pc, #96]	@ (8008df4 <_Balloc+0x7c>)
 8008d92:	216b      	movs	r1, #107	@ 0x6b
 8008d94:	f000 fda0 	bl	80098d8 <__assert_func>
 8008d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d9c:	6006      	str	r6, [r0, #0]
 8008d9e:	60c6      	str	r6, [r0, #12]
 8008da0:	69e6      	ldr	r6, [r4, #28]
 8008da2:	68f3      	ldr	r3, [r6, #12]
 8008da4:	b183      	cbz	r3, 8008dc8 <_Balloc+0x50>
 8008da6:	69e3      	ldr	r3, [r4, #28]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dae:	b9b8      	cbnz	r0, 8008de0 <_Balloc+0x68>
 8008db0:	2101      	movs	r1, #1
 8008db2:	fa01 f605 	lsl.w	r6, r1, r5
 8008db6:	1d72      	adds	r2, r6, #5
 8008db8:	0092      	lsls	r2, r2, #2
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 fdaa 	bl	8009914 <_calloc_r>
 8008dc0:	b160      	cbz	r0, 8008ddc <_Balloc+0x64>
 8008dc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dc6:	e00e      	b.n	8008de6 <_Balloc+0x6e>
 8008dc8:	2221      	movs	r2, #33	@ 0x21
 8008dca:	2104      	movs	r1, #4
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 fda1 	bl	8009914 <_calloc_r>
 8008dd2:	69e3      	ldr	r3, [r4, #28]
 8008dd4:	60f0      	str	r0, [r6, #12]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1e4      	bne.n	8008da6 <_Balloc+0x2e>
 8008ddc:	2000      	movs	r0, #0
 8008dde:	bd70      	pop	{r4, r5, r6, pc}
 8008de0:	6802      	ldr	r2, [r0, #0]
 8008de2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008de6:	2300      	movs	r3, #0
 8008de8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dec:	e7f7      	b.n	8008dde <_Balloc+0x66>
 8008dee:	bf00      	nop
 8008df0:	0800a5da 	.word	0x0800a5da
 8008df4:	0800a65a 	.word	0x0800a65a

08008df8 <_Bfree>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	69c6      	ldr	r6, [r0, #28]
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	b976      	cbnz	r6, 8008e20 <_Bfree+0x28>
 8008e02:	2010      	movs	r0, #16
 8008e04:	f7ff ff02 	bl	8008c0c <malloc>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	61e8      	str	r0, [r5, #28]
 8008e0c:	b920      	cbnz	r0, 8008e18 <_Bfree+0x20>
 8008e0e:	4b09      	ldr	r3, [pc, #36]	@ (8008e34 <_Bfree+0x3c>)
 8008e10:	4809      	ldr	r0, [pc, #36]	@ (8008e38 <_Bfree+0x40>)
 8008e12:	218f      	movs	r1, #143	@ 0x8f
 8008e14:	f000 fd60 	bl	80098d8 <__assert_func>
 8008e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e1c:	6006      	str	r6, [r0, #0]
 8008e1e:	60c6      	str	r6, [r0, #12]
 8008e20:	b13c      	cbz	r4, 8008e32 <_Bfree+0x3a>
 8008e22:	69eb      	ldr	r3, [r5, #28]
 8008e24:	6862      	ldr	r2, [r4, #4]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e2c:	6021      	str	r1, [r4, #0]
 8008e2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e32:	bd70      	pop	{r4, r5, r6, pc}
 8008e34:	0800a5da 	.word	0x0800a5da
 8008e38:	0800a65a 	.word	0x0800a65a

08008e3c <__multadd>:
 8008e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e40:	690d      	ldr	r5, [r1, #16]
 8008e42:	4607      	mov	r7, r0
 8008e44:	460c      	mov	r4, r1
 8008e46:	461e      	mov	r6, r3
 8008e48:	f101 0c14 	add.w	ip, r1, #20
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	f8dc 3000 	ldr.w	r3, [ip]
 8008e52:	b299      	uxth	r1, r3
 8008e54:	fb02 6101 	mla	r1, r2, r1, r6
 8008e58:	0c1e      	lsrs	r6, r3, #16
 8008e5a:	0c0b      	lsrs	r3, r1, #16
 8008e5c:	fb02 3306 	mla	r3, r2, r6, r3
 8008e60:	b289      	uxth	r1, r1
 8008e62:	3001      	adds	r0, #1
 8008e64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e68:	4285      	cmp	r5, r0
 8008e6a:	f84c 1b04 	str.w	r1, [ip], #4
 8008e6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e72:	dcec      	bgt.n	8008e4e <__multadd+0x12>
 8008e74:	b30e      	cbz	r6, 8008eba <__multadd+0x7e>
 8008e76:	68a3      	ldr	r3, [r4, #8]
 8008e78:	42ab      	cmp	r3, r5
 8008e7a:	dc19      	bgt.n	8008eb0 <__multadd+0x74>
 8008e7c:	6861      	ldr	r1, [r4, #4]
 8008e7e:	4638      	mov	r0, r7
 8008e80:	3101      	adds	r1, #1
 8008e82:	f7ff ff79 	bl	8008d78 <_Balloc>
 8008e86:	4680      	mov	r8, r0
 8008e88:	b928      	cbnz	r0, 8008e96 <__multadd+0x5a>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8008ec0 <__multadd+0x84>)
 8008e8e:	480d      	ldr	r0, [pc, #52]	@ (8008ec4 <__multadd+0x88>)
 8008e90:	21ba      	movs	r1, #186	@ 0xba
 8008e92:	f000 fd21 	bl	80098d8 <__assert_func>
 8008e96:	6922      	ldr	r2, [r4, #16]
 8008e98:	3202      	adds	r2, #2
 8008e9a:	f104 010c 	add.w	r1, r4, #12
 8008e9e:	0092      	lsls	r2, r2, #2
 8008ea0:	300c      	adds	r0, #12
 8008ea2:	f7ff f80e 	bl	8007ec2 <memcpy>
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4638      	mov	r0, r7
 8008eaa:	f7ff ffa5 	bl	8008df8 <_Bfree>
 8008eae:	4644      	mov	r4, r8
 8008eb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008eb4:	3501      	adds	r5, #1
 8008eb6:	615e      	str	r6, [r3, #20]
 8008eb8:	6125      	str	r5, [r4, #16]
 8008eba:	4620      	mov	r0, r4
 8008ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec0:	0800a649 	.word	0x0800a649
 8008ec4:	0800a65a 	.word	0x0800a65a

08008ec8 <__hi0bits>:
 8008ec8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ecc:	4603      	mov	r3, r0
 8008ece:	bf36      	itet	cc
 8008ed0:	0403      	lslcc	r3, r0, #16
 8008ed2:	2000      	movcs	r0, #0
 8008ed4:	2010      	movcc	r0, #16
 8008ed6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008eda:	bf3c      	itt	cc
 8008edc:	021b      	lslcc	r3, r3, #8
 8008ede:	3008      	addcc	r0, #8
 8008ee0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ee4:	bf3c      	itt	cc
 8008ee6:	011b      	lslcc	r3, r3, #4
 8008ee8:	3004      	addcc	r0, #4
 8008eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eee:	bf3c      	itt	cc
 8008ef0:	009b      	lslcc	r3, r3, #2
 8008ef2:	3002      	addcc	r0, #2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	db05      	blt.n	8008f04 <__hi0bits+0x3c>
 8008ef8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008efc:	f100 0001 	add.w	r0, r0, #1
 8008f00:	bf08      	it	eq
 8008f02:	2020      	moveq	r0, #32
 8008f04:	4770      	bx	lr

08008f06 <__lo0bits>:
 8008f06:	6803      	ldr	r3, [r0, #0]
 8008f08:	4602      	mov	r2, r0
 8008f0a:	f013 0007 	ands.w	r0, r3, #7
 8008f0e:	d00b      	beq.n	8008f28 <__lo0bits+0x22>
 8008f10:	07d9      	lsls	r1, r3, #31
 8008f12:	d421      	bmi.n	8008f58 <__lo0bits+0x52>
 8008f14:	0798      	lsls	r0, r3, #30
 8008f16:	bf49      	itett	mi
 8008f18:	085b      	lsrmi	r3, r3, #1
 8008f1a:	089b      	lsrpl	r3, r3, #2
 8008f1c:	2001      	movmi	r0, #1
 8008f1e:	6013      	strmi	r3, [r2, #0]
 8008f20:	bf5c      	itt	pl
 8008f22:	6013      	strpl	r3, [r2, #0]
 8008f24:	2002      	movpl	r0, #2
 8008f26:	4770      	bx	lr
 8008f28:	b299      	uxth	r1, r3
 8008f2a:	b909      	cbnz	r1, 8008f30 <__lo0bits+0x2a>
 8008f2c:	0c1b      	lsrs	r3, r3, #16
 8008f2e:	2010      	movs	r0, #16
 8008f30:	b2d9      	uxtb	r1, r3
 8008f32:	b909      	cbnz	r1, 8008f38 <__lo0bits+0x32>
 8008f34:	3008      	adds	r0, #8
 8008f36:	0a1b      	lsrs	r3, r3, #8
 8008f38:	0719      	lsls	r1, r3, #28
 8008f3a:	bf04      	itt	eq
 8008f3c:	091b      	lsreq	r3, r3, #4
 8008f3e:	3004      	addeq	r0, #4
 8008f40:	0799      	lsls	r1, r3, #30
 8008f42:	bf04      	itt	eq
 8008f44:	089b      	lsreq	r3, r3, #2
 8008f46:	3002      	addeq	r0, #2
 8008f48:	07d9      	lsls	r1, r3, #31
 8008f4a:	d403      	bmi.n	8008f54 <__lo0bits+0x4e>
 8008f4c:	085b      	lsrs	r3, r3, #1
 8008f4e:	f100 0001 	add.w	r0, r0, #1
 8008f52:	d003      	beq.n	8008f5c <__lo0bits+0x56>
 8008f54:	6013      	str	r3, [r2, #0]
 8008f56:	4770      	bx	lr
 8008f58:	2000      	movs	r0, #0
 8008f5a:	4770      	bx	lr
 8008f5c:	2020      	movs	r0, #32
 8008f5e:	4770      	bx	lr

08008f60 <__i2b>:
 8008f60:	b510      	push	{r4, lr}
 8008f62:	460c      	mov	r4, r1
 8008f64:	2101      	movs	r1, #1
 8008f66:	f7ff ff07 	bl	8008d78 <_Balloc>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	b928      	cbnz	r0, 8008f7a <__i2b+0x1a>
 8008f6e:	4b05      	ldr	r3, [pc, #20]	@ (8008f84 <__i2b+0x24>)
 8008f70:	4805      	ldr	r0, [pc, #20]	@ (8008f88 <__i2b+0x28>)
 8008f72:	f240 1145 	movw	r1, #325	@ 0x145
 8008f76:	f000 fcaf 	bl	80098d8 <__assert_func>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	6144      	str	r4, [r0, #20]
 8008f7e:	6103      	str	r3, [r0, #16]
 8008f80:	bd10      	pop	{r4, pc}
 8008f82:	bf00      	nop
 8008f84:	0800a649 	.word	0x0800a649
 8008f88:	0800a65a 	.word	0x0800a65a

08008f8c <__multiply>:
 8008f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	4614      	mov	r4, r2
 8008f92:	690a      	ldr	r2, [r1, #16]
 8008f94:	6923      	ldr	r3, [r4, #16]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	bfa8      	it	ge
 8008f9a:	4623      	movge	r3, r4
 8008f9c:	460f      	mov	r7, r1
 8008f9e:	bfa4      	itt	ge
 8008fa0:	460c      	movge	r4, r1
 8008fa2:	461f      	movge	r7, r3
 8008fa4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008fa8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008fac:	68a3      	ldr	r3, [r4, #8]
 8008fae:	6861      	ldr	r1, [r4, #4]
 8008fb0:	eb0a 0609 	add.w	r6, sl, r9
 8008fb4:	42b3      	cmp	r3, r6
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	bfb8      	it	lt
 8008fba:	3101      	addlt	r1, #1
 8008fbc:	f7ff fedc 	bl	8008d78 <_Balloc>
 8008fc0:	b930      	cbnz	r0, 8008fd0 <__multiply+0x44>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	4b44      	ldr	r3, [pc, #272]	@ (80090d8 <__multiply+0x14c>)
 8008fc6:	4845      	ldr	r0, [pc, #276]	@ (80090dc <__multiply+0x150>)
 8008fc8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008fcc:	f000 fc84 	bl	80098d8 <__assert_func>
 8008fd0:	f100 0514 	add.w	r5, r0, #20
 8008fd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008fd8:	462b      	mov	r3, r5
 8008fda:	2200      	movs	r2, #0
 8008fdc:	4543      	cmp	r3, r8
 8008fde:	d321      	bcc.n	8009024 <__multiply+0x98>
 8008fe0:	f107 0114 	add.w	r1, r7, #20
 8008fe4:	f104 0214 	add.w	r2, r4, #20
 8008fe8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008fec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ff0:	9302      	str	r3, [sp, #8]
 8008ff2:	1b13      	subs	r3, r2, r4
 8008ff4:	3b15      	subs	r3, #21
 8008ff6:	f023 0303 	bic.w	r3, r3, #3
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	f104 0715 	add.w	r7, r4, #21
 8009000:	42ba      	cmp	r2, r7
 8009002:	bf38      	it	cc
 8009004:	2304      	movcc	r3, #4
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	9b02      	ldr	r3, [sp, #8]
 800900a:	9103      	str	r1, [sp, #12]
 800900c:	428b      	cmp	r3, r1
 800900e:	d80c      	bhi.n	800902a <__multiply+0x9e>
 8009010:	2e00      	cmp	r6, #0
 8009012:	dd03      	ble.n	800901c <__multiply+0x90>
 8009014:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009018:	2b00      	cmp	r3, #0
 800901a:	d05b      	beq.n	80090d4 <__multiply+0x148>
 800901c:	6106      	str	r6, [r0, #16]
 800901e:	b005      	add	sp, #20
 8009020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009024:	f843 2b04 	str.w	r2, [r3], #4
 8009028:	e7d8      	b.n	8008fdc <__multiply+0x50>
 800902a:	f8b1 a000 	ldrh.w	sl, [r1]
 800902e:	f1ba 0f00 	cmp.w	sl, #0
 8009032:	d024      	beq.n	800907e <__multiply+0xf2>
 8009034:	f104 0e14 	add.w	lr, r4, #20
 8009038:	46a9      	mov	r9, r5
 800903a:	f04f 0c00 	mov.w	ip, #0
 800903e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009042:	f8d9 3000 	ldr.w	r3, [r9]
 8009046:	fa1f fb87 	uxth.w	fp, r7
 800904a:	b29b      	uxth	r3, r3
 800904c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009050:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009054:	f8d9 7000 	ldr.w	r7, [r9]
 8009058:	4463      	add	r3, ip
 800905a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800905e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009062:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009066:	b29b      	uxth	r3, r3
 8009068:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800906c:	4572      	cmp	r2, lr
 800906e:	f849 3b04 	str.w	r3, [r9], #4
 8009072:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009076:	d8e2      	bhi.n	800903e <__multiply+0xb2>
 8009078:	9b01      	ldr	r3, [sp, #4]
 800907a:	f845 c003 	str.w	ip, [r5, r3]
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009084:	3104      	adds	r1, #4
 8009086:	f1b9 0f00 	cmp.w	r9, #0
 800908a:	d021      	beq.n	80090d0 <__multiply+0x144>
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	f104 0c14 	add.w	ip, r4, #20
 8009092:	46ae      	mov	lr, r5
 8009094:	f04f 0a00 	mov.w	sl, #0
 8009098:	f8bc b000 	ldrh.w	fp, [ip]
 800909c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80090a0:	fb09 770b 	mla	r7, r9, fp, r7
 80090a4:	4457      	add	r7, sl
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80090ac:	f84e 3b04 	str.w	r3, [lr], #4
 80090b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80090b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090b8:	f8be 3000 	ldrh.w	r3, [lr]
 80090bc:	fb09 330a 	mla	r3, r9, sl, r3
 80090c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80090c4:	4562      	cmp	r2, ip
 80090c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090ca:	d8e5      	bhi.n	8009098 <__multiply+0x10c>
 80090cc:	9f01      	ldr	r7, [sp, #4]
 80090ce:	51eb      	str	r3, [r5, r7]
 80090d0:	3504      	adds	r5, #4
 80090d2:	e799      	b.n	8009008 <__multiply+0x7c>
 80090d4:	3e01      	subs	r6, #1
 80090d6:	e79b      	b.n	8009010 <__multiply+0x84>
 80090d8:	0800a649 	.word	0x0800a649
 80090dc:	0800a65a 	.word	0x0800a65a

080090e0 <__pow5mult>:
 80090e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e4:	4615      	mov	r5, r2
 80090e6:	f012 0203 	ands.w	r2, r2, #3
 80090ea:	4607      	mov	r7, r0
 80090ec:	460e      	mov	r6, r1
 80090ee:	d007      	beq.n	8009100 <__pow5mult+0x20>
 80090f0:	4c25      	ldr	r4, [pc, #148]	@ (8009188 <__pow5mult+0xa8>)
 80090f2:	3a01      	subs	r2, #1
 80090f4:	2300      	movs	r3, #0
 80090f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090fa:	f7ff fe9f 	bl	8008e3c <__multadd>
 80090fe:	4606      	mov	r6, r0
 8009100:	10ad      	asrs	r5, r5, #2
 8009102:	d03d      	beq.n	8009180 <__pow5mult+0xa0>
 8009104:	69fc      	ldr	r4, [r7, #28]
 8009106:	b97c      	cbnz	r4, 8009128 <__pow5mult+0x48>
 8009108:	2010      	movs	r0, #16
 800910a:	f7ff fd7f 	bl	8008c0c <malloc>
 800910e:	4602      	mov	r2, r0
 8009110:	61f8      	str	r0, [r7, #28]
 8009112:	b928      	cbnz	r0, 8009120 <__pow5mult+0x40>
 8009114:	4b1d      	ldr	r3, [pc, #116]	@ (800918c <__pow5mult+0xac>)
 8009116:	481e      	ldr	r0, [pc, #120]	@ (8009190 <__pow5mult+0xb0>)
 8009118:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800911c:	f000 fbdc 	bl	80098d8 <__assert_func>
 8009120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009124:	6004      	str	r4, [r0, #0]
 8009126:	60c4      	str	r4, [r0, #12]
 8009128:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800912c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009130:	b94c      	cbnz	r4, 8009146 <__pow5mult+0x66>
 8009132:	f240 2171 	movw	r1, #625	@ 0x271
 8009136:	4638      	mov	r0, r7
 8009138:	f7ff ff12 	bl	8008f60 <__i2b>
 800913c:	2300      	movs	r3, #0
 800913e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009142:	4604      	mov	r4, r0
 8009144:	6003      	str	r3, [r0, #0]
 8009146:	f04f 0900 	mov.w	r9, #0
 800914a:	07eb      	lsls	r3, r5, #31
 800914c:	d50a      	bpl.n	8009164 <__pow5mult+0x84>
 800914e:	4631      	mov	r1, r6
 8009150:	4622      	mov	r2, r4
 8009152:	4638      	mov	r0, r7
 8009154:	f7ff ff1a 	bl	8008f8c <__multiply>
 8009158:	4631      	mov	r1, r6
 800915a:	4680      	mov	r8, r0
 800915c:	4638      	mov	r0, r7
 800915e:	f7ff fe4b 	bl	8008df8 <_Bfree>
 8009162:	4646      	mov	r6, r8
 8009164:	106d      	asrs	r5, r5, #1
 8009166:	d00b      	beq.n	8009180 <__pow5mult+0xa0>
 8009168:	6820      	ldr	r0, [r4, #0]
 800916a:	b938      	cbnz	r0, 800917c <__pow5mult+0x9c>
 800916c:	4622      	mov	r2, r4
 800916e:	4621      	mov	r1, r4
 8009170:	4638      	mov	r0, r7
 8009172:	f7ff ff0b 	bl	8008f8c <__multiply>
 8009176:	6020      	str	r0, [r4, #0]
 8009178:	f8c0 9000 	str.w	r9, [r0]
 800917c:	4604      	mov	r4, r0
 800917e:	e7e4      	b.n	800914a <__pow5mult+0x6a>
 8009180:	4630      	mov	r0, r6
 8009182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009186:	bf00      	nop
 8009188:	0800a6b4 	.word	0x0800a6b4
 800918c:	0800a5da 	.word	0x0800a5da
 8009190:	0800a65a 	.word	0x0800a65a

08009194 <__lshift>:
 8009194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009198:	460c      	mov	r4, r1
 800919a:	6849      	ldr	r1, [r1, #4]
 800919c:	6923      	ldr	r3, [r4, #16]
 800919e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091a2:	68a3      	ldr	r3, [r4, #8]
 80091a4:	4607      	mov	r7, r0
 80091a6:	4691      	mov	r9, r2
 80091a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091ac:	f108 0601 	add.w	r6, r8, #1
 80091b0:	42b3      	cmp	r3, r6
 80091b2:	db0b      	blt.n	80091cc <__lshift+0x38>
 80091b4:	4638      	mov	r0, r7
 80091b6:	f7ff fddf 	bl	8008d78 <_Balloc>
 80091ba:	4605      	mov	r5, r0
 80091bc:	b948      	cbnz	r0, 80091d2 <__lshift+0x3e>
 80091be:	4602      	mov	r2, r0
 80091c0:	4b28      	ldr	r3, [pc, #160]	@ (8009264 <__lshift+0xd0>)
 80091c2:	4829      	ldr	r0, [pc, #164]	@ (8009268 <__lshift+0xd4>)
 80091c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80091c8:	f000 fb86 	bl	80098d8 <__assert_func>
 80091cc:	3101      	adds	r1, #1
 80091ce:	005b      	lsls	r3, r3, #1
 80091d0:	e7ee      	b.n	80091b0 <__lshift+0x1c>
 80091d2:	2300      	movs	r3, #0
 80091d4:	f100 0114 	add.w	r1, r0, #20
 80091d8:	f100 0210 	add.w	r2, r0, #16
 80091dc:	4618      	mov	r0, r3
 80091de:	4553      	cmp	r3, sl
 80091e0:	db33      	blt.n	800924a <__lshift+0xb6>
 80091e2:	6920      	ldr	r0, [r4, #16]
 80091e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091e8:	f104 0314 	add.w	r3, r4, #20
 80091ec:	f019 091f 	ands.w	r9, r9, #31
 80091f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091f8:	d02b      	beq.n	8009252 <__lshift+0xbe>
 80091fa:	f1c9 0e20 	rsb	lr, r9, #32
 80091fe:	468a      	mov	sl, r1
 8009200:	2200      	movs	r2, #0
 8009202:	6818      	ldr	r0, [r3, #0]
 8009204:	fa00 f009 	lsl.w	r0, r0, r9
 8009208:	4310      	orrs	r0, r2
 800920a:	f84a 0b04 	str.w	r0, [sl], #4
 800920e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009212:	459c      	cmp	ip, r3
 8009214:	fa22 f20e 	lsr.w	r2, r2, lr
 8009218:	d8f3      	bhi.n	8009202 <__lshift+0x6e>
 800921a:	ebac 0304 	sub.w	r3, ip, r4
 800921e:	3b15      	subs	r3, #21
 8009220:	f023 0303 	bic.w	r3, r3, #3
 8009224:	3304      	adds	r3, #4
 8009226:	f104 0015 	add.w	r0, r4, #21
 800922a:	4584      	cmp	ip, r0
 800922c:	bf38      	it	cc
 800922e:	2304      	movcc	r3, #4
 8009230:	50ca      	str	r2, [r1, r3]
 8009232:	b10a      	cbz	r2, 8009238 <__lshift+0xa4>
 8009234:	f108 0602 	add.w	r6, r8, #2
 8009238:	3e01      	subs	r6, #1
 800923a:	4638      	mov	r0, r7
 800923c:	612e      	str	r6, [r5, #16]
 800923e:	4621      	mov	r1, r4
 8009240:	f7ff fdda 	bl	8008df8 <_Bfree>
 8009244:	4628      	mov	r0, r5
 8009246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800924a:	f842 0f04 	str.w	r0, [r2, #4]!
 800924e:	3301      	adds	r3, #1
 8009250:	e7c5      	b.n	80091de <__lshift+0x4a>
 8009252:	3904      	subs	r1, #4
 8009254:	f853 2b04 	ldr.w	r2, [r3], #4
 8009258:	f841 2f04 	str.w	r2, [r1, #4]!
 800925c:	459c      	cmp	ip, r3
 800925e:	d8f9      	bhi.n	8009254 <__lshift+0xc0>
 8009260:	e7ea      	b.n	8009238 <__lshift+0xa4>
 8009262:	bf00      	nop
 8009264:	0800a649 	.word	0x0800a649
 8009268:	0800a65a 	.word	0x0800a65a

0800926c <__mcmp>:
 800926c:	690a      	ldr	r2, [r1, #16]
 800926e:	4603      	mov	r3, r0
 8009270:	6900      	ldr	r0, [r0, #16]
 8009272:	1a80      	subs	r0, r0, r2
 8009274:	b530      	push	{r4, r5, lr}
 8009276:	d10e      	bne.n	8009296 <__mcmp+0x2a>
 8009278:	3314      	adds	r3, #20
 800927a:	3114      	adds	r1, #20
 800927c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009280:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009284:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009288:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800928c:	4295      	cmp	r5, r2
 800928e:	d003      	beq.n	8009298 <__mcmp+0x2c>
 8009290:	d205      	bcs.n	800929e <__mcmp+0x32>
 8009292:	f04f 30ff 	mov.w	r0, #4294967295
 8009296:	bd30      	pop	{r4, r5, pc}
 8009298:	42a3      	cmp	r3, r4
 800929a:	d3f3      	bcc.n	8009284 <__mcmp+0x18>
 800929c:	e7fb      	b.n	8009296 <__mcmp+0x2a>
 800929e:	2001      	movs	r0, #1
 80092a0:	e7f9      	b.n	8009296 <__mcmp+0x2a>
	...

080092a4 <__mdiff>:
 80092a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a8:	4689      	mov	r9, r1
 80092aa:	4606      	mov	r6, r0
 80092ac:	4611      	mov	r1, r2
 80092ae:	4648      	mov	r0, r9
 80092b0:	4614      	mov	r4, r2
 80092b2:	f7ff ffdb 	bl	800926c <__mcmp>
 80092b6:	1e05      	subs	r5, r0, #0
 80092b8:	d112      	bne.n	80092e0 <__mdiff+0x3c>
 80092ba:	4629      	mov	r1, r5
 80092bc:	4630      	mov	r0, r6
 80092be:	f7ff fd5b 	bl	8008d78 <_Balloc>
 80092c2:	4602      	mov	r2, r0
 80092c4:	b928      	cbnz	r0, 80092d2 <__mdiff+0x2e>
 80092c6:	4b3f      	ldr	r3, [pc, #252]	@ (80093c4 <__mdiff+0x120>)
 80092c8:	f240 2137 	movw	r1, #567	@ 0x237
 80092cc:	483e      	ldr	r0, [pc, #248]	@ (80093c8 <__mdiff+0x124>)
 80092ce:	f000 fb03 	bl	80098d8 <__assert_func>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092d8:	4610      	mov	r0, r2
 80092da:	b003      	add	sp, #12
 80092dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e0:	bfbc      	itt	lt
 80092e2:	464b      	movlt	r3, r9
 80092e4:	46a1      	movlt	r9, r4
 80092e6:	4630      	mov	r0, r6
 80092e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80092ec:	bfba      	itte	lt
 80092ee:	461c      	movlt	r4, r3
 80092f0:	2501      	movlt	r5, #1
 80092f2:	2500      	movge	r5, #0
 80092f4:	f7ff fd40 	bl	8008d78 <_Balloc>
 80092f8:	4602      	mov	r2, r0
 80092fa:	b918      	cbnz	r0, 8009304 <__mdiff+0x60>
 80092fc:	4b31      	ldr	r3, [pc, #196]	@ (80093c4 <__mdiff+0x120>)
 80092fe:	f240 2145 	movw	r1, #581	@ 0x245
 8009302:	e7e3      	b.n	80092cc <__mdiff+0x28>
 8009304:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009308:	6926      	ldr	r6, [r4, #16]
 800930a:	60c5      	str	r5, [r0, #12]
 800930c:	f109 0310 	add.w	r3, r9, #16
 8009310:	f109 0514 	add.w	r5, r9, #20
 8009314:	f104 0e14 	add.w	lr, r4, #20
 8009318:	f100 0b14 	add.w	fp, r0, #20
 800931c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009320:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	46d9      	mov	r9, fp
 8009328:	f04f 0c00 	mov.w	ip, #0
 800932c:	9b01      	ldr	r3, [sp, #4]
 800932e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009332:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	fa1f f38a 	uxth.w	r3, sl
 800933c:	4619      	mov	r1, r3
 800933e:	b283      	uxth	r3, r0
 8009340:	1acb      	subs	r3, r1, r3
 8009342:	0c00      	lsrs	r0, r0, #16
 8009344:	4463      	add	r3, ip
 8009346:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800934a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800934e:	b29b      	uxth	r3, r3
 8009350:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009354:	4576      	cmp	r6, lr
 8009356:	f849 3b04 	str.w	r3, [r9], #4
 800935a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800935e:	d8e5      	bhi.n	800932c <__mdiff+0x88>
 8009360:	1b33      	subs	r3, r6, r4
 8009362:	3b15      	subs	r3, #21
 8009364:	f023 0303 	bic.w	r3, r3, #3
 8009368:	3415      	adds	r4, #21
 800936a:	3304      	adds	r3, #4
 800936c:	42a6      	cmp	r6, r4
 800936e:	bf38      	it	cc
 8009370:	2304      	movcc	r3, #4
 8009372:	441d      	add	r5, r3
 8009374:	445b      	add	r3, fp
 8009376:	461e      	mov	r6, r3
 8009378:	462c      	mov	r4, r5
 800937a:	4544      	cmp	r4, r8
 800937c:	d30e      	bcc.n	800939c <__mdiff+0xf8>
 800937e:	f108 0103 	add.w	r1, r8, #3
 8009382:	1b49      	subs	r1, r1, r5
 8009384:	f021 0103 	bic.w	r1, r1, #3
 8009388:	3d03      	subs	r5, #3
 800938a:	45a8      	cmp	r8, r5
 800938c:	bf38      	it	cc
 800938e:	2100      	movcc	r1, #0
 8009390:	440b      	add	r3, r1
 8009392:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009396:	b191      	cbz	r1, 80093be <__mdiff+0x11a>
 8009398:	6117      	str	r7, [r2, #16]
 800939a:	e79d      	b.n	80092d8 <__mdiff+0x34>
 800939c:	f854 1b04 	ldr.w	r1, [r4], #4
 80093a0:	46e6      	mov	lr, ip
 80093a2:	0c08      	lsrs	r0, r1, #16
 80093a4:	fa1c fc81 	uxtah	ip, ip, r1
 80093a8:	4471      	add	r1, lr
 80093aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80093ae:	b289      	uxth	r1, r1
 80093b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80093b4:	f846 1b04 	str.w	r1, [r6], #4
 80093b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093bc:	e7dd      	b.n	800937a <__mdiff+0xd6>
 80093be:	3f01      	subs	r7, #1
 80093c0:	e7e7      	b.n	8009392 <__mdiff+0xee>
 80093c2:	bf00      	nop
 80093c4:	0800a649 	.word	0x0800a649
 80093c8:	0800a65a 	.word	0x0800a65a

080093cc <__d2b>:
 80093cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093d0:	460f      	mov	r7, r1
 80093d2:	2101      	movs	r1, #1
 80093d4:	ec59 8b10 	vmov	r8, r9, d0
 80093d8:	4616      	mov	r6, r2
 80093da:	f7ff fccd 	bl	8008d78 <_Balloc>
 80093de:	4604      	mov	r4, r0
 80093e0:	b930      	cbnz	r0, 80093f0 <__d2b+0x24>
 80093e2:	4602      	mov	r2, r0
 80093e4:	4b23      	ldr	r3, [pc, #140]	@ (8009474 <__d2b+0xa8>)
 80093e6:	4824      	ldr	r0, [pc, #144]	@ (8009478 <__d2b+0xac>)
 80093e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80093ec:	f000 fa74 	bl	80098d8 <__assert_func>
 80093f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093f8:	b10d      	cbz	r5, 80093fe <__d2b+0x32>
 80093fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093fe:	9301      	str	r3, [sp, #4]
 8009400:	f1b8 0300 	subs.w	r3, r8, #0
 8009404:	d023      	beq.n	800944e <__d2b+0x82>
 8009406:	4668      	mov	r0, sp
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	f7ff fd7c 	bl	8008f06 <__lo0bits>
 800940e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009412:	b1d0      	cbz	r0, 800944a <__d2b+0x7e>
 8009414:	f1c0 0320 	rsb	r3, r0, #32
 8009418:	fa02 f303 	lsl.w	r3, r2, r3
 800941c:	430b      	orrs	r3, r1
 800941e:	40c2      	lsrs	r2, r0
 8009420:	6163      	str	r3, [r4, #20]
 8009422:	9201      	str	r2, [sp, #4]
 8009424:	9b01      	ldr	r3, [sp, #4]
 8009426:	61a3      	str	r3, [r4, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	bf0c      	ite	eq
 800942c:	2201      	moveq	r2, #1
 800942e:	2202      	movne	r2, #2
 8009430:	6122      	str	r2, [r4, #16]
 8009432:	b1a5      	cbz	r5, 800945e <__d2b+0x92>
 8009434:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009438:	4405      	add	r5, r0
 800943a:	603d      	str	r5, [r7, #0]
 800943c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009440:	6030      	str	r0, [r6, #0]
 8009442:	4620      	mov	r0, r4
 8009444:	b003      	add	sp, #12
 8009446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800944a:	6161      	str	r1, [r4, #20]
 800944c:	e7ea      	b.n	8009424 <__d2b+0x58>
 800944e:	a801      	add	r0, sp, #4
 8009450:	f7ff fd59 	bl	8008f06 <__lo0bits>
 8009454:	9b01      	ldr	r3, [sp, #4]
 8009456:	6163      	str	r3, [r4, #20]
 8009458:	3020      	adds	r0, #32
 800945a:	2201      	movs	r2, #1
 800945c:	e7e8      	b.n	8009430 <__d2b+0x64>
 800945e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009462:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009466:	6038      	str	r0, [r7, #0]
 8009468:	6918      	ldr	r0, [r3, #16]
 800946a:	f7ff fd2d 	bl	8008ec8 <__hi0bits>
 800946e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009472:	e7e5      	b.n	8009440 <__d2b+0x74>
 8009474:	0800a649 	.word	0x0800a649
 8009478:	0800a65a 	.word	0x0800a65a

0800947c <__ssputs_r>:
 800947c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009480:	688e      	ldr	r6, [r1, #8]
 8009482:	461f      	mov	r7, r3
 8009484:	42be      	cmp	r6, r7
 8009486:	680b      	ldr	r3, [r1, #0]
 8009488:	4682      	mov	sl, r0
 800948a:	460c      	mov	r4, r1
 800948c:	4690      	mov	r8, r2
 800948e:	d82d      	bhi.n	80094ec <__ssputs_r+0x70>
 8009490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009494:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009498:	d026      	beq.n	80094e8 <__ssputs_r+0x6c>
 800949a:	6965      	ldr	r5, [r4, #20]
 800949c:	6909      	ldr	r1, [r1, #16]
 800949e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094a2:	eba3 0901 	sub.w	r9, r3, r1
 80094a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094aa:	1c7b      	adds	r3, r7, #1
 80094ac:	444b      	add	r3, r9
 80094ae:	106d      	asrs	r5, r5, #1
 80094b0:	429d      	cmp	r5, r3
 80094b2:	bf38      	it	cc
 80094b4:	461d      	movcc	r5, r3
 80094b6:	0553      	lsls	r3, r2, #21
 80094b8:	d527      	bpl.n	800950a <__ssputs_r+0x8e>
 80094ba:	4629      	mov	r1, r5
 80094bc:	f7ff fbd0 	bl	8008c60 <_malloc_r>
 80094c0:	4606      	mov	r6, r0
 80094c2:	b360      	cbz	r0, 800951e <__ssputs_r+0xa2>
 80094c4:	6921      	ldr	r1, [r4, #16]
 80094c6:	464a      	mov	r2, r9
 80094c8:	f7fe fcfb 	bl	8007ec2 <memcpy>
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80094d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094d6:	81a3      	strh	r3, [r4, #12]
 80094d8:	6126      	str	r6, [r4, #16]
 80094da:	6165      	str	r5, [r4, #20]
 80094dc:	444e      	add	r6, r9
 80094de:	eba5 0509 	sub.w	r5, r5, r9
 80094e2:	6026      	str	r6, [r4, #0]
 80094e4:	60a5      	str	r5, [r4, #8]
 80094e6:	463e      	mov	r6, r7
 80094e8:	42be      	cmp	r6, r7
 80094ea:	d900      	bls.n	80094ee <__ssputs_r+0x72>
 80094ec:	463e      	mov	r6, r7
 80094ee:	6820      	ldr	r0, [r4, #0]
 80094f0:	4632      	mov	r2, r6
 80094f2:	4641      	mov	r1, r8
 80094f4:	f000 f9c6 	bl	8009884 <memmove>
 80094f8:	68a3      	ldr	r3, [r4, #8]
 80094fa:	1b9b      	subs	r3, r3, r6
 80094fc:	60a3      	str	r3, [r4, #8]
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	4433      	add	r3, r6
 8009502:	6023      	str	r3, [r4, #0]
 8009504:	2000      	movs	r0, #0
 8009506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800950a:	462a      	mov	r2, r5
 800950c:	f000 fa28 	bl	8009960 <_realloc_r>
 8009510:	4606      	mov	r6, r0
 8009512:	2800      	cmp	r0, #0
 8009514:	d1e0      	bne.n	80094d8 <__ssputs_r+0x5c>
 8009516:	6921      	ldr	r1, [r4, #16]
 8009518:	4650      	mov	r0, sl
 800951a:	f7ff fb2d 	bl	8008b78 <_free_r>
 800951e:	230c      	movs	r3, #12
 8009520:	f8ca 3000 	str.w	r3, [sl]
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	e7e9      	b.n	8009506 <__ssputs_r+0x8a>
	...

08009534 <_svfiprintf_r>:
 8009534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009538:	4698      	mov	r8, r3
 800953a:	898b      	ldrh	r3, [r1, #12]
 800953c:	061b      	lsls	r3, r3, #24
 800953e:	b09d      	sub	sp, #116	@ 0x74
 8009540:	4607      	mov	r7, r0
 8009542:	460d      	mov	r5, r1
 8009544:	4614      	mov	r4, r2
 8009546:	d510      	bpl.n	800956a <_svfiprintf_r+0x36>
 8009548:	690b      	ldr	r3, [r1, #16]
 800954a:	b973      	cbnz	r3, 800956a <_svfiprintf_r+0x36>
 800954c:	2140      	movs	r1, #64	@ 0x40
 800954e:	f7ff fb87 	bl	8008c60 <_malloc_r>
 8009552:	6028      	str	r0, [r5, #0]
 8009554:	6128      	str	r0, [r5, #16]
 8009556:	b930      	cbnz	r0, 8009566 <_svfiprintf_r+0x32>
 8009558:	230c      	movs	r3, #12
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	f04f 30ff 	mov.w	r0, #4294967295
 8009560:	b01d      	add	sp, #116	@ 0x74
 8009562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009566:	2340      	movs	r3, #64	@ 0x40
 8009568:	616b      	str	r3, [r5, #20]
 800956a:	2300      	movs	r3, #0
 800956c:	9309      	str	r3, [sp, #36]	@ 0x24
 800956e:	2320      	movs	r3, #32
 8009570:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009574:	f8cd 800c 	str.w	r8, [sp, #12]
 8009578:	2330      	movs	r3, #48	@ 0x30
 800957a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009718 <_svfiprintf_r+0x1e4>
 800957e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009582:	f04f 0901 	mov.w	r9, #1
 8009586:	4623      	mov	r3, r4
 8009588:	469a      	mov	sl, r3
 800958a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800958e:	b10a      	cbz	r2, 8009594 <_svfiprintf_r+0x60>
 8009590:	2a25      	cmp	r2, #37	@ 0x25
 8009592:	d1f9      	bne.n	8009588 <_svfiprintf_r+0x54>
 8009594:	ebba 0b04 	subs.w	fp, sl, r4
 8009598:	d00b      	beq.n	80095b2 <_svfiprintf_r+0x7e>
 800959a:	465b      	mov	r3, fp
 800959c:	4622      	mov	r2, r4
 800959e:	4629      	mov	r1, r5
 80095a0:	4638      	mov	r0, r7
 80095a2:	f7ff ff6b 	bl	800947c <__ssputs_r>
 80095a6:	3001      	adds	r0, #1
 80095a8:	f000 80a7 	beq.w	80096fa <_svfiprintf_r+0x1c6>
 80095ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095ae:	445a      	add	r2, fp
 80095b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80095b2:	f89a 3000 	ldrb.w	r3, [sl]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 809f 	beq.w	80096fa <_svfiprintf_r+0x1c6>
 80095bc:	2300      	movs	r3, #0
 80095be:	f04f 32ff 	mov.w	r2, #4294967295
 80095c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095c6:	f10a 0a01 	add.w	sl, sl, #1
 80095ca:	9304      	str	r3, [sp, #16]
 80095cc:	9307      	str	r3, [sp, #28]
 80095ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80095d4:	4654      	mov	r4, sl
 80095d6:	2205      	movs	r2, #5
 80095d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095dc:	484e      	ldr	r0, [pc, #312]	@ (8009718 <_svfiprintf_r+0x1e4>)
 80095de:	f7f6 fe17 	bl	8000210 <memchr>
 80095e2:	9a04      	ldr	r2, [sp, #16]
 80095e4:	b9d8      	cbnz	r0, 800961e <_svfiprintf_r+0xea>
 80095e6:	06d0      	lsls	r0, r2, #27
 80095e8:	bf44      	itt	mi
 80095ea:	2320      	movmi	r3, #32
 80095ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095f0:	0711      	lsls	r1, r2, #28
 80095f2:	bf44      	itt	mi
 80095f4:	232b      	movmi	r3, #43	@ 0x2b
 80095f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095fa:	f89a 3000 	ldrb.w	r3, [sl]
 80095fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009600:	d015      	beq.n	800962e <_svfiprintf_r+0xfa>
 8009602:	9a07      	ldr	r2, [sp, #28]
 8009604:	4654      	mov	r4, sl
 8009606:	2000      	movs	r0, #0
 8009608:	f04f 0c0a 	mov.w	ip, #10
 800960c:	4621      	mov	r1, r4
 800960e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009612:	3b30      	subs	r3, #48	@ 0x30
 8009614:	2b09      	cmp	r3, #9
 8009616:	d94b      	bls.n	80096b0 <_svfiprintf_r+0x17c>
 8009618:	b1b0      	cbz	r0, 8009648 <_svfiprintf_r+0x114>
 800961a:	9207      	str	r2, [sp, #28]
 800961c:	e014      	b.n	8009648 <_svfiprintf_r+0x114>
 800961e:	eba0 0308 	sub.w	r3, r0, r8
 8009622:	fa09 f303 	lsl.w	r3, r9, r3
 8009626:	4313      	orrs	r3, r2
 8009628:	9304      	str	r3, [sp, #16]
 800962a:	46a2      	mov	sl, r4
 800962c:	e7d2      	b.n	80095d4 <_svfiprintf_r+0xa0>
 800962e:	9b03      	ldr	r3, [sp, #12]
 8009630:	1d19      	adds	r1, r3, #4
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	9103      	str	r1, [sp, #12]
 8009636:	2b00      	cmp	r3, #0
 8009638:	bfbb      	ittet	lt
 800963a:	425b      	neglt	r3, r3
 800963c:	f042 0202 	orrlt.w	r2, r2, #2
 8009640:	9307      	strge	r3, [sp, #28]
 8009642:	9307      	strlt	r3, [sp, #28]
 8009644:	bfb8      	it	lt
 8009646:	9204      	strlt	r2, [sp, #16]
 8009648:	7823      	ldrb	r3, [r4, #0]
 800964a:	2b2e      	cmp	r3, #46	@ 0x2e
 800964c:	d10a      	bne.n	8009664 <_svfiprintf_r+0x130>
 800964e:	7863      	ldrb	r3, [r4, #1]
 8009650:	2b2a      	cmp	r3, #42	@ 0x2a
 8009652:	d132      	bne.n	80096ba <_svfiprintf_r+0x186>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	1d1a      	adds	r2, r3, #4
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	9203      	str	r2, [sp, #12]
 800965c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009660:	3402      	adds	r4, #2
 8009662:	9305      	str	r3, [sp, #20]
 8009664:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009728 <_svfiprintf_r+0x1f4>
 8009668:	7821      	ldrb	r1, [r4, #0]
 800966a:	2203      	movs	r2, #3
 800966c:	4650      	mov	r0, sl
 800966e:	f7f6 fdcf 	bl	8000210 <memchr>
 8009672:	b138      	cbz	r0, 8009684 <_svfiprintf_r+0x150>
 8009674:	9b04      	ldr	r3, [sp, #16]
 8009676:	eba0 000a 	sub.w	r0, r0, sl
 800967a:	2240      	movs	r2, #64	@ 0x40
 800967c:	4082      	lsls	r2, r0
 800967e:	4313      	orrs	r3, r2
 8009680:	3401      	adds	r4, #1
 8009682:	9304      	str	r3, [sp, #16]
 8009684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009688:	4824      	ldr	r0, [pc, #144]	@ (800971c <_svfiprintf_r+0x1e8>)
 800968a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800968e:	2206      	movs	r2, #6
 8009690:	f7f6 fdbe 	bl	8000210 <memchr>
 8009694:	2800      	cmp	r0, #0
 8009696:	d036      	beq.n	8009706 <_svfiprintf_r+0x1d2>
 8009698:	4b21      	ldr	r3, [pc, #132]	@ (8009720 <_svfiprintf_r+0x1ec>)
 800969a:	bb1b      	cbnz	r3, 80096e4 <_svfiprintf_r+0x1b0>
 800969c:	9b03      	ldr	r3, [sp, #12]
 800969e:	3307      	adds	r3, #7
 80096a0:	f023 0307 	bic.w	r3, r3, #7
 80096a4:	3308      	adds	r3, #8
 80096a6:	9303      	str	r3, [sp, #12]
 80096a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096aa:	4433      	add	r3, r6
 80096ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ae:	e76a      	b.n	8009586 <_svfiprintf_r+0x52>
 80096b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80096b4:	460c      	mov	r4, r1
 80096b6:	2001      	movs	r0, #1
 80096b8:	e7a8      	b.n	800960c <_svfiprintf_r+0xd8>
 80096ba:	2300      	movs	r3, #0
 80096bc:	3401      	adds	r4, #1
 80096be:	9305      	str	r3, [sp, #20]
 80096c0:	4619      	mov	r1, r3
 80096c2:	f04f 0c0a 	mov.w	ip, #10
 80096c6:	4620      	mov	r0, r4
 80096c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096cc:	3a30      	subs	r2, #48	@ 0x30
 80096ce:	2a09      	cmp	r2, #9
 80096d0:	d903      	bls.n	80096da <_svfiprintf_r+0x1a6>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d0c6      	beq.n	8009664 <_svfiprintf_r+0x130>
 80096d6:	9105      	str	r1, [sp, #20]
 80096d8:	e7c4      	b.n	8009664 <_svfiprintf_r+0x130>
 80096da:	fb0c 2101 	mla	r1, ip, r1, r2
 80096de:	4604      	mov	r4, r0
 80096e0:	2301      	movs	r3, #1
 80096e2:	e7f0      	b.n	80096c6 <_svfiprintf_r+0x192>
 80096e4:	ab03      	add	r3, sp, #12
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	462a      	mov	r2, r5
 80096ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009724 <_svfiprintf_r+0x1f0>)
 80096ec:	a904      	add	r1, sp, #16
 80096ee:	4638      	mov	r0, r7
 80096f0:	f7fd fe76 	bl	80073e0 <_printf_float>
 80096f4:	1c42      	adds	r2, r0, #1
 80096f6:	4606      	mov	r6, r0
 80096f8:	d1d6      	bne.n	80096a8 <_svfiprintf_r+0x174>
 80096fa:	89ab      	ldrh	r3, [r5, #12]
 80096fc:	065b      	lsls	r3, r3, #25
 80096fe:	f53f af2d 	bmi.w	800955c <_svfiprintf_r+0x28>
 8009702:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009704:	e72c      	b.n	8009560 <_svfiprintf_r+0x2c>
 8009706:	ab03      	add	r3, sp, #12
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	462a      	mov	r2, r5
 800970c:	4b05      	ldr	r3, [pc, #20]	@ (8009724 <_svfiprintf_r+0x1f0>)
 800970e:	a904      	add	r1, sp, #16
 8009710:	4638      	mov	r0, r7
 8009712:	f7fe f8fd 	bl	8007910 <_printf_i>
 8009716:	e7ed      	b.n	80096f4 <_svfiprintf_r+0x1c0>
 8009718:	0800a7b0 	.word	0x0800a7b0
 800971c:	0800a7ba 	.word	0x0800a7ba
 8009720:	080073e1 	.word	0x080073e1
 8009724:	0800947d 	.word	0x0800947d
 8009728:	0800a7b6 	.word	0x0800a7b6

0800972c <__sflush_r>:
 800972c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009734:	0716      	lsls	r6, r2, #28
 8009736:	4605      	mov	r5, r0
 8009738:	460c      	mov	r4, r1
 800973a:	d454      	bmi.n	80097e6 <__sflush_r+0xba>
 800973c:	684b      	ldr	r3, [r1, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	dc02      	bgt.n	8009748 <__sflush_r+0x1c>
 8009742:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	dd48      	ble.n	80097da <__sflush_r+0xae>
 8009748:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800974a:	2e00      	cmp	r6, #0
 800974c:	d045      	beq.n	80097da <__sflush_r+0xae>
 800974e:	2300      	movs	r3, #0
 8009750:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009754:	682f      	ldr	r7, [r5, #0]
 8009756:	6a21      	ldr	r1, [r4, #32]
 8009758:	602b      	str	r3, [r5, #0]
 800975a:	d030      	beq.n	80097be <__sflush_r+0x92>
 800975c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	0759      	lsls	r1, r3, #29
 8009762:	d505      	bpl.n	8009770 <__sflush_r+0x44>
 8009764:	6863      	ldr	r3, [r4, #4]
 8009766:	1ad2      	subs	r2, r2, r3
 8009768:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800976a:	b10b      	cbz	r3, 8009770 <__sflush_r+0x44>
 800976c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800976e:	1ad2      	subs	r2, r2, r3
 8009770:	2300      	movs	r3, #0
 8009772:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009774:	6a21      	ldr	r1, [r4, #32]
 8009776:	4628      	mov	r0, r5
 8009778:	47b0      	blx	r6
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	d106      	bne.n	800978e <__sflush_r+0x62>
 8009780:	6829      	ldr	r1, [r5, #0]
 8009782:	291d      	cmp	r1, #29
 8009784:	d82b      	bhi.n	80097de <__sflush_r+0xb2>
 8009786:	4a2a      	ldr	r2, [pc, #168]	@ (8009830 <__sflush_r+0x104>)
 8009788:	410a      	asrs	r2, r1
 800978a:	07d6      	lsls	r6, r2, #31
 800978c:	d427      	bmi.n	80097de <__sflush_r+0xb2>
 800978e:	2200      	movs	r2, #0
 8009790:	6062      	str	r2, [r4, #4]
 8009792:	04d9      	lsls	r1, r3, #19
 8009794:	6922      	ldr	r2, [r4, #16]
 8009796:	6022      	str	r2, [r4, #0]
 8009798:	d504      	bpl.n	80097a4 <__sflush_r+0x78>
 800979a:	1c42      	adds	r2, r0, #1
 800979c:	d101      	bne.n	80097a2 <__sflush_r+0x76>
 800979e:	682b      	ldr	r3, [r5, #0]
 80097a0:	b903      	cbnz	r3, 80097a4 <__sflush_r+0x78>
 80097a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80097a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097a6:	602f      	str	r7, [r5, #0]
 80097a8:	b1b9      	cbz	r1, 80097da <__sflush_r+0xae>
 80097aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097ae:	4299      	cmp	r1, r3
 80097b0:	d002      	beq.n	80097b8 <__sflush_r+0x8c>
 80097b2:	4628      	mov	r0, r5
 80097b4:	f7ff f9e0 	bl	8008b78 <_free_r>
 80097b8:	2300      	movs	r3, #0
 80097ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80097bc:	e00d      	b.n	80097da <__sflush_r+0xae>
 80097be:	2301      	movs	r3, #1
 80097c0:	4628      	mov	r0, r5
 80097c2:	47b0      	blx	r6
 80097c4:	4602      	mov	r2, r0
 80097c6:	1c50      	adds	r0, r2, #1
 80097c8:	d1c9      	bne.n	800975e <__sflush_r+0x32>
 80097ca:	682b      	ldr	r3, [r5, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0c6      	beq.n	800975e <__sflush_r+0x32>
 80097d0:	2b1d      	cmp	r3, #29
 80097d2:	d001      	beq.n	80097d8 <__sflush_r+0xac>
 80097d4:	2b16      	cmp	r3, #22
 80097d6:	d11e      	bne.n	8009816 <__sflush_r+0xea>
 80097d8:	602f      	str	r7, [r5, #0]
 80097da:	2000      	movs	r0, #0
 80097dc:	e022      	b.n	8009824 <__sflush_r+0xf8>
 80097de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097e2:	b21b      	sxth	r3, r3
 80097e4:	e01b      	b.n	800981e <__sflush_r+0xf2>
 80097e6:	690f      	ldr	r7, [r1, #16]
 80097e8:	2f00      	cmp	r7, #0
 80097ea:	d0f6      	beq.n	80097da <__sflush_r+0xae>
 80097ec:	0793      	lsls	r3, r2, #30
 80097ee:	680e      	ldr	r6, [r1, #0]
 80097f0:	bf08      	it	eq
 80097f2:	694b      	ldreq	r3, [r1, #20]
 80097f4:	600f      	str	r7, [r1, #0]
 80097f6:	bf18      	it	ne
 80097f8:	2300      	movne	r3, #0
 80097fa:	eba6 0807 	sub.w	r8, r6, r7
 80097fe:	608b      	str	r3, [r1, #8]
 8009800:	f1b8 0f00 	cmp.w	r8, #0
 8009804:	dde9      	ble.n	80097da <__sflush_r+0xae>
 8009806:	6a21      	ldr	r1, [r4, #32]
 8009808:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800980a:	4643      	mov	r3, r8
 800980c:	463a      	mov	r2, r7
 800980e:	4628      	mov	r0, r5
 8009810:	47b0      	blx	r6
 8009812:	2800      	cmp	r0, #0
 8009814:	dc08      	bgt.n	8009828 <__sflush_r+0xfc>
 8009816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800981a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800981e:	81a3      	strh	r3, [r4, #12]
 8009820:	f04f 30ff 	mov.w	r0, #4294967295
 8009824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009828:	4407      	add	r7, r0
 800982a:	eba8 0800 	sub.w	r8, r8, r0
 800982e:	e7e7      	b.n	8009800 <__sflush_r+0xd4>
 8009830:	dfbffffe 	.word	0xdfbffffe

08009834 <_fflush_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	690b      	ldr	r3, [r1, #16]
 8009838:	4605      	mov	r5, r0
 800983a:	460c      	mov	r4, r1
 800983c:	b913      	cbnz	r3, 8009844 <_fflush_r+0x10>
 800983e:	2500      	movs	r5, #0
 8009840:	4628      	mov	r0, r5
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	b118      	cbz	r0, 800984e <_fflush_r+0x1a>
 8009846:	6a03      	ldr	r3, [r0, #32]
 8009848:	b90b      	cbnz	r3, 800984e <_fflush_r+0x1a>
 800984a:	f7fe fa0d 	bl	8007c68 <__sinit>
 800984e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0f3      	beq.n	800983e <_fflush_r+0xa>
 8009856:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009858:	07d0      	lsls	r0, r2, #31
 800985a:	d404      	bmi.n	8009866 <_fflush_r+0x32>
 800985c:	0599      	lsls	r1, r3, #22
 800985e:	d402      	bmi.n	8009866 <_fflush_r+0x32>
 8009860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009862:	f7fe fb2c 	bl	8007ebe <__retarget_lock_acquire_recursive>
 8009866:	4628      	mov	r0, r5
 8009868:	4621      	mov	r1, r4
 800986a:	f7ff ff5f 	bl	800972c <__sflush_r>
 800986e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009870:	07da      	lsls	r2, r3, #31
 8009872:	4605      	mov	r5, r0
 8009874:	d4e4      	bmi.n	8009840 <_fflush_r+0xc>
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	059b      	lsls	r3, r3, #22
 800987a:	d4e1      	bmi.n	8009840 <_fflush_r+0xc>
 800987c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800987e:	f7fe fb1f 	bl	8007ec0 <__retarget_lock_release_recursive>
 8009882:	e7dd      	b.n	8009840 <_fflush_r+0xc>

08009884 <memmove>:
 8009884:	4288      	cmp	r0, r1
 8009886:	b510      	push	{r4, lr}
 8009888:	eb01 0402 	add.w	r4, r1, r2
 800988c:	d902      	bls.n	8009894 <memmove+0x10>
 800988e:	4284      	cmp	r4, r0
 8009890:	4623      	mov	r3, r4
 8009892:	d807      	bhi.n	80098a4 <memmove+0x20>
 8009894:	1e43      	subs	r3, r0, #1
 8009896:	42a1      	cmp	r1, r4
 8009898:	d008      	beq.n	80098ac <memmove+0x28>
 800989a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800989e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098a2:	e7f8      	b.n	8009896 <memmove+0x12>
 80098a4:	4402      	add	r2, r0
 80098a6:	4601      	mov	r1, r0
 80098a8:	428a      	cmp	r2, r1
 80098aa:	d100      	bne.n	80098ae <memmove+0x2a>
 80098ac:	bd10      	pop	{r4, pc}
 80098ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098b6:	e7f7      	b.n	80098a8 <memmove+0x24>

080098b8 <_sbrk_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	4d06      	ldr	r5, [pc, #24]	@ (80098d4 <_sbrk_r+0x1c>)
 80098bc:	2300      	movs	r3, #0
 80098be:	4604      	mov	r4, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	602b      	str	r3, [r5, #0]
 80098c4:	f7f9 fc8e 	bl	80031e4 <_sbrk>
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	d102      	bne.n	80098d2 <_sbrk_r+0x1a>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	b103      	cbz	r3, 80098d2 <_sbrk_r+0x1a>
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	20000afc 	.word	0x20000afc

080098d8 <__assert_func>:
 80098d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098da:	4614      	mov	r4, r2
 80098dc:	461a      	mov	r2, r3
 80098de:	4b09      	ldr	r3, [pc, #36]	@ (8009904 <__assert_func+0x2c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4605      	mov	r5, r0
 80098e4:	68d8      	ldr	r0, [r3, #12]
 80098e6:	b954      	cbnz	r4, 80098fe <__assert_func+0x26>
 80098e8:	4b07      	ldr	r3, [pc, #28]	@ (8009908 <__assert_func+0x30>)
 80098ea:	461c      	mov	r4, r3
 80098ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098f0:	9100      	str	r1, [sp, #0]
 80098f2:	462b      	mov	r3, r5
 80098f4:	4905      	ldr	r1, [pc, #20]	@ (800990c <__assert_func+0x34>)
 80098f6:	f000 f86f 	bl	80099d8 <fiprintf>
 80098fa:	f000 f87f 	bl	80099fc <abort>
 80098fe:	4b04      	ldr	r3, [pc, #16]	@ (8009910 <__assert_func+0x38>)
 8009900:	e7f4      	b.n	80098ec <__assert_func+0x14>
 8009902:	bf00      	nop
 8009904:	20000020 	.word	0x20000020
 8009908:	0800a806 	.word	0x0800a806
 800990c:	0800a7d8 	.word	0x0800a7d8
 8009910:	0800a7cb 	.word	0x0800a7cb

08009914 <_calloc_r>:
 8009914:	b570      	push	{r4, r5, r6, lr}
 8009916:	fba1 5402 	umull	r5, r4, r1, r2
 800991a:	b93c      	cbnz	r4, 800992c <_calloc_r+0x18>
 800991c:	4629      	mov	r1, r5
 800991e:	f7ff f99f 	bl	8008c60 <_malloc_r>
 8009922:	4606      	mov	r6, r0
 8009924:	b928      	cbnz	r0, 8009932 <_calloc_r+0x1e>
 8009926:	2600      	movs	r6, #0
 8009928:	4630      	mov	r0, r6
 800992a:	bd70      	pop	{r4, r5, r6, pc}
 800992c:	220c      	movs	r2, #12
 800992e:	6002      	str	r2, [r0, #0]
 8009930:	e7f9      	b.n	8009926 <_calloc_r+0x12>
 8009932:	462a      	mov	r2, r5
 8009934:	4621      	mov	r1, r4
 8009936:	f7fe fa44 	bl	8007dc2 <memset>
 800993a:	e7f5      	b.n	8009928 <_calloc_r+0x14>

0800993c <__ascii_mbtowc>:
 800993c:	b082      	sub	sp, #8
 800993e:	b901      	cbnz	r1, 8009942 <__ascii_mbtowc+0x6>
 8009940:	a901      	add	r1, sp, #4
 8009942:	b142      	cbz	r2, 8009956 <__ascii_mbtowc+0x1a>
 8009944:	b14b      	cbz	r3, 800995a <__ascii_mbtowc+0x1e>
 8009946:	7813      	ldrb	r3, [r2, #0]
 8009948:	600b      	str	r3, [r1, #0]
 800994a:	7812      	ldrb	r2, [r2, #0]
 800994c:	1e10      	subs	r0, r2, #0
 800994e:	bf18      	it	ne
 8009950:	2001      	movne	r0, #1
 8009952:	b002      	add	sp, #8
 8009954:	4770      	bx	lr
 8009956:	4610      	mov	r0, r2
 8009958:	e7fb      	b.n	8009952 <__ascii_mbtowc+0x16>
 800995a:	f06f 0001 	mvn.w	r0, #1
 800995e:	e7f8      	b.n	8009952 <__ascii_mbtowc+0x16>

08009960 <_realloc_r>:
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	4680      	mov	r8, r0
 8009966:	4615      	mov	r5, r2
 8009968:	460c      	mov	r4, r1
 800996a:	b921      	cbnz	r1, 8009976 <_realloc_r+0x16>
 800996c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009970:	4611      	mov	r1, r2
 8009972:	f7ff b975 	b.w	8008c60 <_malloc_r>
 8009976:	b92a      	cbnz	r2, 8009984 <_realloc_r+0x24>
 8009978:	f7ff f8fe 	bl	8008b78 <_free_r>
 800997c:	2400      	movs	r4, #0
 800997e:	4620      	mov	r0, r4
 8009980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009984:	f000 f841 	bl	8009a0a <_malloc_usable_size_r>
 8009988:	4285      	cmp	r5, r0
 800998a:	4606      	mov	r6, r0
 800998c:	d802      	bhi.n	8009994 <_realloc_r+0x34>
 800998e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009992:	d8f4      	bhi.n	800997e <_realloc_r+0x1e>
 8009994:	4629      	mov	r1, r5
 8009996:	4640      	mov	r0, r8
 8009998:	f7ff f962 	bl	8008c60 <_malloc_r>
 800999c:	4607      	mov	r7, r0
 800999e:	2800      	cmp	r0, #0
 80099a0:	d0ec      	beq.n	800997c <_realloc_r+0x1c>
 80099a2:	42b5      	cmp	r5, r6
 80099a4:	462a      	mov	r2, r5
 80099a6:	4621      	mov	r1, r4
 80099a8:	bf28      	it	cs
 80099aa:	4632      	movcs	r2, r6
 80099ac:	f7fe fa89 	bl	8007ec2 <memcpy>
 80099b0:	4621      	mov	r1, r4
 80099b2:	4640      	mov	r0, r8
 80099b4:	f7ff f8e0 	bl	8008b78 <_free_r>
 80099b8:	463c      	mov	r4, r7
 80099ba:	e7e0      	b.n	800997e <_realloc_r+0x1e>

080099bc <__ascii_wctomb>:
 80099bc:	4603      	mov	r3, r0
 80099be:	4608      	mov	r0, r1
 80099c0:	b141      	cbz	r1, 80099d4 <__ascii_wctomb+0x18>
 80099c2:	2aff      	cmp	r2, #255	@ 0xff
 80099c4:	d904      	bls.n	80099d0 <__ascii_wctomb+0x14>
 80099c6:	228a      	movs	r2, #138	@ 0x8a
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	f04f 30ff 	mov.w	r0, #4294967295
 80099ce:	4770      	bx	lr
 80099d0:	700a      	strb	r2, [r1, #0]
 80099d2:	2001      	movs	r0, #1
 80099d4:	4770      	bx	lr
	...

080099d8 <fiprintf>:
 80099d8:	b40e      	push	{r1, r2, r3}
 80099da:	b503      	push	{r0, r1, lr}
 80099dc:	4601      	mov	r1, r0
 80099de:	ab03      	add	r3, sp, #12
 80099e0:	4805      	ldr	r0, [pc, #20]	@ (80099f8 <fiprintf+0x20>)
 80099e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e6:	6800      	ldr	r0, [r0, #0]
 80099e8:	9301      	str	r3, [sp, #4]
 80099ea:	f000 f83f 	bl	8009a6c <_vfiprintf_r>
 80099ee:	b002      	add	sp, #8
 80099f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099f4:	b003      	add	sp, #12
 80099f6:	4770      	bx	lr
 80099f8:	20000020 	.word	0x20000020

080099fc <abort>:
 80099fc:	b508      	push	{r3, lr}
 80099fe:	2006      	movs	r0, #6
 8009a00:	f000 fa08 	bl	8009e14 <raise>
 8009a04:	2001      	movs	r0, #1
 8009a06:	f7f9 fb75 	bl	80030f4 <_exit>

08009a0a <_malloc_usable_size_r>:
 8009a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a0e:	1f18      	subs	r0, r3, #4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	bfbc      	itt	lt
 8009a14:	580b      	ldrlt	r3, [r1, r0]
 8009a16:	18c0      	addlt	r0, r0, r3
 8009a18:	4770      	bx	lr

08009a1a <__sfputc_r>:
 8009a1a:	6893      	ldr	r3, [r2, #8]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	b410      	push	{r4}
 8009a22:	6093      	str	r3, [r2, #8]
 8009a24:	da08      	bge.n	8009a38 <__sfputc_r+0x1e>
 8009a26:	6994      	ldr	r4, [r2, #24]
 8009a28:	42a3      	cmp	r3, r4
 8009a2a:	db01      	blt.n	8009a30 <__sfputc_r+0x16>
 8009a2c:	290a      	cmp	r1, #10
 8009a2e:	d103      	bne.n	8009a38 <__sfputc_r+0x1e>
 8009a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a34:	f000 b932 	b.w	8009c9c <__swbuf_r>
 8009a38:	6813      	ldr	r3, [r2, #0]
 8009a3a:	1c58      	adds	r0, r3, #1
 8009a3c:	6010      	str	r0, [r2, #0]
 8009a3e:	7019      	strb	r1, [r3, #0]
 8009a40:	4608      	mov	r0, r1
 8009a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <__sfputs_r>:
 8009a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	460f      	mov	r7, r1
 8009a4e:	4614      	mov	r4, r2
 8009a50:	18d5      	adds	r5, r2, r3
 8009a52:	42ac      	cmp	r4, r5
 8009a54:	d101      	bne.n	8009a5a <__sfputs_r+0x12>
 8009a56:	2000      	movs	r0, #0
 8009a58:	e007      	b.n	8009a6a <__sfputs_r+0x22>
 8009a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a5e:	463a      	mov	r2, r7
 8009a60:	4630      	mov	r0, r6
 8009a62:	f7ff ffda 	bl	8009a1a <__sfputc_r>
 8009a66:	1c43      	adds	r3, r0, #1
 8009a68:	d1f3      	bne.n	8009a52 <__sfputs_r+0xa>
 8009a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a6c <_vfiprintf_r>:
 8009a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a70:	460d      	mov	r5, r1
 8009a72:	b09d      	sub	sp, #116	@ 0x74
 8009a74:	4614      	mov	r4, r2
 8009a76:	4698      	mov	r8, r3
 8009a78:	4606      	mov	r6, r0
 8009a7a:	b118      	cbz	r0, 8009a84 <_vfiprintf_r+0x18>
 8009a7c:	6a03      	ldr	r3, [r0, #32]
 8009a7e:	b90b      	cbnz	r3, 8009a84 <_vfiprintf_r+0x18>
 8009a80:	f7fe f8f2 	bl	8007c68 <__sinit>
 8009a84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a86:	07d9      	lsls	r1, r3, #31
 8009a88:	d405      	bmi.n	8009a96 <_vfiprintf_r+0x2a>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	059a      	lsls	r2, r3, #22
 8009a8e:	d402      	bmi.n	8009a96 <_vfiprintf_r+0x2a>
 8009a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a92:	f7fe fa14 	bl	8007ebe <__retarget_lock_acquire_recursive>
 8009a96:	89ab      	ldrh	r3, [r5, #12]
 8009a98:	071b      	lsls	r3, r3, #28
 8009a9a:	d501      	bpl.n	8009aa0 <_vfiprintf_r+0x34>
 8009a9c:	692b      	ldr	r3, [r5, #16]
 8009a9e:	b99b      	cbnz	r3, 8009ac8 <_vfiprintf_r+0x5c>
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f000 f938 	bl	8009d18 <__swsetup_r>
 8009aa8:	b170      	cbz	r0, 8009ac8 <_vfiprintf_r+0x5c>
 8009aaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009aac:	07dc      	lsls	r4, r3, #31
 8009aae:	d504      	bpl.n	8009aba <_vfiprintf_r+0x4e>
 8009ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab4:	b01d      	add	sp, #116	@ 0x74
 8009ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aba:	89ab      	ldrh	r3, [r5, #12]
 8009abc:	0598      	lsls	r0, r3, #22
 8009abe:	d4f7      	bmi.n	8009ab0 <_vfiprintf_r+0x44>
 8009ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ac2:	f7fe f9fd 	bl	8007ec0 <__retarget_lock_release_recursive>
 8009ac6:	e7f3      	b.n	8009ab0 <_vfiprintf_r+0x44>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8009acc:	2320      	movs	r3, #32
 8009ace:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ad6:	2330      	movs	r3, #48	@ 0x30
 8009ad8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c88 <_vfiprintf_r+0x21c>
 8009adc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ae0:	f04f 0901 	mov.w	r9, #1
 8009ae4:	4623      	mov	r3, r4
 8009ae6:	469a      	mov	sl, r3
 8009ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aec:	b10a      	cbz	r2, 8009af2 <_vfiprintf_r+0x86>
 8009aee:	2a25      	cmp	r2, #37	@ 0x25
 8009af0:	d1f9      	bne.n	8009ae6 <_vfiprintf_r+0x7a>
 8009af2:	ebba 0b04 	subs.w	fp, sl, r4
 8009af6:	d00b      	beq.n	8009b10 <_vfiprintf_r+0xa4>
 8009af8:	465b      	mov	r3, fp
 8009afa:	4622      	mov	r2, r4
 8009afc:	4629      	mov	r1, r5
 8009afe:	4630      	mov	r0, r6
 8009b00:	f7ff ffa2 	bl	8009a48 <__sfputs_r>
 8009b04:	3001      	adds	r0, #1
 8009b06:	f000 80a7 	beq.w	8009c58 <_vfiprintf_r+0x1ec>
 8009b0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b0c:	445a      	add	r2, fp
 8009b0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b10:	f89a 3000 	ldrb.w	r3, [sl]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 809f 	beq.w	8009c58 <_vfiprintf_r+0x1ec>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b24:	f10a 0a01 	add.w	sl, sl, #1
 8009b28:	9304      	str	r3, [sp, #16]
 8009b2a:	9307      	str	r3, [sp, #28]
 8009b2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b30:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b32:	4654      	mov	r4, sl
 8009b34:	2205      	movs	r2, #5
 8009b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b3a:	4853      	ldr	r0, [pc, #332]	@ (8009c88 <_vfiprintf_r+0x21c>)
 8009b3c:	f7f6 fb68 	bl	8000210 <memchr>
 8009b40:	9a04      	ldr	r2, [sp, #16]
 8009b42:	b9d8      	cbnz	r0, 8009b7c <_vfiprintf_r+0x110>
 8009b44:	06d1      	lsls	r1, r2, #27
 8009b46:	bf44      	itt	mi
 8009b48:	2320      	movmi	r3, #32
 8009b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b4e:	0713      	lsls	r3, r2, #28
 8009b50:	bf44      	itt	mi
 8009b52:	232b      	movmi	r3, #43	@ 0x2b
 8009b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b58:	f89a 3000 	ldrb.w	r3, [sl]
 8009b5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b5e:	d015      	beq.n	8009b8c <_vfiprintf_r+0x120>
 8009b60:	9a07      	ldr	r2, [sp, #28]
 8009b62:	4654      	mov	r4, sl
 8009b64:	2000      	movs	r0, #0
 8009b66:	f04f 0c0a 	mov.w	ip, #10
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b70:	3b30      	subs	r3, #48	@ 0x30
 8009b72:	2b09      	cmp	r3, #9
 8009b74:	d94b      	bls.n	8009c0e <_vfiprintf_r+0x1a2>
 8009b76:	b1b0      	cbz	r0, 8009ba6 <_vfiprintf_r+0x13a>
 8009b78:	9207      	str	r2, [sp, #28]
 8009b7a:	e014      	b.n	8009ba6 <_vfiprintf_r+0x13a>
 8009b7c:	eba0 0308 	sub.w	r3, r0, r8
 8009b80:	fa09 f303 	lsl.w	r3, r9, r3
 8009b84:	4313      	orrs	r3, r2
 8009b86:	9304      	str	r3, [sp, #16]
 8009b88:	46a2      	mov	sl, r4
 8009b8a:	e7d2      	b.n	8009b32 <_vfiprintf_r+0xc6>
 8009b8c:	9b03      	ldr	r3, [sp, #12]
 8009b8e:	1d19      	adds	r1, r3, #4
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	9103      	str	r1, [sp, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	bfbb      	ittet	lt
 8009b98:	425b      	neglt	r3, r3
 8009b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b9e:	9307      	strge	r3, [sp, #28]
 8009ba0:	9307      	strlt	r3, [sp, #28]
 8009ba2:	bfb8      	it	lt
 8009ba4:	9204      	strlt	r2, [sp, #16]
 8009ba6:	7823      	ldrb	r3, [r4, #0]
 8009ba8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009baa:	d10a      	bne.n	8009bc2 <_vfiprintf_r+0x156>
 8009bac:	7863      	ldrb	r3, [r4, #1]
 8009bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bb0:	d132      	bne.n	8009c18 <_vfiprintf_r+0x1ac>
 8009bb2:	9b03      	ldr	r3, [sp, #12]
 8009bb4:	1d1a      	adds	r2, r3, #4
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	9203      	str	r2, [sp, #12]
 8009bba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bbe:	3402      	adds	r4, #2
 8009bc0:	9305      	str	r3, [sp, #20]
 8009bc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c98 <_vfiprintf_r+0x22c>
 8009bc6:	7821      	ldrb	r1, [r4, #0]
 8009bc8:	2203      	movs	r2, #3
 8009bca:	4650      	mov	r0, sl
 8009bcc:	f7f6 fb20 	bl	8000210 <memchr>
 8009bd0:	b138      	cbz	r0, 8009be2 <_vfiprintf_r+0x176>
 8009bd2:	9b04      	ldr	r3, [sp, #16]
 8009bd4:	eba0 000a 	sub.w	r0, r0, sl
 8009bd8:	2240      	movs	r2, #64	@ 0x40
 8009bda:	4082      	lsls	r2, r0
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	3401      	adds	r4, #1
 8009be0:	9304      	str	r3, [sp, #16]
 8009be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be6:	4829      	ldr	r0, [pc, #164]	@ (8009c8c <_vfiprintf_r+0x220>)
 8009be8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bec:	2206      	movs	r2, #6
 8009bee:	f7f6 fb0f 	bl	8000210 <memchr>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d03f      	beq.n	8009c76 <_vfiprintf_r+0x20a>
 8009bf6:	4b26      	ldr	r3, [pc, #152]	@ (8009c90 <_vfiprintf_r+0x224>)
 8009bf8:	bb1b      	cbnz	r3, 8009c42 <_vfiprintf_r+0x1d6>
 8009bfa:	9b03      	ldr	r3, [sp, #12]
 8009bfc:	3307      	adds	r3, #7
 8009bfe:	f023 0307 	bic.w	r3, r3, #7
 8009c02:	3308      	adds	r3, #8
 8009c04:	9303      	str	r3, [sp, #12]
 8009c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c08:	443b      	add	r3, r7
 8009c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c0c:	e76a      	b.n	8009ae4 <_vfiprintf_r+0x78>
 8009c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c12:	460c      	mov	r4, r1
 8009c14:	2001      	movs	r0, #1
 8009c16:	e7a8      	b.n	8009b6a <_vfiprintf_r+0xfe>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	3401      	adds	r4, #1
 8009c1c:	9305      	str	r3, [sp, #20]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	f04f 0c0a 	mov.w	ip, #10
 8009c24:	4620      	mov	r0, r4
 8009c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c2a:	3a30      	subs	r2, #48	@ 0x30
 8009c2c:	2a09      	cmp	r2, #9
 8009c2e:	d903      	bls.n	8009c38 <_vfiprintf_r+0x1cc>
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d0c6      	beq.n	8009bc2 <_vfiprintf_r+0x156>
 8009c34:	9105      	str	r1, [sp, #20]
 8009c36:	e7c4      	b.n	8009bc2 <_vfiprintf_r+0x156>
 8009c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e7f0      	b.n	8009c24 <_vfiprintf_r+0x1b8>
 8009c42:	ab03      	add	r3, sp, #12
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	462a      	mov	r2, r5
 8009c48:	4b12      	ldr	r3, [pc, #72]	@ (8009c94 <_vfiprintf_r+0x228>)
 8009c4a:	a904      	add	r1, sp, #16
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f7fd fbc7 	bl	80073e0 <_printf_float>
 8009c52:	4607      	mov	r7, r0
 8009c54:	1c78      	adds	r0, r7, #1
 8009c56:	d1d6      	bne.n	8009c06 <_vfiprintf_r+0x19a>
 8009c58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c5a:	07d9      	lsls	r1, r3, #31
 8009c5c:	d405      	bmi.n	8009c6a <_vfiprintf_r+0x1fe>
 8009c5e:	89ab      	ldrh	r3, [r5, #12]
 8009c60:	059a      	lsls	r2, r3, #22
 8009c62:	d402      	bmi.n	8009c6a <_vfiprintf_r+0x1fe>
 8009c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c66:	f7fe f92b 	bl	8007ec0 <__retarget_lock_release_recursive>
 8009c6a:	89ab      	ldrh	r3, [r5, #12]
 8009c6c:	065b      	lsls	r3, r3, #25
 8009c6e:	f53f af1f 	bmi.w	8009ab0 <_vfiprintf_r+0x44>
 8009c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c74:	e71e      	b.n	8009ab4 <_vfiprintf_r+0x48>
 8009c76:	ab03      	add	r3, sp, #12
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	4b05      	ldr	r3, [pc, #20]	@ (8009c94 <_vfiprintf_r+0x228>)
 8009c7e:	a904      	add	r1, sp, #16
 8009c80:	4630      	mov	r0, r6
 8009c82:	f7fd fe45 	bl	8007910 <_printf_i>
 8009c86:	e7e4      	b.n	8009c52 <_vfiprintf_r+0x1e6>
 8009c88:	0800a7b0 	.word	0x0800a7b0
 8009c8c:	0800a7ba 	.word	0x0800a7ba
 8009c90:	080073e1 	.word	0x080073e1
 8009c94:	08009a49 	.word	0x08009a49
 8009c98:	0800a7b6 	.word	0x0800a7b6

08009c9c <__swbuf_r>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	460e      	mov	r6, r1
 8009ca0:	4614      	mov	r4, r2
 8009ca2:	4605      	mov	r5, r0
 8009ca4:	b118      	cbz	r0, 8009cae <__swbuf_r+0x12>
 8009ca6:	6a03      	ldr	r3, [r0, #32]
 8009ca8:	b90b      	cbnz	r3, 8009cae <__swbuf_r+0x12>
 8009caa:	f7fd ffdd 	bl	8007c68 <__sinit>
 8009cae:	69a3      	ldr	r3, [r4, #24]
 8009cb0:	60a3      	str	r3, [r4, #8]
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	071a      	lsls	r2, r3, #28
 8009cb6:	d501      	bpl.n	8009cbc <__swbuf_r+0x20>
 8009cb8:	6923      	ldr	r3, [r4, #16]
 8009cba:	b943      	cbnz	r3, 8009cce <__swbuf_r+0x32>
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	f000 f82a 	bl	8009d18 <__swsetup_r>
 8009cc4:	b118      	cbz	r0, 8009cce <__swbuf_r+0x32>
 8009cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8009cca:	4638      	mov	r0, r7
 8009ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	6922      	ldr	r2, [r4, #16]
 8009cd2:	1a98      	subs	r0, r3, r2
 8009cd4:	6963      	ldr	r3, [r4, #20]
 8009cd6:	b2f6      	uxtb	r6, r6
 8009cd8:	4283      	cmp	r3, r0
 8009cda:	4637      	mov	r7, r6
 8009cdc:	dc05      	bgt.n	8009cea <__swbuf_r+0x4e>
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f7ff fda7 	bl	8009834 <_fflush_r>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d1ed      	bne.n	8009cc6 <__swbuf_r+0x2a>
 8009cea:	68a3      	ldr	r3, [r4, #8]
 8009cec:	3b01      	subs	r3, #1
 8009cee:	60a3      	str	r3, [r4, #8]
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	6022      	str	r2, [r4, #0]
 8009cf6:	701e      	strb	r6, [r3, #0]
 8009cf8:	6962      	ldr	r2, [r4, #20]
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d004      	beq.n	8009d0a <__swbuf_r+0x6e>
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	07db      	lsls	r3, r3, #31
 8009d04:	d5e1      	bpl.n	8009cca <__swbuf_r+0x2e>
 8009d06:	2e0a      	cmp	r6, #10
 8009d08:	d1df      	bne.n	8009cca <__swbuf_r+0x2e>
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f7ff fd91 	bl	8009834 <_fflush_r>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d0d9      	beq.n	8009cca <__swbuf_r+0x2e>
 8009d16:	e7d6      	b.n	8009cc6 <__swbuf_r+0x2a>

08009d18 <__swsetup_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4b29      	ldr	r3, [pc, #164]	@ (8009dc0 <__swsetup_r+0xa8>)
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	6818      	ldr	r0, [r3, #0]
 8009d20:	460c      	mov	r4, r1
 8009d22:	b118      	cbz	r0, 8009d2c <__swsetup_r+0x14>
 8009d24:	6a03      	ldr	r3, [r0, #32]
 8009d26:	b90b      	cbnz	r3, 8009d2c <__swsetup_r+0x14>
 8009d28:	f7fd ff9e 	bl	8007c68 <__sinit>
 8009d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d30:	0719      	lsls	r1, r3, #28
 8009d32:	d422      	bmi.n	8009d7a <__swsetup_r+0x62>
 8009d34:	06da      	lsls	r2, r3, #27
 8009d36:	d407      	bmi.n	8009d48 <__swsetup_r+0x30>
 8009d38:	2209      	movs	r2, #9
 8009d3a:	602a      	str	r2, [r5, #0]
 8009d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	f04f 30ff 	mov.w	r0, #4294967295
 8009d46:	e033      	b.n	8009db0 <__swsetup_r+0x98>
 8009d48:	0758      	lsls	r0, r3, #29
 8009d4a:	d512      	bpl.n	8009d72 <__swsetup_r+0x5a>
 8009d4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d4e:	b141      	cbz	r1, 8009d62 <__swsetup_r+0x4a>
 8009d50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d54:	4299      	cmp	r1, r3
 8009d56:	d002      	beq.n	8009d5e <__swsetup_r+0x46>
 8009d58:	4628      	mov	r0, r5
 8009d5a:	f7fe ff0d 	bl	8008b78 <_free_r>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	6063      	str	r3, [r4, #4]
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	f043 0308 	orr.w	r3, r3, #8
 8009d78:	81a3      	strh	r3, [r4, #12]
 8009d7a:	6923      	ldr	r3, [r4, #16]
 8009d7c:	b94b      	cbnz	r3, 8009d92 <__swsetup_r+0x7a>
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d88:	d003      	beq.n	8009d92 <__swsetup_r+0x7a>
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f000 f883 	bl	8009e98 <__smakebuf_r>
 8009d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d96:	f013 0201 	ands.w	r2, r3, #1
 8009d9a:	d00a      	beq.n	8009db2 <__swsetup_r+0x9a>
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	60a2      	str	r2, [r4, #8]
 8009da0:	6962      	ldr	r2, [r4, #20]
 8009da2:	4252      	negs	r2, r2
 8009da4:	61a2      	str	r2, [r4, #24]
 8009da6:	6922      	ldr	r2, [r4, #16]
 8009da8:	b942      	cbnz	r2, 8009dbc <__swsetup_r+0xa4>
 8009daa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009dae:	d1c5      	bne.n	8009d3c <__swsetup_r+0x24>
 8009db0:	bd38      	pop	{r3, r4, r5, pc}
 8009db2:	0799      	lsls	r1, r3, #30
 8009db4:	bf58      	it	pl
 8009db6:	6962      	ldrpl	r2, [r4, #20]
 8009db8:	60a2      	str	r2, [r4, #8]
 8009dba:	e7f4      	b.n	8009da6 <__swsetup_r+0x8e>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	e7f7      	b.n	8009db0 <__swsetup_r+0x98>
 8009dc0:	20000020 	.word	0x20000020

08009dc4 <_raise_r>:
 8009dc4:	291f      	cmp	r1, #31
 8009dc6:	b538      	push	{r3, r4, r5, lr}
 8009dc8:	4605      	mov	r5, r0
 8009dca:	460c      	mov	r4, r1
 8009dcc:	d904      	bls.n	8009dd8 <_raise_r+0x14>
 8009dce:	2316      	movs	r3, #22
 8009dd0:	6003      	str	r3, [r0, #0]
 8009dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd6:	bd38      	pop	{r3, r4, r5, pc}
 8009dd8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009dda:	b112      	cbz	r2, 8009de2 <_raise_r+0x1e>
 8009ddc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009de0:	b94b      	cbnz	r3, 8009df6 <_raise_r+0x32>
 8009de2:	4628      	mov	r0, r5
 8009de4:	f000 f830 	bl	8009e48 <_getpid_r>
 8009de8:	4622      	mov	r2, r4
 8009dea:	4601      	mov	r1, r0
 8009dec:	4628      	mov	r0, r5
 8009dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009df2:	f000 b817 	b.w	8009e24 <_kill_r>
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d00a      	beq.n	8009e10 <_raise_r+0x4c>
 8009dfa:	1c59      	adds	r1, r3, #1
 8009dfc:	d103      	bne.n	8009e06 <_raise_r+0x42>
 8009dfe:	2316      	movs	r3, #22
 8009e00:	6003      	str	r3, [r0, #0]
 8009e02:	2001      	movs	r0, #1
 8009e04:	e7e7      	b.n	8009dd6 <_raise_r+0x12>
 8009e06:	2100      	movs	r1, #0
 8009e08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	4798      	blx	r3
 8009e10:	2000      	movs	r0, #0
 8009e12:	e7e0      	b.n	8009dd6 <_raise_r+0x12>

08009e14 <raise>:
 8009e14:	4b02      	ldr	r3, [pc, #8]	@ (8009e20 <raise+0xc>)
 8009e16:	4601      	mov	r1, r0
 8009e18:	6818      	ldr	r0, [r3, #0]
 8009e1a:	f7ff bfd3 	b.w	8009dc4 <_raise_r>
 8009e1e:	bf00      	nop
 8009e20:	20000020 	.word	0x20000020

08009e24 <_kill_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d07      	ldr	r5, [pc, #28]	@ (8009e44 <_kill_r+0x20>)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	4608      	mov	r0, r1
 8009e2e:	4611      	mov	r1, r2
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	f7f9 f94f 	bl	80030d4 <_kill>
 8009e36:	1c43      	adds	r3, r0, #1
 8009e38:	d102      	bne.n	8009e40 <_kill_r+0x1c>
 8009e3a:	682b      	ldr	r3, [r5, #0]
 8009e3c:	b103      	cbz	r3, 8009e40 <_kill_r+0x1c>
 8009e3e:	6023      	str	r3, [r4, #0]
 8009e40:	bd38      	pop	{r3, r4, r5, pc}
 8009e42:	bf00      	nop
 8009e44:	20000afc 	.word	0x20000afc

08009e48 <_getpid_r>:
 8009e48:	f7f9 b93c 	b.w	80030c4 <_getpid>

08009e4c <__swhatbuf_r>:
 8009e4c:	b570      	push	{r4, r5, r6, lr}
 8009e4e:	460c      	mov	r4, r1
 8009e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e54:	2900      	cmp	r1, #0
 8009e56:	b096      	sub	sp, #88	@ 0x58
 8009e58:	4615      	mov	r5, r2
 8009e5a:	461e      	mov	r6, r3
 8009e5c:	da0d      	bge.n	8009e7a <__swhatbuf_r+0x2e>
 8009e5e:	89a3      	ldrh	r3, [r4, #12]
 8009e60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e64:	f04f 0100 	mov.w	r1, #0
 8009e68:	bf14      	ite	ne
 8009e6a:	2340      	movne	r3, #64	@ 0x40
 8009e6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e70:	2000      	movs	r0, #0
 8009e72:	6031      	str	r1, [r6, #0]
 8009e74:	602b      	str	r3, [r5, #0]
 8009e76:	b016      	add	sp, #88	@ 0x58
 8009e78:	bd70      	pop	{r4, r5, r6, pc}
 8009e7a:	466a      	mov	r2, sp
 8009e7c:	f000 f848 	bl	8009f10 <_fstat_r>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	dbec      	blt.n	8009e5e <__swhatbuf_r+0x12>
 8009e84:	9901      	ldr	r1, [sp, #4]
 8009e86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e8e:	4259      	negs	r1, r3
 8009e90:	4159      	adcs	r1, r3
 8009e92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e96:	e7eb      	b.n	8009e70 <__swhatbuf_r+0x24>

08009e98 <__smakebuf_r>:
 8009e98:	898b      	ldrh	r3, [r1, #12]
 8009e9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e9c:	079d      	lsls	r5, r3, #30
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	d507      	bpl.n	8009eb4 <__smakebuf_r+0x1c>
 8009ea4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	6123      	str	r3, [r4, #16]
 8009eac:	2301      	movs	r3, #1
 8009eae:	6163      	str	r3, [r4, #20]
 8009eb0:	b003      	add	sp, #12
 8009eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eb4:	ab01      	add	r3, sp, #4
 8009eb6:	466a      	mov	r2, sp
 8009eb8:	f7ff ffc8 	bl	8009e4c <__swhatbuf_r>
 8009ebc:	9f00      	ldr	r7, [sp, #0]
 8009ebe:	4605      	mov	r5, r0
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7fe fecc 	bl	8008c60 <_malloc_r>
 8009ec8:	b948      	cbnz	r0, 8009ede <__smakebuf_r+0x46>
 8009eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ece:	059a      	lsls	r2, r3, #22
 8009ed0:	d4ee      	bmi.n	8009eb0 <__smakebuf_r+0x18>
 8009ed2:	f023 0303 	bic.w	r3, r3, #3
 8009ed6:	f043 0302 	orr.w	r3, r3, #2
 8009eda:	81a3      	strh	r3, [r4, #12]
 8009edc:	e7e2      	b.n	8009ea4 <__smakebuf_r+0xc>
 8009ede:	89a3      	ldrh	r3, [r4, #12]
 8009ee0:	6020      	str	r0, [r4, #0]
 8009ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ee6:	81a3      	strh	r3, [r4, #12]
 8009ee8:	9b01      	ldr	r3, [sp, #4]
 8009eea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009eee:	b15b      	cbz	r3, 8009f08 <__smakebuf_r+0x70>
 8009ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	f000 f81d 	bl	8009f34 <_isatty_r>
 8009efa:	b128      	cbz	r0, 8009f08 <__smakebuf_r+0x70>
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	f023 0303 	bic.w	r3, r3, #3
 8009f02:	f043 0301 	orr.w	r3, r3, #1
 8009f06:	81a3      	strh	r3, [r4, #12]
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	431d      	orrs	r5, r3
 8009f0c:	81a5      	strh	r5, [r4, #12]
 8009f0e:	e7cf      	b.n	8009eb0 <__smakebuf_r+0x18>

08009f10 <_fstat_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4d07      	ldr	r5, [pc, #28]	@ (8009f30 <_fstat_r+0x20>)
 8009f14:	2300      	movs	r3, #0
 8009f16:	4604      	mov	r4, r0
 8009f18:	4608      	mov	r0, r1
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	602b      	str	r3, [r5, #0]
 8009f1e:	f7f9 f939 	bl	8003194 <_fstat>
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	d102      	bne.n	8009f2c <_fstat_r+0x1c>
 8009f26:	682b      	ldr	r3, [r5, #0]
 8009f28:	b103      	cbz	r3, 8009f2c <_fstat_r+0x1c>
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	bd38      	pop	{r3, r4, r5, pc}
 8009f2e:	bf00      	nop
 8009f30:	20000afc 	.word	0x20000afc

08009f34 <_isatty_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d06      	ldr	r5, [pc, #24]	@ (8009f50 <_isatty_r+0x1c>)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	602b      	str	r3, [r5, #0]
 8009f40:	f7f9 f938 	bl	80031b4 <_isatty>
 8009f44:	1c43      	adds	r3, r0, #1
 8009f46:	d102      	bne.n	8009f4e <_isatty_r+0x1a>
 8009f48:	682b      	ldr	r3, [r5, #0]
 8009f4a:	b103      	cbz	r3, 8009f4e <_isatty_r+0x1a>
 8009f4c:	6023      	str	r3, [r4, #0]
 8009f4e:	bd38      	pop	{r3, r4, r5, pc}
 8009f50:	20000afc 	.word	0x20000afc

08009f54 <_init>:
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	bf00      	nop
 8009f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5a:	bc08      	pop	{r3}
 8009f5c:	469e      	mov	lr, r3
 8009f5e:	4770      	bx	lr

08009f60 <_fini>:
 8009f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f62:	bf00      	nop
 8009f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f66:	bc08      	pop	{r3}
 8009f68:	469e      	mov	lr, r3
 8009f6a:	4770      	bx	lr
