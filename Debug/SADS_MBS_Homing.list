
SADS_MBS_Homing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d28  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08006ef8  08006ef8  00007ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007340  08007340  000091e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007340  08007340  00008340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007348  08007348  000091e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007348  08007348  00008348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800734c  0800734c  0000834c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08007350  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200001e4  08007534  000091e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08007534  0000952c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113d2  00000000  00000000  00009214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a6  00000000  00000000  0001a5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0001ca90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc6  00000000  00000000  0001dac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000302f  00000000  00000000  0001e786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001443a  00000000  00000000  000217b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5af8  00000000  00000000  00035bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b6e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000562c  00000000  00000000  0010b72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00110d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006ee0 	.word	0x08006ee0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08006ee0 	.word	0x08006ee0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f000 fe39 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f815 	bl	8000f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 f92b 	bl	8001140 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eea:	f000 f8ff 	bl	80010ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000eee:	f000 f881 	bl	8000ff4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ef2:	f000 f8af 	bl	8001054 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); // Start TIM2 interrupts
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <main+0x34>)
 8000ef8:	f002 f966 	bl	80031c8 <HAL_TIM_Base_Start_IT>
  uint8_t sampleRate = 0x50;
 8000efc:	2350      	movs	r3, #80	@ 0x50
 8000efe:	71fb      	strb	r3, [r7, #7]
//  MTi_init(sampleRate);
//  HAL_Delay(5000);
  stepperControl_init();
 8000f00:	f000 fa6e 	bl	80013e0 <stepperControl_init>
  home();
 8000f04:	f000 fae6 	bl	80014d4 <home>
//  char g_textBuffer[80];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <main+0x30>
 8000f0c:	20000254 	.word	0x20000254

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b094      	sub	sp, #80	@ 0x50
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	2234      	movs	r2, #52	@ 0x34
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f003 ff15 	bl	8004d4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	4b2c      	ldr	r3, [pc, #176]	@ (8000fec <SystemClock_Config+0xdc>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8000fec <SystemClock_Config+0xdc>)
 8000f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f44:	4b29      	ldr	r3, [pc, #164]	@ (8000fec <SystemClock_Config+0xdc>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	4b26      	ldr	r3, [pc, #152]	@ (8000ff0 <SystemClock_Config+0xe0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a25      	ldr	r2, [pc, #148]	@ (8000ff0 <SystemClock_Config+0xe0>)
 8000f5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <SystemClock_Config+0xe0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f74:	2310      	movs	r3, #16
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f80:	2308      	movs	r3, #8
 8000f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f84:	23b4      	movs	r3, #180	@ 0xb4
 8000f86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fe27 	bl	8002bec <HAL_RCC_OscConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fa4:	f000 f9a6 	bl	80012f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fa8:	f001 fa86 	bl	80024b8 <HAL_PWREx_EnableOverDrive>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fb2:	f000 f99f 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fcc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fabf 	bl	8002558 <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fe0:	f000 f988 	bl	80012f4 <Error_Handler>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3750      	adds	r7, #80	@ 0x50
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <MX_I2C1_Init+0x54>)
 8000ffa:	4a14      	ldr	r2, [pc, #80]	@ (800104c <MX_I2C1_Init+0x58>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ffe:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_I2C1_Init+0x54>)
 8001000:	4a13      	ldr	r2, [pc, #76]	@ (8001050 <MX_I2C1_Init+0x5c>)
 8001002:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001004:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <MX_I2C1_Init+0x54>)
 8001006:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800100a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_I2C1_Init+0x54>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <MX_I2C1_Init+0x54>)
 8001014:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001018:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <MX_I2C1_Init+0x54>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001020:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_I2C1_Init+0x54>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <MX_I2C1_Init+0x54>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_I2C1_Init+0x54>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_I2C1_Init+0x54>)
 8001034:	f001 f8fc 	bl	8002230 <HAL_I2C_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800103e:	f000 f959 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000200 	.word	0x20000200
 800104c:	40005400 	.word	0x40005400
 8001050:	00061a80 	.word	0x00061a80

08001054 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <MX_TIM2_Init+0x94>)
 8001072:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17999;
 8001078:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <MX_TIM2_Init+0x94>)
 800107a:	f244 624f 	movw	r2, #17999	@ 0x464f
 800107e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <MX_TIM2_Init+0x94>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <MX_TIM2_Init+0x94>)
 8001088:	2201      	movs	r2, #1
 800108a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <MX_TIM2_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <MX_TIM2_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001098:	4813      	ldr	r0, [pc, #76]	@ (80010e8 <MX_TIM2_Init+0x94>)
 800109a:	f002 f845 	bl	8003128 <HAL_TIM_Base_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010a4:	f000 f926 	bl	80012f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <MX_TIM2_Init+0x94>)
 80010b6:	f002 f9e7 	bl	8003488 <HAL_TIM_ConfigClockSource>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010c0:	f000 f918 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_TIM2_Init+0x94>)
 80010d2:	f002 fc0f 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010dc:	f000 f90a 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000254 	.word	0x20000254

080010ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f0:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	@ (800113c <MX_USART2_UART_Init+0x50>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80010fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <MX_USART2_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <MX_USART2_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <MX_USART2_UART_Init+0x4c>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <MX_USART2_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_USART2_UART_Init+0x4c>)
 8001124:	f002 fc76 	bl	8003a14 <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800112e:	f000 f8e1 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000029c 	.word	0x2000029c
 800113c:	40004400 	.word	0x40004400

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b62      	ldr	r3, [pc, #392]	@ (80012e4 <MX_GPIO_Init+0x1a4>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a61      	ldr	r2, [pc, #388]	@ (80012e4 <MX_GPIO_Init+0x1a4>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b5f      	ldr	r3, [pc, #380]	@ (80012e4 <MX_GPIO_Init+0x1a4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b5b      	ldr	r3, [pc, #364]	@ (80012e4 <MX_GPIO_Init+0x1a4>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a5a      	ldr	r2, [pc, #360]	@ (80012e4 <MX_GPIO_Init+0x1a4>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b58      	ldr	r3, [pc, #352]	@ (80012e4 <MX_GPIO_Init+0x1a4>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b54      	ldr	r3, [pc, #336]	@ (80012e4 <MX_GPIO_Init+0x1a4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a53      	ldr	r2, [pc, #332]	@ (80012e4 <MX_GPIO_Init+0x1a4>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b51      	ldr	r3, [pc, #324]	@ (80012e4 <MX_GPIO_Init+0x1a4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b4d      	ldr	r3, [pc, #308]	@ (80012e4 <MX_GPIO_Init+0x1a4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a4c      	ldr	r2, [pc, #304]	@ (80012e4 <MX_GPIO_Init+0x1a4>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b4a      	ldr	r3, [pc, #296]	@ (80012e4 <MX_GPIO_Init+0x1a4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, I2C_ADD0_Pin|I2C_ADD1_Pin|I2C_ADD2_Pin|PSEL_1_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 80011cc:	4846      	ldr	r0, [pc, #280]	@ (80012e8 <MX_GPIO_Init+0x1a8>)
 80011ce:	f000 fffd 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP4_Pin|DIR3_Pin|STEP1_Pin|STEP2_Pin
 80011d2:	2200      	movs	r2, #0
 80011d4:	f24e 4132 	movw	r1, #58418	@ 0xe432
 80011d8:	4844      	ldr	r0, [pc, #272]	@ (80012ec <MX_GPIO_Init+0x1ac>)
 80011da:	f000 fff7 	bl	80021cc <HAL_GPIO_WritePin>
                          |STEP3_Pin|DIR2_Pin|RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PSEL_0_GPIO_Port, PSEL_0_Pin, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	4843      	ldr	r0, [pc, #268]	@ (80012f0 <MX_GPIO_Init+0x1b0>)
 80011e4:	f000 fff2 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR4_Pin|DIR1_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80011ee:	483e      	ldr	r0, [pc, #248]	@ (80012e8 <MX_GPIO_Init+0x1a8>)
 80011f0:	f000 ffec 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4839      	ldr	r0, [pc, #228]	@ (80012f0 <MX_GPIO_Init+0x1b0>)
 800120c:	f000 fe4a 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_ADD0_Pin I2C_ADD1_Pin I2C_ADD2_Pin DIR4_Pin
                           PSEL_1_Pin DIR1_Pin */
  GPIO_InitStruct.Pin = I2C_ADD0_Pin|I2C_ADD1_Pin|I2C_ADD2_Pin|DIR4_Pin
 8001210:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001214:	617b      	str	r3, [r7, #20]
                          |PSEL_1_Pin|DIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	482f      	ldr	r0, [pc, #188]	@ (80012e8 <MX_GPIO_Init+0x1a8>)
 800122a:	f000 fe3b 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP4_Pin DIR3_Pin STEP1_Pin STEP2_Pin
                           STEP3_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = STEP4_Pin|DIR3_Pin|STEP1_Pin|STEP2_Pin
 800122e:	f24e 4312 	movw	r3, #58386	@ 0xe412
 8001232:	617b      	str	r3, [r7, #20]
                          |STEP3_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4829      	ldr	r0, [pc, #164]	@ (80012ec <MX_GPIO_Init+0x1ac>)
 8001248:	f000 fe2c 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PSEL_0_Pin */
  GPIO_InitStruct.Pin = PSEL_0_Pin;
 800124c:	2380      	movs	r3, #128	@ 0x80
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PSEL_0_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	4823      	ldr	r0, [pc, #140]	@ (80012f0 <MX_GPIO_Init+0x1b0>)
 8001264:	f000 fe1e 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH1_Pin LIMIT_SWITCH2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH1_Pin|LIMIT_SWITCH2_Pin;
 8001268:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800126e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	481a      	ldr	r0, [pc, #104]	@ (80012e8 <MX_GPIO_Init+0x1a8>)
 8001280:	f000 fe10 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_READY_Pin */
  GPIO_InitStruct.Pin = DATA_READY_Pin;
 8001284:	2308      	movs	r3, #8
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001288:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800128e:	2302      	movs	r3, #2
 8001290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_READY_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4814      	ldr	r0, [pc, #80]	@ (80012ec <MX_GPIO_Init+0x1ac>)
 800129a:	f000 fe03 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 800129e:	2320      	movs	r3, #32
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012aa:	2302      	movs	r3, #2
 80012ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	480d      	ldr	r0, [pc, #52]	@ (80012ec <MX_GPIO_Init+0x1ac>)
 80012b6:	f000 fdf5 	bl	8001ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2009      	movs	r0, #9
 80012c0:	f000 fdb9 	bl	8001e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80012c4:	2009      	movs	r0, #9
 80012c6:	f000 fdd2 	bl	8001e6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2028      	movs	r0, #40	@ 0x28
 80012d0:	f000 fdb1 	bl	8001e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012d4:	2028      	movs	r0, #40	@ 0x28
 80012d6:	f000 fdca 	bl	8001e6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	@ 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020800 	.word	0x40020800

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <Error_Handler+0x8>

08001300 <doStep>:
char MOTOR1_READY;
char MOTOR2_READY;
char MOTOR3_READY;
char MOTOR4_READY;

void doStep() {
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0

	for (int i = 0; i < 4; i++) {
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e05c      	b.n	80013c6 <doStep+0xc6>
		StepperMotor *motor = motors[i];
 800130c:	4a33      	ldr	r2, [pc, #204]	@ (80013dc <doStep+0xdc>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001314:	603b      	str	r3, [r7, #0]
		if (motor->active) {
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	7e1b      	ldrb	r3, [r3, #24]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d050      	beq.n	80013c0 <doStep+0xc0>
			if (motor->currentPos < motor->desiredPos) {
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	429a      	cmp	r2, r3
 8001328:	da21      	bge.n	800136e <doStep+0x6e>
				// Set direction for forward motion
				motor->dirPort->BSRR = motor->dirPin;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	899a      	ldrh	r2, [r3, #12]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	619a      	str	r2, [r3, #24]
				if (motor->toggleCount == 0) { // rising edge: set STEP high
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	7b9b      	ldrb	r3, [r3, #14]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d108      	bne.n	800134e <doStep+0x4e>
					motor->stepPort->BSRR = motor->stepPin;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	889a      	ldrh	r2, [r3, #4]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	619a      	str	r2, [r3, #24]
					motor->toggleCount = 1;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2201      	movs	r2, #1
 800134a:	739a      	strb	r2, [r3, #14]
 800134c:	e038      	b.n	80013c0 <doStep+0xc0>
				} else { // falling edge: set STEP low and update position
					motor->stepPort->BSRR = (motor->stepPin << 16);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	889b      	ldrh	r3, [r3, #4]
 8001352:	461a      	mov	r2, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0412      	lsls	r2, r2, #16
 800135a:	619a      	str	r2, [r3, #24]
					motor->toggleCount = 0;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2200      	movs	r2, #0
 8001360:	739a      	strb	r2, [r3, #14]
					motor->currentPos++;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	e028      	b.n	80013c0 <doStep+0xc0>
//					int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Motor %d At Position: %d\n",i,motor->currentPos);
//					HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer2, len, 10000);
				}
			} else if (motor->currentPos > motor->desiredPos) {
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	429a      	cmp	r2, r3
 8001378:	dd22      	ble.n	80013c0 <doStep+0xc0>
				// Set direction for reverse motion using DIR clear
				motor->dirPort->BSRR = (motor->dirPin << 16);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	899b      	ldrh	r3, [r3, #12]
 800137e:	461a      	mov	r2, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	0412      	lsls	r2, r2, #16
 8001386:	619a      	str	r2, [r3, #24]
				if (motor->toggleCount == 0) { // rising edge: set STEP high
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	7b9b      	ldrb	r3, [r3, #14]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d108      	bne.n	80013a2 <doStep+0xa2>
					motor->stepPort->BSRR = motor->stepPin;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	889a      	ldrh	r2, [r3, #4]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	619a      	str	r2, [r3, #24]
					motor->toggleCount = 1;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	2201      	movs	r2, #1
 800139e:	739a      	strb	r2, [r3, #14]
 80013a0:	e00e      	b.n	80013c0 <doStep+0xc0>
				} else { // falling edge: set STEP low and update position
					motor->stepPort->BSRR = (motor->stepPin << 16);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	889b      	ldrh	r3, [r3, #4]
 80013a6:	461a      	mov	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	0412      	lsls	r2, r2, #16
 80013ae:	619a      	str	r2, [r3, #24]
					motor->toggleCount = 0;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	739a      	strb	r2, [r3, #14]
					motor->currentPos--;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	1e5a      	subs	r2, r3, #1
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < 4; i++) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3301      	adds	r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	dd9f      	ble.n	800130c <doStep+0xc>
				}
			}
		}
	}

}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000000 	.word	0x20000000

080013e0 <stepperControl_init>:

void stepperControl_init(){
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

	motor4.stepPort = STEP4_GPIO_Port;
 80013e4:	4b35      	ldr	r3, [pc, #212]	@ (80014bc <stepperControl_init+0xdc>)
 80013e6:	4a36      	ldr	r2, [pc, #216]	@ (80014c0 <stepperControl_init+0xe0>)
 80013e8:	601a      	str	r2, [r3, #0]
	motor4.stepPin  = STEP4_Pin;
 80013ea:	4b34      	ldr	r3, [pc, #208]	@ (80014bc <stepperControl_init+0xdc>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	809a      	strh	r2, [r3, #4]
	motor4.dirPort  = DIR4_GPIO_Port;
 80013f0:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <stepperControl_init+0xdc>)
 80013f2:	4a34      	ldr	r2, [pc, #208]	@ (80014c4 <stepperControl_init+0xe4>)
 80013f4:	609a      	str	r2, [r3, #8]
	motor4.dirPin   = DIR4_Pin;
 80013f6:	4b31      	ldr	r3, [pc, #196]	@ (80014bc <stepperControl_init+0xdc>)
 80013f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013fc:	819a      	strh	r2, [r3, #12]
	motor4.currentPos = 0;
 80013fe:	4b2f      	ldr	r3, [pc, #188]	@ (80014bc <stepperControl_init+0xdc>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
	motor4.desiredPos = 0;
 8001404:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <stepperControl_init+0xdc>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
	motor4.toggleCount = 0;
 800140a:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <stepperControl_init+0xdc>)
 800140c:	2200      	movs	r2, #0
 800140e:	739a      	strb	r2, [r3, #14]
	motor4.active = 0;
 8001410:	4b2a      	ldr	r3, [pc, #168]	@ (80014bc <stepperControl_init+0xdc>)
 8001412:	2200      	movs	r2, #0
 8001414:	761a      	strb	r2, [r3, #24]

	motor3.stepPort = STEP3_GPIO_Port;
 8001416:	4b2c      	ldr	r3, [pc, #176]	@ (80014c8 <stepperControl_init+0xe8>)
 8001418:	4a29      	ldr	r2, [pc, #164]	@ (80014c0 <stepperControl_init+0xe0>)
 800141a:	601a      	str	r2, [r3, #0]
	motor3.stepPin  = STEP3_Pin;
 800141c:	4b2a      	ldr	r3, [pc, #168]	@ (80014c8 <stepperControl_init+0xe8>)
 800141e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001422:	809a      	strh	r2, [r3, #4]
	motor3.dirPort  = DIR3_GPIO_Port;
 8001424:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <stepperControl_init+0xe8>)
 8001426:	4a26      	ldr	r2, [pc, #152]	@ (80014c0 <stepperControl_init+0xe0>)
 8001428:	609a      	str	r2, [r3, #8]
	motor3.dirPin   = DIR3_Pin;
 800142a:	4b27      	ldr	r3, [pc, #156]	@ (80014c8 <stepperControl_init+0xe8>)
 800142c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001430:	819a      	strh	r2, [r3, #12]
	motor3.currentPos = 0;
 8001432:	4b25      	ldr	r3, [pc, #148]	@ (80014c8 <stepperControl_init+0xe8>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
	motor3.desiredPos = 0;
 8001438:	4b23      	ldr	r3, [pc, #140]	@ (80014c8 <stepperControl_init+0xe8>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
	motor3.toggleCount = 0;
 800143e:	4b22      	ldr	r3, [pc, #136]	@ (80014c8 <stepperControl_init+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	739a      	strb	r2, [r3, #14]
	motor3.active = 0;
 8001444:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <stepperControl_init+0xe8>)
 8001446:	2200      	movs	r2, #0
 8001448:	761a      	strb	r2, [r3, #24]

    motor2.stepPort = STEP3_GPIO_Port;
 800144a:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <stepperControl_init+0xec>)
 800144c:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <stepperControl_init+0xe0>)
 800144e:	601a      	str	r2, [r3, #0]
	motor2.stepPin  = STEP3_Pin;
 8001450:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <stepperControl_init+0xec>)
 8001452:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001456:	809a      	strh	r2, [r3, #4]
	motor2.dirPort  = DIR3_GPIO_Port;
 8001458:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <stepperControl_init+0xec>)
 800145a:	4a19      	ldr	r2, [pc, #100]	@ (80014c0 <stepperControl_init+0xe0>)
 800145c:	609a      	str	r2, [r3, #8]
	motor2.dirPin   = DIR3_Pin;
 800145e:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <stepperControl_init+0xec>)
 8001460:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001464:	819a      	strh	r2, [r3, #12]
	motor2.currentPos = 0;
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <stepperControl_init+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
	motor2.desiredPos = 0;
 800146c:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <stepperControl_init+0xec>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
	motor2.toggleCount = 0;
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <stepperControl_init+0xec>)
 8001474:	2200      	movs	r2, #0
 8001476:	739a      	strb	r2, [r3, #14]
	motor2.active = 0;
 8001478:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <stepperControl_init+0xec>)
 800147a:	2200      	movs	r2, #0
 800147c:	761a      	strb	r2, [r3, #24]

	motor1.stepPort = STEP4_GPIO_Port;
 800147e:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <stepperControl_init+0xf0>)
 8001480:	4a0f      	ldr	r2, [pc, #60]	@ (80014c0 <stepperControl_init+0xe0>)
 8001482:	601a      	str	r2, [r3, #0]
	motor1.stepPin  = STEP4_Pin;
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <stepperControl_init+0xf0>)
 8001486:	2202      	movs	r2, #2
 8001488:	809a      	strh	r2, [r3, #4]
	motor1.dirPort  = DIR4_GPIO_Port;
 800148a:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <stepperControl_init+0xf0>)
 800148c:	4a0d      	ldr	r2, [pc, #52]	@ (80014c4 <stepperControl_init+0xe4>)
 800148e:	609a      	str	r2, [r3, #8]
	motor1.dirPin   = DIR4_Pin;
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <stepperControl_init+0xf0>)
 8001492:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001496:	819a      	strh	r2, [r3, #12]
	motor1.currentPos = 0;
 8001498:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <stepperControl_init+0xf0>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
	motor1.desiredPos = 0;
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <stepperControl_init+0xf0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	615a      	str	r2, [r3, #20]
	motor1.toggleCount = 0;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <stepperControl_init+0xf0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	739a      	strb	r2, [r3, #14]
	motor1.active = 0;
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <stepperControl_init+0xf0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000364 	.word	0x20000364
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020000 	.word	0x40020000
 80014c8:	20000380 	.word	0x20000380
 80014cc:	2000039c 	.word	0x2000039c
 80014d0:	200003b8 	.word	0x200003b8

080014d4 <home>:

void home(){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0

	MOTOR1_READY = 0;
 80014da:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <home+0xa4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
	MOTOR2_READY = 0;
 80014e0:	4b26      	ldr	r3, [pc, #152]	@ (800157c <home+0xa8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
	homing = 1;
 80014e6:	4b26      	ldr	r3, [pc, #152]	@ (8001580 <home+0xac>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]

	motor1.desiredPos = 1000000;
 80014ec:	4b25      	ldr	r3, [pc, #148]	@ (8001584 <home+0xb0>)
 80014ee:	4a26      	ldr	r2, [pc, #152]	@ (8001588 <home+0xb4>)
 80014f0:	615a      	str	r2, [r3, #20]
	motor1.active = 1;
 80014f2:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <home+0xb0>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	761a      	strb	r2, [r3, #24]
	motor2.desiredPos = 1000000;
 80014f8:	4b24      	ldr	r3, [pc, #144]	@ (800158c <home+0xb8>)
 80014fa:	4a23      	ldr	r2, [pc, #140]	@ (8001588 <home+0xb4>)
 80014fc:	615a      	str	r2, [r3, #20]
	motor2.active = 1;
 80014fe:	4b23      	ldr	r3, [pc, #140]	@ (800158c <home+0xb8>)
 8001500:	2201      	movs	r2, #1
 8001502:	761a      	strb	r2, [r3, #24]
	int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Motor 1 Active and Desired Pos Set\n");
 8001504:	4a22      	ldr	r2, [pc, #136]	@ (8001590 <home+0xbc>)
 8001506:	2180      	movs	r1, #128	@ 0x80
 8001508:	4822      	ldr	r0, [pc, #136]	@ (8001594 <home+0xc0>)
 800150a:	f003 fba9 	bl	8004c60 <sniprintf>
 800150e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer2, len, 10000);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	b29a      	uxth	r2, r3
 8001514:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001518:	491e      	ldr	r1, [pc, #120]	@ (8001594 <home+0xc0>)
 800151a:	481f      	ldr	r0, [pc, #124]	@ (8001598 <home+0xc4>)
 800151c:	f002 faca 	bl	8003ab4 <HAL_UART_Transmit>
	while((!MOTOR1_READY) || (!MOTOR2_READY)) {
 8001520:	bf00      	nop
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <home+0xa4>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0fb      	beq.n	8001522 <home+0x4e>
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <home+0xa8>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f7      	beq.n	8001522 <home+0x4e>

	}

	len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Finished Homing, beginning next stage in 10 seconds...\r\n");
 8001532:	4a1a      	ldr	r2, [pc, #104]	@ (800159c <home+0xc8>)
 8001534:	2180      	movs	r1, #128	@ 0x80
 8001536:	4817      	ldr	r0, [pc, #92]	@ (8001594 <home+0xc0>)
 8001538:	f003 fb92 	bl	8004c60 <sniprintf>
 800153c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer2, len, 10000);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	b29a      	uxth	r2, r3
 8001542:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001546:	4913      	ldr	r1, [pc, #76]	@ (8001594 <home+0xc0>)
 8001548:	4813      	ldr	r0, [pc, #76]	@ (8001598 <home+0xc4>)
 800154a:	f002 fab3 	bl	8003ab4 <HAL_UART_Transmit>

	HAL_Delay(10000);
 800154e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001552:	f000 fb71 	bl	8001c38 <HAL_Delay>
	motor1.active = 0;
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <home+0xb0>)
 8001558:	2200      	movs	r2, #0
 800155a:	761a      	strb	r2, [r3, #24]
	motor2.active = 0;
 800155c:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <home+0xb8>)
 800155e:	2200      	movs	r2, #0
 8001560:	761a      	strb	r2, [r3, #24]

	homing = 0;
 8001562:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <home+0xac>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]

	HAL_Delay(2000);
 8001568:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800156c:	f000 fb64 	bl	8001c38 <HAL_Delay>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200003d5 	.word	0x200003d5
 800157c:	200003d6 	.word	0x200003d6
 8001580:	200003d4 	.word	0x200003d4
 8001584:	200003b8 	.word	0x200003b8
 8001588:	000f4240 	.word	0x000f4240
 800158c:	2000039c 	.word	0x2000039c
 8001590:	08006ef8 	.word	0x08006ef8
 8001594:	200002e4 	.word	0x200002e4
 8001598:	2000029c 	.word	0x2000029c
 800159c:	08006f1c 	.word	0x08006f1c

080015a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
	if(!homing) {
 80015aa:	4b3e      	ldr	r3, [pc, #248]	@ (80016a4 <HAL_GPIO_EXTI_Callback+0x104>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d12f      	bne.n	8001612 <HAL_GPIO_EXTI_Callback+0x72>
	    if ((GPIO_Pin == LIMIT_SWITCH1_Pin) || (GPIO_Pin == LIMIT_SWITCH2_Pin)) {  // Ensure LIMIT_SWITCH_Pin is defined correctly
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_EXTI_Callback+0x22>
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015c0:	d126      	bne.n	8001610 <HAL_GPIO_EXTI_Callback+0x70>
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered\r\n");
 80015c2:	4a39      	ldr	r2, [pc, #228]	@ (80016a8 <HAL_GPIO_EXTI_Callback+0x108>)
 80015c4:	2180      	movs	r1, #128	@ 0x80
 80015c6:	4839      	ldr	r0, [pc, #228]	@ (80016ac <HAL_GPIO_EXTI_Callback+0x10c>)
 80015c8:	f003 fb4a 	bl	8004c60 <sniprintf>
 80015cc:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer2, len, 10000);
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80015d6:	4935      	ldr	r1, [pc, #212]	@ (80016ac <HAL_GPIO_EXTI_Callback+0x10c>)
 80015d8:	4835      	ldr	r0, [pc, #212]	@ (80016b0 <HAL_GPIO_EXTI_Callback+0x110>)
 80015da:	f002 fa6b 	bl	8003ab4 <HAL_UART_Transmit>

	        motor1.active = 0;
 80015de:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x114>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	761a      	strb	r2, [r3, #24]
	        motor2.active = 0;
 80015e4:	4b34      	ldr	r3, [pc, #208]	@ (80016b8 <HAL_GPIO_EXTI_Callback+0x118>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	761a      	strb	r2, [r3, #24]
	        motor3.active = 0;
 80015ea:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <HAL_GPIO_EXTI_Callback+0x11c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	761a      	strb	r2, [r3, #24]
	        motor4.active = 0;
 80015f0:	4b33      	ldr	r3, [pc, #204]	@ (80016c0 <HAL_GPIO_EXTI_Callback+0x120>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	761a      	strb	r2, [r3, #24]

	        motor1.currentPos = 0;
 80015f6:	4b2f      	ldr	r3, [pc, #188]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x114>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
	        motor2.currentPos = 0;
 80015fc:	4b2e      	ldr	r3, [pc, #184]	@ (80016b8 <HAL_GPIO_EXTI_Callback+0x118>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
	        motor3.currentPos = 0;
 8001602:	4b2e      	ldr	r3, [pc, #184]	@ (80016bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
	        motor4.currentPos = 0;
 8001608:	4b2d      	ldr	r3, [pc, #180]	@ (80016c0 <HAL_GPIO_EXTI_Callback+0x120>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
	    if ((GPIO_Pin == LIMIT_SWITCH1_Pin) || (GPIO_Pin == LIMIT_SWITCH2_Pin)) {  // Ensure LIMIT_SWITCH_Pin is defined correctly
 800160e:	e000      	b.n	8001612 <HAL_GPIO_EXTI_Callback+0x72>
	    } else {
	    	__NOP();
 8001610:	bf00      	nop
	    }
	}

	if(homing) {
 8001612:	4b24      	ldr	r3, [pc, #144]	@ (80016a4 <HAL_GPIO_EXTI_Callback+0x104>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d03f      	beq.n	800169a <HAL_GPIO_EXTI_Callback+0xfa>
		if ((GPIO_Pin == LIMIT_SWITCH1_Pin) && (!MOTOR1_READY)) {
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001620:	d11b      	bne.n	800165a <HAL_GPIO_EXTI_Callback+0xba>
 8001622:	4b28      	ldr	r3, [pc, #160]	@ (80016c4 <HAL_GPIO_EXTI_Callback+0x124>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d117      	bne.n	800165a <HAL_GPIO_EXTI_Callback+0xba>
			MOTOR1_READY = 1;
 800162a:	4b26      	ldr	r3, [pc, #152]	@ (80016c4 <HAL_GPIO_EXTI_Callback+0x124>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
			motor1.currentPos = HOMING_STEPS_REQ;
 8001630:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001634:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x114>)
 8001636:	611a      	str	r2, [r3, #16]
			motor1.desiredPos = 0;
 8001638:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x114>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 1!\r\n");
 800163e:	4a22      	ldr	r2, [pc, #136]	@ (80016c8 <HAL_GPIO_EXTI_Callback+0x128>)
 8001640:	2180      	movs	r1, #128	@ 0x80
 8001642:	481a      	ldr	r0, [pc, #104]	@ (80016ac <HAL_GPIO_EXTI_Callback+0x10c>)
 8001644:	f003 fb0c 	bl	8004c60 <sniprintf>
 8001648:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer2, len, 10000);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	b29a      	uxth	r2, r3
 800164e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001652:	4916      	ldr	r1, [pc, #88]	@ (80016ac <HAL_GPIO_EXTI_Callback+0x10c>)
 8001654:	4816      	ldr	r0, [pc, #88]	@ (80016b0 <HAL_GPIO_EXTI_Callback+0x110>)
 8001656:	f002 fa2d 	bl	8003ab4 <HAL_UART_Transmit>

		}
		if ((GPIO_Pin == B1_Pin) && (!MOTOR2_READY)) {
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001660:	d11b      	bne.n	800169a <HAL_GPIO_EXTI_Callback+0xfa>
 8001662:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <HAL_GPIO_EXTI_Callback+0x12c>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d117      	bne.n	800169a <HAL_GPIO_EXTI_Callback+0xfa>
			MOTOR2_READY = 1;
 800166a:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <HAL_GPIO_EXTI_Callback+0x12c>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
			motor2.currentPos = HOMING_STEPS_REQ;
 8001670:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001674:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <HAL_GPIO_EXTI_Callback+0x118>)
 8001676:	611a      	str	r2, [r3, #16]
			motor2.desiredPos = 0;
 8001678:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <HAL_GPIO_EXTI_Callback+0x118>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 2!\r\n");
 800167e:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <HAL_GPIO_EXTI_Callback+0x130>)
 8001680:	2180      	movs	r1, #128	@ 0x80
 8001682:	480a      	ldr	r0, [pc, #40]	@ (80016ac <HAL_GPIO_EXTI_Callback+0x10c>)
 8001684:	f003 faec 	bl	8004c60 <sniprintf>
 8001688:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer2, len, 10000);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	b29a      	uxth	r2, r3
 800168e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001692:	4906      	ldr	r1, [pc, #24]	@ (80016ac <HAL_GPIO_EXTI_Callback+0x10c>)
 8001694:	4806      	ldr	r0, [pc, #24]	@ (80016b0 <HAL_GPIO_EXTI_Callback+0x110>)
 8001696:	f002 fa0d 	bl	8003ab4 <HAL_UART_Transmit>
		}
	}
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200003d4 	.word	0x200003d4
 80016a8:	08006f58 	.word	0x08006f58
 80016ac:	200002e4 	.word	0x200002e4
 80016b0:	2000029c 	.word	0x2000029c
 80016b4:	200003b8 	.word	0x200003b8
 80016b8:	2000039c 	.word	0x2000039c
 80016bc:	20000380 	.word	0x20000380
 80016c0:	20000364 	.word	0x20000364
 80016c4:	200003d5 	.word	0x200003d5
 80016c8:	08006f70 	.word	0x08006f70
 80016cc:	200003d6 	.word	0x200003d6
 80016d0:	08006f94 	.word	0x08006f94

080016d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016e4:	d101      	bne.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x16>
        doStep();
 80016e6:	f7ff fe0b 	bl	8001300 <doStep>
    }
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <HAL_MspInit+0x4c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001702:	4a0f      	ldr	r2, [pc, #60]	@ (8001740 <HAL_MspInit+0x4c>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001708:	6453      	str	r3, [r2, #68]	@ 0x44
 800170a:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <HAL_MspInit+0x4c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_MspInit+0x4c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	4a08      	ldr	r2, [pc, #32]	@ (8001740 <HAL_MspInit+0x4c>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	@ 0x40
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_MspInit+0x4c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001732:	2007      	movs	r0, #7
 8001734:	f000 fb74 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	@ 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a19      	ldr	r2, [pc, #100]	@ (80017c8 <HAL_I2C_MspInit+0x84>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12c      	bne.n	80017c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a17      	ldr	r2, [pc, #92]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001782:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001788:	2312      	movs	r3, #18
 800178a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001794:	2304      	movs	r3, #4
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <HAL_I2C_MspInit+0x8c>)
 80017a0:	f000 fb80 	bl	8001ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	4a07      	ldr	r2, [pc, #28]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 80017ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	@ 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40005400 	.word	0x40005400
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020400 	.word	0x40020400

080017d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017e4:	d115      	bne.n	8001812 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <HAL_TIM_Base_MspInit+0x48>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	4a0b      	ldr	r2, [pc, #44]	@ (800181c <HAL_TIM_Base_MspInit+0x48>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_TIM_Base_MspInit+0x48>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	201c      	movs	r0, #28
 8001808:	f000 fb15 	bl	8001e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800180c:	201c      	movs	r0, #28
 800180e:	f000 fb2e 	bl	8001e6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800

08001820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a19      	ldr	r2, [pc, #100]	@ (80018a4 <HAL_UART_MspInit+0x84>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d12b      	bne.n	800189a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <HAL_UART_MspInit+0x88>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	4a17      	ldr	r2, [pc, #92]	@ (80018a8 <HAL_UART_MspInit+0x88>)
 800184c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001850:	6413      	str	r3, [r2, #64]	@ 0x40
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_UART_MspInit+0x88>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <HAL_UART_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a10      	ldr	r2, [pc, #64]	@ (80018a8 <HAL_UART_MspInit+0x88>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <HAL_UART_MspInit+0x88>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800187a:	230c      	movs	r3, #12
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800188a:	2307      	movs	r3, #7
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	@ (80018ac <HAL_UART_MspInit+0x8c>)
 8001896:	f000 fb05 	bl	8001ea4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	@ 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40004400 	.word	0x40004400
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020000 	.word	0x40020000

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <NMI_Handler+0x4>

080018b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <MemManage_Handler+0x4>

080018c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001906:	f000 f977 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}

0800190e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DATA_READY_Pin);
 8001912:	2008      	movs	r0, #8
 8001914:	f000 fc74 	bl	8002200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <TIM2_IRQHandler+0x10>)
 8001922:	f001 fcc1 	bl	80032a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000254 	.word	0x20000254

08001930 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH1_Pin);
 8001934:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001938:	f000 fc62 	bl	8002200 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH2_Pin);
 800193c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001940:	f000 fc5e 	bl	8002200 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001944:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001948:	f000 fc5a 	bl	8002200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return 1;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_kill>:

int _kill(int pid, int sig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800196a:	f003 fa43 	bl	8004df4 <__errno>
 800196e:	4603      	mov	r3, r0
 8001970:	2216      	movs	r2, #22
 8001972:	601a      	str	r2, [r3, #0]
  return -1;
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_exit>:

void _exit (int status)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ffe7 	bl	8001960 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001992:	bf00      	nop
 8001994:	e7fd      	b.n	8001992 <_exit+0x12>

08001996 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e00a      	b.n	80019be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019a8:	f3af 8000 	nop.w
 80019ac:	4601      	mov	r1, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	60ba      	str	r2, [r7, #8]
 80019b4:	b2ca      	uxtb	r2, r1
 80019b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	dbf0      	blt.n	80019a8 <_read+0x12>
  }

  return len;
 80019c6:	687b      	ldr	r3, [r7, #4]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e009      	b.n	80019f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	60ba      	str	r2, [r7, #8]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3301      	adds	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	dbf1      	blt.n	80019e2 <_write+0x12>
  }
  return len;
 80019fe:	687b      	ldr	r3, [r7, #4]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_close>:

int _close(int file)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a30:	605a      	str	r2, [r3, #4]
  return 0;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_isatty>:

int _isatty(int file)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b085      	sub	sp, #20
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f003 f9a8 	bl	8004df4 <__errno>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20020000 	.word	0x20020000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	200003d8 	.word	0x200003d8
 8001ad8:	20000530 	.word	0x20000530

08001adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <SystemInit+0x20>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae6:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <SystemInit+0x20>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b04:	f7ff ffea 	bl	8001adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b08:	480c      	ldr	r0, [pc, #48]	@ (8001b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b0a:	490d      	ldr	r1, [pc, #52]	@ (8001b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b20:	4c0a      	ldr	r4, [pc, #40]	@ (8001b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f003 f967 	bl	8004e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b32:	f7ff f9d1 	bl	8000ed8 <main>
  bx  lr    
 8001b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001b44:	08007350 	.word	0x08007350
  ldr r2, =_sbss
 8001b48:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001b4c:	2000052c 	.word	0x2000052c

08001b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC_IRQHandler>
	...

08001b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b58:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <HAL_Init+0x40>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b64:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <HAL_Init+0x40>)
 8001b6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a07      	ldr	r2, [pc, #28]	@ (8001b94 <HAL_Init+0x40>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 f94f 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f000 f808 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b88:	f7ff fdb4 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_InitTick+0x54>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_InitTick+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f967 	bl	8001e8a <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00e      	b.n	8001be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	d80a      	bhi.n	8001be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f000 f92f 	bl	8001e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	@ (8001bf4 <HAL_InitTick+0x5c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000010 	.word	0x20000010
 8001bf0:	20000018 	.word	0x20000018
 8001bf4:	20000014 	.word	0x20000014

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_IncTick+0x20>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_IncTick+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <HAL_IncTick+0x24>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000018 	.word	0x20000018
 8001c1c:	200003dc 	.word	0x200003dc

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	200003dc 	.word	0x200003dc

08001c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff ffee 	bl	8001c20 <HAL_GetTick>
 8001c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c50:	d005      	beq.n	8001c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_Delay+0x44>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c5e:	bf00      	nop
 8001c60:	f7ff ffde 	bl	8001c20 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d8f7      	bhi.n	8001c60 <HAL_Delay+0x28>
  {
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000018 	.word	0x20000018

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4907      	ldr	r1, [pc, #28]	@ (8001d1c <__NVIC_EnableIRQ+0x38>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000e100 	.word	0xe000e100

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	@ (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	@ (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	@ 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	@ 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dec:	d301      	bcc.n	8001df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00f      	b.n	8001e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <SysTick_Config+0x40>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f7ff ff8e 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <SysTick_Config+0x40>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0a:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <SysTick_Config+0x40>)
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	e000e010 	.word	0xe000e010

08001e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff29 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e48:	f7ff ff3e 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	6978      	ldr	r0, [r7, #20]
 8001e54:	f7ff ff8e 	bl	8001d74 <NVIC_EncodePriority>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff5d 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff31 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ffa2 	bl	8001ddc <SysTick_Config>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	@ 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	e165      	b.n	800218c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f040 8154 	bne.w	8002186 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d005      	beq.n	8001ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d130      	bne.n	8001f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2203      	movs	r2, #3
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 0201 	and.w	r2, r3, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d017      	beq.n	8001f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d123      	bne.n	8001fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	08da      	lsrs	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3208      	adds	r2, #8
 8001fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	08da      	lsrs	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3208      	adds	r2, #8
 8001fe2:	69b9      	ldr	r1, [r7, #24]
 8001fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0203 	and.w	r2, r3, #3
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80ae 	beq.w	8002186 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b5d      	ldr	r3, [pc, #372]	@ (80021a4 <HAL_GPIO_Init+0x300>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	4a5c      	ldr	r2, [pc, #368]	@ (80021a4 <HAL_GPIO_Init+0x300>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002038:	6453      	str	r3, [r2, #68]	@ 0x44
 800203a:	4b5a      	ldr	r3, [pc, #360]	@ (80021a4 <HAL_GPIO_Init+0x300>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002046:	4a58      	ldr	r2, [pc, #352]	@ (80021a8 <HAL_GPIO_Init+0x304>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4f      	ldr	r2, [pc, #316]	@ (80021ac <HAL_GPIO_Init+0x308>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d025      	beq.n	80020be <HAL_GPIO_Init+0x21a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4e      	ldr	r2, [pc, #312]	@ (80021b0 <HAL_GPIO_Init+0x30c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01f      	beq.n	80020ba <HAL_GPIO_Init+0x216>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4d      	ldr	r2, [pc, #308]	@ (80021b4 <HAL_GPIO_Init+0x310>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d019      	beq.n	80020b6 <HAL_GPIO_Init+0x212>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4c      	ldr	r2, [pc, #304]	@ (80021b8 <HAL_GPIO_Init+0x314>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0x20e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4b      	ldr	r2, [pc, #300]	@ (80021bc <HAL_GPIO_Init+0x318>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00d      	beq.n	80020ae <HAL_GPIO_Init+0x20a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4a      	ldr	r2, [pc, #296]	@ (80021c0 <HAL_GPIO_Init+0x31c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <HAL_GPIO_Init+0x206>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a49      	ldr	r2, [pc, #292]	@ (80021c4 <HAL_GPIO_Init+0x320>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_GPIO_Init+0x202>
 80020a2:	2306      	movs	r3, #6
 80020a4:	e00c      	b.n	80020c0 <HAL_GPIO_Init+0x21c>
 80020a6:	2307      	movs	r3, #7
 80020a8:	e00a      	b.n	80020c0 <HAL_GPIO_Init+0x21c>
 80020aa:	2305      	movs	r3, #5
 80020ac:	e008      	b.n	80020c0 <HAL_GPIO_Init+0x21c>
 80020ae:	2304      	movs	r3, #4
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x21c>
 80020b2:	2303      	movs	r3, #3
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_Init+0x21c>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_Init+0x21c>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x21c>
 80020be:	2300      	movs	r3, #0
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	f002 0203 	and.w	r2, r2, #3
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4093      	lsls	r3, r2
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d0:	4935      	ldr	r1, [pc, #212]	@ (80021a8 <HAL_GPIO_Init+0x304>)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020de:	4b3a      	ldr	r3, [pc, #232]	@ (80021c8 <HAL_GPIO_Init+0x324>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002102:	4a31      	ldr	r2, [pc, #196]	@ (80021c8 <HAL_GPIO_Init+0x324>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002108:	4b2f      	ldr	r3, [pc, #188]	@ (80021c8 <HAL_GPIO_Init+0x324>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800212c:	4a26      	ldr	r2, [pc, #152]	@ (80021c8 <HAL_GPIO_Init+0x324>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002132:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <HAL_GPIO_Init+0x324>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002156:	4a1c      	ldr	r2, [pc, #112]	@ (80021c8 <HAL_GPIO_Init+0x324>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800215c:	4b1a      	ldr	r3, [pc, #104]	@ (80021c8 <HAL_GPIO_Init+0x324>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002180:	4a11      	ldr	r2, [pc, #68]	@ (80021c8 <HAL_GPIO_Init+0x324>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3301      	adds	r3, #1
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	f67f ae96 	bls.w	8001ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3724      	adds	r7, #36	@ 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40013800 	.word	0x40013800
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40020400 	.word	0x40020400
 80021b4:	40020800 	.word	0x40020800
 80021b8:	40020c00 	.word	0x40020c00
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40021400 	.word	0x40021400
 80021c4:	40021800 	.word	0x40021800
 80021c8:	40013c00 	.word	0x40013c00

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e8:	e003      	b.n	80021f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800220a:	4b08      	ldr	r3, [pc, #32]	@ (800222c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002216:	4a05      	ldr	r2, [pc, #20]	@ (800222c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff f9be 	bl	80015a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40013c00 	.word	0x40013c00

08002230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e12b      	b.n	800249a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff fa74 	bl	8001744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2224      	movs	r2, #36	@ 0x24
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002294:	f000 fa52 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a81      	ldr	r2, [pc, #516]	@ (80024a4 <HAL_I2C_Init+0x274>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d807      	bhi.n	80022b4 <HAL_I2C_Init+0x84>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4a80      	ldr	r2, [pc, #512]	@ (80024a8 <HAL_I2C_Init+0x278>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	bf94      	ite	ls
 80022ac:	2301      	movls	r3, #1
 80022ae:	2300      	movhi	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e006      	b.n	80022c2 <HAL_I2C_Init+0x92>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a7d      	ldr	r2, [pc, #500]	@ (80024ac <HAL_I2C_Init+0x27c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0e7      	b.n	800249a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4a78      	ldr	r2, [pc, #480]	@ (80024b0 <HAL_I2C_Init+0x280>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0c9b      	lsrs	r3, r3, #18
 80022d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a6a      	ldr	r2, [pc, #424]	@ (80024a4 <HAL_I2C_Init+0x274>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d802      	bhi.n	8002304 <HAL_I2C_Init+0xd4>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	3301      	adds	r3, #1
 8002302:	e009      	b.n	8002318 <HAL_I2C_Init+0xe8>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	4a69      	ldr	r2, [pc, #420]	@ (80024b4 <HAL_I2C_Init+0x284>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	3301      	adds	r3, #1
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	430b      	orrs	r3, r1
 800231e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800232a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	495c      	ldr	r1, [pc, #368]	@ (80024a4 <HAL_I2C_Init+0x274>)
 8002334:	428b      	cmp	r3, r1
 8002336:	d819      	bhi.n	800236c <HAL_I2C_Init+0x13c>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1e59      	subs	r1, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fbb1 f3f3 	udiv	r3, r1, r3
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800234c:	400b      	ands	r3, r1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_I2C_Init+0x138>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1e59      	subs	r1, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002366:	e051      	b.n	800240c <HAL_I2C_Init+0x1dc>
 8002368:	2304      	movs	r3, #4
 800236a:	e04f      	b.n	800240c <HAL_I2C_Init+0x1dc>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d111      	bne.n	8002398 <HAL_I2C_Init+0x168>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e58      	subs	r0, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	440b      	add	r3, r1
 8002382:	fbb0 f3f3 	udiv	r3, r0, r3
 8002386:	3301      	adds	r3, #1
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	e012      	b.n	80023be <HAL_I2C_Init+0x18e>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1e58      	subs	r0, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	0099      	lsls	r1, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Init+0x196>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e022      	b.n	800240c <HAL_I2C_Init+0x1dc>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10e      	bne.n	80023ec <HAL_I2C_Init+0x1bc>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1e58      	subs	r0, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	440b      	add	r3, r1
 80023dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023ea:	e00f      	b.n	800240c <HAL_I2C_Init+0x1dc>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1e58      	subs	r0, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	0099      	lsls	r1, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002402:	3301      	adds	r3, #1
 8002404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002408:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	6809      	ldr	r1, [r1, #0]
 8002410:	4313      	orrs	r3, r2
 8002412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69da      	ldr	r2, [r3, #28]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800243a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6911      	ldr	r1, [r2, #16]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68d2      	ldr	r2, [r2, #12]
 8002446:	4311      	orrs	r1, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	430b      	orrs	r3, r1
 800244e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	000186a0 	.word	0x000186a0
 80024a8:	001e847f 	.word	0x001e847f
 80024ac:	003d08ff 	.word	0x003d08ff
 80024b0:	431bde83 	.word	0x431bde83
 80024b4:	10624dd3 	.word	0x10624dd3

080024b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4b20      	ldr	r3, [pc, #128]	@ (8002548 <HAL_PWREx_EnableOverDrive+0x90>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002548 <HAL_PWREx_EnableOverDrive+0x90>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002548 <HAL_PWREx_EnableOverDrive+0x90>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024de:	4b1b      	ldr	r3, [pc, #108]	@ (800254c <HAL_PWREx_EnableOverDrive+0x94>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e4:	f7ff fb9c 	bl	8001c20 <HAL_GetTick>
 80024e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024ea:	e009      	b.n	8002500 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024ec:	f7ff fb98 	bl	8001c20 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024fa:	d901      	bls.n	8002500 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e01f      	b.n	8002540 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002500:	4b13      	ldr	r3, [pc, #76]	@ (8002550 <HAL_PWREx_EnableOverDrive+0x98>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800250c:	d1ee      	bne.n	80024ec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800250e:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002514:	f7ff fb84 	bl	8001c20 <HAL_GetTick>
 8002518:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800251a:	e009      	b.n	8002530 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800251c:	f7ff fb80 	bl	8001c20 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800252a:	d901      	bls.n	8002530 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e007      	b.n	8002540 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002530:	4b07      	ldr	r3, [pc, #28]	@ (8002550 <HAL_PWREx_EnableOverDrive+0x98>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002538:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800253c:	d1ee      	bne.n	800251c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800
 800254c:	420e0040 	.word	0x420e0040
 8002550:	40007000 	.word	0x40007000
 8002554:	420e0044 	.word	0x420e0044

08002558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0cc      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800256c:	4b68      	ldr	r3, [pc, #416]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d90c      	bls.n	8002594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b65      	ldr	r3, [pc, #404]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b63      	ldr	r3, [pc, #396]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0b8      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025ac:	4b59      	ldr	r3, [pc, #356]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a58      	ldr	r2, [pc, #352]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c4:	4b53      	ldr	r3, [pc, #332]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a52      	ldr	r2, [pc, #328]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b50      	ldr	r3, [pc, #320]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	494d      	ldr	r1, [pc, #308]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d044      	beq.n	8002678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d119      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e07f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d003      	beq.n	8002616 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002612:	2b03      	cmp	r3, #3
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002616:	4b3f      	ldr	r3, [pc, #252]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e06f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	4b3b      	ldr	r3, [pc, #236]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e067      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002636:	4b37      	ldr	r3, [pc, #220]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f023 0203 	bic.w	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4934      	ldr	r1, [pc, #208]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	4313      	orrs	r3, r2
 8002646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002648:	f7ff faea 	bl	8001c20 <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	e00a      	b.n	8002666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002650:	f7ff fae6 	bl	8001c20 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e04f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	4b2b      	ldr	r3, [pc, #172]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 020c 	and.w	r2, r3, #12
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	429a      	cmp	r2, r3
 8002676:	d1eb      	bne.n	8002650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002678:	4b25      	ldr	r3, [pc, #148]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d20c      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b22      	ldr	r3, [pc, #136]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e032      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4916      	ldr	r1, [pc, #88]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ca:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	490e      	ldr	r1, [pc, #56]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026de:	f000 f855 	bl	800278c <HAL_RCC_GetSysClockFreq>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	490a      	ldr	r1, [pc, #40]	@ (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	5ccb      	ldrb	r3, [r1, r3]
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	4a09      	ldr	r2, [pc, #36]	@ (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026fa:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fa4a 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023c00 	.word	0x40023c00
 8002714:	40023800 	.word	0x40023800
 8002718:	08006fb8 	.word	0x08006fb8
 800271c:	20000010 	.word	0x20000010
 8002720:	20000014 	.word	0x20000014

08002724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002728:	4b03      	ldr	r3, [pc, #12]	@ (8002738 <HAL_RCC_GetHCLKFreq+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000010 	.word	0x20000010

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002740:	f7ff fff0 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	@ (800275c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	0a9b      	lsrs	r3, r3, #10
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4903      	ldr	r1, [pc, #12]	@ (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800
 8002760:	08006fc8 	.word	0x08006fc8

08002764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002768:	f7ff ffdc 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	0b5b      	lsrs	r3, r3, #13
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4903      	ldr	r1, [pc, #12]	@ (8002788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	08006fc8 	.word	0x08006fc8

0800278c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800278c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002790:	b0ae      	sub	sp, #184	@ 0xb8
 8002792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b2:	4bcb      	ldr	r3, [pc, #812]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	f200 8206 	bhi.w	8002bcc <HAL_RCC_GetSysClockFreq+0x440>
 80027c0:	a201      	add	r2, pc, #4	@ (adr r2, 80027c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c6:	bf00      	nop
 80027c8:	080027fd 	.word	0x080027fd
 80027cc:	08002bcd 	.word	0x08002bcd
 80027d0:	08002bcd 	.word	0x08002bcd
 80027d4:	08002bcd 	.word	0x08002bcd
 80027d8:	08002805 	.word	0x08002805
 80027dc:	08002bcd 	.word	0x08002bcd
 80027e0:	08002bcd 	.word	0x08002bcd
 80027e4:	08002bcd 	.word	0x08002bcd
 80027e8:	0800280d 	.word	0x0800280d
 80027ec:	08002bcd 	.word	0x08002bcd
 80027f0:	08002bcd 	.word	0x08002bcd
 80027f4:	08002bcd 	.word	0x08002bcd
 80027f8:	080029fd 	.word	0x080029fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4bb9      	ldr	r3, [pc, #740]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x358>)
 80027fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002802:	e1e7      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002804:	4bb8      	ldr	r3, [pc, #736]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002806:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800280a:	e1e3      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800280c:	4bb4      	ldr	r3, [pc, #720]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002814:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002818:	4bb1      	ldr	r3, [pc, #708]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d071      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002824:	4bae      	ldr	r3, [pc, #696]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	2200      	movs	r2, #0
 800282c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002830:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002834:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800284a:	4622      	mov	r2, r4
 800284c:	462b      	mov	r3, r5
 800284e:	f04f 0000 	mov.w	r0, #0
 8002852:	f04f 0100 	mov.w	r1, #0
 8002856:	0159      	lsls	r1, r3, #5
 8002858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800285c:	0150      	lsls	r0, r2, #5
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4621      	mov	r1, r4
 8002864:	1a51      	subs	r1, r2, r1
 8002866:	6439      	str	r1, [r7, #64]	@ 0x40
 8002868:	4629      	mov	r1, r5
 800286a:	eb63 0301 	sbc.w	r3, r3, r1
 800286e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800287c:	4649      	mov	r1, r9
 800287e:	018b      	lsls	r3, r1, #6
 8002880:	4641      	mov	r1, r8
 8002882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002886:	4641      	mov	r1, r8
 8002888:	018a      	lsls	r2, r1, #6
 800288a:	4641      	mov	r1, r8
 800288c:	1a51      	subs	r1, r2, r1
 800288e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002890:	4649      	mov	r1, r9
 8002892:	eb63 0301 	sbc.w	r3, r3, r1
 8002896:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80028a4:	4649      	mov	r1, r9
 80028a6:	00cb      	lsls	r3, r1, #3
 80028a8:	4641      	mov	r1, r8
 80028aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ae:	4641      	mov	r1, r8
 80028b0:	00ca      	lsls	r2, r1, #3
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	4622      	mov	r2, r4
 80028ba:	189b      	adds	r3, r3, r2
 80028bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80028be:	462b      	mov	r3, r5
 80028c0:	460a      	mov	r2, r1
 80028c2:	eb42 0303 	adc.w	r3, r2, r3
 80028c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028d4:	4629      	mov	r1, r5
 80028d6:	024b      	lsls	r3, r1, #9
 80028d8:	4621      	mov	r1, r4
 80028da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028de:	4621      	mov	r1, r4
 80028e0:	024a      	lsls	r2, r1, #9
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028ea:	2200      	movs	r2, #0
 80028ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80028f8:	f7fe f976 	bl	8000be8 <__aeabi_uldivmod>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4613      	mov	r3, r2
 8002902:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002906:	e067      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002908:	4b75      	ldr	r3, [pc, #468]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	2200      	movs	r2, #0
 8002910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002914:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002918:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800291c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002920:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002922:	2300      	movs	r3, #0
 8002924:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002926:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800292a:	4622      	mov	r2, r4
 800292c:	462b      	mov	r3, r5
 800292e:	f04f 0000 	mov.w	r0, #0
 8002932:	f04f 0100 	mov.w	r1, #0
 8002936:	0159      	lsls	r1, r3, #5
 8002938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800293c:	0150      	lsls	r0, r2, #5
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4621      	mov	r1, r4
 8002944:	1a51      	subs	r1, r2, r1
 8002946:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002948:	4629      	mov	r1, r5
 800294a:	eb63 0301 	sbc.w	r3, r3, r1
 800294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800295c:	4649      	mov	r1, r9
 800295e:	018b      	lsls	r3, r1, #6
 8002960:	4641      	mov	r1, r8
 8002962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002966:	4641      	mov	r1, r8
 8002968:	018a      	lsls	r2, r1, #6
 800296a:	4641      	mov	r1, r8
 800296c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002970:	4649      	mov	r1, r9
 8002972:	eb63 0b01 	sbc.w	fp, r3, r1
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002982:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002986:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800298a:	4692      	mov	sl, r2
 800298c:	469b      	mov	fp, r3
 800298e:	4623      	mov	r3, r4
 8002990:	eb1a 0303 	adds.w	r3, sl, r3
 8002994:	623b      	str	r3, [r7, #32]
 8002996:	462b      	mov	r3, r5
 8002998:	eb4b 0303 	adc.w	r3, fp, r3
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029aa:	4629      	mov	r1, r5
 80029ac:	028b      	lsls	r3, r1, #10
 80029ae:	4621      	mov	r1, r4
 80029b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029b4:	4621      	mov	r1, r4
 80029b6:	028a      	lsls	r2, r1, #10
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029c0:	2200      	movs	r2, #0
 80029c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80029c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80029c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80029ca:	f7fe f90d 	bl	8000be8 <__aeabi_uldivmod>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4613      	mov	r3, r2
 80029d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029d8:	4b41      	ldr	r3, [pc, #260]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	0c1b      	lsrs	r3, r3, #16
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	3301      	adds	r3, #1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80029ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029fa:	e0eb      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029fc:	4b38      	ldr	r3, [pc, #224]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a08:	4b35      	ldr	r3, [pc, #212]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d06b      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a14:	4b32      	ldr	r3, [pc, #200]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	099b      	lsrs	r3, r3, #6
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a26:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a28:	2300      	movs	r3, #0
 8002a2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a30:	4622      	mov	r2, r4
 8002a32:	462b      	mov	r3, r5
 8002a34:	f04f 0000 	mov.w	r0, #0
 8002a38:	f04f 0100 	mov.w	r1, #0
 8002a3c:	0159      	lsls	r1, r3, #5
 8002a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a42:	0150      	lsls	r0, r2, #5
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4621      	mov	r1, r4
 8002a4a:	1a51      	subs	r1, r2, r1
 8002a4c:	61b9      	str	r1, [r7, #24]
 8002a4e:	4629      	mov	r1, r5
 8002a50:	eb63 0301 	sbc.w	r3, r3, r1
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a62:	4659      	mov	r1, fp
 8002a64:	018b      	lsls	r3, r1, #6
 8002a66:	4651      	mov	r1, sl
 8002a68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a6c:	4651      	mov	r1, sl
 8002a6e:	018a      	lsls	r2, r1, #6
 8002a70:	4651      	mov	r1, sl
 8002a72:	ebb2 0801 	subs.w	r8, r2, r1
 8002a76:	4659      	mov	r1, fp
 8002a78:	eb63 0901 	sbc.w	r9, r3, r1
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a90:	4690      	mov	r8, r2
 8002a92:	4699      	mov	r9, r3
 8002a94:	4623      	mov	r3, r4
 8002a96:	eb18 0303 	adds.w	r3, r8, r3
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	462b      	mov	r3, r5
 8002a9e:	eb49 0303 	adc.w	r3, r9, r3
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	024b      	lsls	r3, r1, #9
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aba:	4621      	mov	r1, r4
 8002abc:	024a      	lsls	r2, r1, #9
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002aca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002acc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ad0:	f7fe f88a 	bl	8000be8 <__aeabi_uldivmod>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ade:	e065      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x420>
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	00f42400 	.word	0x00f42400
 8002ae8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aec:	4b3d      	ldr	r3, [pc, #244]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	2200      	movs	r2, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	4611      	mov	r1, r2
 8002af8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002afc:	653b      	str	r3, [r7, #80]	@ 0x50
 8002afe:	2300      	movs	r3, #0
 8002b00:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b06:	4642      	mov	r2, r8
 8002b08:	464b      	mov	r3, r9
 8002b0a:	f04f 0000 	mov.w	r0, #0
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	0159      	lsls	r1, r3, #5
 8002b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b18:	0150      	lsls	r0, r2, #5
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4641      	mov	r1, r8
 8002b20:	1a51      	subs	r1, r2, r1
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	4649      	mov	r1, r9
 8002b26:	eb63 0301 	sbc.w	r3, r3, r1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b38:	4659      	mov	r1, fp
 8002b3a:	018b      	lsls	r3, r1, #6
 8002b3c:	4651      	mov	r1, sl
 8002b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b42:	4651      	mov	r1, sl
 8002b44:	018a      	lsls	r2, r1, #6
 8002b46:	4651      	mov	r1, sl
 8002b48:	1a54      	subs	r4, r2, r1
 8002b4a:	4659      	mov	r1, fp
 8002b4c:	eb63 0501 	sbc.w	r5, r3, r1
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	00eb      	lsls	r3, r5, #3
 8002b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b5e:	00e2      	lsls	r2, r4, #3
 8002b60:	4614      	mov	r4, r2
 8002b62:	461d      	mov	r5, r3
 8002b64:	4643      	mov	r3, r8
 8002b66:	18e3      	adds	r3, r4, r3
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	eb45 0303 	adc.w	r3, r5, r3
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b7e:	4629      	mov	r1, r5
 8002b80:	028b      	lsls	r3, r1, #10
 8002b82:	4621      	mov	r1, r4
 8002b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b88:	4621      	mov	r1, r4
 8002b8a:	028a      	lsls	r2, r1, #10
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b94:	2200      	movs	r2, #0
 8002b96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b98:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002b9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b9e:	f7fe f823 	bl	8000be8 <__aeabi_uldivmod>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bac:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	0f1b      	lsrs	r3, r3, #28
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002bba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bca:	e003      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	37b8      	adds	r7, #184	@ 0xb8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	00f42400 	.word	0x00f42400

08002bec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e28d      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8083 	beq.w	8002d12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c0c:	4b94      	ldr	r3, [pc, #592]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d019      	beq.n	8002c4c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c18:	4b91      	ldr	r3, [pc, #580]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c24:	4b8e      	ldr	r3, [pc, #568]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c30:	d00c      	beq.n	8002c4c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c32:	4b8b      	ldr	r3, [pc, #556]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d112      	bne.n	8002c64 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3e:	4b88      	ldr	r3, [pc, #544]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c4a:	d10b      	bne.n	8002c64 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	4b84      	ldr	r3, [pc, #528]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d05b      	beq.n	8002d10 <HAL_RCC_OscConfig+0x124>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d157      	bne.n	8002d10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e25a      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c6c:	d106      	bne.n	8002c7c <HAL_RCC_OscConfig+0x90>
 8002c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a7b      	ldr	r2, [pc, #492]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e01d      	b.n	8002cb8 <HAL_RCC_OscConfig+0xcc>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0xb4>
 8002c86:	4b76      	ldr	r3, [pc, #472]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a75      	ldr	r2, [pc, #468]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b73      	ldr	r3, [pc, #460]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a72      	ldr	r2, [pc, #456]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0xcc>
 8002ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6e      	ldr	r2, [pc, #440]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b6c      	ldr	r3, [pc, #432]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a6b      	ldr	r2, [pc, #428]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe ffae 	bl	8001c20 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe ffaa 	bl	8001c20 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e21f      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b61      	ldr	r3, [pc, #388]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xdc>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe ff9a 	bl	8001c20 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7fe ff96 	bl	8001c20 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	@ 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e20b      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	4b57      	ldr	r3, [pc, #348]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x104>
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d06f      	beq.n	8002dfe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d1e:	4b50      	ldr	r3, [pc, #320]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d017      	beq.n	8002d5a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d2a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d105      	bne.n	8002d42 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d36:	4b4a      	ldr	r3, [pc, #296]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d42:	4b47      	ldr	r3, [pc, #284]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d11c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4e:	4b44      	ldr	r3, [pc, #272]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d116      	bne.n	8002d88 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	4b41      	ldr	r3, [pc, #260]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_RCC_OscConfig+0x186>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e1d3      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	4b3b      	ldr	r3, [pc, #236]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4937      	ldr	r1, [pc, #220]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d86:	e03a      	b.n	8002dfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d90:	4b34      	ldr	r3, [pc, #208]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7fe ff43 	bl	8001c20 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7fe ff3f 	bl	8001c20 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e1b4      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	4b28      	ldr	r3, [pc, #160]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4925      	ldr	r1, [pc, #148]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]
 8002dd0:	e015      	b.n	8002dfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd2:	4b24      	ldr	r3, [pc, #144]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe ff22 	bl	8001c20 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de0:	f7fe ff1e 	bl	8001c20 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e193      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d036      	beq.n	8002e78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d016      	beq.n	8002e40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e12:	4b15      	ldr	r3, [pc, #84]	@ (8002e68 <HAL_RCC_OscConfig+0x27c>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7fe ff02 	bl	8001c20 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e20:	f7fe fefe 	bl	8001c20 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e173      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e32:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x234>
 8002e3e:	e01b      	b.n	8002e78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e40:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <HAL_RCC_OscConfig+0x27c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7fe feeb 	bl	8001c20 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	e00e      	b.n	8002e6c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4e:	f7fe fee7 	bl	8001c20 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d907      	bls.n	8002e6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e15c      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
 8002e60:	40023800 	.word	0x40023800
 8002e64:	42470000 	.word	0x42470000
 8002e68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6c:	4b8a      	ldr	r3, [pc, #552]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ea      	bne.n	8002e4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8097 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e86:	2300      	movs	r3, #0
 8002e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8a:	4b83      	ldr	r3, [pc, #524]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10f      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb6:	4b79      	ldr	r3, [pc, #484]	@ (800309c <HAL_RCC_OscConfig+0x4b0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d118      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec2:	4b76      	ldr	r3, [pc, #472]	@ (800309c <HAL_RCC_OscConfig+0x4b0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a75      	ldr	r2, [pc, #468]	@ (800309c <HAL_RCC_OscConfig+0x4b0>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ece:	f7fe fea7 	bl	8001c20 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed6:	f7fe fea3 	bl	8001c20 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e118      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800309c <HAL_RCC_OscConfig+0x4b0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x31e>
 8002efc:	4b66      	ldr	r3, [pc, #408]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f00:	4a65      	ldr	r2, [pc, #404]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f08:	e01c      	b.n	8002f44 <HAL_RCC_OscConfig+0x358>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x340>
 8002f12:	4b61      	ldr	r3, [pc, #388]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f16:	4a60      	ldr	r2, [pc, #384]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	f043 0304 	orr.w	r3, r3, #4
 8002f1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f1e:	4b5e      	ldr	r3, [pc, #376]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f22:	4a5d      	ldr	r2, [pc, #372]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0x358>
 8002f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f30:	4a59      	ldr	r2, [pc, #356]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f38:	4b57      	ldr	r3, [pc, #348]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3c:	4a56      	ldr	r2, [pc, #344]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f3e:	f023 0304 	bic.w	r3, r3, #4
 8002f42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d015      	beq.n	8002f78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7fe fe68 	bl	8001c20 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f54:	f7fe fe64 	bl	8001c20 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e0d7      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6a:	4b4b      	ldr	r3, [pc, #300]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0ee      	beq.n	8002f54 <HAL_RCC_OscConfig+0x368>
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7fe fe52 	bl	8001c20 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f80:	f7fe fe4e 	bl	8001c20 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e0c1      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f96:	4b40      	ldr	r3, [pc, #256]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1ee      	bne.n	8002f80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d105      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	4a3a      	ldr	r2, [pc, #232]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80ad 	beq.w	8003118 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fbe:	4b36      	ldr	r3, [pc, #216]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d060      	beq.n	800308c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d145      	bne.n	800305e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd2:	4b33      	ldr	r3, [pc, #204]	@ (80030a0 <HAL_RCC_OscConfig+0x4b4>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fe22 	bl	8001c20 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe fe1e 	bl	8001c20 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e093      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	4b29      	ldr	r3, [pc, #164]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	3b01      	subs	r3, #1
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003028:	071b      	lsls	r3, r3, #28
 800302a:	491b      	ldr	r1, [pc, #108]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003030:	4b1b      	ldr	r3, [pc, #108]	@ (80030a0 <HAL_RCC_OscConfig+0x4b4>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe fdf3 	bl	8001c20 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303e:	f7fe fdef 	bl	8001c20 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e064      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003050:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x452>
 800305c:	e05c      	b.n	8003118 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	4b10      	ldr	r3, [pc, #64]	@ (80030a0 <HAL_RCC_OscConfig+0x4b4>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe fddc 	bl	8001c20 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe fdd8 	bl	8001c20 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e04d      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x480>
 800308a:	e045      	b.n	8003118 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e040      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
 8003098:	40023800 	.word	0x40023800
 800309c:	40007000 	.word	0x40007000
 80030a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003124 <HAL_RCC_OscConfig+0x538>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d030      	beq.n	8003114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d129      	bne.n	8003114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d122      	bne.n	8003114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030dc:	4293      	cmp	r3, r2
 80030de:	d119      	bne.n	8003114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	3b01      	subs	r3, #1
 80030ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d10f      	bne.n	8003114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d107      	bne.n	8003114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800

08003128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e041      	b.n	80031be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fe fb40 	bl	80017d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f000 fa7e 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d001      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e04e      	b.n	800327e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a23      	ldr	r2, [pc, #140]	@ (800328c <HAL_TIM_Base_Start_IT+0xc4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d022      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x80>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320a:	d01d      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x80>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1f      	ldr	r2, [pc, #124]	@ (8003290 <HAL_TIM_Base_Start_IT+0xc8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d018      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x80>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1e      	ldr	r2, [pc, #120]	@ (8003294 <HAL_TIM_Base_Start_IT+0xcc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x80>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1c      	ldr	r2, [pc, #112]	@ (8003298 <HAL_TIM_Base_Start_IT+0xd0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00e      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x80>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1b      	ldr	r2, [pc, #108]	@ (800329c <HAL_TIM_Base_Start_IT+0xd4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d009      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x80>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a19      	ldr	r2, [pc, #100]	@ (80032a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x80>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a18      	ldr	r2, [pc, #96]	@ (80032a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d111      	bne.n	800326c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b06      	cmp	r3, #6
 8003258:	d010      	beq.n	800327c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326a:	e007      	b.n	800327c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40010000 	.word	0x40010000
 8003290:	40000400 	.word	0x40000400
 8003294:	40000800 	.word	0x40000800
 8003298:	40000c00 	.word	0x40000c00
 800329c:	40010400 	.word	0x40010400
 80032a0:	40014000 	.word	0x40014000
 80032a4:	40001800 	.word	0x40001800

080032a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d020      	beq.n	800330c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01b      	beq.n	800330c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0202 	mvn.w	r2, #2
 80032dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f999 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 80032f8:	e005      	b.n	8003306 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f98b 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f99c 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d020      	beq.n	8003358 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01b      	beq.n	8003358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0204 	mvn.w	r2, #4
 8003328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2202      	movs	r2, #2
 800332e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f973 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f965 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f976 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d020      	beq.n	80033a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01b      	beq.n	80033a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0208 	mvn.w	r2, #8
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2204      	movs	r2, #4
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f94d 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f93f 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f950 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d020      	beq.n	80033f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0210 	mvn.w	r2, #16
 80033c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2208      	movs	r2, #8
 80033c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f927 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 80033dc:	e005      	b.n	80033ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f919 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f92a 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00c      	beq.n	8003414 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0201 	mvn.w	r2, #1
 800340c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fe f960 	bl	80016d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00c      	beq.n	8003438 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003424:	2b00      	cmp	r3, #0
 8003426:	d007      	beq.n	8003438 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fae4 	bl	8003a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00c      	beq.n	800345c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8fb 	bl	8003652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00c      	beq.n	8003480 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0220 	mvn.w	r2, #32
 8003478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fab6 	bl	80039ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_TIM_ConfigClockSource+0x1c>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e0b4      	b.n	800360e <HAL_TIM_ConfigClockSource+0x186>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034dc:	d03e      	beq.n	800355c <HAL_TIM_ConfigClockSource+0xd4>
 80034de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e2:	f200 8087 	bhi.w	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ea:	f000 8086 	beq.w	80035fa <HAL_TIM_ConfigClockSource+0x172>
 80034ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f2:	d87f      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 80034f4:	2b70      	cmp	r3, #112	@ 0x70
 80034f6:	d01a      	beq.n	800352e <HAL_TIM_ConfigClockSource+0xa6>
 80034f8:	2b70      	cmp	r3, #112	@ 0x70
 80034fa:	d87b      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 80034fc:	2b60      	cmp	r3, #96	@ 0x60
 80034fe:	d050      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003500:	2b60      	cmp	r3, #96	@ 0x60
 8003502:	d877      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003504:	2b50      	cmp	r3, #80	@ 0x50
 8003506:	d03c      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0xfa>
 8003508:	2b50      	cmp	r3, #80	@ 0x50
 800350a:	d873      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 800350c:	2b40      	cmp	r3, #64	@ 0x40
 800350e:	d058      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	d86f      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003514:	2b30      	cmp	r3, #48	@ 0x30
 8003516:	d064      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003518:	2b30      	cmp	r3, #48	@ 0x30
 800351a:	d86b      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 800351c:	2b20      	cmp	r3, #32
 800351e:	d060      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003520:	2b20      	cmp	r3, #32
 8003522:	d867      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d05c      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003528:	2b10      	cmp	r3, #16
 800352a:	d05a      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 800352c:	e062      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800353e:	f000 f9b9 	bl	80038b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	609a      	str	r2, [r3, #8]
      break;
 800355a:	e04f      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800356c:	f000 f9a2 	bl	80038b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800357e:	609a      	str	r2, [r3, #8]
      break;
 8003580:	e03c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800358e:	461a      	mov	r2, r3
 8003590:	f000 f916 	bl	80037c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2150      	movs	r1, #80	@ 0x50
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f96f 	bl	800387e <TIM_ITRx_SetConfig>
      break;
 80035a0:	e02c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ae:	461a      	mov	r2, r3
 80035b0:	f000 f935 	bl	800381e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2160      	movs	r1, #96	@ 0x60
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f95f 	bl	800387e <TIM_ITRx_SetConfig>
      break;
 80035c0:	e01c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ce:	461a      	mov	r2, r3
 80035d0:	f000 f8f6 	bl	80037c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2140      	movs	r1, #64	@ 0x40
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f94f 	bl	800387e <TIM_ITRx_SetConfig>
      break;
 80035e0:	e00c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f000 f946 	bl	800387e <TIM_ITRx_SetConfig>
      break;
 80035f2:	e003      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
      break;
 80035f8:	e000      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a46      	ldr	r2, [pc, #280]	@ (8003794 <TIM_Base_SetConfig+0x12c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003686:	d00f      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a43      	ldr	r2, [pc, #268]	@ (8003798 <TIM_Base_SetConfig+0x130>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00b      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a42      	ldr	r2, [pc, #264]	@ (800379c <TIM_Base_SetConfig+0x134>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a41      	ldr	r2, [pc, #260]	@ (80037a0 <TIM_Base_SetConfig+0x138>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a40      	ldr	r2, [pc, #256]	@ (80037a4 <TIM_Base_SetConfig+0x13c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d108      	bne.n	80036ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a35      	ldr	r2, [pc, #212]	@ (8003794 <TIM_Base_SetConfig+0x12c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c8:	d027      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a32      	ldr	r2, [pc, #200]	@ (8003798 <TIM_Base_SetConfig+0x130>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d023      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a31      	ldr	r2, [pc, #196]	@ (800379c <TIM_Base_SetConfig+0x134>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01f      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a30      	ldr	r2, [pc, #192]	@ (80037a0 <TIM_Base_SetConfig+0x138>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2f      	ldr	r2, [pc, #188]	@ (80037a4 <TIM_Base_SetConfig+0x13c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d017      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a2e      	ldr	r2, [pc, #184]	@ (80037a8 <TIM_Base_SetConfig+0x140>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a2d      	ldr	r2, [pc, #180]	@ (80037ac <TIM_Base_SetConfig+0x144>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00f      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a2c      	ldr	r2, [pc, #176]	@ (80037b0 <TIM_Base_SetConfig+0x148>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a2b      	ldr	r2, [pc, #172]	@ (80037b4 <TIM_Base_SetConfig+0x14c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d007      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a2a      	ldr	r2, [pc, #168]	@ (80037b8 <TIM_Base_SetConfig+0x150>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d003      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a29      	ldr	r2, [pc, #164]	@ (80037bc <TIM_Base_SetConfig+0x154>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d108      	bne.n	800372c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a10      	ldr	r2, [pc, #64]	@ (8003794 <TIM_Base_SetConfig+0x12c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0xf8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a12      	ldr	r2, [pc, #72]	@ (80037a4 <TIM_Base_SetConfig+0x13c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d103      	bne.n	8003768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d105      	bne.n	8003786 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f023 0201 	bic.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	611a      	str	r2, [r3, #16]
  }
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40010000 	.word	0x40010000
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40010400 	.word	0x40010400
 80037a8:	40014000 	.word	0x40014000
 80037ac:	40014400 	.word	0x40014400
 80037b0:	40014800 	.word	0x40014800
 80037b4:	40001800 	.word	0x40001800
 80037b8:	40001c00 	.word	0x40001c00
 80037bc:	40002000 	.word	0x40002000

080037c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	f023 0201 	bic.w	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f023 030a 	bic.w	r3, r3, #10
 80037fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800381e:	b480      	push	{r7}
 8003820:	b087      	sub	sp, #28
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f023 0210 	bic.w	r2, r3, #16
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	031b      	lsls	r3, r3, #12
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800385a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800387e:	b480      	push	{r7}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	f043 0307 	orr.w	r3, r3, #7
 80038a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	609a      	str	r2, [r3, #8]
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	021a      	lsls	r2, r3, #8
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4313      	orrs	r3, r2
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	609a      	str	r2, [r3, #8]
}
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003908:	2302      	movs	r3, #2
 800390a:	e05a      	b.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a21      	ldr	r2, [pc, #132]	@ (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d022      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003958:	d01d      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1d      	ldr	r2, [pc, #116]	@ (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d018      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1b      	ldr	r2, [pc, #108]	@ (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d013      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1a      	ldr	r2, [pc, #104]	@ (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00e      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a18      	ldr	r2, [pc, #96]	@ (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d009      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a17      	ldr	r2, [pc, #92]	@ (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d004      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a15      	ldr	r2, [pc, #84]	@ (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d10c      	bne.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800399c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40010000 	.word	0x40010000
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800
 80039dc:	40000c00 	.word	0x40000c00
 80039e0:	40010400 	.word	0x40010400
 80039e4:	40014000 	.word	0x40014000
 80039e8:	40001800 	.word	0x40001800

080039ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e042      	b.n	8003aac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd fef0 	bl	8001820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2224      	movs	r2, #36	@ 0x24
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f973 	bl	8003d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	@ 0x28
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d175      	bne.n	8003bc0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_UART_Transmit+0x2c>
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e06e      	b.n	8003bc2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2221      	movs	r2, #33	@ 0x21
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003af2:	f7fe f895 	bl	8001c20 <HAL_GetTick>
 8003af6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	88fa      	ldrh	r2, [r7, #6]
 8003afc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	88fa      	ldrh	r2, [r7, #6]
 8003b02:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b0c:	d108      	bne.n	8003b20 <HAL_UART_Transmit+0x6c>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d104      	bne.n	8003b20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	e003      	b.n	8003b28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b28:	e02e      	b.n	8003b88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2200      	movs	r2, #0
 8003b32:	2180      	movs	r1, #128	@ 0x80
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f848 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e03a      	b.n	8003bc2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10b      	bne.n	8003b6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	3302      	adds	r3, #2
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	e007      	b.n	8003b7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	781a      	ldrb	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3301      	adds	r3, #1
 8003b78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1cb      	bne.n	8003b2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2140      	movs	r1, #64	@ 0x40
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f814 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e006      	b.n	8003bc2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e000      	b.n	8003bc2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003bc0:	2302      	movs	r3, #2
  }
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bda:	e03b      	b.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d037      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be4:	f7fe f81c 	bl	8001c20 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	6a3a      	ldr	r2, [r7, #32]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d302      	bcc.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x30>
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e03a      	b.n	8003c74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d023      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b80      	cmp	r3, #128	@ 0x80
 8003c10:	d020      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b40      	cmp	r3, #64	@ 0x40
 8003c16:	d01d      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d116      	bne.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f81d 	bl	8003c7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2208      	movs	r2, #8
 8003c46:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e00f      	b.n	8003c74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d0b4      	beq.n	8003bdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b095      	sub	sp, #84	@ 0x54
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	330c      	adds	r3, #12
 8003c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ca4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003caa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cac:	e841 2300 	strex	r3, r2, [r1]
 8003cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e5      	bne.n	8003c84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3314      	adds	r3, #20
 8003cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3314      	adds	r3, #20
 8003cd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e5      	bne.n	8003cb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d119      	bne.n	8003d28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f023 0310 	bic.w	r3, r3, #16
 8003d0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d14:	61ba      	str	r2, [r7, #24]
 8003d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6979      	ldr	r1, [r7, #20]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	613b      	str	r3, [r7, #16]
   return(result);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e5      	bne.n	8003cf4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d36:	bf00      	nop
 8003d38:	3754      	adds	r7, #84	@ 0x54
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d48:	b0c0      	sub	sp, #256	@ 0x100
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d60:	68d9      	ldr	r1, [r3, #12]
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	ea40 0301 	orr.w	r3, r0, r1
 8003d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d9c:	f021 010c 	bic.w	r1, r1, #12
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003daa:	430b      	orrs	r3, r1
 8003dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbe:	6999      	ldr	r1, [r3, #24]
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	ea40 0301 	orr.w	r3, r0, r1
 8003dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b8f      	ldr	r3, [pc, #572]	@ (8004010 <UART_SetConfig+0x2cc>)
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d005      	beq.n	8003de4 <UART_SetConfig+0xa0>
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4b8d      	ldr	r3, [pc, #564]	@ (8004014 <UART_SetConfig+0x2d0>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d104      	bne.n	8003dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7fe fcbe 	bl	8002764 <HAL_RCC_GetPCLK2Freq>
 8003de8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003dec:	e003      	b.n	8003df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dee:	f7fe fca5 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8003df2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e00:	f040 810c 	bne.w	800401c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e16:	4622      	mov	r2, r4
 8003e18:	462b      	mov	r3, r5
 8003e1a:	1891      	adds	r1, r2, r2
 8003e1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e1e:	415b      	adcs	r3, r3
 8003e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e26:	4621      	mov	r1, r4
 8003e28:	eb12 0801 	adds.w	r8, r2, r1
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	eb43 0901 	adc.w	r9, r3, r1
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e46:	4690      	mov	r8, r2
 8003e48:	4699      	mov	r9, r3
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	eb18 0303 	adds.w	r3, r8, r3
 8003e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e54:	462b      	mov	r3, r5
 8003e56:	eb49 0303 	adc.w	r3, r9, r3
 8003e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e72:	460b      	mov	r3, r1
 8003e74:	18db      	adds	r3, r3, r3
 8003e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e78:	4613      	mov	r3, r2
 8003e7a:	eb42 0303 	adc.w	r3, r2, r3
 8003e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e88:	f7fc feae 	bl	8000be8 <__aeabi_uldivmod>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4b61      	ldr	r3, [pc, #388]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003e92:	fba3 2302 	umull	r2, r3, r3, r2
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	011c      	lsls	r4, r3, #4
 8003e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003eac:	4642      	mov	r2, r8
 8003eae:	464b      	mov	r3, r9
 8003eb0:	1891      	adds	r1, r2, r2
 8003eb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003eb4:	415b      	adcs	r3, r3
 8003eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003edc:	4692      	mov	sl, r2
 8003ede:	469b      	mov	fp, r3
 8003ee0:	4643      	mov	r3, r8
 8003ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eea:	464b      	mov	r3, r9
 8003eec:	eb4b 0303 	adc.w	r3, fp, r3
 8003ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	18db      	adds	r3, r3, r3
 8003f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f0e:	4613      	mov	r3, r2
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f1e:	f7fc fe63 	bl	8000be8 <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	4b3b      	ldr	r3, [pc, #236]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2264      	movs	r2, #100	@ 0x64
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	1acb      	subs	r3, r1, r3
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f3e:	4b36      	ldr	r3, [pc, #216]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003f40:	fba3 2302 	umull	r2, r3, r3, r2
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f4c:	441c      	add	r4, r3
 8003f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f60:	4642      	mov	r2, r8
 8003f62:	464b      	mov	r3, r9
 8003f64:	1891      	adds	r1, r2, r2
 8003f66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f68:	415b      	adcs	r3, r3
 8003f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f70:	4641      	mov	r1, r8
 8003f72:	1851      	adds	r1, r2, r1
 8003f74:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f76:	4649      	mov	r1, r9
 8003f78:	414b      	adcs	r3, r1
 8003f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f88:	4659      	mov	r1, fp
 8003f8a:	00cb      	lsls	r3, r1, #3
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f92:	4651      	mov	r1, sl
 8003f94:	00ca      	lsls	r2, r1, #3
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	460a      	mov	r2, r1
 8003fa8:	eb42 0303 	adc.w	r3, r2, r3
 8003fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	18db      	adds	r3, r3, r3
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fca:	4613      	mov	r3, r2
 8003fcc:	eb42 0303 	adc.w	r3, r2, r3
 8003fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fda:	f7fc fe05 	bl	8000be8 <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	2164      	movs	r1, #100	@ 0x64
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	3332      	adds	r3, #50	@ 0x32
 8003ff6:	4a08      	ldr	r2, [pc, #32]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	f003 0207 	and.w	r2, r3, #7
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4422      	add	r2, r4
 800400a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800400c:	e106      	b.n	800421c <UART_SetConfig+0x4d8>
 800400e:	bf00      	nop
 8004010:	40011000 	.word	0x40011000
 8004014:	40011400 	.word	0x40011400
 8004018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800401c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004020:	2200      	movs	r2, #0
 8004022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004026:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800402a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800402e:	4642      	mov	r2, r8
 8004030:	464b      	mov	r3, r9
 8004032:	1891      	adds	r1, r2, r2
 8004034:	6239      	str	r1, [r7, #32]
 8004036:	415b      	adcs	r3, r3
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
 800403a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800403e:	4641      	mov	r1, r8
 8004040:	1854      	adds	r4, r2, r1
 8004042:	4649      	mov	r1, r9
 8004044:	eb43 0501 	adc.w	r5, r3, r1
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	00eb      	lsls	r3, r5, #3
 8004052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004056:	00e2      	lsls	r2, r4, #3
 8004058:	4614      	mov	r4, r2
 800405a:	461d      	mov	r5, r3
 800405c:	4643      	mov	r3, r8
 800405e:	18e3      	adds	r3, r4, r3
 8004060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004064:	464b      	mov	r3, r9
 8004066:	eb45 0303 	adc.w	r3, r5, r3
 800406a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800407a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800408a:	4629      	mov	r1, r5
 800408c:	008b      	lsls	r3, r1, #2
 800408e:	4621      	mov	r1, r4
 8004090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004094:	4621      	mov	r1, r4
 8004096:	008a      	lsls	r2, r1, #2
 8004098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800409c:	f7fc fda4 	bl	8000be8 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4b60      	ldr	r3, [pc, #384]	@ (8004228 <UART_SetConfig+0x4e4>)
 80040a6:	fba3 2302 	umull	r2, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	011c      	lsls	r4, r3, #4
 80040ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	61b9      	str	r1, [r7, #24]
 80040c8:	415b      	adcs	r3, r3
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d0:	4641      	mov	r1, r8
 80040d2:	1851      	adds	r1, r2, r1
 80040d4:	6139      	str	r1, [r7, #16]
 80040d6:	4649      	mov	r1, r9
 80040d8:	414b      	adcs	r3, r1
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040e8:	4659      	mov	r1, fp
 80040ea:	00cb      	lsls	r3, r1, #3
 80040ec:	4651      	mov	r1, sl
 80040ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f2:	4651      	mov	r1, sl
 80040f4:	00ca      	lsls	r2, r1, #3
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	4642      	mov	r2, r8
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004104:	464b      	mov	r3, r9
 8004106:	460a      	mov	r2, r1
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	67bb      	str	r3, [r7, #120]	@ 0x78
 800411a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004128:	4649      	mov	r1, r9
 800412a:	008b      	lsls	r3, r1, #2
 800412c:	4641      	mov	r1, r8
 800412e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004132:	4641      	mov	r1, r8
 8004134:	008a      	lsls	r2, r1, #2
 8004136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800413a:	f7fc fd55 	bl	8000be8 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4611      	mov	r1, r2
 8004144:	4b38      	ldr	r3, [pc, #224]	@ (8004228 <UART_SetConfig+0x4e4>)
 8004146:	fba3 2301 	umull	r2, r3, r3, r1
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2264      	movs	r2, #100	@ 0x64
 800414e:	fb02 f303 	mul.w	r3, r2, r3
 8004152:	1acb      	subs	r3, r1, r3
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	3332      	adds	r3, #50	@ 0x32
 8004158:	4a33      	ldr	r2, [pc, #204]	@ (8004228 <UART_SetConfig+0x4e4>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004164:	441c      	add	r4, r3
 8004166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800416a:	2200      	movs	r2, #0
 800416c:	673b      	str	r3, [r7, #112]	@ 0x70
 800416e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004170:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	1891      	adds	r1, r2, r2
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	415b      	adcs	r3, r3
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004184:	4641      	mov	r1, r8
 8004186:	1851      	adds	r1, r2, r1
 8004188:	6039      	str	r1, [r7, #0]
 800418a:	4649      	mov	r1, r9
 800418c:	414b      	adcs	r3, r1
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800419c:	4659      	mov	r1, fp
 800419e:	00cb      	lsls	r3, r1, #3
 80041a0:	4651      	mov	r1, sl
 80041a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a6:	4651      	mov	r1, sl
 80041a8:	00ca      	lsls	r2, r1, #3
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	4603      	mov	r3, r0
 80041b0:	4642      	mov	r2, r8
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041b6:	464b      	mov	r3, r9
 80041b8:	460a      	mov	r2, r1
 80041ba:	eb42 0303 	adc.w	r3, r2, r3
 80041be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80041ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041d8:	4649      	mov	r1, r9
 80041da:	008b      	lsls	r3, r1, #2
 80041dc:	4641      	mov	r1, r8
 80041de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e2:	4641      	mov	r1, r8
 80041e4:	008a      	lsls	r2, r1, #2
 80041e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041ea:	f7fc fcfd 	bl	8000be8 <__aeabi_uldivmod>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <UART_SetConfig+0x4e4>)
 80041f4:	fba3 1302 	umull	r1, r3, r3, r2
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	2164      	movs	r1, #100	@ 0x64
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	3332      	adds	r3, #50	@ 0x32
 8004206:	4a08      	ldr	r2, [pc, #32]	@ (8004228 <UART_SetConfig+0x4e4>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	f003 020f 	and.w	r2, r3, #15
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4422      	add	r2, r4
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004222:	46bd      	mov	sp, r7
 8004224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004228:	51eb851f 	.word	0x51eb851f

0800422c <__cvt>:
 800422c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004230:	ec57 6b10 	vmov	r6, r7, d0
 8004234:	2f00      	cmp	r7, #0
 8004236:	460c      	mov	r4, r1
 8004238:	4619      	mov	r1, r3
 800423a:	463b      	mov	r3, r7
 800423c:	bfbb      	ittet	lt
 800423e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004242:	461f      	movlt	r7, r3
 8004244:	2300      	movge	r3, #0
 8004246:	232d      	movlt	r3, #45	@ 0x2d
 8004248:	700b      	strb	r3, [r1, #0]
 800424a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800424c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004250:	4691      	mov	r9, r2
 8004252:	f023 0820 	bic.w	r8, r3, #32
 8004256:	bfbc      	itt	lt
 8004258:	4632      	movlt	r2, r6
 800425a:	4616      	movlt	r6, r2
 800425c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004260:	d005      	beq.n	800426e <__cvt+0x42>
 8004262:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004266:	d100      	bne.n	800426a <__cvt+0x3e>
 8004268:	3401      	adds	r4, #1
 800426a:	2102      	movs	r1, #2
 800426c:	e000      	b.n	8004270 <__cvt+0x44>
 800426e:	2103      	movs	r1, #3
 8004270:	ab03      	add	r3, sp, #12
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	ab02      	add	r3, sp, #8
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	ec47 6b10 	vmov	d0, r6, r7
 800427c:	4653      	mov	r3, sl
 800427e:	4622      	mov	r2, r4
 8004280:	f000 fe6e 	bl	8004f60 <_dtoa_r>
 8004284:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004288:	4605      	mov	r5, r0
 800428a:	d119      	bne.n	80042c0 <__cvt+0x94>
 800428c:	f019 0f01 	tst.w	r9, #1
 8004290:	d00e      	beq.n	80042b0 <__cvt+0x84>
 8004292:	eb00 0904 	add.w	r9, r0, r4
 8004296:	2200      	movs	r2, #0
 8004298:	2300      	movs	r3, #0
 800429a:	4630      	mov	r0, r6
 800429c:	4639      	mov	r1, r7
 800429e:	f7fc fc33 	bl	8000b08 <__aeabi_dcmpeq>
 80042a2:	b108      	cbz	r0, 80042a8 <__cvt+0x7c>
 80042a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80042a8:	2230      	movs	r2, #48	@ 0x30
 80042aa:	9b03      	ldr	r3, [sp, #12]
 80042ac:	454b      	cmp	r3, r9
 80042ae:	d31e      	bcc.n	80042ee <__cvt+0xc2>
 80042b0:	9b03      	ldr	r3, [sp, #12]
 80042b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80042b4:	1b5b      	subs	r3, r3, r5
 80042b6:	4628      	mov	r0, r5
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	b004      	add	sp, #16
 80042bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80042c4:	eb00 0904 	add.w	r9, r0, r4
 80042c8:	d1e5      	bne.n	8004296 <__cvt+0x6a>
 80042ca:	7803      	ldrb	r3, [r0, #0]
 80042cc:	2b30      	cmp	r3, #48	@ 0x30
 80042ce:	d10a      	bne.n	80042e6 <__cvt+0xba>
 80042d0:	2200      	movs	r2, #0
 80042d2:	2300      	movs	r3, #0
 80042d4:	4630      	mov	r0, r6
 80042d6:	4639      	mov	r1, r7
 80042d8:	f7fc fc16 	bl	8000b08 <__aeabi_dcmpeq>
 80042dc:	b918      	cbnz	r0, 80042e6 <__cvt+0xba>
 80042de:	f1c4 0401 	rsb	r4, r4, #1
 80042e2:	f8ca 4000 	str.w	r4, [sl]
 80042e6:	f8da 3000 	ldr.w	r3, [sl]
 80042ea:	4499      	add	r9, r3
 80042ec:	e7d3      	b.n	8004296 <__cvt+0x6a>
 80042ee:	1c59      	adds	r1, r3, #1
 80042f0:	9103      	str	r1, [sp, #12]
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	e7d9      	b.n	80042aa <__cvt+0x7e>

080042f6 <__exponent>:
 80042f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042f8:	2900      	cmp	r1, #0
 80042fa:	bfba      	itte	lt
 80042fc:	4249      	neglt	r1, r1
 80042fe:	232d      	movlt	r3, #45	@ 0x2d
 8004300:	232b      	movge	r3, #43	@ 0x2b
 8004302:	2909      	cmp	r1, #9
 8004304:	7002      	strb	r2, [r0, #0]
 8004306:	7043      	strb	r3, [r0, #1]
 8004308:	dd29      	ble.n	800435e <__exponent+0x68>
 800430a:	f10d 0307 	add.w	r3, sp, #7
 800430e:	461d      	mov	r5, r3
 8004310:	270a      	movs	r7, #10
 8004312:	461a      	mov	r2, r3
 8004314:	fbb1 f6f7 	udiv	r6, r1, r7
 8004318:	fb07 1416 	mls	r4, r7, r6, r1
 800431c:	3430      	adds	r4, #48	@ 0x30
 800431e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004322:	460c      	mov	r4, r1
 8004324:	2c63      	cmp	r4, #99	@ 0x63
 8004326:	f103 33ff 	add.w	r3, r3, #4294967295
 800432a:	4631      	mov	r1, r6
 800432c:	dcf1      	bgt.n	8004312 <__exponent+0x1c>
 800432e:	3130      	adds	r1, #48	@ 0x30
 8004330:	1e94      	subs	r4, r2, #2
 8004332:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004336:	1c41      	adds	r1, r0, #1
 8004338:	4623      	mov	r3, r4
 800433a:	42ab      	cmp	r3, r5
 800433c:	d30a      	bcc.n	8004354 <__exponent+0x5e>
 800433e:	f10d 0309 	add.w	r3, sp, #9
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	42ac      	cmp	r4, r5
 8004346:	bf88      	it	hi
 8004348:	2300      	movhi	r3, #0
 800434a:	3302      	adds	r3, #2
 800434c:	4403      	add	r3, r0
 800434e:	1a18      	subs	r0, r3, r0
 8004350:	b003      	add	sp, #12
 8004352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004354:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004358:	f801 6f01 	strb.w	r6, [r1, #1]!
 800435c:	e7ed      	b.n	800433a <__exponent+0x44>
 800435e:	2330      	movs	r3, #48	@ 0x30
 8004360:	3130      	adds	r1, #48	@ 0x30
 8004362:	7083      	strb	r3, [r0, #2]
 8004364:	70c1      	strb	r1, [r0, #3]
 8004366:	1d03      	adds	r3, r0, #4
 8004368:	e7f1      	b.n	800434e <__exponent+0x58>
	...

0800436c <_printf_float>:
 800436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004370:	b08d      	sub	sp, #52	@ 0x34
 8004372:	460c      	mov	r4, r1
 8004374:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004378:	4616      	mov	r6, r2
 800437a:	461f      	mov	r7, r3
 800437c:	4605      	mov	r5, r0
 800437e:	f000 fcef 	bl	8004d60 <_localeconv_r>
 8004382:	6803      	ldr	r3, [r0, #0]
 8004384:	9304      	str	r3, [sp, #16]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fb ff92 	bl	80002b0 <strlen>
 800438c:	2300      	movs	r3, #0
 800438e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004390:	f8d8 3000 	ldr.w	r3, [r8]
 8004394:	9005      	str	r0, [sp, #20]
 8004396:	3307      	adds	r3, #7
 8004398:	f023 0307 	bic.w	r3, r3, #7
 800439c:	f103 0208 	add.w	r2, r3, #8
 80043a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80043a4:	f8d4 b000 	ldr.w	fp, [r4]
 80043a8:	f8c8 2000 	str.w	r2, [r8]
 80043ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80043b4:	9307      	str	r3, [sp, #28]
 80043b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80043ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80043be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043c2:	4b9c      	ldr	r3, [pc, #624]	@ (8004634 <_printf_float+0x2c8>)
 80043c4:	f04f 32ff 	mov.w	r2, #4294967295
 80043c8:	f7fc fbd0 	bl	8000b6c <__aeabi_dcmpun>
 80043cc:	bb70      	cbnz	r0, 800442c <_printf_float+0xc0>
 80043ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043d2:	4b98      	ldr	r3, [pc, #608]	@ (8004634 <_printf_float+0x2c8>)
 80043d4:	f04f 32ff 	mov.w	r2, #4294967295
 80043d8:	f7fc fbaa 	bl	8000b30 <__aeabi_dcmple>
 80043dc:	bb30      	cbnz	r0, 800442c <_printf_float+0xc0>
 80043de:	2200      	movs	r2, #0
 80043e0:	2300      	movs	r3, #0
 80043e2:	4640      	mov	r0, r8
 80043e4:	4649      	mov	r1, r9
 80043e6:	f7fc fb99 	bl	8000b1c <__aeabi_dcmplt>
 80043ea:	b110      	cbz	r0, 80043f2 <_printf_float+0x86>
 80043ec:	232d      	movs	r3, #45	@ 0x2d
 80043ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043f2:	4a91      	ldr	r2, [pc, #580]	@ (8004638 <_printf_float+0x2cc>)
 80043f4:	4b91      	ldr	r3, [pc, #580]	@ (800463c <_printf_float+0x2d0>)
 80043f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80043fa:	bf94      	ite	ls
 80043fc:	4690      	movls	r8, r2
 80043fe:	4698      	movhi	r8, r3
 8004400:	2303      	movs	r3, #3
 8004402:	6123      	str	r3, [r4, #16]
 8004404:	f02b 0304 	bic.w	r3, fp, #4
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	f04f 0900 	mov.w	r9, #0
 800440e:	9700      	str	r7, [sp, #0]
 8004410:	4633      	mov	r3, r6
 8004412:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004414:	4621      	mov	r1, r4
 8004416:	4628      	mov	r0, r5
 8004418:	f000 f9d2 	bl	80047c0 <_printf_common>
 800441c:	3001      	adds	r0, #1
 800441e:	f040 808d 	bne.w	800453c <_printf_float+0x1d0>
 8004422:	f04f 30ff 	mov.w	r0, #4294967295
 8004426:	b00d      	add	sp, #52	@ 0x34
 8004428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800442c:	4642      	mov	r2, r8
 800442e:	464b      	mov	r3, r9
 8004430:	4640      	mov	r0, r8
 8004432:	4649      	mov	r1, r9
 8004434:	f7fc fb9a 	bl	8000b6c <__aeabi_dcmpun>
 8004438:	b140      	cbz	r0, 800444c <_printf_float+0xe0>
 800443a:	464b      	mov	r3, r9
 800443c:	2b00      	cmp	r3, #0
 800443e:	bfbc      	itt	lt
 8004440:	232d      	movlt	r3, #45	@ 0x2d
 8004442:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004446:	4a7e      	ldr	r2, [pc, #504]	@ (8004640 <_printf_float+0x2d4>)
 8004448:	4b7e      	ldr	r3, [pc, #504]	@ (8004644 <_printf_float+0x2d8>)
 800444a:	e7d4      	b.n	80043f6 <_printf_float+0x8a>
 800444c:	6863      	ldr	r3, [r4, #4]
 800444e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004452:	9206      	str	r2, [sp, #24]
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	d13b      	bne.n	80044d0 <_printf_float+0x164>
 8004458:	2306      	movs	r3, #6
 800445a:	6063      	str	r3, [r4, #4]
 800445c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004460:	2300      	movs	r3, #0
 8004462:	6022      	str	r2, [r4, #0]
 8004464:	9303      	str	r3, [sp, #12]
 8004466:	ab0a      	add	r3, sp, #40	@ 0x28
 8004468:	e9cd a301 	strd	sl, r3, [sp, #4]
 800446c:	ab09      	add	r3, sp, #36	@ 0x24
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	6861      	ldr	r1, [r4, #4]
 8004472:	ec49 8b10 	vmov	d0, r8, r9
 8004476:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800447a:	4628      	mov	r0, r5
 800447c:	f7ff fed6 	bl	800422c <__cvt>
 8004480:	9b06      	ldr	r3, [sp, #24]
 8004482:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004484:	2b47      	cmp	r3, #71	@ 0x47
 8004486:	4680      	mov	r8, r0
 8004488:	d129      	bne.n	80044de <_printf_float+0x172>
 800448a:	1cc8      	adds	r0, r1, #3
 800448c:	db02      	blt.n	8004494 <_printf_float+0x128>
 800448e:	6863      	ldr	r3, [r4, #4]
 8004490:	4299      	cmp	r1, r3
 8004492:	dd41      	ble.n	8004518 <_printf_float+0x1ac>
 8004494:	f1aa 0a02 	sub.w	sl, sl, #2
 8004498:	fa5f fa8a 	uxtb.w	sl, sl
 800449c:	3901      	subs	r1, #1
 800449e:	4652      	mov	r2, sl
 80044a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80044a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80044a6:	f7ff ff26 	bl	80042f6 <__exponent>
 80044aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044ac:	1813      	adds	r3, r2, r0
 80044ae:	2a01      	cmp	r2, #1
 80044b0:	4681      	mov	r9, r0
 80044b2:	6123      	str	r3, [r4, #16]
 80044b4:	dc02      	bgt.n	80044bc <_printf_float+0x150>
 80044b6:	6822      	ldr	r2, [r4, #0]
 80044b8:	07d2      	lsls	r2, r2, #31
 80044ba:	d501      	bpl.n	80044c0 <_printf_float+0x154>
 80044bc:	3301      	adds	r3, #1
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0a2      	beq.n	800440e <_printf_float+0xa2>
 80044c8:	232d      	movs	r3, #45	@ 0x2d
 80044ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044ce:	e79e      	b.n	800440e <_printf_float+0xa2>
 80044d0:	9a06      	ldr	r2, [sp, #24]
 80044d2:	2a47      	cmp	r2, #71	@ 0x47
 80044d4:	d1c2      	bne.n	800445c <_printf_float+0xf0>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1c0      	bne.n	800445c <_printf_float+0xf0>
 80044da:	2301      	movs	r3, #1
 80044dc:	e7bd      	b.n	800445a <_printf_float+0xee>
 80044de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80044e2:	d9db      	bls.n	800449c <_printf_float+0x130>
 80044e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80044e8:	d118      	bne.n	800451c <_printf_float+0x1b0>
 80044ea:	2900      	cmp	r1, #0
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	dd0b      	ble.n	8004508 <_printf_float+0x19c>
 80044f0:	6121      	str	r1, [r4, #16]
 80044f2:	b913      	cbnz	r3, 80044fa <_printf_float+0x18e>
 80044f4:	6822      	ldr	r2, [r4, #0]
 80044f6:	07d0      	lsls	r0, r2, #31
 80044f8:	d502      	bpl.n	8004500 <_printf_float+0x194>
 80044fa:	3301      	adds	r3, #1
 80044fc:	440b      	add	r3, r1
 80044fe:	6123      	str	r3, [r4, #16]
 8004500:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004502:	f04f 0900 	mov.w	r9, #0
 8004506:	e7db      	b.n	80044c0 <_printf_float+0x154>
 8004508:	b913      	cbnz	r3, 8004510 <_printf_float+0x1a4>
 800450a:	6822      	ldr	r2, [r4, #0]
 800450c:	07d2      	lsls	r2, r2, #31
 800450e:	d501      	bpl.n	8004514 <_printf_float+0x1a8>
 8004510:	3302      	adds	r3, #2
 8004512:	e7f4      	b.n	80044fe <_printf_float+0x192>
 8004514:	2301      	movs	r3, #1
 8004516:	e7f2      	b.n	80044fe <_printf_float+0x192>
 8004518:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800451c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800451e:	4299      	cmp	r1, r3
 8004520:	db05      	blt.n	800452e <_printf_float+0x1c2>
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	6121      	str	r1, [r4, #16]
 8004526:	07d8      	lsls	r0, r3, #31
 8004528:	d5ea      	bpl.n	8004500 <_printf_float+0x194>
 800452a:	1c4b      	adds	r3, r1, #1
 800452c:	e7e7      	b.n	80044fe <_printf_float+0x192>
 800452e:	2900      	cmp	r1, #0
 8004530:	bfd4      	ite	le
 8004532:	f1c1 0202 	rsble	r2, r1, #2
 8004536:	2201      	movgt	r2, #1
 8004538:	4413      	add	r3, r2
 800453a:	e7e0      	b.n	80044fe <_printf_float+0x192>
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	055a      	lsls	r2, r3, #21
 8004540:	d407      	bmi.n	8004552 <_printf_float+0x1e6>
 8004542:	6923      	ldr	r3, [r4, #16]
 8004544:	4642      	mov	r2, r8
 8004546:	4631      	mov	r1, r6
 8004548:	4628      	mov	r0, r5
 800454a:	47b8      	blx	r7
 800454c:	3001      	adds	r0, #1
 800454e:	d12b      	bne.n	80045a8 <_printf_float+0x23c>
 8004550:	e767      	b.n	8004422 <_printf_float+0xb6>
 8004552:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004556:	f240 80dd 	bls.w	8004714 <_printf_float+0x3a8>
 800455a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800455e:	2200      	movs	r2, #0
 8004560:	2300      	movs	r3, #0
 8004562:	f7fc fad1 	bl	8000b08 <__aeabi_dcmpeq>
 8004566:	2800      	cmp	r0, #0
 8004568:	d033      	beq.n	80045d2 <_printf_float+0x266>
 800456a:	4a37      	ldr	r2, [pc, #220]	@ (8004648 <_printf_float+0x2dc>)
 800456c:	2301      	movs	r3, #1
 800456e:	4631      	mov	r1, r6
 8004570:	4628      	mov	r0, r5
 8004572:	47b8      	blx	r7
 8004574:	3001      	adds	r0, #1
 8004576:	f43f af54 	beq.w	8004422 <_printf_float+0xb6>
 800457a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800457e:	4543      	cmp	r3, r8
 8004580:	db02      	blt.n	8004588 <_printf_float+0x21c>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	07d8      	lsls	r0, r3, #31
 8004586:	d50f      	bpl.n	80045a8 <_printf_float+0x23c>
 8004588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800458c:	4631      	mov	r1, r6
 800458e:	4628      	mov	r0, r5
 8004590:	47b8      	blx	r7
 8004592:	3001      	adds	r0, #1
 8004594:	f43f af45 	beq.w	8004422 <_printf_float+0xb6>
 8004598:	f04f 0900 	mov.w	r9, #0
 800459c:	f108 38ff 	add.w	r8, r8, #4294967295
 80045a0:	f104 0a1a 	add.w	sl, r4, #26
 80045a4:	45c8      	cmp	r8, r9
 80045a6:	dc09      	bgt.n	80045bc <_printf_float+0x250>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	079b      	lsls	r3, r3, #30
 80045ac:	f100 8103 	bmi.w	80047b6 <_printf_float+0x44a>
 80045b0:	68e0      	ldr	r0, [r4, #12]
 80045b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045b4:	4298      	cmp	r0, r3
 80045b6:	bfb8      	it	lt
 80045b8:	4618      	movlt	r0, r3
 80045ba:	e734      	b.n	8004426 <_printf_float+0xba>
 80045bc:	2301      	movs	r3, #1
 80045be:	4652      	mov	r2, sl
 80045c0:	4631      	mov	r1, r6
 80045c2:	4628      	mov	r0, r5
 80045c4:	47b8      	blx	r7
 80045c6:	3001      	adds	r0, #1
 80045c8:	f43f af2b 	beq.w	8004422 <_printf_float+0xb6>
 80045cc:	f109 0901 	add.w	r9, r9, #1
 80045d0:	e7e8      	b.n	80045a4 <_printf_float+0x238>
 80045d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	dc39      	bgt.n	800464c <_printf_float+0x2e0>
 80045d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004648 <_printf_float+0x2dc>)
 80045da:	2301      	movs	r3, #1
 80045dc:	4631      	mov	r1, r6
 80045de:	4628      	mov	r0, r5
 80045e0:	47b8      	blx	r7
 80045e2:	3001      	adds	r0, #1
 80045e4:	f43f af1d 	beq.w	8004422 <_printf_float+0xb6>
 80045e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80045ec:	ea59 0303 	orrs.w	r3, r9, r3
 80045f0:	d102      	bne.n	80045f8 <_printf_float+0x28c>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	07d9      	lsls	r1, r3, #31
 80045f6:	d5d7      	bpl.n	80045a8 <_printf_float+0x23c>
 80045f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045fc:	4631      	mov	r1, r6
 80045fe:	4628      	mov	r0, r5
 8004600:	47b8      	blx	r7
 8004602:	3001      	adds	r0, #1
 8004604:	f43f af0d 	beq.w	8004422 <_printf_float+0xb6>
 8004608:	f04f 0a00 	mov.w	sl, #0
 800460c:	f104 0b1a 	add.w	fp, r4, #26
 8004610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004612:	425b      	negs	r3, r3
 8004614:	4553      	cmp	r3, sl
 8004616:	dc01      	bgt.n	800461c <_printf_float+0x2b0>
 8004618:	464b      	mov	r3, r9
 800461a:	e793      	b.n	8004544 <_printf_float+0x1d8>
 800461c:	2301      	movs	r3, #1
 800461e:	465a      	mov	r2, fp
 8004620:	4631      	mov	r1, r6
 8004622:	4628      	mov	r0, r5
 8004624:	47b8      	blx	r7
 8004626:	3001      	adds	r0, #1
 8004628:	f43f aefb 	beq.w	8004422 <_printf_float+0xb6>
 800462c:	f10a 0a01 	add.w	sl, sl, #1
 8004630:	e7ee      	b.n	8004610 <_printf_float+0x2a4>
 8004632:	bf00      	nop
 8004634:	7fefffff 	.word	0x7fefffff
 8004638:	08006fd0 	.word	0x08006fd0
 800463c:	08006fd4 	.word	0x08006fd4
 8004640:	08006fd8 	.word	0x08006fd8
 8004644:	08006fdc 	.word	0x08006fdc
 8004648:	08006fe0 	.word	0x08006fe0
 800464c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800464e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004652:	4553      	cmp	r3, sl
 8004654:	bfa8      	it	ge
 8004656:	4653      	movge	r3, sl
 8004658:	2b00      	cmp	r3, #0
 800465a:	4699      	mov	r9, r3
 800465c:	dc36      	bgt.n	80046cc <_printf_float+0x360>
 800465e:	f04f 0b00 	mov.w	fp, #0
 8004662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004666:	f104 021a 	add.w	r2, r4, #26
 800466a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800466c:	9306      	str	r3, [sp, #24]
 800466e:	eba3 0309 	sub.w	r3, r3, r9
 8004672:	455b      	cmp	r3, fp
 8004674:	dc31      	bgt.n	80046da <_printf_float+0x36e>
 8004676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004678:	459a      	cmp	sl, r3
 800467a:	dc3a      	bgt.n	80046f2 <_printf_float+0x386>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	07da      	lsls	r2, r3, #31
 8004680:	d437      	bmi.n	80046f2 <_printf_float+0x386>
 8004682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004684:	ebaa 0903 	sub.w	r9, sl, r3
 8004688:	9b06      	ldr	r3, [sp, #24]
 800468a:	ebaa 0303 	sub.w	r3, sl, r3
 800468e:	4599      	cmp	r9, r3
 8004690:	bfa8      	it	ge
 8004692:	4699      	movge	r9, r3
 8004694:	f1b9 0f00 	cmp.w	r9, #0
 8004698:	dc33      	bgt.n	8004702 <_printf_float+0x396>
 800469a:	f04f 0800 	mov.w	r8, #0
 800469e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046a2:	f104 0b1a 	add.w	fp, r4, #26
 80046a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046a8:	ebaa 0303 	sub.w	r3, sl, r3
 80046ac:	eba3 0309 	sub.w	r3, r3, r9
 80046b0:	4543      	cmp	r3, r8
 80046b2:	f77f af79 	ble.w	80045a8 <_printf_float+0x23c>
 80046b6:	2301      	movs	r3, #1
 80046b8:	465a      	mov	r2, fp
 80046ba:	4631      	mov	r1, r6
 80046bc:	4628      	mov	r0, r5
 80046be:	47b8      	blx	r7
 80046c0:	3001      	adds	r0, #1
 80046c2:	f43f aeae 	beq.w	8004422 <_printf_float+0xb6>
 80046c6:	f108 0801 	add.w	r8, r8, #1
 80046ca:	e7ec      	b.n	80046a6 <_printf_float+0x33a>
 80046cc:	4642      	mov	r2, r8
 80046ce:	4631      	mov	r1, r6
 80046d0:	4628      	mov	r0, r5
 80046d2:	47b8      	blx	r7
 80046d4:	3001      	adds	r0, #1
 80046d6:	d1c2      	bne.n	800465e <_printf_float+0x2f2>
 80046d8:	e6a3      	b.n	8004422 <_printf_float+0xb6>
 80046da:	2301      	movs	r3, #1
 80046dc:	4631      	mov	r1, r6
 80046de:	4628      	mov	r0, r5
 80046e0:	9206      	str	r2, [sp, #24]
 80046e2:	47b8      	blx	r7
 80046e4:	3001      	adds	r0, #1
 80046e6:	f43f ae9c 	beq.w	8004422 <_printf_float+0xb6>
 80046ea:	9a06      	ldr	r2, [sp, #24]
 80046ec:	f10b 0b01 	add.w	fp, fp, #1
 80046f0:	e7bb      	b.n	800466a <_printf_float+0x2fe>
 80046f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046f6:	4631      	mov	r1, r6
 80046f8:	4628      	mov	r0, r5
 80046fa:	47b8      	blx	r7
 80046fc:	3001      	adds	r0, #1
 80046fe:	d1c0      	bne.n	8004682 <_printf_float+0x316>
 8004700:	e68f      	b.n	8004422 <_printf_float+0xb6>
 8004702:	9a06      	ldr	r2, [sp, #24]
 8004704:	464b      	mov	r3, r9
 8004706:	4442      	add	r2, r8
 8004708:	4631      	mov	r1, r6
 800470a:	4628      	mov	r0, r5
 800470c:	47b8      	blx	r7
 800470e:	3001      	adds	r0, #1
 8004710:	d1c3      	bne.n	800469a <_printf_float+0x32e>
 8004712:	e686      	b.n	8004422 <_printf_float+0xb6>
 8004714:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004718:	f1ba 0f01 	cmp.w	sl, #1
 800471c:	dc01      	bgt.n	8004722 <_printf_float+0x3b6>
 800471e:	07db      	lsls	r3, r3, #31
 8004720:	d536      	bpl.n	8004790 <_printf_float+0x424>
 8004722:	2301      	movs	r3, #1
 8004724:	4642      	mov	r2, r8
 8004726:	4631      	mov	r1, r6
 8004728:	4628      	mov	r0, r5
 800472a:	47b8      	blx	r7
 800472c:	3001      	adds	r0, #1
 800472e:	f43f ae78 	beq.w	8004422 <_printf_float+0xb6>
 8004732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004736:	4631      	mov	r1, r6
 8004738:	4628      	mov	r0, r5
 800473a:	47b8      	blx	r7
 800473c:	3001      	adds	r0, #1
 800473e:	f43f ae70 	beq.w	8004422 <_printf_float+0xb6>
 8004742:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004746:	2200      	movs	r2, #0
 8004748:	2300      	movs	r3, #0
 800474a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800474e:	f7fc f9db 	bl	8000b08 <__aeabi_dcmpeq>
 8004752:	b9c0      	cbnz	r0, 8004786 <_printf_float+0x41a>
 8004754:	4653      	mov	r3, sl
 8004756:	f108 0201 	add.w	r2, r8, #1
 800475a:	4631      	mov	r1, r6
 800475c:	4628      	mov	r0, r5
 800475e:	47b8      	blx	r7
 8004760:	3001      	adds	r0, #1
 8004762:	d10c      	bne.n	800477e <_printf_float+0x412>
 8004764:	e65d      	b.n	8004422 <_printf_float+0xb6>
 8004766:	2301      	movs	r3, #1
 8004768:	465a      	mov	r2, fp
 800476a:	4631      	mov	r1, r6
 800476c:	4628      	mov	r0, r5
 800476e:	47b8      	blx	r7
 8004770:	3001      	adds	r0, #1
 8004772:	f43f ae56 	beq.w	8004422 <_printf_float+0xb6>
 8004776:	f108 0801 	add.w	r8, r8, #1
 800477a:	45d0      	cmp	r8, sl
 800477c:	dbf3      	blt.n	8004766 <_printf_float+0x3fa>
 800477e:	464b      	mov	r3, r9
 8004780:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004784:	e6df      	b.n	8004546 <_printf_float+0x1da>
 8004786:	f04f 0800 	mov.w	r8, #0
 800478a:	f104 0b1a 	add.w	fp, r4, #26
 800478e:	e7f4      	b.n	800477a <_printf_float+0x40e>
 8004790:	2301      	movs	r3, #1
 8004792:	4642      	mov	r2, r8
 8004794:	e7e1      	b.n	800475a <_printf_float+0x3ee>
 8004796:	2301      	movs	r3, #1
 8004798:	464a      	mov	r2, r9
 800479a:	4631      	mov	r1, r6
 800479c:	4628      	mov	r0, r5
 800479e:	47b8      	blx	r7
 80047a0:	3001      	adds	r0, #1
 80047a2:	f43f ae3e 	beq.w	8004422 <_printf_float+0xb6>
 80047a6:	f108 0801 	add.w	r8, r8, #1
 80047aa:	68e3      	ldr	r3, [r4, #12]
 80047ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80047ae:	1a5b      	subs	r3, r3, r1
 80047b0:	4543      	cmp	r3, r8
 80047b2:	dcf0      	bgt.n	8004796 <_printf_float+0x42a>
 80047b4:	e6fc      	b.n	80045b0 <_printf_float+0x244>
 80047b6:	f04f 0800 	mov.w	r8, #0
 80047ba:	f104 0919 	add.w	r9, r4, #25
 80047be:	e7f4      	b.n	80047aa <_printf_float+0x43e>

080047c0 <_printf_common>:
 80047c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c4:	4616      	mov	r6, r2
 80047c6:	4698      	mov	r8, r3
 80047c8:	688a      	ldr	r2, [r1, #8]
 80047ca:	690b      	ldr	r3, [r1, #16]
 80047cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047d0:	4293      	cmp	r3, r2
 80047d2:	bfb8      	it	lt
 80047d4:	4613      	movlt	r3, r2
 80047d6:	6033      	str	r3, [r6, #0]
 80047d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047dc:	4607      	mov	r7, r0
 80047de:	460c      	mov	r4, r1
 80047e0:	b10a      	cbz	r2, 80047e6 <_printf_common+0x26>
 80047e2:	3301      	adds	r3, #1
 80047e4:	6033      	str	r3, [r6, #0]
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	0699      	lsls	r1, r3, #26
 80047ea:	bf42      	ittt	mi
 80047ec:	6833      	ldrmi	r3, [r6, #0]
 80047ee:	3302      	addmi	r3, #2
 80047f0:	6033      	strmi	r3, [r6, #0]
 80047f2:	6825      	ldr	r5, [r4, #0]
 80047f4:	f015 0506 	ands.w	r5, r5, #6
 80047f8:	d106      	bne.n	8004808 <_printf_common+0x48>
 80047fa:	f104 0a19 	add.w	sl, r4, #25
 80047fe:	68e3      	ldr	r3, [r4, #12]
 8004800:	6832      	ldr	r2, [r6, #0]
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	42ab      	cmp	r3, r5
 8004806:	dc26      	bgt.n	8004856 <_printf_common+0x96>
 8004808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800480c:	6822      	ldr	r2, [r4, #0]
 800480e:	3b00      	subs	r3, #0
 8004810:	bf18      	it	ne
 8004812:	2301      	movne	r3, #1
 8004814:	0692      	lsls	r2, r2, #26
 8004816:	d42b      	bmi.n	8004870 <_printf_common+0xb0>
 8004818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800481c:	4641      	mov	r1, r8
 800481e:	4638      	mov	r0, r7
 8004820:	47c8      	blx	r9
 8004822:	3001      	adds	r0, #1
 8004824:	d01e      	beq.n	8004864 <_printf_common+0xa4>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	6922      	ldr	r2, [r4, #16]
 800482a:	f003 0306 	and.w	r3, r3, #6
 800482e:	2b04      	cmp	r3, #4
 8004830:	bf02      	ittt	eq
 8004832:	68e5      	ldreq	r5, [r4, #12]
 8004834:	6833      	ldreq	r3, [r6, #0]
 8004836:	1aed      	subeq	r5, r5, r3
 8004838:	68a3      	ldr	r3, [r4, #8]
 800483a:	bf0c      	ite	eq
 800483c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004840:	2500      	movne	r5, #0
 8004842:	4293      	cmp	r3, r2
 8004844:	bfc4      	itt	gt
 8004846:	1a9b      	subgt	r3, r3, r2
 8004848:	18ed      	addgt	r5, r5, r3
 800484a:	2600      	movs	r6, #0
 800484c:	341a      	adds	r4, #26
 800484e:	42b5      	cmp	r5, r6
 8004850:	d11a      	bne.n	8004888 <_printf_common+0xc8>
 8004852:	2000      	movs	r0, #0
 8004854:	e008      	b.n	8004868 <_printf_common+0xa8>
 8004856:	2301      	movs	r3, #1
 8004858:	4652      	mov	r2, sl
 800485a:	4641      	mov	r1, r8
 800485c:	4638      	mov	r0, r7
 800485e:	47c8      	blx	r9
 8004860:	3001      	adds	r0, #1
 8004862:	d103      	bne.n	800486c <_printf_common+0xac>
 8004864:	f04f 30ff 	mov.w	r0, #4294967295
 8004868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486c:	3501      	adds	r5, #1
 800486e:	e7c6      	b.n	80047fe <_printf_common+0x3e>
 8004870:	18e1      	adds	r1, r4, r3
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	2030      	movs	r0, #48	@ 0x30
 8004876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800487a:	4422      	add	r2, r4
 800487c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004884:	3302      	adds	r3, #2
 8004886:	e7c7      	b.n	8004818 <_printf_common+0x58>
 8004888:	2301      	movs	r3, #1
 800488a:	4622      	mov	r2, r4
 800488c:	4641      	mov	r1, r8
 800488e:	4638      	mov	r0, r7
 8004890:	47c8      	blx	r9
 8004892:	3001      	adds	r0, #1
 8004894:	d0e6      	beq.n	8004864 <_printf_common+0xa4>
 8004896:	3601      	adds	r6, #1
 8004898:	e7d9      	b.n	800484e <_printf_common+0x8e>
	...

0800489c <_printf_i>:
 800489c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048a0:	7e0f      	ldrb	r7, [r1, #24]
 80048a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048a4:	2f78      	cmp	r7, #120	@ 0x78
 80048a6:	4691      	mov	r9, r2
 80048a8:	4680      	mov	r8, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	469a      	mov	sl, r3
 80048ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048b2:	d807      	bhi.n	80048c4 <_printf_i+0x28>
 80048b4:	2f62      	cmp	r7, #98	@ 0x62
 80048b6:	d80a      	bhi.n	80048ce <_printf_i+0x32>
 80048b8:	2f00      	cmp	r7, #0
 80048ba:	f000 80d2 	beq.w	8004a62 <_printf_i+0x1c6>
 80048be:	2f58      	cmp	r7, #88	@ 0x58
 80048c0:	f000 80b9 	beq.w	8004a36 <_printf_i+0x19a>
 80048c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048cc:	e03a      	b.n	8004944 <_printf_i+0xa8>
 80048ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048d2:	2b15      	cmp	r3, #21
 80048d4:	d8f6      	bhi.n	80048c4 <_printf_i+0x28>
 80048d6:	a101      	add	r1, pc, #4	@ (adr r1, 80048dc <_printf_i+0x40>)
 80048d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048dc:	08004935 	.word	0x08004935
 80048e0:	08004949 	.word	0x08004949
 80048e4:	080048c5 	.word	0x080048c5
 80048e8:	080048c5 	.word	0x080048c5
 80048ec:	080048c5 	.word	0x080048c5
 80048f0:	080048c5 	.word	0x080048c5
 80048f4:	08004949 	.word	0x08004949
 80048f8:	080048c5 	.word	0x080048c5
 80048fc:	080048c5 	.word	0x080048c5
 8004900:	080048c5 	.word	0x080048c5
 8004904:	080048c5 	.word	0x080048c5
 8004908:	08004a49 	.word	0x08004a49
 800490c:	08004973 	.word	0x08004973
 8004910:	08004a03 	.word	0x08004a03
 8004914:	080048c5 	.word	0x080048c5
 8004918:	080048c5 	.word	0x080048c5
 800491c:	08004a6b 	.word	0x08004a6b
 8004920:	080048c5 	.word	0x080048c5
 8004924:	08004973 	.word	0x08004973
 8004928:	080048c5 	.word	0x080048c5
 800492c:	080048c5 	.word	0x080048c5
 8004930:	08004a0b 	.word	0x08004a0b
 8004934:	6833      	ldr	r3, [r6, #0]
 8004936:	1d1a      	adds	r2, r3, #4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6032      	str	r2, [r6, #0]
 800493c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004944:	2301      	movs	r3, #1
 8004946:	e09d      	b.n	8004a84 <_printf_i+0x1e8>
 8004948:	6833      	ldr	r3, [r6, #0]
 800494a:	6820      	ldr	r0, [r4, #0]
 800494c:	1d19      	adds	r1, r3, #4
 800494e:	6031      	str	r1, [r6, #0]
 8004950:	0606      	lsls	r6, r0, #24
 8004952:	d501      	bpl.n	8004958 <_printf_i+0xbc>
 8004954:	681d      	ldr	r5, [r3, #0]
 8004956:	e003      	b.n	8004960 <_printf_i+0xc4>
 8004958:	0645      	lsls	r5, r0, #25
 800495a:	d5fb      	bpl.n	8004954 <_printf_i+0xb8>
 800495c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004960:	2d00      	cmp	r5, #0
 8004962:	da03      	bge.n	800496c <_printf_i+0xd0>
 8004964:	232d      	movs	r3, #45	@ 0x2d
 8004966:	426d      	negs	r5, r5
 8004968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800496c:	4859      	ldr	r0, [pc, #356]	@ (8004ad4 <_printf_i+0x238>)
 800496e:	230a      	movs	r3, #10
 8004970:	e011      	b.n	8004996 <_printf_i+0xfa>
 8004972:	6821      	ldr	r1, [r4, #0]
 8004974:	6833      	ldr	r3, [r6, #0]
 8004976:	0608      	lsls	r0, r1, #24
 8004978:	f853 5b04 	ldr.w	r5, [r3], #4
 800497c:	d402      	bmi.n	8004984 <_printf_i+0xe8>
 800497e:	0649      	lsls	r1, r1, #25
 8004980:	bf48      	it	mi
 8004982:	b2ad      	uxthmi	r5, r5
 8004984:	2f6f      	cmp	r7, #111	@ 0x6f
 8004986:	4853      	ldr	r0, [pc, #332]	@ (8004ad4 <_printf_i+0x238>)
 8004988:	6033      	str	r3, [r6, #0]
 800498a:	bf14      	ite	ne
 800498c:	230a      	movne	r3, #10
 800498e:	2308      	moveq	r3, #8
 8004990:	2100      	movs	r1, #0
 8004992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004996:	6866      	ldr	r6, [r4, #4]
 8004998:	60a6      	str	r6, [r4, #8]
 800499a:	2e00      	cmp	r6, #0
 800499c:	bfa2      	ittt	ge
 800499e:	6821      	ldrge	r1, [r4, #0]
 80049a0:	f021 0104 	bicge.w	r1, r1, #4
 80049a4:	6021      	strge	r1, [r4, #0]
 80049a6:	b90d      	cbnz	r5, 80049ac <_printf_i+0x110>
 80049a8:	2e00      	cmp	r6, #0
 80049aa:	d04b      	beq.n	8004a44 <_printf_i+0x1a8>
 80049ac:	4616      	mov	r6, r2
 80049ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80049b2:	fb03 5711 	mls	r7, r3, r1, r5
 80049b6:	5dc7      	ldrb	r7, [r0, r7]
 80049b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049bc:	462f      	mov	r7, r5
 80049be:	42bb      	cmp	r3, r7
 80049c0:	460d      	mov	r5, r1
 80049c2:	d9f4      	bls.n	80049ae <_printf_i+0x112>
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d10b      	bne.n	80049e0 <_printf_i+0x144>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	07df      	lsls	r7, r3, #31
 80049cc:	d508      	bpl.n	80049e0 <_printf_i+0x144>
 80049ce:	6923      	ldr	r3, [r4, #16]
 80049d0:	6861      	ldr	r1, [r4, #4]
 80049d2:	4299      	cmp	r1, r3
 80049d4:	bfde      	ittt	le
 80049d6:	2330      	movle	r3, #48	@ 0x30
 80049d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049e0:	1b92      	subs	r2, r2, r6
 80049e2:	6122      	str	r2, [r4, #16]
 80049e4:	f8cd a000 	str.w	sl, [sp]
 80049e8:	464b      	mov	r3, r9
 80049ea:	aa03      	add	r2, sp, #12
 80049ec:	4621      	mov	r1, r4
 80049ee:	4640      	mov	r0, r8
 80049f0:	f7ff fee6 	bl	80047c0 <_printf_common>
 80049f4:	3001      	adds	r0, #1
 80049f6:	d14a      	bne.n	8004a8e <_printf_i+0x1f2>
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	b004      	add	sp, #16
 80049fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	f043 0320 	orr.w	r3, r3, #32
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	4833      	ldr	r0, [pc, #204]	@ (8004ad8 <_printf_i+0x23c>)
 8004a0c:	2778      	movs	r7, #120	@ 0x78
 8004a0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	6831      	ldr	r1, [r6, #0]
 8004a16:	061f      	lsls	r7, r3, #24
 8004a18:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a1c:	d402      	bmi.n	8004a24 <_printf_i+0x188>
 8004a1e:	065f      	lsls	r7, r3, #25
 8004a20:	bf48      	it	mi
 8004a22:	b2ad      	uxthmi	r5, r5
 8004a24:	6031      	str	r1, [r6, #0]
 8004a26:	07d9      	lsls	r1, r3, #31
 8004a28:	bf44      	itt	mi
 8004a2a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a2e:	6023      	strmi	r3, [r4, #0]
 8004a30:	b11d      	cbz	r5, 8004a3a <_printf_i+0x19e>
 8004a32:	2310      	movs	r3, #16
 8004a34:	e7ac      	b.n	8004990 <_printf_i+0xf4>
 8004a36:	4827      	ldr	r0, [pc, #156]	@ (8004ad4 <_printf_i+0x238>)
 8004a38:	e7e9      	b.n	8004a0e <_printf_i+0x172>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	f023 0320 	bic.w	r3, r3, #32
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	e7f6      	b.n	8004a32 <_printf_i+0x196>
 8004a44:	4616      	mov	r6, r2
 8004a46:	e7bd      	b.n	80049c4 <_printf_i+0x128>
 8004a48:	6833      	ldr	r3, [r6, #0]
 8004a4a:	6825      	ldr	r5, [r4, #0]
 8004a4c:	6961      	ldr	r1, [r4, #20]
 8004a4e:	1d18      	adds	r0, r3, #4
 8004a50:	6030      	str	r0, [r6, #0]
 8004a52:	062e      	lsls	r6, r5, #24
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	d501      	bpl.n	8004a5c <_printf_i+0x1c0>
 8004a58:	6019      	str	r1, [r3, #0]
 8004a5a:	e002      	b.n	8004a62 <_printf_i+0x1c6>
 8004a5c:	0668      	lsls	r0, r5, #25
 8004a5e:	d5fb      	bpl.n	8004a58 <_printf_i+0x1bc>
 8004a60:	8019      	strh	r1, [r3, #0]
 8004a62:	2300      	movs	r3, #0
 8004a64:	6123      	str	r3, [r4, #16]
 8004a66:	4616      	mov	r6, r2
 8004a68:	e7bc      	b.n	80049e4 <_printf_i+0x148>
 8004a6a:	6833      	ldr	r3, [r6, #0]
 8004a6c:	1d1a      	adds	r2, r3, #4
 8004a6e:	6032      	str	r2, [r6, #0]
 8004a70:	681e      	ldr	r6, [r3, #0]
 8004a72:	6862      	ldr	r2, [r4, #4]
 8004a74:	2100      	movs	r1, #0
 8004a76:	4630      	mov	r0, r6
 8004a78:	f7fb fbca 	bl	8000210 <memchr>
 8004a7c:	b108      	cbz	r0, 8004a82 <_printf_i+0x1e6>
 8004a7e:	1b80      	subs	r0, r0, r6
 8004a80:	6060      	str	r0, [r4, #4]
 8004a82:	6863      	ldr	r3, [r4, #4]
 8004a84:	6123      	str	r3, [r4, #16]
 8004a86:	2300      	movs	r3, #0
 8004a88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a8c:	e7aa      	b.n	80049e4 <_printf_i+0x148>
 8004a8e:	6923      	ldr	r3, [r4, #16]
 8004a90:	4632      	mov	r2, r6
 8004a92:	4649      	mov	r1, r9
 8004a94:	4640      	mov	r0, r8
 8004a96:	47d0      	blx	sl
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d0ad      	beq.n	80049f8 <_printf_i+0x15c>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	079b      	lsls	r3, r3, #30
 8004aa0:	d413      	bmi.n	8004aca <_printf_i+0x22e>
 8004aa2:	68e0      	ldr	r0, [r4, #12]
 8004aa4:	9b03      	ldr	r3, [sp, #12]
 8004aa6:	4298      	cmp	r0, r3
 8004aa8:	bfb8      	it	lt
 8004aaa:	4618      	movlt	r0, r3
 8004aac:	e7a6      	b.n	80049fc <_printf_i+0x160>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4632      	mov	r2, r6
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	4640      	mov	r0, r8
 8004ab6:	47d0      	blx	sl
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d09d      	beq.n	80049f8 <_printf_i+0x15c>
 8004abc:	3501      	adds	r5, #1
 8004abe:	68e3      	ldr	r3, [r4, #12]
 8004ac0:	9903      	ldr	r1, [sp, #12]
 8004ac2:	1a5b      	subs	r3, r3, r1
 8004ac4:	42ab      	cmp	r3, r5
 8004ac6:	dcf2      	bgt.n	8004aae <_printf_i+0x212>
 8004ac8:	e7eb      	b.n	8004aa2 <_printf_i+0x206>
 8004aca:	2500      	movs	r5, #0
 8004acc:	f104 0619 	add.w	r6, r4, #25
 8004ad0:	e7f5      	b.n	8004abe <_printf_i+0x222>
 8004ad2:	bf00      	nop
 8004ad4:	08006fe2 	.word	0x08006fe2
 8004ad8:	08006ff3 	.word	0x08006ff3

08004adc <std>:
 8004adc:	2300      	movs	r3, #0
 8004ade:	b510      	push	{r4, lr}
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aea:	6083      	str	r3, [r0, #8]
 8004aec:	8181      	strh	r1, [r0, #12]
 8004aee:	6643      	str	r3, [r0, #100]	@ 0x64
 8004af0:	81c2      	strh	r2, [r0, #14]
 8004af2:	6183      	str	r3, [r0, #24]
 8004af4:	4619      	mov	r1, r3
 8004af6:	2208      	movs	r2, #8
 8004af8:	305c      	adds	r0, #92	@ 0x5c
 8004afa:	f000 f928 	bl	8004d4e <memset>
 8004afe:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <std+0x58>)
 8004b00:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b02:	4b0d      	ldr	r3, [pc, #52]	@ (8004b38 <std+0x5c>)
 8004b04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b06:	4b0d      	ldr	r3, [pc, #52]	@ (8004b3c <std+0x60>)
 8004b08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b40 <std+0x64>)
 8004b0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b44 <std+0x68>)
 8004b10:	6224      	str	r4, [r4, #32]
 8004b12:	429c      	cmp	r4, r3
 8004b14:	d006      	beq.n	8004b24 <std+0x48>
 8004b16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b1a:	4294      	cmp	r4, r2
 8004b1c:	d002      	beq.n	8004b24 <std+0x48>
 8004b1e:	33d0      	adds	r3, #208	@ 0xd0
 8004b20:	429c      	cmp	r4, r3
 8004b22:	d105      	bne.n	8004b30 <std+0x54>
 8004b24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b2c:	f000 b98c 	b.w	8004e48 <__retarget_lock_init_recursive>
 8004b30:	bd10      	pop	{r4, pc}
 8004b32:	bf00      	nop
 8004b34:	08004cc9 	.word	0x08004cc9
 8004b38:	08004ceb 	.word	0x08004ceb
 8004b3c:	08004d23 	.word	0x08004d23
 8004b40:	08004d47 	.word	0x08004d47
 8004b44:	200003e0 	.word	0x200003e0

08004b48 <stdio_exit_handler>:
 8004b48:	4a02      	ldr	r2, [pc, #8]	@ (8004b54 <stdio_exit_handler+0xc>)
 8004b4a:	4903      	ldr	r1, [pc, #12]	@ (8004b58 <stdio_exit_handler+0x10>)
 8004b4c:	4803      	ldr	r0, [pc, #12]	@ (8004b5c <stdio_exit_handler+0x14>)
 8004b4e:	f000 b869 	b.w	8004c24 <_fwalk_sglue>
 8004b52:	bf00      	nop
 8004b54:	2000001c 	.word	0x2000001c
 8004b58:	080067a5 	.word	0x080067a5
 8004b5c:	2000002c 	.word	0x2000002c

08004b60 <cleanup_stdio>:
 8004b60:	6841      	ldr	r1, [r0, #4]
 8004b62:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <cleanup_stdio+0x34>)
 8004b64:	4299      	cmp	r1, r3
 8004b66:	b510      	push	{r4, lr}
 8004b68:	4604      	mov	r4, r0
 8004b6a:	d001      	beq.n	8004b70 <cleanup_stdio+0x10>
 8004b6c:	f001 fe1a 	bl	80067a4 <_fflush_r>
 8004b70:	68a1      	ldr	r1, [r4, #8]
 8004b72:	4b09      	ldr	r3, [pc, #36]	@ (8004b98 <cleanup_stdio+0x38>)
 8004b74:	4299      	cmp	r1, r3
 8004b76:	d002      	beq.n	8004b7e <cleanup_stdio+0x1e>
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f001 fe13 	bl	80067a4 <_fflush_r>
 8004b7e:	68e1      	ldr	r1, [r4, #12]
 8004b80:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <cleanup_stdio+0x3c>)
 8004b82:	4299      	cmp	r1, r3
 8004b84:	d004      	beq.n	8004b90 <cleanup_stdio+0x30>
 8004b86:	4620      	mov	r0, r4
 8004b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b8c:	f001 be0a 	b.w	80067a4 <_fflush_r>
 8004b90:	bd10      	pop	{r4, pc}
 8004b92:	bf00      	nop
 8004b94:	200003e0 	.word	0x200003e0
 8004b98:	20000448 	.word	0x20000448
 8004b9c:	200004b0 	.word	0x200004b0

08004ba0 <global_stdio_init.part.0>:
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <global_stdio_init.part.0+0x30>)
 8004ba4:	4c0b      	ldr	r4, [pc, #44]	@ (8004bd4 <global_stdio_init.part.0+0x34>)
 8004ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd8 <global_stdio_init.part.0+0x38>)
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	4620      	mov	r0, r4
 8004bac:	2200      	movs	r2, #0
 8004bae:	2104      	movs	r1, #4
 8004bb0:	f7ff ff94 	bl	8004adc <std>
 8004bb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bb8:	2201      	movs	r2, #1
 8004bba:	2109      	movs	r1, #9
 8004bbc:	f7ff ff8e 	bl	8004adc <std>
 8004bc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bca:	2112      	movs	r1, #18
 8004bcc:	f7ff bf86 	b.w	8004adc <std>
 8004bd0:	20000518 	.word	0x20000518
 8004bd4:	200003e0 	.word	0x200003e0
 8004bd8:	08004b49 	.word	0x08004b49

08004bdc <__sfp_lock_acquire>:
 8004bdc:	4801      	ldr	r0, [pc, #4]	@ (8004be4 <__sfp_lock_acquire+0x8>)
 8004bde:	f000 b934 	b.w	8004e4a <__retarget_lock_acquire_recursive>
 8004be2:	bf00      	nop
 8004be4:	20000521 	.word	0x20000521

08004be8 <__sfp_lock_release>:
 8004be8:	4801      	ldr	r0, [pc, #4]	@ (8004bf0 <__sfp_lock_release+0x8>)
 8004bea:	f000 b92f 	b.w	8004e4c <__retarget_lock_release_recursive>
 8004bee:	bf00      	nop
 8004bf0:	20000521 	.word	0x20000521

08004bf4 <__sinit>:
 8004bf4:	b510      	push	{r4, lr}
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	f7ff fff0 	bl	8004bdc <__sfp_lock_acquire>
 8004bfc:	6a23      	ldr	r3, [r4, #32]
 8004bfe:	b11b      	cbz	r3, 8004c08 <__sinit+0x14>
 8004c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c04:	f7ff bff0 	b.w	8004be8 <__sfp_lock_release>
 8004c08:	4b04      	ldr	r3, [pc, #16]	@ (8004c1c <__sinit+0x28>)
 8004c0a:	6223      	str	r3, [r4, #32]
 8004c0c:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <__sinit+0x2c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f5      	bne.n	8004c00 <__sinit+0xc>
 8004c14:	f7ff ffc4 	bl	8004ba0 <global_stdio_init.part.0>
 8004c18:	e7f2      	b.n	8004c00 <__sinit+0xc>
 8004c1a:	bf00      	nop
 8004c1c:	08004b61 	.word	0x08004b61
 8004c20:	20000518 	.word	0x20000518

08004c24 <_fwalk_sglue>:
 8004c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c28:	4607      	mov	r7, r0
 8004c2a:	4688      	mov	r8, r1
 8004c2c:	4614      	mov	r4, r2
 8004c2e:	2600      	movs	r6, #0
 8004c30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c34:	f1b9 0901 	subs.w	r9, r9, #1
 8004c38:	d505      	bpl.n	8004c46 <_fwalk_sglue+0x22>
 8004c3a:	6824      	ldr	r4, [r4, #0]
 8004c3c:	2c00      	cmp	r4, #0
 8004c3e:	d1f7      	bne.n	8004c30 <_fwalk_sglue+0xc>
 8004c40:	4630      	mov	r0, r6
 8004c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c46:	89ab      	ldrh	r3, [r5, #12]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d907      	bls.n	8004c5c <_fwalk_sglue+0x38>
 8004c4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c50:	3301      	adds	r3, #1
 8004c52:	d003      	beq.n	8004c5c <_fwalk_sglue+0x38>
 8004c54:	4629      	mov	r1, r5
 8004c56:	4638      	mov	r0, r7
 8004c58:	47c0      	blx	r8
 8004c5a:	4306      	orrs	r6, r0
 8004c5c:	3568      	adds	r5, #104	@ 0x68
 8004c5e:	e7e9      	b.n	8004c34 <_fwalk_sglue+0x10>

08004c60 <sniprintf>:
 8004c60:	b40c      	push	{r2, r3}
 8004c62:	b530      	push	{r4, r5, lr}
 8004c64:	4b17      	ldr	r3, [pc, #92]	@ (8004cc4 <sniprintf+0x64>)
 8004c66:	1e0c      	subs	r4, r1, #0
 8004c68:	681d      	ldr	r5, [r3, #0]
 8004c6a:	b09d      	sub	sp, #116	@ 0x74
 8004c6c:	da08      	bge.n	8004c80 <sniprintf+0x20>
 8004c6e:	238b      	movs	r3, #139	@ 0x8b
 8004c70:	602b      	str	r3, [r5, #0]
 8004c72:	f04f 30ff 	mov.w	r0, #4294967295
 8004c76:	b01d      	add	sp, #116	@ 0x74
 8004c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c7c:	b002      	add	sp, #8
 8004c7e:	4770      	bx	lr
 8004c80:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004c84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c88:	bf14      	ite	ne
 8004c8a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c8e:	4623      	moveq	r3, r4
 8004c90:	9304      	str	r3, [sp, #16]
 8004c92:	9307      	str	r3, [sp, #28]
 8004c94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c98:	9002      	str	r0, [sp, #8]
 8004c9a:	9006      	str	r0, [sp, #24]
 8004c9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ca0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004ca2:	ab21      	add	r3, sp, #132	@ 0x84
 8004ca4:	a902      	add	r1, sp, #8
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	9301      	str	r3, [sp, #4]
 8004caa:	f001 fbfb 	bl	80064a4 <_svfiprintf_r>
 8004cae:	1c43      	adds	r3, r0, #1
 8004cb0:	bfbc      	itt	lt
 8004cb2:	238b      	movlt	r3, #139	@ 0x8b
 8004cb4:	602b      	strlt	r3, [r5, #0]
 8004cb6:	2c00      	cmp	r4, #0
 8004cb8:	d0dd      	beq.n	8004c76 <sniprintf+0x16>
 8004cba:	9b02      	ldr	r3, [sp, #8]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	e7d9      	b.n	8004c76 <sniprintf+0x16>
 8004cc2:	bf00      	nop
 8004cc4:	20000028 	.word	0x20000028

08004cc8 <__sread>:
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	460c      	mov	r4, r1
 8004ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd0:	f000 f86c 	bl	8004dac <_read_r>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	bfab      	itete	ge
 8004cd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cda:	89a3      	ldrhlt	r3, [r4, #12]
 8004cdc:	181b      	addge	r3, r3, r0
 8004cde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ce2:	bfac      	ite	ge
 8004ce4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ce6:	81a3      	strhlt	r3, [r4, #12]
 8004ce8:	bd10      	pop	{r4, pc}

08004cea <__swrite>:
 8004cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cee:	461f      	mov	r7, r3
 8004cf0:	898b      	ldrh	r3, [r1, #12]
 8004cf2:	05db      	lsls	r3, r3, #23
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	d505      	bpl.n	8004d08 <__swrite+0x1e>
 8004cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d00:	2302      	movs	r3, #2
 8004d02:	2200      	movs	r2, #0
 8004d04:	f000 f840 	bl	8004d88 <_lseek_r>
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d12:	81a3      	strh	r3, [r4, #12]
 8004d14:	4632      	mov	r2, r6
 8004d16:	463b      	mov	r3, r7
 8004d18:	4628      	mov	r0, r5
 8004d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1e:	f000 b857 	b.w	8004dd0 <_write_r>

08004d22 <__sseek>:
 8004d22:	b510      	push	{r4, lr}
 8004d24:	460c      	mov	r4, r1
 8004d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d2a:	f000 f82d 	bl	8004d88 <_lseek_r>
 8004d2e:	1c43      	adds	r3, r0, #1
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	bf15      	itete	ne
 8004d34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d3e:	81a3      	strheq	r3, [r4, #12]
 8004d40:	bf18      	it	ne
 8004d42:	81a3      	strhne	r3, [r4, #12]
 8004d44:	bd10      	pop	{r4, pc}

08004d46 <__sclose>:
 8004d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d4a:	f000 b80d 	b.w	8004d68 <_close_r>

08004d4e <memset>:
 8004d4e:	4402      	add	r2, r0
 8004d50:	4603      	mov	r3, r0
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d100      	bne.n	8004d58 <memset+0xa>
 8004d56:	4770      	bx	lr
 8004d58:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5c:	e7f9      	b.n	8004d52 <memset+0x4>
	...

08004d60 <_localeconv_r>:
 8004d60:	4800      	ldr	r0, [pc, #0]	@ (8004d64 <_localeconv_r+0x4>)
 8004d62:	4770      	bx	lr
 8004d64:	20000168 	.word	0x20000168

08004d68 <_close_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4d06      	ldr	r5, [pc, #24]	@ (8004d84 <_close_r+0x1c>)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4608      	mov	r0, r1
 8004d72:	602b      	str	r3, [r5, #0]
 8004d74:	f7fc fe48 	bl	8001a08 <_close>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_close_r+0x1a>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_close_r+0x1a>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	2000051c 	.word	0x2000051c

08004d88 <_lseek_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d07      	ldr	r5, [pc, #28]	@ (8004da8 <_lseek_r+0x20>)
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	4608      	mov	r0, r1
 8004d90:	4611      	mov	r1, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fc fe5d 	bl	8001a56 <_lseek>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_lseek_r+0x1e>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_lseek_r+0x1e>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	2000051c 	.word	0x2000051c

08004dac <_read_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4d07      	ldr	r5, [pc, #28]	@ (8004dcc <_read_r+0x20>)
 8004db0:	4604      	mov	r4, r0
 8004db2:	4608      	mov	r0, r1
 8004db4:	4611      	mov	r1, r2
 8004db6:	2200      	movs	r2, #0
 8004db8:	602a      	str	r2, [r5, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f7fc fdeb 	bl	8001996 <_read>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d102      	bne.n	8004dca <_read_r+0x1e>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	b103      	cbz	r3, 8004dca <_read_r+0x1e>
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	2000051c 	.word	0x2000051c

08004dd0 <_write_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4d07      	ldr	r5, [pc, #28]	@ (8004df0 <_write_r+0x20>)
 8004dd4:	4604      	mov	r4, r0
 8004dd6:	4608      	mov	r0, r1
 8004dd8:	4611      	mov	r1, r2
 8004dda:	2200      	movs	r2, #0
 8004ddc:	602a      	str	r2, [r5, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f7fc fdf6 	bl	80019d0 <_write>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d102      	bne.n	8004dee <_write_r+0x1e>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	b103      	cbz	r3, 8004dee <_write_r+0x1e>
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	2000051c 	.word	0x2000051c

08004df4 <__errno>:
 8004df4:	4b01      	ldr	r3, [pc, #4]	@ (8004dfc <__errno+0x8>)
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000028 	.word	0x20000028

08004e00 <__libc_init_array>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	4d0d      	ldr	r5, [pc, #52]	@ (8004e38 <__libc_init_array+0x38>)
 8004e04:	4c0d      	ldr	r4, [pc, #52]	@ (8004e3c <__libc_init_array+0x3c>)
 8004e06:	1b64      	subs	r4, r4, r5
 8004e08:	10a4      	asrs	r4, r4, #2
 8004e0a:	2600      	movs	r6, #0
 8004e0c:	42a6      	cmp	r6, r4
 8004e0e:	d109      	bne.n	8004e24 <__libc_init_array+0x24>
 8004e10:	4d0b      	ldr	r5, [pc, #44]	@ (8004e40 <__libc_init_array+0x40>)
 8004e12:	4c0c      	ldr	r4, [pc, #48]	@ (8004e44 <__libc_init_array+0x44>)
 8004e14:	f002 f864 	bl	8006ee0 <_init>
 8004e18:	1b64      	subs	r4, r4, r5
 8004e1a:	10a4      	asrs	r4, r4, #2
 8004e1c:	2600      	movs	r6, #0
 8004e1e:	42a6      	cmp	r6, r4
 8004e20:	d105      	bne.n	8004e2e <__libc_init_array+0x2e>
 8004e22:	bd70      	pop	{r4, r5, r6, pc}
 8004e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e28:	4798      	blx	r3
 8004e2a:	3601      	adds	r6, #1
 8004e2c:	e7ee      	b.n	8004e0c <__libc_init_array+0xc>
 8004e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e32:	4798      	blx	r3
 8004e34:	3601      	adds	r6, #1
 8004e36:	e7f2      	b.n	8004e1e <__libc_init_array+0x1e>
 8004e38:	08007348 	.word	0x08007348
 8004e3c:	08007348 	.word	0x08007348
 8004e40:	08007348 	.word	0x08007348
 8004e44:	0800734c 	.word	0x0800734c

08004e48 <__retarget_lock_init_recursive>:
 8004e48:	4770      	bx	lr

08004e4a <__retarget_lock_acquire_recursive>:
 8004e4a:	4770      	bx	lr

08004e4c <__retarget_lock_release_recursive>:
 8004e4c:	4770      	bx	lr

08004e4e <quorem>:
 8004e4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e52:	6903      	ldr	r3, [r0, #16]
 8004e54:	690c      	ldr	r4, [r1, #16]
 8004e56:	42a3      	cmp	r3, r4
 8004e58:	4607      	mov	r7, r0
 8004e5a:	db7e      	blt.n	8004f5a <quorem+0x10c>
 8004e5c:	3c01      	subs	r4, #1
 8004e5e:	f101 0814 	add.w	r8, r1, #20
 8004e62:	00a3      	lsls	r3, r4, #2
 8004e64:	f100 0514 	add.w	r5, r0, #20
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e6e:	9301      	str	r3, [sp, #4]
 8004e70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e80:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e84:	d32e      	bcc.n	8004ee4 <quorem+0x96>
 8004e86:	f04f 0a00 	mov.w	sl, #0
 8004e8a:	46c4      	mov	ip, r8
 8004e8c:	46ae      	mov	lr, r5
 8004e8e:	46d3      	mov	fp, sl
 8004e90:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004e94:	b298      	uxth	r0, r3
 8004e96:	fb06 a000 	mla	r0, r6, r0, sl
 8004e9a:	0c02      	lsrs	r2, r0, #16
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	fb06 2303 	mla	r3, r6, r3, r2
 8004ea2:	f8de 2000 	ldr.w	r2, [lr]
 8004ea6:	b280      	uxth	r0, r0
 8004ea8:	b292      	uxth	r2, r2
 8004eaa:	1a12      	subs	r2, r2, r0
 8004eac:	445a      	add	r2, fp
 8004eae:	f8de 0000 	ldr.w	r0, [lr]
 8004eb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ebc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ec0:	b292      	uxth	r2, r2
 8004ec2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ec6:	45e1      	cmp	r9, ip
 8004ec8:	f84e 2b04 	str.w	r2, [lr], #4
 8004ecc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004ed0:	d2de      	bcs.n	8004e90 <quorem+0x42>
 8004ed2:	9b00      	ldr	r3, [sp, #0]
 8004ed4:	58eb      	ldr	r3, [r5, r3]
 8004ed6:	b92b      	cbnz	r3, 8004ee4 <quorem+0x96>
 8004ed8:	9b01      	ldr	r3, [sp, #4]
 8004eda:	3b04      	subs	r3, #4
 8004edc:	429d      	cmp	r5, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	d32f      	bcc.n	8004f42 <quorem+0xf4>
 8004ee2:	613c      	str	r4, [r7, #16]
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	f001 f979 	bl	80061dc <__mcmp>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	db25      	blt.n	8004f3a <quorem+0xec>
 8004eee:	4629      	mov	r1, r5
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ef6:	f8d1 c000 	ldr.w	ip, [r1]
 8004efa:	fa1f fe82 	uxth.w	lr, r2
 8004efe:	fa1f f38c 	uxth.w	r3, ip
 8004f02:	eba3 030e 	sub.w	r3, r3, lr
 8004f06:	4403      	add	r3, r0
 8004f08:	0c12      	lsrs	r2, r2, #16
 8004f0a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f0e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f18:	45c1      	cmp	r9, r8
 8004f1a:	f841 3b04 	str.w	r3, [r1], #4
 8004f1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f22:	d2e6      	bcs.n	8004ef2 <quorem+0xa4>
 8004f24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f2c:	b922      	cbnz	r2, 8004f38 <quorem+0xea>
 8004f2e:	3b04      	subs	r3, #4
 8004f30:	429d      	cmp	r5, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	d30b      	bcc.n	8004f4e <quorem+0x100>
 8004f36:	613c      	str	r4, [r7, #16]
 8004f38:	3601      	adds	r6, #1
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	b003      	add	sp, #12
 8004f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	3b04      	subs	r3, #4
 8004f46:	2a00      	cmp	r2, #0
 8004f48:	d1cb      	bne.n	8004ee2 <quorem+0x94>
 8004f4a:	3c01      	subs	r4, #1
 8004f4c:	e7c6      	b.n	8004edc <quorem+0x8e>
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	3b04      	subs	r3, #4
 8004f52:	2a00      	cmp	r2, #0
 8004f54:	d1ef      	bne.n	8004f36 <quorem+0xe8>
 8004f56:	3c01      	subs	r4, #1
 8004f58:	e7ea      	b.n	8004f30 <quorem+0xe2>
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	e7ee      	b.n	8004f3c <quorem+0xee>
	...

08004f60 <_dtoa_r>:
 8004f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	69c7      	ldr	r7, [r0, #28]
 8004f66:	b099      	sub	sp, #100	@ 0x64
 8004f68:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004f6c:	ec55 4b10 	vmov	r4, r5, d0
 8004f70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004f72:	9109      	str	r1, [sp, #36]	@ 0x24
 8004f74:	4683      	mov	fp, r0
 8004f76:	920e      	str	r2, [sp, #56]	@ 0x38
 8004f78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004f7a:	b97f      	cbnz	r7, 8004f9c <_dtoa_r+0x3c>
 8004f7c:	2010      	movs	r0, #16
 8004f7e:	f000 fdfd 	bl	8005b7c <malloc>
 8004f82:	4602      	mov	r2, r0
 8004f84:	f8cb 001c 	str.w	r0, [fp, #28]
 8004f88:	b920      	cbnz	r0, 8004f94 <_dtoa_r+0x34>
 8004f8a:	4ba7      	ldr	r3, [pc, #668]	@ (8005228 <_dtoa_r+0x2c8>)
 8004f8c:	21ef      	movs	r1, #239	@ 0xef
 8004f8e:	48a7      	ldr	r0, [pc, #668]	@ (800522c <_dtoa_r+0x2cc>)
 8004f90:	f001 fc68 	bl	8006864 <__assert_func>
 8004f94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004f98:	6007      	str	r7, [r0, #0]
 8004f9a:	60c7      	str	r7, [r0, #12]
 8004f9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004fa0:	6819      	ldr	r1, [r3, #0]
 8004fa2:	b159      	cbz	r1, 8004fbc <_dtoa_r+0x5c>
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	604a      	str	r2, [r1, #4]
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4093      	lsls	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
 8004fae:	4658      	mov	r0, fp
 8004fb0:	f000 feda 	bl	8005d68 <_Bfree>
 8004fb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	1e2b      	subs	r3, r5, #0
 8004fbe:	bfb9      	ittee	lt
 8004fc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004fc4:	9303      	strlt	r3, [sp, #12]
 8004fc6:	2300      	movge	r3, #0
 8004fc8:	6033      	strge	r3, [r6, #0]
 8004fca:	9f03      	ldr	r7, [sp, #12]
 8004fcc:	4b98      	ldr	r3, [pc, #608]	@ (8005230 <_dtoa_r+0x2d0>)
 8004fce:	bfbc      	itt	lt
 8004fd0:	2201      	movlt	r2, #1
 8004fd2:	6032      	strlt	r2, [r6, #0]
 8004fd4:	43bb      	bics	r3, r7
 8004fd6:	d112      	bne.n	8004ffe <_dtoa_r+0x9e>
 8004fd8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004fda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004fe4:	4323      	orrs	r3, r4
 8004fe6:	f000 854d 	beq.w	8005a84 <_dtoa_r+0xb24>
 8004fea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004fec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005244 <_dtoa_r+0x2e4>
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 854f 	beq.w	8005a94 <_dtoa_r+0xb34>
 8004ff6:	f10a 0303 	add.w	r3, sl, #3
 8004ffa:	f000 bd49 	b.w	8005a90 <_dtoa_r+0xb30>
 8004ffe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005002:	2200      	movs	r2, #0
 8005004:	ec51 0b17 	vmov	r0, r1, d7
 8005008:	2300      	movs	r3, #0
 800500a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800500e:	f7fb fd7b 	bl	8000b08 <__aeabi_dcmpeq>
 8005012:	4680      	mov	r8, r0
 8005014:	b158      	cbz	r0, 800502e <_dtoa_r+0xce>
 8005016:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005018:	2301      	movs	r3, #1
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800501e:	b113      	cbz	r3, 8005026 <_dtoa_r+0xc6>
 8005020:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005022:	4b84      	ldr	r3, [pc, #528]	@ (8005234 <_dtoa_r+0x2d4>)
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005248 <_dtoa_r+0x2e8>
 800502a:	f000 bd33 	b.w	8005a94 <_dtoa_r+0xb34>
 800502e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005032:	aa16      	add	r2, sp, #88	@ 0x58
 8005034:	a917      	add	r1, sp, #92	@ 0x5c
 8005036:	4658      	mov	r0, fp
 8005038:	f001 f980 	bl	800633c <__d2b>
 800503c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005040:	4681      	mov	r9, r0
 8005042:	2e00      	cmp	r6, #0
 8005044:	d077      	beq.n	8005136 <_dtoa_r+0x1d6>
 8005046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005048:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800504c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005054:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005058:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800505c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005060:	4619      	mov	r1, r3
 8005062:	2200      	movs	r2, #0
 8005064:	4b74      	ldr	r3, [pc, #464]	@ (8005238 <_dtoa_r+0x2d8>)
 8005066:	f7fb f92f 	bl	80002c8 <__aeabi_dsub>
 800506a:	a369      	add	r3, pc, #420	@ (adr r3, 8005210 <_dtoa_r+0x2b0>)
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f7fb fae2 	bl	8000638 <__aeabi_dmul>
 8005074:	a368      	add	r3, pc, #416	@ (adr r3, 8005218 <_dtoa_r+0x2b8>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f7fb f927 	bl	80002cc <__adddf3>
 800507e:	4604      	mov	r4, r0
 8005080:	4630      	mov	r0, r6
 8005082:	460d      	mov	r5, r1
 8005084:	f7fb fa6e 	bl	8000564 <__aeabi_i2d>
 8005088:	a365      	add	r3, pc, #404	@ (adr r3, 8005220 <_dtoa_r+0x2c0>)
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f7fb fad3 	bl	8000638 <__aeabi_dmul>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4620      	mov	r0, r4
 8005098:	4629      	mov	r1, r5
 800509a:	f7fb f917 	bl	80002cc <__adddf3>
 800509e:	4604      	mov	r4, r0
 80050a0:	460d      	mov	r5, r1
 80050a2:	f7fb fd79 	bl	8000b98 <__aeabi_d2iz>
 80050a6:	2200      	movs	r2, #0
 80050a8:	4607      	mov	r7, r0
 80050aa:	2300      	movs	r3, #0
 80050ac:	4620      	mov	r0, r4
 80050ae:	4629      	mov	r1, r5
 80050b0:	f7fb fd34 	bl	8000b1c <__aeabi_dcmplt>
 80050b4:	b140      	cbz	r0, 80050c8 <_dtoa_r+0x168>
 80050b6:	4638      	mov	r0, r7
 80050b8:	f7fb fa54 	bl	8000564 <__aeabi_i2d>
 80050bc:	4622      	mov	r2, r4
 80050be:	462b      	mov	r3, r5
 80050c0:	f7fb fd22 	bl	8000b08 <__aeabi_dcmpeq>
 80050c4:	b900      	cbnz	r0, 80050c8 <_dtoa_r+0x168>
 80050c6:	3f01      	subs	r7, #1
 80050c8:	2f16      	cmp	r7, #22
 80050ca:	d851      	bhi.n	8005170 <_dtoa_r+0x210>
 80050cc:	4b5b      	ldr	r3, [pc, #364]	@ (800523c <_dtoa_r+0x2dc>)
 80050ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050da:	f7fb fd1f 	bl	8000b1c <__aeabi_dcmplt>
 80050de:	2800      	cmp	r0, #0
 80050e0:	d048      	beq.n	8005174 <_dtoa_r+0x214>
 80050e2:	3f01      	subs	r7, #1
 80050e4:	2300      	movs	r3, #0
 80050e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80050e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80050ea:	1b9b      	subs	r3, r3, r6
 80050ec:	1e5a      	subs	r2, r3, #1
 80050ee:	bf44      	itt	mi
 80050f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80050f4:	2300      	movmi	r3, #0
 80050f6:	9208      	str	r2, [sp, #32]
 80050f8:	bf54      	ite	pl
 80050fa:	f04f 0800 	movpl.w	r8, #0
 80050fe:	9308      	strmi	r3, [sp, #32]
 8005100:	2f00      	cmp	r7, #0
 8005102:	db39      	blt.n	8005178 <_dtoa_r+0x218>
 8005104:	9b08      	ldr	r3, [sp, #32]
 8005106:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005108:	443b      	add	r3, r7
 800510a:	9308      	str	r3, [sp, #32]
 800510c:	2300      	movs	r3, #0
 800510e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005112:	2b09      	cmp	r3, #9
 8005114:	d864      	bhi.n	80051e0 <_dtoa_r+0x280>
 8005116:	2b05      	cmp	r3, #5
 8005118:	bfc4      	itt	gt
 800511a:	3b04      	subgt	r3, #4
 800511c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800511e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005120:	f1a3 0302 	sub.w	r3, r3, #2
 8005124:	bfcc      	ite	gt
 8005126:	2400      	movgt	r4, #0
 8005128:	2401      	movle	r4, #1
 800512a:	2b03      	cmp	r3, #3
 800512c:	d863      	bhi.n	80051f6 <_dtoa_r+0x296>
 800512e:	e8df f003 	tbb	[pc, r3]
 8005132:	372a      	.short	0x372a
 8005134:	5535      	.short	0x5535
 8005136:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800513a:	441e      	add	r6, r3
 800513c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005140:	2b20      	cmp	r3, #32
 8005142:	bfc1      	itttt	gt
 8005144:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005148:	409f      	lslgt	r7, r3
 800514a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800514e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005152:	bfd6      	itet	le
 8005154:	f1c3 0320 	rsble	r3, r3, #32
 8005158:	ea47 0003 	orrgt.w	r0, r7, r3
 800515c:	fa04 f003 	lslle.w	r0, r4, r3
 8005160:	f7fb f9f0 	bl	8000544 <__aeabi_ui2d>
 8005164:	2201      	movs	r2, #1
 8005166:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800516a:	3e01      	subs	r6, #1
 800516c:	9214      	str	r2, [sp, #80]	@ 0x50
 800516e:	e777      	b.n	8005060 <_dtoa_r+0x100>
 8005170:	2301      	movs	r3, #1
 8005172:	e7b8      	b.n	80050e6 <_dtoa_r+0x186>
 8005174:	9012      	str	r0, [sp, #72]	@ 0x48
 8005176:	e7b7      	b.n	80050e8 <_dtoa_r+0x188>
 8005178:	427b      	negs	r3, r7
 800517a:	930a      	str	r3, [sp, #40]	@ 0x28
 800517c:	2300      	movs	r3, #0
 800517e:	eba8 0807 	sub.w	r8, r8, r7
 8005182:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005184:	e7c4      	b.n	8005110 <_dtoa_r+0x1b0>
 8005186:	2300      	movs	r3, #0
 8005188:	930b      	str	r3, [sp, #44]	@ 0x2c
 800518a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	dc35      	bgt.n	80051fc <_dtoa_r+0x29c>
 8005190:	2301      	movs	r3, #1
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	9307      	str	r3, [sp, #28]
 8005196:	461a      	mov	r2, r3
 8005198:	920e      	str	r2, [sp, #56]	@ 0x38
 800519a:	e00b      	b.n	80051b4 <_dtoa_r+0x254>
 800519c:	2301      	movs	r3, #1
 800519e:	e7f3      	b.n	8005188 <_dtoa_r+0x228>
 80051a0:	2300      	movs	r3, #0
 80051a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	3301      	adds	r3, #1
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	9307      	str	r3, [sp, #28]
 80051b0:	bfb8      	it	lt
 80051b2:	2301      	movlt	r3, #1
 80051b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80051b8:	2100      	movs	r1, #0
 80051ba:	2204      	movs	r2, #4
 80051bc:	f102 0514 	add.w	r5, r2, #20
 80051c0:	429d      	cmp	r5, r3
 80051c2:	d91f      	bls.n	8005204 <_dtoa_r+0x2a4>
 80051c4:	6041      	str	r1, [r0, #4]
 80051c6:	4658      	mov	r0, fp
 80051c8:	f000 fd8e 	bl	8005ce8 <_Balloc>
 80051cc:	4682      	mov	sl, r0
 80051ce:	2800      	cmp	r0, #0
 80051d0:	d13c      	bne.n	800524c <_dtoa_r+0x2ec>
 80051d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005240 <_dtoa_r+0x2e0>)
 80051d4:	4602      	mov	r2, r0
 80051d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80051da:	e6d8      	b.n	8004f8e <_dtoa_r+0x2e>
 80051dc:	2301      	movs	r3, #1
 80051de:	e7e0      	b.n	80051a2 <_dtoa_r+0x242>
 80051e0:	2401      	movs	r4, #1
 80051e2:	2300      	movs	r3, #0
 80051e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80051e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80051e8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	9307      	str	r3, [sp, #28]
 80051f0:	2200      	movs	r2, #0
 80051f2:	2312      	movs	r3, #18
 80051f4:	e7d0      	b.n	8005198 <_dtoa_r+0x238>
 80051f6:	2301      	movs	r3, #1
 80051f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051fa:	e7f5      	b.n	80051e8 <_dtoa_r+0x288>
 80051fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	9307      	str	r3, [sp, #28]
 8005202:	e7d7      	b.n	80051b4 <_dtoa_r+0x254>
 8005204:	3101      	adds	r1, #1
 8005206:	0052      	lsls	r2, r2, #1
 8005208:	e7d8      	b.n	80051bc <_dtoa_r+0x25c>
 800520a:	bf00      	nop
 800520c:	f3af 8000 	nop.w
 8005210:	636f4361 	.word	0x636f4361
 8005214:	3fd287a7 	.word	0x3fd287a7
 8005218:	8b60c8b3 	.word	0x8b60c8b3
 800521c:	3fc68a28 	.word	0x3fc68a28
 8005220:	509f79fb 	.word	0x509f79fb
 8005224:	3fd34413 	.word	0x3fd34413
 8005228:	08007011 	.word	0x08007011
 800522c:	08007028 	.word	0x08007028
 8005230:	7ff00000 	.word	0x7ff00000
 8005234:	08006fe1 	.word	0x08006fe1
 8005238:	3ff80000 	.word	0x3ff80000
 800523c:	08007120 	.word	0x08007120
 8005240:	08007080 	.word	0x08007080
 8005244:	0800700d 	.word	0x0800700d
 8005248:	08006fe0 	.word	0x08006fe0
 800524c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005250:	6018      	str	r0, [r3, #0]
 8005252:	9b07      	ldr	r3, [sp, #28]
 8005254:	2b0e      	cmp	r3, #14
 8005256:	f200 80a4 	bhi.w	80053a2 <_dtoa_r+0x442>
 800525a:	2c00      	cmp	r4, #0
 800525c:	f000 80a1 	beq.w	80053a2 <_dtoa_r+0x442>
 8005260:	2f00      	cmp	r7, #0
 8005262:	dd33      	ble.n	80052cc <_dtoa_r+0x36c>
 8005264:	4bad      	ldr	r3, [pc, #692]	@ (800551c <_dtoa_r+0x5bc>)
 8005266:	f007 020f 	and.w	r2, r7, #15
 800526a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800526e:	ed93 7b00 	vldr	d7, [r3]
 8005272:	05f8      	lsls	r0, r7, #23
 8005274:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005278:	ea4f 1427 	mov.w	r4, r7, asr #4
 800527c:	d516      	bpl.n	80052ac <_dtoa_r+0x34c>
 800527e:	4ba8      	ldr	r3, [pc, #672]	@ (8005520 <_dtoa_r+0x5c0>)
 8005280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005284:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005288:	f7fb fb00 	bl	800088c <__aeabi_ddiv>
 800528c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005290:	f004 040f 	and.w	r4, r4, #15
 8005294:	2603      	movs	r6, #3
 8005296:	4da2      	ldr	r5, [pc, #648]	@ (8005520 <_dtoa_r+0x5c0>)
 8005298:	b954      	cbnz	r4, 80052b0 <_dtoa_r+0x350>
 800529a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800529e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052a2:	f7fb faf3 	bl	800088c <__aeabi_ddiv>
 80052a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052aa:	e028      	b.n	80052fe <_dtoa_r+0x39e>
 80052ac:	2602      	movs	r6, #2
 80052ae:	e7f2      	b.n	8005296 <_dtoa_r+0x336>
 80052b0:	07e1      	lsls	r1, r4, #31
 80052b2:	d508      	bpl.n	80052c6 <_dtoa_r+0x366>
 80052b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052bc:	f7fb f9bc 	bl	8000638 <__aeabi_dmul>
 80052c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052c4:	3601      	adds	r6, #1
 80052c6:	1064      	asrs	r4, r4, #1
 80052c8:	3508      	adds	r5, #8
 80052ca:	e7e5      	b.n	8005298 <_dtoa_r+0x338>
 80052cc:	f000 80d2 	beq.w	8005474 <_dtoa_r+0x514>
 80052d0:	427c      	negs	r4, r7
 80052d2:	4b92      	ldr	r3, [pc, #584]	@ (800551c <_dtoa_r+0x5bc>)
 80052d4:	4d92      	ldr	r5, [pc, #584]	@ (8005520 <_dtoa_r+0x5c0>)
 80052d6:	f004 020f 	and.w	r2, r4, #15
 80052da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052e6:	f7fb f9a7 	bl	8000638 <__aeabi_dmul>
 80052ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052ee:	1124      	asrs	r4, r4, #4
 80052f0:	2300      	movs	r3, #0
 80052f2:	2602      	movs	r6, #2
 80052f4:	2c00      	cmp	r4, #0
 80052f6:	f040 80b2 	bne.w	800545e <_dtoa_r+0x4fe>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1d3      	bne.n	80052a6 <_dtoa_r+0x346>
 80052fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005300:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 80b7 	beq.w	8005478 <_dtoa_r+0x518>
 800530a:	4b86      	ldr	r3, [pc, #536]	@ (8005524 <_dtoa_r+0x5c4>)
 800530c:	2200      	movs	r2, #0
 800530e:	4620      	mov	r0, r4
 8005310:	4629      	mov	r1, r5
 8005312:	f7fb fc03 	bl	8000b1c <__aeabi_dcmplt>
 8005316:	2800      	cmp	r0, #0
 8005318:	f000 80ae 	beq.w	8005478 <_dtoa_r+0x518>
 800531c:	9b07      	ldr	r3, [sp, #28]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 80aa 	beq.w	8005478 <_dtoa_r+0x518>
 8005324:	9b00      	ldr	r3, [sp, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	dd37      	ble.n	800539a <_dtoa_r+0x43a>
 800532a:	1e7b      	subs	r3, r7, #1
 800532c:	9304      	str	r3, [sp, #16]
 800532e:	4620      	mov	r0, r4
 8005330:	4b7d      	ldr	r3, [pc, #500]	@ (8005528 <_dtoa_r+0x5c8>)
 8005332:	2200      	movs	r2, #0
 8005334:	4629      	mov	r1, r5
 8005336:	f7fb f97f 	bl	8000638 <__aeabi_dmul>
 800533a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800533e:	9c00      	ldr	r4, [sp, #0]
 8005340:	3601      	adds	r6, #1
 8005342:	4630      	mov	r0, r6
 8005344:	f7fb f90e 	bl	8000564 <__aeabi_i2d>
 8005348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800534c:	f7fb f974 	bl	8000638 <__aeabi_dmul>
 8005350:	4b76      	ldr	r3, [pc, #472]	@ (800552c <_dtoa_r+0x5cc>)
 8005352:	2200      	movs	r2, #0
 8005354:	f7fa ffba 	bl	80002cc <__adddf3>
 8005358:	4605      	mov	r5, r0
 800535a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800535e:	2c00      	cmp	r4, #0
 8005360:	f040 808d 	bne.w	800547e <_dtoa_r+0x51e>
 8005364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005368:	4b71      	ldr	r3, [pc, #452]	@ (8005530 <_dtoa_r+0x5d0>)
 800536a:	2200      	movs	r2, #0
 800536c:	f7fa ffac 	bl	80002c8 <__aeabi_dsub>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005378:	462a      	mov	r2, r5
 800537a:	4633      	mov	r3, r6
 800537c:	f7fb fbec 	bl	8000b58 <__aeabi_dcmpgt>
 8005380:	2800      	cmp	r0, #0
 8005382:	f040 828b 	bne.w	800589c <_dtoa_r+0x93c>
 8005386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800538a:	462a      	mov	r2, r5
 800538c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005390:	f7fb fbc4 	bl	8000b1c <__aeabi_dcmplt>
 8005394:	2800      	cmp	r0, #0
 8005396:	f040 8128 	bne.w	80055ea <_dtoa_r+0x68a>
 800539a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800539e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80053a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f2c0 815a 	blt.w	800565e <_dtoa_r+0x6fe>
 80053aa:	2f0e      	cmp	r7, #14
 80053ac:	f300 8157 	bgt.w	800565e <_dtoa_r+0x6fe>
 80053b0:	4b5a      	ldr	r3, [pc, #360]	@ (800551c <_dtoa_r+0x5bc>)
 80053b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053b6:	ed93 7b00 	vldr	d7, [r3]
 80053ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053bc:	2b00      	cmp	r3, #0
 80053be:	ed8d 7b00 	vstr	d7, [sp]
 80053c2:	da03      	bge.n	80053cc <_dtoa_r+0x46c>
 80053c4:	9b07      	ldr	r3, [sp, #28]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f340 8101 	ble.w	80055ce <_dtoa_r+0x66e>
 80053cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80053d0:	4656      	mov	r6, sl
 80053d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053d6:	4620      	mov	r0, r4
 80053d8:	4629      	mov	r1, r5
 80053da:	f7fb fa57 	bl	800088c <__aeabi_ddiv>
 80053de:	f7fb fbdb 	bl	8000b98 <__aeabi_d2iz>
 80053e2:	4680      	mov	r8, r0
 80053e4:	f7fb f8be 	bl	8000564 <__aeabi_i2d>
 80053e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053ec:	f7fb f924 	bl	8000638 <__aeabi_dmul>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4620      	mov	r0, r4
 80053f6:	4629      	mov	r1, r5
 80053f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80053fc:	f7fa ff64 	bl	80002c8 <__aeabi_dsub>
 8005400:	f806 4b01 	strb.w	r4, [r6], #1
 8005404:	9d07      	ldr	r5, [sp, #28]
 8005406:	eba6 040a 	sub.w	r4, r6, sl
 800540a:	42a5      	cmp	r5, r4
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	f040 8117 	bne.w	8005642 <_dtoa_r+0x6e2>
 8005414:	f7fa ff5a 	bl	80002cc <__adddf3>
 8005418:	e9dd 2300 	ldrd	r2, r3, [sp]
 800541c:	4604      	mov	r4, r0
 800541e:	460d      	mov	r5, r1
 8005420:	f7fb fb9a 	bl	8000b58 <__aeabi_dcmpgt>
 8005424:	2800      	cmp	r0, #0
 8005426:	f040 80f9 	bne.w	800561c <_dtoa_r+0x6bc>
 800542a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800542e:	4620      	mov	r0, r4
 8005430:	4629      	mov	r1, r5
 8005432:	f7fb fb69 	bl	8000b08 <__aeabi_dcmpeq>
 8005436:	b118      	cbz	r0, 8005440 <_dtoa_r+0x4e0>
 8005438:	f018 0f01 	tst.w	r8, #1
 800543c:	f040 80ee 	bne.w	800561c <_dtoa_r+0x6bc>
 8005440:	4649      	mov	r1, r9
 8005442:	4658      	mov	r0, fp
 8005444:	f000 fc90 	bl	8005d68 <_Bfree>
 8005448:	2300      	movs	r3, #0
 800544a:	7033      	strb	r3, [r6, #0]
 800544c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800544e:	3701      	adds	r7, #1
 8005450:	601f      	str	r7, [r3, #0]
 8005452:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 831d 	beq.w	8005a94 <_dtoa_r+0xb34>
 800545a:	601e      	str	r6, [r3, #0]
 800545c:	e31a      	b.n	8005a94 <_dtoa_r+0xb34>
 800545e:	07e2      	lsls	r2, r4, #31
 8005460:	d505      	bpl.n	800546e <_dtoa_r+0x50e>
 8005462:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005466:	f7fb f8e7 	bl	8000638 <__aeabi_dmul>
 800546a:	3601      	adds	r6, #1
 800546c:	2301      	movs	r3, #1
 800546e:	1064      	asrs	r4, r4, #1
 8005470:	3508      	adds	r5, #8
 8005472:	e73f      	b.n	80052f4 <_dtoa_r+0x394>
 8005474:	2602      	movs	r6, #2
 8005476:	e742      	b.n	80052fe <_dtoa_r+0x39e>
 8005478:	9c07      	ldr	r4, [sp, #28]
 800547a:	9704      	str	r7, [sp, #16]
 800547c:	e761      	b.n	8005342 <_dtoa_r+0x3e2>
 800547e:	4b27      	ldr	r3, [pc, #156]	@ (800551c <_dtoa_r+0x5bc>)
 8005480:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005482:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005486:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800548a:	4454      	add	r4, sl
 800548c:	2900      	cmp	r1, #0
 800548e:	d053      	beq.n	8005538 <_dtoa_r+0x5d8>
 8005490:	4928      	ldr	r1, [pc, #160]	@ (8005534 <_dtoa_r+0x5d4>)
 8005492:	2000      	movs	r0, #0
 8005494:	f7fb f9fa 	bl	800088c <__aeabi_ddiv>
 8005498:	4633      	mov	r3, r6
 800549a:	462a      	mov	r2, r5
 800549c:	f7fa ff14 	bl	80002c8 <__aeabi_dsub>
 80054a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80054a4:	4656      	mov	r6, sl
 80054a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054aa:	f7fb fb75 	bl	8000b98 <__aeabi_d2iz>
 80054ae:	4605      	mov	r5, r0
 80054b0:	f7fb f858 	bl	8000564 <__aeabi_i2d>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054bc:	f7fa ff04 	bl	80002c8 <__aeabi_dsub>
 80054c0:	3530      	adds	r5, #48	@ 0x30
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054ca:	f806 5b01 	strb.w	r5, [r6], #1
 80054ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054d2:	f7fb fb23 	bl	8000b1c <__aeabi_dcmplt>
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d171      	bne.n	80055be <_dtoa_r+0x65e>
 80054da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054de:	4911      	ldr	r1, [pc, #68]	@ (8005524 <_dtoa_r+0x5c4>)
 80054e0:	2000      	movs	r0, #0
 80054e2:	f7fa fef1 	bl	80002c8 <__aeabi_dsub>
 80054e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054ea:	f7fb fb17 	bl	8000b1c <__aeabi_dcmplt>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	f040 8095 	bne.w	800561e <_dtoa_r+0x6be>
 80054f4:	42a6      	cmp	r6, r4
 80054f6:	f43f af50 	beq.w	800539a <_dtoa_r+0x43a>
 80054fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80054fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005528 <_dtoa_r+0x5c8>)
 8005500:	2200      	movs	r2, #0
 8005502:	f7fb f899 	bl	8000638 <__aeabi_dmul>
 8005506:	4b08      	ldr	r3, [pc, #32]	@ (8005528 <_dtoa_r+0x5c8>)
 8005508:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800550c:	2200      	movs	r2, #0
 800550e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005512:	f7fb f891 	bl	8000638 <__aeabi_dmul>
 8005516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800551a:	e7c4      	b.n	80054a6 <_dtoa_r+0x546>
 800551c:	08007120 	.word	0x08007120
 8005520:	080070f8 	.word	0x080070f8
 8005524:	3ff00000 	.word	0x3ff00000
 8005528:	40240000 	.word	0x40240000
 800552c:	401c0000 	.word	0x401c0000
 8005530:	40140000 	.word	0x40140000
 8005534:	3fe00000 	.word	0x3fe00000
 8005538:	4631      	mov	r1, r6
 800553a:	4628      	mov	r0, r5
 800553c:	f7fb f87c 	bl	8000638 <__aeabi_dmul>
 8005540:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005544:	9415      	str	r4, [sp, #84]	@ 0x54
 8005546:	4656      	mov	r6, sl
 8005548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800554c:	f7fb fb24 	bl	8000b98 <__aeabi_d2iz>
 8005550:	4605      	mov	r5, r0
 8005552:	f7fb f807 	bl	8000564 <__aeabi_i2d>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800555e:	f7fa feb3 	bl	80002c8 <__aeabi_dsub>
 8005562:	3530      	adds	r5, #48	@ 0x30
 8005564:	f806 5b01 	strb.w	r5, [r6], #1
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	42a6      	cmp	r6, r4
 800556e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005572:	f04f 0200 	mov.w	r2, #0
 8005576:	d124      	bne.n	80055c2 <_dtoa_r+0x662>
 8005578:	4bac      	ldr	r3, [pc, #688]	@ (800582c <_dtoa_r+0x8cc>)
 800557a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800557e:	f7fa fea5 	bl	80002cc <__adddf3>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800558a:	f7fb fae5 	bl	8000b58 <__aeabi_dcmpgt>
 800558e:	2800      	cmp	r0, #0
 8005590:	d145      	bne.n	800561e <_dtoa_r+0x6be>
 8005592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005596:	49a5      	ldr	r1, [pc, #660]	@ (800582c <_dtoa_r+0x8cc>)
 8005598:	2000      	movs	r0, #0
 800559a:	f7fa fe95 	bl	80002c8 <__aeabi_dsub>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055a6:	f7fb fab9 	bl	8000b1c <__aeabi_dcmplt>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	f43f aef5 	beq.w	800539a <_dtoa_r+0x43a>
 80055b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80055b2:	1e73      	subs	r3, r6, #1
 80055b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80055b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80055ba:	2b30      	cmp	r3, #48	@ 0x30
 80055bc:	d0f8      	beq.n	80055b0 <_dtoa_r+0x650>
 80055be:	9f04      	ldr	r7, [sp, #16]
 80055c0:	e73e      	b.n	8005440 <_dtoa_r+0x4e0>
 80055c2:	4b9b      	ldr	r3, [pc, #620]	@ (8005830 <_dtoa_r+0x8d0>)
 80055c4:	f7fb f838 	bl	8000638 <__aeabi_dmul>
 80055c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055cc:	e7bc      	b.n	8005548 <_dtoa_r+0x5e8>
 80055ce:	d10c      	bne.n	80055ea <_dtoa_r+0x68a>
 80055d0:	4b98      	ldr	r3, [pc, #608]	@ (8005834 <_dtoa_r+0x8d4>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055d8:	f7fb f82e 	bl	8000638 <__aeabi_dmul>
 80055dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055e0:	f7fb fab0 	bl	8000b44 <__aeabi_dcmpge>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	f000 8157 	beq.w	8005898 <_dtoa_r+0x938>
 80055ea:	2400      	movs	r4, #0
 80055ec:	4625      	mov	r5, r4
 80055ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055f0:	43db      	mvns	r3, r3
 80055f2:	9304      	str	r3, [sp, #16]
 80055f4:	4656      	mov	r6, sl
 80055f6:	2700      	movs	r7, #0
 80055f8:	4621      	mov	r1, r4
 80055fa:	4658      	mov	r0, fp
 80055fc:	f000 fbb4 	bl	8005d68 <_Bfree>
 8005600:	2d00      	cmp	r5, #0
 8005602:	d0dc      	beq.n	80055be <_dtoa_r+0x65e>
 8005604:	b12f      	cbz	r7, 8005612 <_dtoa_r+0x6b2>
 8005606:	42af      	cmp	r7, r5
 8005608:	d003      	beq.n	8005612 <_dtoa_r+0x6b2>
 800560a:	4639      	mov	r1, r7
 800560c:	4658      	mov	r0, fp
 800560e:	f000 fbab 	bl	8005d68 <_Bfree>
 8005612:	4629      	mov	r1, r5
 8005614:	4658      	mov	r0, fp
 8005616:	f000 fba7 	bl	8005d68 <_Bfree>
 800561a:	e7d0      	b.n	80055be <_dtoa_r+0x65e>
 800561c:	9704      	str	r7, [sp, #16]
 800561e:	4633      	mov	r3, r6
 8005620:	461e      	mov	r6, r3
 8005622:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005626:	2a39      	cmp	r2, #57	@ 0x39
 8005628:	d107      	bne.n	800563a <_dtoa_r+0x6da>
 800562a:	459a      	cmp	sl, r3
 800562c:	d1f8      	bne.n	8005620 <_dtoa_r+0x6c0>
 800562e:	9a04      	ldr	r2, [sp, #16]
 8005630:	3201      	adds	r2, #1
 8005632:	9204      	str	r2, [sp, #16]
 8005634:	2230      	movs	r2, #48	@ 0x30
 8005636:	f88a 2000 	strb.w	r2, [sl]
 800563a:	781a      	ldrb	r2, [r3, #0]
 800563c:	3201      	adds	r2, #1
 800563e:	701a      	strb	r2, [r3, #0]
 8005640:	e7bd      	b.n	80055be <_dtoa_r+0x65e>
 8005642:	4b7b      	ldr	r3, [pc, #492]	@ (8005830 <_dtoa_r+0x8d0>)
 8005644:	2200      	movs	r2, #0
 8005646:	f7fa fff7 	bl	8000638 <__aeabi_dmul>
 800564a:	2200      	movs	r2, #0
 800564c:	2300      	movs	r3, #0
 800564e:	4604      	mov	r4, r0
 8005650:	460d      	mov	r5, r1
 8005652:	f7fb fa59 	bl	8000b08 <__aeabi_dcmpeq>
 8005656:	2800      	cmp	r0, #0
 8005658:	f43f aebb 	beq.w	80053d2 <_dtoa_r+0x472>
 800565c:	e6f0      	b.n	8005440 <_dtoa_r+0x4e0>
 800565e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005660:	2a00      	cmp	r2, #0
 8005662:	f000 80db 	beq.w	800581c <_dtoa_r+0x8bc>
 8005666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005668:	2a01      	cmp	r2, #1
 800566a:	f300 80bf 	bgt.w	80057ec <_dtoa_r+0x88c>
 800566e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005670:	2a00      	cmp	r2, #0
 8005672:	f000 80b7 	beq.w	80057e4 <_dtoa_r+0x884>
 8005676:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800567a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800567c:	4646      	mov	r6, r8
 800567e:	9a08      	ldr	r2, [sp, #32]
 8005680:	2101      	movs	r1, #1
 8005682:	441a      	add	r2, r3
 8005684:	4658      	mov	r0, fp
 8005686:	4498      	add	r8, r3
 8005688:	9208      	str	r2, [sp, #32]
 800568a:	f000 fc21 	bl	8005ed0 <__i2b>
 800568e:	4605      	mov	r5, r0
 8005690:	b15e      	cbz	r6, 80056aa <_dtoa_r+0x74a>
 8005692:	9b08      	ldr	r3, [sp, #32]
 8005694:	2b00      	cmp	r3, #0
 8005696:	dd08      	ble.n	80056aa <_dtoa_r+0x74a>
 8005698:	42b3      	cmp	r3, r6
 800569a:	9a08      	ldr	r2, [sp, #32]
 800569c:	bfa8      	it	ge
 800569e:	4633      	movge	r3, r6
 80056a0:	eba8 0803 	sub.w	r8, r8, r3
 80056a4:	1af6      	subs	r6, r6, r3
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	9308      	str	r3, [sp, #32]
 80056aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056ac:	b1f3      	cbz	r3, 80056ec <_dtoa_r+0x78c>
 80056ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 80b7 	beq.w	8005824 <_dtoa_r+0x8c4>
 80056b6:	b18c      	cbz	r4, 80056dc <_dtoa_r+0x77c>
 80056b8:	4629      	mov	r1, r5
 80056ba:	4622      	mov	r2, r4
 80056bc:	4658      	mov	r0, fp
 80056be:	f000 fcc7 	bl	8006050 <__pow5mult>
 80056c2:	464a      	mov	r2, r9
 80056c4:	4601      	mov	r1, r0
 80056c6:	4605      	mov	r5, r0
 80056c8:	4658      	mov	r0, fp
 80056ca:	f000 fc17 	bl	8005efc <__multiply>
 80056ce:	4649      	mov	r1, r9
 80056d0:	9004      	str	r0, [sp, #16]
 80056d2:	4658      	mov	r0, fp
 80056d4:	f000 fb48 	bl	8005d68 <_Bfree>
 80056d8:	9b04      	ldr	r3, [sp, #16]
 80056da:	4699      	mov	r9, r3
 80056dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056de:	1b1a      	subs	r2, r3, r4
 80056e0:	d004      	beq.n	80056ec <_dtoa_r+0x78c>
 80056e2:	4649      	mov	r1, r9
 80056e4:	4658      	mov	r0, fp
 80056e6:	f000 fcb3 	bl	8006050 <__pow5mult>
 80056ea:	4681      	mov	r9, r0
 80056ec:	2101      	movs	r1, #1
 80056ee:	4658      	mov	r0, fp
 80056f0:	f000 fbee 	bl	8005ed0 <__i2b>
 80056f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056f6:	4604      	mov	r4, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 81cf 	beq.w	8005a9c <_dtoa_r+0xb3c>
 80056fe:	461a      	mov	r2, r3
 8005700:	4601      	mov	r1, r0
 8005702:	4658      	mov	r0, fp
 8005704:	f000 fca4 	bl	8006050 <__pow5mult>
 8005708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800570a:	2b01      	cmp	r3, #1
 800570c:	4604      	mov	r4, r0
 800570e:	f300 8095 	bgt.w	800583c <_dtoa_r+0x8dc>
 8005712:	9b02      	ldr	r3, [sp, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f040 8087 	bne.w	8005828 <_dtoa_r+0x8c8>
 800571a:	9b03      	ldr	r3, [sp, #12]
 800571c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005720:	2b00      	cmp	r3, #0
 8005722:	f040 8089 	bne.w	8005838 <_dtoa_r+0x8d8>
 8005726:	9b03      	ldr	r3, [sp, #12]
 8005728:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800572c:	0d1b      	lsrs	r3, r3, #20
 800572e:	051b      	lsls	r3, r3, #20
 8005730:	b12b      	cbz	r3, 800573e <_dtoa_r+0x7de>
 8005732:	9b08      	ldr	r3, [sp, #32]
 8005734:	3301      	adds	r3, #1
 8005736:	9308      	str	r3, [sp, #32]
 8005738:	f108 0801 	add.w	r8, r8, #1
 800573c:	2301      	movs	r3, #1
 800573e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 81b0 	beq.w	8005aa8 <_dtoa_r+0xb48>
 8005748:	6923      	ldr	r3, [r4, #16]
 800574a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800574e:	6918      	ldr	r0, [r3, #16]
 8005750:	f000 fb72 	bl	8005e38 <__hi0bits>
 8005754:	f1c0 0020 	rsb	r0, r0, #32
 8005758:	9b08      	ldr	r3, [sp, #32]
 800575a:	4418      	add	r0, r3
 800575c:	f010 001f 	ands.w	r0, r0, #31
 8005760:	d077      	beq.n	8005852 <_dtoa_r+0x8f2>
 8005762:	f1c0 0320 	rsb	r3, r0, #32
 8005766:	2b04      	cmp	r3, #4
 8005768:	dd6b      	ble.n	8005842 <_dtoa_r+0x8e2>
 800576a:	9b08      	ldr	r3, [sp, #32]
 800576c:	f1c0 001c 	rsb	r0, r0, #28
 8005770:	4403      	add	r3, r0
 8005772:	4480      	add	r8, r0
 8005774:	4406      	add	r6, r0
 8005776:	9308      	str	r3, [sp, #32]
 8005778:	f1b8 0f00 	cmp.w	r8, #0
 800577c:	dd05      	ble.n	800578a <_dtoa_r+0x82a>
 800577e:	4649      	mov	r1, r9
 8005780:	4642      	mov	r2, r8
 8005782:	4658      	mov	r0, fp
 8005784:	f000 fcbe 	bl	8006104 <__lshift>
 8005788:	4681      	mov	r9, r0
 800578a:	9b08      	ldr	r3, [sp, #32]
 800578c:	2b00      	cmp	r3, #0
 800578e:	dd05      	ble.n	800579c <_dtoa_r+0x83c>
 8005790:	4621      	mov	r1, r4
 8005792:	461a      	mov	r2, r3
 8005794:	4658      	mov	r0, fp
 8005796:	f000 fcb5 	bl	8006104 <__lshift>
 800579a:	4604      	mov	r4, r0
 800579c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d059      	beq.n	8005856 <_dtoa_r+0x8f6>
 80057a2:	4621      	mov	r1, r4
 80057a4:	4648      	mov	r0, r9
 80057a6:	f000 fd19 	bl	80061dc <__mcmp>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	da53      	bge.n	8005856 <_dtoa_r+0x8f6>
 80057ae:	1e7b      	subs	r3, r7, #1
 80057b0:	9304      	str	r3, [sp, #16]
 80057b2:	4649      	mov	r1, r9
 80057b4:	2300      	movs	r3, #0
 80057b6:	220a      	movs	r2, #10
 80057b8:	4658      	mov	r0, fp
 80057ba:	f000 faf7 	bl	8005dac <__multadd>
 80057be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057c0:	4681      	mov	r9, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 8172 	beq.w	8005aac <_dtoa_r+0xb4c>
 80057c8:	2300      	movs	r3, #0
 80057ca:	4629      	mov	r1, r5
 80057cc:	220a      	movs	r2, #10
 80057ce:	4658      	mov	r0, fp
 80057d0:	f000 faec 	bl	8005dac <__multadd>
 80057d4:	9b00      	ldr	r3, [sp, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	4605      	mov	r5, r0
 80057da:	dc67      	bgt.n	80058ac <_dtoa_r+0x94c>
 80057dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057de:	2b02      	cmp	r3, #2
 80057e0:	dc41      	bgt.n	8005866 <_dtoa_r+0x906>
 80057e2:	e063      	b.n	80058ac <_dtoa_r+0x94c>
 80057e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80057e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80057ea:	e746      	b.n	800567a <_dtoa_r+0x71a>
 80057ec:	9b07      	ldr	r3, [sp, #28]
 80057ee:	1e5c      	subs	r4, r3, #1
 80057f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057f2:	42a3      	cmp	r3, r4
 80057f4:	bfbf      	itttt	lt
 80057f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80057f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80057fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80057fc:	1ae3      	sublt	r3, r4, r3
 80057fe:	bfb4      	ite	lt
 8005800:	18d2      	addlt	r2, r2, r3
 8005802:	1b1c      	subge	r4, r3, r4
 8005804:	9b07      	ldr	r3, [sp, #28]
 8005806:	bfbc      	itt	lt
 8005808:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800580a:	2400      	movlt	r4, #0
 800580c:	2b00      	cmp	r3, #0
 800580e:	bfb5      	itete	lt
 8005810:	eba8 0603 	sublt.w	r6, r8, r3
 8005814:	9b07      	ldrge	r3, [sp, #28]
 8005816:	2300      	movlt	r3, #0
 8005818:	4646      	movge	r6, r8
 800581a:	e730      	b.n	800567e <_dtoa_r+0x71e>
 800581c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800581e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005820:	4646      	mov	r6, r8
 8005822:	e735      	b.n	8005690 <_dtoa_r+0x730>
 8005824:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005826:	e75c      	b.n	80056e2 <_dtoa_r+0x782>
 8005828:	2300      	movs	r3, #0
 800582a:	e788      	b.n	800573e <_dtoa_r+0x7de>
 800582c:	3fe00000 	.word	0x3fe00000
 8005830:	40240000 	.word	0x40240000
 8005834:	40140000 	.word	0x40140000
 8005838:	9b02      	ldr	r3, [sp, #8]
 800583a:	e780      	b.n	800573e <_dtoa_r+0x7de>
 800583c:	2300      	movs	r3, #0
 800583e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005840:	e782      	b.n	8005748 <_dtoa_r+0x7e8>
 8005842:	d099      	beq.n	8005778 <_dtoa_r+0x818>
 8005844:	9a08      	ldr	r2, [sp, #32]
 8005846:	331c      	adds	r3, #28
 8005848:	441a      	add	r2, r3
 800584a:	4498      	add	r8, r3
 800584c:	441e      	add	r6, r3
 800584e:	9208      	str	r2, [sp, #32]
 8005850:	e792      	b.n	8005778 <_dtoa_r+0x818>
 8005852:	4603      	mov	r3, r0
 8005854:	e7f6      	b.n	8005844 <_dtoa_r+0x8e4>
 8005856:	9b07      	ldr	r3, [sp, #28]
 8005858:	9704      	str	r7, [sp, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	dc20      	bgt.n	80058a0 <_dtoa_r+0x940>
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005862:	2b02      	cmp	r3, #2
 8005864:	dd1e      	ble.n	80058a4 <_dtoa_r+0x944>
 8005866:	9b00      	ldr	r3, [sp, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	f47f aec0 	bne.w	80055ee <_dtoa_r+0x68e>
 800586e:	4621      	mov	r1, r4
 8005870:	2205      	movs	r2, #5
 8005872:	4658      	mov	r0, fp
 8005874:	f000 fa9a 	bl	8005dac <__multadd>
 8005878:	4601      	mov	r1, r0
 800587a:	4604      	mov	r4, r0
 800587c:	4648      	mov	r0, r9
 800587e:	f000 fcad 	bl	80061dc <__mcmp>
 8005882:	2800      	cmp	r0, #0
 8005884:	f77f aeb3 	ble.w	80055ee <_dtoa_r+0x68e>
 8005888:	4656      	mov	r6, sl
 800588a:	2331      	movs	r3, #49	@ 0x31
 800588c:	f806 3b01 	strb.w	r3, [r6], #1
 8005890:	9b04      	ldr	r3, [sp, #16]
 8005892:	3301      	adds	r3, #1
 8005894:	9304      	str	r3, [sp, #16]
 8005896:	e6ae      	b.n	80055f6 <_dtoa_r+0x696>
 8005898:	9c07      	ldr	r4, [sp, #28]
 800589a:	9704      	str	r7, [sp, #16]
 800589c:	4625      	mov	r5, r4
 800589e:	e7f3      	b.n	8005888 <_dtoa_r+0x928>
 80058a0:	9b07      	ldr	r3, [sp, #28]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 8104 	beq.w	8005ab4 <_dtoa_r+0xb54>
 80058ac:	2e00      	cmp	r6, #0
 80058ae:	dd05      	ble.n	80058bc <_dtoa_r+0x95c>
 80058b0:	4629      	mov	r1, r5
 80058b2:	4632      	mov	r2, r6
 80058b4:	4658      	mov	r0, fp
 80058b6:	f000 fc25 	bl	8006104 <__lshift>
 80058ba:	4605      	mov	r5, r0
 80058bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d05a      	beq.n	8005978 <_dtoa_r+0xa18>
 80058c2:	6869      	ldr	r1, [r5, #4]
 80058c4:	4658      	mov	r0, fp
 80058c6:	f000 fa0f 	bl	8005ce8 <_Balloc>
 80058ca:	4606      	mov	r6, r0
 80058cc:	b928      	cbnz	r0, 80058da <_dtoa_r+0x97a>
 80058ce:	4b84      	ldr	r3, [pc, #528]	@ (8005ae0 <_dtoa_r+0xb80>)
 80058d0:	4602      	mov	r2, r0
 80058d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80058d6:	f7ff bb5a 	b.w	8004f8e <_dtoa_r+0x2e>
 80058da:	692a      	ldr	r2, [r5, #16]
 80058dc:	3202      	adds	r2, #2
 80058de:	0092      	lsls	r2, r2, #2
 80058e0:	f105 010c 	add.w	r1, r5, #12
 80058e4:	300c      	adds	r0, #12
 80058e6:	f000 ffaf 	bl	8006848 <memcpy>
 80058ea:	2201      	movs	r2, #1
 80058ec:	4631      	mov	r1, r6
 80058ee:	4658      	mov	r0, fp
 80058f0:	f000 fc08 	bl	8006104 <__lshift>
 80058f4:	f10a 0301 	add.w	r3, sl, #1
 80058f8:	9307      	str	r3, [sp, #28]
 80058fa:	9b00      	ldr	r3, [sp, #0]
 80058fc:	4453      	add	r3, sl
 80058fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005900:	9b02      	ldr	r3, [sp, #8]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	462f      	mov	r7, r5
 8005908:	930a      	str	r3, [sp, #40]	@ 0x28
 800590a:	4605      	mov	r5, r0
 800590c:	9b07      	ldr	r3, [sp, #28]
 800590e:	4621      	mov	r1, r4
 8005910:	3b01      	subs	r3, #1
 8005912:	4648      	mov	r0, r9
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	f7ff fa9a 	bl	8004e4e <quorem>
 800591a:	4639      	mov	r1, r7
 800591c:	9002      	str	r0, [sp, #8]
 800591e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005922:	4648      	mov	r0, r9
 8005924:	f000 fc5a 	bl	80061dc <__mcmp>
 8005928:	462a      	mov	r2, r5
 800592a:	9008      	str	r0, [sp, #32]
 800592c:	4621      	mov	r1, r4
 800592e:	4658      	mov	r0, fp
 8005930:	f000 fc70 	bl	8006214 <__mdiff>
 8005934:	68c2      	ldr	r2, [r0, #12]
 8005936:	4606      	mov	r6, r0
 8005938:	bb02      	cbnz	r2, 800597c <_dtoa_r+0xa1c>
 800593a:	4601      	mov	r1, r0
 800593c:	4648      	mov	r0, r9
 800593e:	f000 fc4d 	bl	80061dc <__mcmp>
 8005942:	4602      	mov	r2, r0
 8005944:	4631      	mov	r1, r6
 8005946:	4658      	mov	r0, fp
 8005948:	920e      	str	r2, [sp, #56]	@ 0x38
 800594a:	f000 fa0d 	bl	8005d68 <_Bfree>
 800594e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005950:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005952:	9e07      	ldr	r6, [sp, #28]
 8005954:	ea43 0102 	orr.w	r1, r3, r2
 8005958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800595a:	4319      	orrs	r1, r3
 800595c:	d110      	bne.n	8005980 <_dtoa_r+0xa20>
 800595e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005962:	d029      	beq.n	80059b8 <_dtoa_r+0xa58>
 8005964:	9b08      	ldr	r3, [sp, #32]
 8005966:	2b00      	cmp	r3, #0
 8005968:	dd02      	ble.n	8005970 <_dtoa_r+0xa10>
 800596a:	9b02      	ldr	r3, [sp, #8]
 800596c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005970:	9b00      	ldr	r3, [sp, #0]
 8005972:	f883 8000 	strb.w	r8, [r3]
 8005976:	e63f      	b.n	80055f8 <_dtoa_r+0x698>
 8005978:	4628      	mov	r0, r5
 800597a:	e7bb      	b.n	80058f4 <_dtoa_r+0x994>
 800597c:	2201      	movs	r2, #1
 800597e:	e7e1      	b.n	8005944 <_dtoa_r+0x9e4>
 8005980:	9b08      	ldr	r3, [sp, #32]
 8005982:	2b00      	cmp	r3, #0
 8005984:	db04      	blt.n	8005990 <_dtoa_r+0xa30>
 8005986:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005988:	430b      	orrs	r3, r1
 800598a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800598c:	430b      	orrs	r3, r1
 800598e:	d120      	bne.n	80059d2 <_dtoa_r+0xa72>
 8005990:	2a00      	cmp	r2, #0
 8005992:	dded      	ble.n	8005970 <_dtoa_r+0xa10>
 8005994:	4649      	mov	r1, r9
 8005996:	2201      	movs	r2, #1
 8005998:	4658      	mov	r0, fp
 800599a:	f000 fbb3 	bl	8006104 <__lshift>
 800599e:	4621      	mov	r1, r4
 80059a0:	4681      	mov	r9, r0
 80059a2:	f000 fc1b 	bl	80061dc <__mcmp>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	dc03      	bgt.n	80059b2 <_dtoa_r+0xa52>
 80059aa:	d1e1      	bne.n	8005970 <_dtoa_r+0xa10>
 80059ac:	f018 0f01 	tst.w	r8, #1
 80059b0:	d0de      	beq.n	8005970 <_dtoa_r+0xa10>
 80059b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059b6:	d1d8      	bne.n	800596a <_dtoa_r+0xa0a>
 80059b8:	9a00      	ldr	r2, [sp, #0]
 80059ba:	2339      	movs	r3, #57	@ 0x39
 80059bc:	7013      	strb	r3, [r2, #0]
 80059be:	4633      	mov	r3, r6
 80059c0:	461e      	mov	r6, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80059c8:	2a39      	cmp	r2, #57	@ 0x39
 80059ca:	d052      	beq.n	8005a72 <_dtoa_r+0xb12>
 80059cc:	3201      	adds	r2, #1
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e612      	b.n	80055f8 <_dtoa_r+0x698>
 80059d2:	2a00      	cmp	r2, #0
 80059d4:	dd07      	ble.n	80059e6 <_dtoa_r+0xa86>
 80059d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059da:	d0ed      	beq.n	80059b8 <_dtoa_r+0xa58>
 80059dc:	9a00      	ldr	r2, [sp, #0]
 80059de:	f108 0301 	add.w	r3, r8, #1
 80059e2:	7013      	strb	r3, [r2, #0]
 80059e4:	e608      	b.n	80055f8 <_dtoa_r+0x698>
 80059e6:	9b07      	ldr	r3, [sp, #28]
 80059e8:	9a07      	ldr	r2, [sp, #28]
 80059ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80059ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d028      	beq.n	8005a46 <_dtoa_r+0xae6>
 80059f4:	4649      	mov	r1, r9
 80059f6:	2300      	movs	r3, #0
 80059f8:	220a      	movs	r2, #10
 80059fa:	4658      	mov	r0, fp
 80059fc:	f000 f9d6 	bl	8005dac <__multadd>
 8005a00:	42af      	cmp	r7, r5
 8005a02:	4681      	mov	r9, r0
 8005a04:	f04f 0300 	mov.w	r3, #0
 8005a08:	f04f 020a 	mov.w	r2, #10
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	4658      	mov	r0, fp
 8005a10:	d107      	bne.n	8005a22 <_dtoa_r+0xac2>
 8005a12:	f000 f9cb 	bl	8005dac <__multadd>
 8005a16:	4607      	mov	r7, r0
 8005a18:	4605      	mov	r5, r0
 8005a1a:	9b07      	ldr	r3, [sp, #28]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	9307      	str	r3, [sp, #28]
 8005a20:	e774      	b.n	800590c <_dtoa_r+0x9ac>
 8005a22:	f000 f9c3 	bl	8005dac <__multadd>
 8005a26:	4629      	mov	r1, r5
 8005a28:	4607      	mov	r7, r0
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	220a      	movs	r2, #10
 8005a2e:	4658      	mov	r0, fp
 8005a30:	f000 f9bc 	bl	8005dac <__multadd>
 8005a34:	4605      	mov	r5, r0
 8005a36:	e7f0      	b.n	8005a1a <_dtoa_r+0xaba>
 8005a38:	9b00      	ldr	r3, [sp, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bfcc      	ite	gt
 8005a3e:	461e      	movgt	r6, r3
 8005a40:	2601      	movle	r6, #1
 8005a42:	4456      	add	r6, sl
 8005a44:	2700      	movs	r7, #0
 8005a46:	4649      	mov	r1, r9
 8005a48:	2201      	movs	r2, #1
 8005a4a:	4658      	mov	r0, fp
 8005a4c:	f000 fb5a 	bl	8006104 <__lshift>
 8005a50:	4621      	mov	r1, r4
 8005a52:	4681      	mov	r9, r0
 8005a54:	f000 fbc2 	bl	80061dc <__mcmp>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	dcb0      	bgt.n	80059be <_dtoa_r+0xa5e>
 8005a5c:	d102      	bne.n	8005a64 <_dtoa_r+0xb04>
 8005a5e:	f018 0f01 	tst.w	r8, #1
 8005a62:	d1ac      	bne.n	80059be <_dtoa_r+0xa5e>
 8005a64:	4633      	mov	r3, r6
 8005a66:	461e      	mov	r6, r3
 8005a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a6c:	2a30      	cmp	r2, #48	@ 0x30
 8005a6e:	d0fa      	beq.n	8005a66 <_dtoa_r+0xb06>
 8005a70:	e5c2      	b.n	80055f8 <_dtoa_r+0x698>
 8005a72:	459a      	cmp	sl, r3
 8005a74:	d1a4      	bne.n	80059c0 <_dtoa_r+0xa60>
 8005a76:	9b04      	ldr	r3, [sp, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	9304      	str	r3, [sp, #16]
 8005a7c:	2331      	movs	r3, #49	@ 0x31
 8005a7e:	f88a 3000 	strb.w	r3, [sl]
 8005a82:	e5b9      	b.n	80055f8 <_dtoa_r+0x698>
 8005a84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005a86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005ae4 <_dtoa_r+0xb84>
 8005a8a:	b11b      	cbz	r3, 8005a94 <_dtoa_r+0xb34>
 8005a8c:	f10a 0308 	add.w	r3, sl, #8
 8005a90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	4650      	mov	r0, sl
 8005a96:	b019      	add	sp, #100	@ 0x64
 8005a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	f77f ae37 	ble.w	8005712 <_dtoa_r+0x7b2>
 8005aa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	e655      	b.n	8005758 <_dtoa_r+0x7f8>
 8005aac:	9b00      	ldr	r3, [sp, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f77f aed6 	ble.w	8005860 <_dtoa_r+0x900>
 8005ab4:	4656      	mov	r6, sl
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4648      	mov	r0, r9
 8005aba:	f7ff f9c8 	bl	8004e4e <quorem>
 8005abe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005ac2:	f806 8b01 	strb.w	r8, [r6], #1
 8005ac6:	9b00      	ldr	r3, [sp, #0]
 8005ac8:	eba6 020a 	sub.w	r2, r6, sl
 8005acc:	4293      	cmp	r3, r2
 8005ace:	ddb3      	ble.n	8005a38 <_dtoa_r+0xad8>
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	220a      	movs	r2, #10
 8005ad6:	4658      	mov	r0, fp
 8005ad8:	f000 f968 	bl	8005dac <__multadd>
 8005adc:	4681      	mov	r9, r0
 8005ade:	e7ea      	b.n	8005ab6 <_dtoa_r+0xb56>
 8005ae0:	08007080 	.word	0x08007080
 8005ae4:	08007004 	.word	0x08007004

08005ae8 <_free_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4605      	mov	r5, r0
 8005aec:	2900      	cmp	r1, #0
 8005aee:	d041      	beq.n	8005b74 <_free_r+0x8c>
 8005af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af4:	1f0c      	subs	r4, r1, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bfb8      	it	lt
 8005afa:	18e4      	addlt	r4, r4, r3
 8005afc:	f000 f8e8 	bl	8005cd0 <__malloc_lock>
 8005b00:	4a1d      	ldr	r2, [pc, #116]	@ (8005b78 <_free_r+0x90>)
 8005b02:	6813      	ldr	r3, [r2, #0]
 8005b04:	b933      	cbnz	r3, 8005b14 <_free_r+0x2c>
 8005b06:	6063      	str	r3, [r4, #4]
 8005b08:	6014      	str	r4, [r2, #0]
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b10:	f000 b8e4 	b.w	8005cdc <__malloc_unlock>
 8005b14:	42a3      	cmp	r3, r4
 8005b16:	d908      	bls.n	8005b2a <_free_r+0x42>
 8005b18:	6820      	ldr	r0, [r4, #0]
 8005b1a:	1821      	adds	r1, r4, r0
 8005b1c:	428b      	cmp	r3, r1
 8005b1e:	bf01      	itttt	eq
 8005b20:	6819      	ldreq	r1, [r3, #0]
 8005b22:	685b      	ldreq	r3, [r3, #4]
 8005b24:	1809      	addeq	r1, r1, r0
 8005b26:	6021      	streq	r1, [r4, #0]
 8005b28:	e7ed      	b.n	8005b06 <_free_r+0x1e>
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	b10b      	cbz	r3, 8005b34 <_free_r+0x4c>
 8005b30:	42a3      	cmp	r3, r4
 8005b32:	d9fa      	bls.n	8005b2a <_free_r+0x42>
 8005b34:	6811      	ldr	r1, [r2, #0]
 8005b36:	1850      	adds	r0, r2, r1
 8005b38:	42a0      	cmp	r0, r4
 8005b3a:	d10b      	bne.n	8005b54 <_free_r+0x6c>
 8005b3c:	6820      	ldr	r0, [r4, #0]
 8005b3e:	4401      	add	r1, r0
 8005b40:	1850      	adds	r0, r2, r1
 8005b42:	4283      	cmp	r3, r0
 8005b44:	6011      	str	r1, [r2, #0]
 8005b46:	d1e0      	bne.n	8005b0a <_free_r+0x22>
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	6053      	str	r3, [r2, #4]
 8005b4e:	4408      	add	r0, r1
 8005b50:	6010      	str	r0, [r2, #0]
 8005b52:	e7da      	b.n	8005b0a <_free_r+0x22>
 8005b54:	d902      	bls.n	8005b5c <_free_r+0x74>
 8005b56:	230c      	movs	r3, #12
 8005b58:	602b      	str	r3, [r5, #0]
 8005b5a:	e7d6      	b.n	8005b0a <_free_r+0x22>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	1821      	adds	r1, r4, r0
 8005b60:	428b      	cmp	r3, r1
 8005b62:	bf04      	itt	eq
 8005b64:	6819      	ldreq	r1, [r3, #0]
 8005b66:	685b      	ldreq	r3, [r3, #4]
 8005b68:	6063      	str	r3, [r4, #4]
 8005b6a:	bf04      	itt	eq
 8005b6c:	1809      	addeq	r1, r1, r0
 8005b6e:	6021      	streq	r1, [r4, #0]
 8005b70:	6054      	str	r4, [r2, #4]
 8005b72:	e7ca      	b.n	8005b0a <_free_r+0x22>
 8005b74:	bd38      	pop	{r3, r4, r5, pc}
 8005b76:	bf00      	nop
 8005b78:	20000528 	.word	0x20000528

08005b7c <malloc>:
 8005b7c:	4b02      	ldr	r3, [pc, #8]	@ (8005b88 <malloc+0xc>)
 8005b7e:	4601      	mov	r1, r0
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	f000 b825 	b.w	8005bd0 <_malloc_r>
 8005b86:	bf00      	nop
 8005b88:	20000028 	.word	0x20000028

08005b8c <sbrk_aligned>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	4e0f      	ldr	r6, [pc, #60]	@ (8005bcc <sbrk_aligned+0x40>)
 8005b90:	460c      	mov	r4, r1
 8005b92:	6831      	ldr	r1, [r6, #0]
 8005b94:	4605      	mov	r5, r0
 8005b96:	b911      	cbnz	r1, 8005b9e <sbrk_aligned+0x12>
 8005b98:	f000 fe46 	bl	8006828 <_sbrk_r>
 8005b9c:	6030      	str	r0, [r6, #0]
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f000 fe41 	bl	8006828 <_sbrk_r>
 8005ba6:	1c43      	adds	r3, r0, #1
 8005ba8:	d103      	bne.n	8005bb2 <sbrk_aligned+0x26>
 8005baa:	f04f 34ff 	mov.w	r4, #4294967295
 8005bae:	4620      	mov	r0, r4
 8005bb0:	bd70      	pop	{r4, r5, r6, pc}
 8005bb2:	1cc4      	adds	r4, r0, #3
 8005bb4:	f024 0403 	bic.w	r4, r4, #3
 8005bb8:	42a0      	cmp	r0, r4
 8005bba:	d0f8      	beq.n	8005bae <sbrk_aligned+0x22>
 8005bbc:	1a21      	subs	r1, r4, r0
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f000 fe32 	bl	8006828 <_sbrk_r>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d1f2      	bne.n	8005bae <sbrk_aligned+0x22>
 8005bc8:	e7ef      	b.n	8005baa <sbrk_aligned+0x1e>
 8005bca:	bf00      	nop
 8005bcc:	20000524 	.word	0x20000524

08005bd0 <_malloc_r>:
 8005bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd4:	1ccd      	adds	r5, r1, #3
 8005bd6:	f025 0503 	bic.w	r5, r5, #3
 8005bda:	3508      	adds	r5, #8
 8005bdc:	2d0c      	cmp	r5, #12
 8005bde:	bf38      	it	cc
 8005be0:	250c      	movcc	r5, #12
 8005be2:	2d00      	cmp	r5, #0
 8005be4:	4606      	mov	r6, r0
 8005be6:	db01      	blt.n	8005bec <_malloc_r+0x1c>
 8005be8:	42a9      	cmp	r1, r5
 8005bea:	d904      	bls.n	8005bf6 <_malloc_r+0x26>
 8005bec:	230c      	movs	r3, #12
 8005bee:	6033      	str	r3, [r6, #0]
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ccc <_malloc_r+0xfc>
 8005bfa:	f000 f869 	bl	8005cd0 <__malloc_lock>
 8005bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8005c02:	461c      	mov	r4, r3
 8005c04:	bb44      	cbnz	r4, 8005c58 <_malloc_r+0x88>
 8005c06:	4629      	mov	r1, r5
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7ff ffbf 	bl	8005b8c <sbrk_aligned>
 8005c0e:	1c43      	adds	r3, r0, #1
 8005c10:	4604      	mov	r4, r0
 8005c12:	d158      	bne.n	8005cc6 <_malloc_r+0xf6>
 8005c14:	f8d8 4000 	ldr.w	r4, [r8]
 8005c18:	4627      	mov	r7, r4
 8005c1a:	2f00      	cmp	r7, #0
 8005c1c:	d143      	bne.n	8005ca6 <_malloc_r+0xd6>
 8005c1e:	2c00      	cmp	r4, #0
 8005c20:	d04b      	beq.n	8005cba <_malloc_r+0xea>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	4639      	mov	r1, r7
 8005c26:	4630      	mov	r0, r6
 8005c28:	eb04 0903 	add.w	r9, r4, r3
 8005c2c:	f000 fdfc 	bl	8006828 <_sbrk_r>
 8005c30:	4581      	cmp	r9, r0
 8005c32:	d142      	bne.n	8005cba <_malloc_r+0xea>
 8005c34:	6821      	ldr	r1, [r4, #0]
 8005c36:	1a6d      	subs	r5, r5, r1
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f7ff ffa6 	bl	8005b8c <sbrk_aligned>
 8005c40:	3001      	adds	r0, #1
 8005c42:	d03a      	beq.n	8005cba <_malloc_r+0xea>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	442b      	add	r3, r5
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	bb62      	cbnz	r2, 8005cac <_malloc_r+0xdc>
 8005c52:	f8c8 7000 	str.w	r7, [r8]
 8005c56:	e00f      	b.n	8005c78 <_malloc_r+0xa8>
 8005c58:	6822      	ldr	r2, [r4, #0]
 8005c5a:	1b52      	subs	r2, r2, r5
 8005c5c:	d420      	bmi.n	8005ca0 <_malloc_r+0xd0>
 8005c5e:	2a0b      	cmp	r2, #11
 8005c60:	d917      	bls.n	8005c92 <_malloc_r+0xc2>
 8005c62:	1961      	adds	r1, r4, r5
 8005c64:	42a3      	cmp	r3, r4
 8005c66:	6025      	str	r5, [r4, #0]
 8005c68:	bf18      	it	ne
 8005c6a:	6059      	strne	r1, [r3, #4]
 8005c6c:	6863      	ldr	r3, [r4, #4]
 8005c6e:	bf08      	it	eq
 8005c70:	f8c8 1000 	streq.w	r1, [r8]
 8005c74:	5162      	str	r2, [r4, r5]
 8005c76:	604b      	str	r3, [r1, #4]
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f000 f82f 	bl	8005cdc <__malloc_unlock>
 8005c7e:	f104 000b 	add.w	r0, r4, #11
 8005c82:	1d23      	adds	r3, r4, #4
 8005c84:	f020 0007 	bic.w	r0, r0, #7
 8005c88:	1ac2      	subs	r2, r0, r3
 8005c8a:	bf1c      	itt	ne
 8005c8c:	1a1b      	subne	r3, r3, r0
 8005c8e:	50a3      	strne	r3, [r4, r2]
 8005c90:	e7af      	b.n	8005bf2 <_malloc_r+0x22>
 8005c92:	6862      	ldr	r2, [r4, #4]
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	bf0c      	ite	eq
 8005c98:	f8c8 2000 	streq.w	r2, [r8]
 8005c9c:	605a      	strne	r2, [r3, #4]
 8005c9e:	e7eb      	b.n	8005c78 <_malloc_r+0xa8>
 8005ca0:	4623      	mov	r3, r4
 8005ca2:	6864      	ldr	r4, [r4, #4]
 8005ca4:	e7ae      	b.n	8005c04 <_malloc_r+0x34>
 8005ca6:	463c      	mov	r4, r7
 8005ca8:	687f      	ldr	r7, [r7, #4]
 8005caa:	e7b6      	b.n	8005c1a <_malloc_r+0x4a>
 8005cac:	461a      	mov	r2, r3
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	d1fb      	bne.n	8005cac <_malloc_r+0xdc>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	6053      	str	r3, [r2, #4]
 8005cb8:	e7de      	b.n	8005c78 <_malloc_r+0xa8>
 8005cba:	230c      	movs	r3, #12
 8005cbc:	6033      	str	r3, [r6, #0]
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f000 f80c 	bl	8005cdc <__malloc_unlock>
 8005cc4:	e794      	b.n	8005bf0 <_malloc_r+0x20>
 8005cc6:	6005      	str	r5, [r0, #0]
 8005cc8:	e7d6      	b.n	8005c78 <_malloc_r+0xa8>
 8005cca:	bf00      	nop
 8005ccc:	20000528 	.word	0x20000528

08005cd0 <__malloc_lock>:
 8005cd0:	4801      	ldr	r0, [pc, #4]	@ (8005cd8 <__malloc_lock+0x8>)
 8005cd2:	f7ff b8ba 	b.w	8004e4a <__retarget_lock_acquire_recursive>
 8005cd6:	bf00      	nop
 8005cd8:	20000520 	.word	0x20000520

08005cdc <__malloc_unlock>:
 8005cdc:	4801      	ldr	r0, [pc, #4]	@ (8005ce4 <__malloc_unlock+0x8>)
 8005cde:	f7ff b8b5 	b.w	8004e4c <__retarget_lock_release_recursive>
 8005ce2:	bf00      	nop
 8005ce4:	20000520 	.word	0x20000520

08005ce8 <_Balloc>:
 8005ce8:	b570      	push	{r4, r5, r6, lr}
 8005cea:	69c6      	ldr	r6, [r0, #28]
 8005cec:	4604      	mov	r4, r0
 8005cee:	460d      	mov	r5, r1
 8005cf0:	b976      	cbnz	r6, 8005d10 <_Balloc+0x28>
 8005cf2:	2010      	movs	r0, #16
 8005cf4:	f7ff ff42 	bl	8005b7c <malloc>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	61e0      	str	r0, [r4, #28]
 8005cfc:	b920      	cbnz	r0, 8005d08 <_Balloc+0x20>
 8005cfe:	4b18      	ldr	r3, [pc, #96]	@ (8005d60 <_Balloc+0x78>)
 8005d00:	4818      	ldr	r0, [pc, #96]	@ (8005d64 <_Balloc+0x7c>)
 8005d02:	216b      	movs	r1, #107	@ 0x6b
 8005d04:	f000 fdae 	bl	8006864 <__assert_func>
 8005d08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d0c:	6006      	str	r6, [r0, #0]
 8005d0e:	60c6      	str	r6, [r0, #12]
 8005d10:	69e6      	ldr	r6, [r4, #28]
 8005d12:	68f3      	ldr	r3, [r6, #12]
 8005d14:	b183      	cbz	r3, 8005d38 <_Balloc+0x50>
 8005d16:	69e3      	ldr	r3, [r4, #28]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d1e:	b9b8      	cbnz	r0, 8005d50 <_Balloc+0x68>
 8005d20:	2101      	movs	r1, #1
 8005d22:	fa01 f605 	lsl.w	r6, r1, r5
 8005d26:	1d72      	adds	r2, r6, #5
 8005d28:	0092      	lsls	r2, r2, #2
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f000 fdb8 	bl	80068a0 <_calloc_r>
 8005d30:	b160      	cbz	r0, 8005d4c <_Balloc+0x64>
 8005d32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d36:	e00e      	b.n	8005d56 <_Balloc+0x6e>
 8005d38:	2221      	movs	r2, #33	@ 0x21
 8005d3a:	2104      	movs	r1, #4
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f000 fdaf 	bl	80068a0 <_calloc_r>
 8005d42:	69e3      	ldr	r3, [r4, #28]
 8005d44:	60f0      	str	r0, [r6, #12]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e4      	bne.n	8005d16 <_Balloc+0x2e>
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	6802      	ldr	r2, [r0, #0]
 8005d52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d56:	2300      	movs	r3, #0
 8005d58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d5c:	e7f7      	b.n	8005d4e <_Balloc+0x66>
 8005d5e:	bf00      	nop
 8005d60:	08007011 	.word	0x08007011
 8005d64:	08007091 	.word	0x08007091

08005d68 <_Bfree>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	69c6      	ldr	r6, [r0, #28]
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	b976      	cbnz	r6, 8005d90 <_Bfree+0x28>
 8005d72:	2010      	movs	r0, #16
 8005d74:	f7ff ff02 	bl	8005b7c <malloc>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	61e8      	str	r0, [r5, #28]
 8005d7c:	b920      	cbnz	r0, 8005d88 <_Bfree+0x20>
 8005d7e:	4b09      	ldr	r3, [pc, #36]	@ (8005da4 <_Bfree+0x3c>)
 8005d80:	4809      	ldr	r0, [pc, #36]	@ (8005da8 <_Bfree+0x40>)
 8005d82:	218f      	movs	r1, #143	@ 0x8f
 8005d84:	f000 fd6e 	bl	8006864 <__assert_func>
 8005d88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d8c:	6006      	str	r6, [r0, #0]
 8005d8e:	60c6      	str	r6, [r0, #12]
 8005d90:	b13c      	cbz	r4, 8005da2 <_Bfree+0x3a>
 8005d92:	69eb      	ldr	r3, [r5, #28]
 8005d94:	6862      	ldr	r2, [r4, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d9c:	6021      	str	r1, [r4, #0]
 8005d9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	08007011 	.word	0x08007011
 8005da8:	08007091 	.word	0x08007091

08005dac <__multadd>:
 8005dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db0:	690d      	ldr	r5, [r1, #16]
 8005db2:	4607      	mov	r7, r0
 8005db4:	460c      	mov	r4, r1
 8005db6:	461e      	mov	r6, r3
 8005db8:	f101 0c14 	add.w	ip, r1, #20
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	f8dc 3000 	ldr.w	r3, [ip]
 8005dc2:	b299      	uxth	r1, r3
 8005dc4:	fb02 6101 	mla	r1, r2, r1, r6
 8005dc8:	0c1e      	lsrs	r6, r3, #16
 8005dca:	0c0b      	lsrs	r3, r1, #16
 8005dcc:	fb02 3306 	mla	r3, r2, r6, r3
 8005dd0:	b289      	uxth	r1, r1
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005dd8:	4285      	cmp	r5, r0
 8005dda:	f84c 1b04 	str.w	r1, [ip], #4
 8005dde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005de2:	dcec      	bgt.n	8005dbe <__multadd+0x12>
 8005de4:	b30e      	cbz	r6, 8005e2a <__multadd+0x7e>
 8005de6:	68a3      	ldr	r3, [r4, #8]
 8005de8:	42ab      	cmp	r3, r5
 8005dea:	dc19      	bgt.n	8005e20 <__multadd+0x74>
 8005dec:	6861      	ldr	r1, [r4, #4]
 8005dee:	4638      	mov	r0, r7
 8005df0:	3101      	adds	r1, #1
 8005df2:	f7ff ff79 	bl	8005ce8 <_Balloc>
 8005df6:	4680      	mov	r8, r0
 8005df8:	b928      	cbnz	r0, 8005e06 <__multadd+0x5a>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005e30 <__multadd+0x84>)
 8005dfe:	480d      	ldr	r0, [pc, #52]	@ (8005e34 <__multadd+0x88>)
 8005e00:	21ba      	movs	r1, #186	@ 0xba
 8005e02:	f000 fd2f 	bl	8006864 <__assert_func>
 8005e06:	6922      	ldr	r2, [r4, #16]
 8005e08:	3202      	adds	r2, #2
 8005e0a:	f104 010c 	add.w	r1, r4, #12
 8005e0e:	0092      	lsls	r2, r2, #2
 8005e10:	300c      	adds	r0, #12
 8005e12:	f000 fd19 	bl	8006848 <memcpy>
 8005e16:	4621      	mov	r1, r4
 8005e18:	4638      	mov	r0, r7
 8005e1a:	f7ff ffa5 	bl	8005d68 <_Bfree>
 8005e1e:	4644      	mov	r4, r8
 8005e20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e24:	3501      	adds	r5, #1
 8005e26:	615e      	str	r6, [r3, #20]
 8005e28:	6125      	str	r5, [r4, #16]
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e30:	08007080 	.word	0x08007080
 8005e34:	08007091 	.word	0x08007091

08005e38 <__hi0bits>:
 8005e38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	bf36      	itet	cc
 8005e40:	0403      	lslcc	r3, r0, #16
 8005e42:	2000      	movcs	r0, #0
 8005e44:	2010      	movcc	r0, #16
 8005e46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e4a:	bf3c      	itt	cc
 8005e4c:	021b      	lslcc	r3, r3, #8
 8005e4e:	3008      	addcc	r0, #8
 8005e50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e54:	bf3c      	itt	cc
 8005e56:	011b      	lslcc	r3, r3, #4
 8005e58:	3004      	addcc	r0, #4
 8005e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e5e:	bf3c      	itt	cc
 8005e60:	009b      	lslcc	r3, r3, #2
 8005e62:	3002      	addcc	r0, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	db05      	blt.n	8005e74 <__hi0bits+0x3c>
 8005e68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005e6c:	f100 0001 	add.w	r0, r0, #1
 8005e70:	bf08      	it	eq
 8005e72:	2020      	moveq	r0, #32
 8005e74:	4770      	bx	lr

08005e76 <__lo0bits>:
 8005e76:	6803      	ldr	r3, [r0, #0]
 8005e78:	4602      	mov	r2, r0
 8005e7a:	f013 0007 	ands.w	r0, r3, #7
 8005e7e:	d00b      	beq.n	8005e98 <__lo0bits+0x22>
 8005e80:	07d9      	lsls	r1, r3, #31
 8005e82:	d421      	bmi.n	8005ec8 <__lo0bits+0x52>
 8005e84:	0798      	lsls	r0, r3, #30
 8005e86:	bf49      	itett	mi
 8005e88:	085b      	lsrmi	r3, r3, #1
 8005e8a:	089b      	lsrpl	r3, r3, #2
 8005e8c:	2001      	movmi	r0, #1
 8005e8e:	6013      	strmi	r3, [r2, #0]
 8005e90:	bf5c      	itt	pl
 8005e92:	6013      	strpl	r3, [r2, #0]
 8005e94:	2002      	movpl	r0, #2
 8005e96:	4770      	bx	lr
 8005e98:	b299      	uxth	r1, r3
 8005e9a:	b909      	cbnz	r1, 8005ea0 <__lo0bits+0x2a>
 8005e9c:	0c1b      	lsrs	r3, r3, #16
 8005e9e:	2010      	movs	r0, #16
 8005ea0:	b2d9      	uxtb	r1, r3
 8005ea2:	b909      	cbnz	r1, 8005ea8 <__lo0bits+0x32>
 8005ea4:	3008      	adds	r0, #8
 8005ea6:	0a1b      	lsrs	r3, r3, #8
 8005ea8:	0719      	lsls	r1, r3, #28
 8005eaa:	bf04      	itt	eq
 8005eac:	091b      	lsreq	r3, r3, #4
 8005eae:	3004      	addeq	r0, #4
 8005eb0:	0799      	lsls	r1, r3, #30
 8005eb2:	bf04      	itt	eq
 8005eb4:	089b      	lsreq	r3, r3, #2
 8005eb6:	3002      	addeq	r0, #2
 8005eb8:	07d9      	lsls	r1, r3, #31
 8005eba:	d403      	bmi.n	8005ec4 <__lo0bits+0x4e>
 8005ebc:	085b      	lsrs	r3, r3, #1
 8005ebe:	f100 0001 	add.w	r0, r0, #1
 8005ec2:	d003      	beq.n	8005ecc <__lo0bits+0x56>
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	4770      	bx	lr
 8005ec8:	2000      	movs	r0, #0
 8005eca:	4770      	bx	lr
 8005ecc:	2020      	movs	r0, #32
 8005ece:	4770      	bx	lr

08005ed0 <__i2b>:
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	f7ff ff07 	bl	8005ce8 <_Balloc>
 8005eda:	4602      	mov	r2, r0
 8005edc:	b928      	cbnz	r0, 8005eea <__i2b+0x1a>
 8005ede:	4b05      	ldr	r3, [pc, #20]	@ (8005ef4 <__i2b+0x24>)
 8005ee0:	4805      	ldr	r0, [pc, #20]	@ (8005ef8 <__i2b+0x28>)
 8005ee2:	f240 1145 	movw	r1, #325	@ 0x145
 8005ee6:	f000 fcbd 	bl	8006864 <__assert_func>
 8005eea:	2301      	movs	r3, #1
 8005eec:	6144      	str	r4, [r0, #20]
 8005eee:	6103      	str	r3, [r0, #16]
 8005ef0:	bd10      	pop	{r4, pc}
 8005ef2:	bf00      	nop
 8005ef4:	08007080 	.word	0x08007080
 8005ef8:	08007091 	.word	0x08007091

08005efc <__multiply>:
 8005efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f00:	4614      	mov	r4, r2
 8005f02:	690a      	ldr	r2, [r1, #16]
 8005f04:	6923      	ldr	r3, [r4, #16]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	bfa8      	it	ge
 8005f0a:	4623      	movge	r3, r4
 8005f0c:	460f      	mov	r7, r1
 8005f0e:	bfa4      	itt	ge
 8005f10:	460c      	movge	r4, r1
 8005f12:	461f      	movge	r7, r3
 8005f14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005f18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005f1c:	68a3      	ldr	r3, [r4, #8]
 8005f1e:	6861      	ldr	r1, [r4, #4]
 8005f20:	eb0a 0609 	add.w	r6, sl, r9
 8005f24:	42b3      	cmp	r3, r6
 8005f26:	b085      	sub	sp, #20
 8005f28:	bfb8      	it	lt
 8005f2a:	3101      	addlt	r1, #1
 8005f2c:	f7ff fedc 	bl	8005ce8 <_Balloc>
 8005f30:	b930      	cbnz	r0, 8005f40 <__multiply+0x44>
 8005f32:	4602      	mov	r2, r0
 8005f34:	4b44      	ldr	r3, [pc, #272]	@ (8006048 <__multiply+0x14c>)
 8005f36:	4845      	ldr	r0, [pc, #276]	@ (800604c <__multiply+0x150>)
 8005f38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005f3c:	f000 fc92 	bl	8006864 <__assert_func>
 8005f40:	f100 0514 	add.w	r5, r0, #20
 8005f44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f48:	462b      	mov	r3, r5
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	4543      	cmp	r3, r8
 8005f4e:	d321      	bcc.n	8005f94 <__multiply+0x98>
 8005f50:	f107 0114 	add.w	r1, r7, #20
 8005f54:	f104 0214 	add.w	r2, r4, #20
 8005f58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005f5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005f60:	9302      	str	r3, [sp, #8]
 8005f62:	1b13      	subs	r3, r2, r4
 8005f64:	3b15      	subs	r3, #21
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	f104 0715 	add.w	r7, r4, #21
 8005f70:	42ba      	cmp	r2, r7
 8005f72:	bf38      	it	cc
 8005f74:	2304      	movcc	r3, #4
 8005f76:	9301      	str	r3, [sp, #4]
 8005f78:	9b02      	ldr	r3, [sp, #8]
 8005f7a:	9103      	str	r1, [sp, #12]
 8005f7c:	428b      	cmp	r3, r1
 8005f7e:	d80c      	bhi.n	8005f9a <__multiply+0x9e>
 8005f80:	2e00      	cmp	r6, #0
 8005f82:	dd03      	ble.n	8005f8c <__multiply+0x90>
 8005f84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d05b      	beq.n	8006044 <__multiply+0x148>
 8005f8c:	6106      	str	r6, [r0, #16]
 8005f8e:	b005      	add	sp, #20
 8005f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f94:	f843 2b04 	str.w	r2, [r3], #4
 8005f98:	e7d8      	b.n	8005f4c <__multiply+0x50>
 8005f9a:	f8b1 a000 	ldrh.w	sl, [r1]
 8005f9e:	f1ba 0f00 	cmp.w	sl, #0
 8005fa2:	d024      	beq.n	8005fee <__multiply+0xf2>
 8005fa4:	f104 0e14 	add.w	lr, r4, #20
 8005fa8:	46a9      	mov	r9, r5
 8005faa:	f04f 0c00 	mov.w	ip, #0
 8005fae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005fb2:	f8d9 3000 	ldr.w	r3, [r9]
 8005fb6:	fa1f fb87 	uxth.w	fp, r7
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	fb0a 330b 	mla	r3, sl, fp, r3
 8005fc0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005fc4:	f8d9 7000 	ldr.w	r7, [r9]
 8005fc8:	4463      	add	r3, ip
 8005fca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005fce:	fb0a c70b 	mla	r7, sl, fp, ip
 8005fd2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005fdc:	4572      	cmp	r2, lr
 8005fde:	f849 3b04 	str.w	r3, [r9], #4
 8005fe2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005fe6:	d8e2      	bhi.n	8005fae <__multiply+0xb2>
 8005fe8:	9b01      	ldr	r3, [sp, #4]
 8005fea:	f845 c003 	str.w	ip, [r5, r3]
 8005fee:	9b03      	ldr	r3, [sp, #12]
 8005ff0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005ff4:	3104      	adds	r1, #4
 8005ff6:	f1b9 0f00 	cmp.w	r9, #0
 8005ffa:	d021      	beq.n	8006040 <__multiply+0x144>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	f104 0c14 	add.w	ip, r4, #20
 8006002:	46ae      	mov	lr, r5
 8006004:	f04f 0a00 	mov.w	sl, #0
 8006008:	f8bc b000 	ldrh.w	fp, [ip]
 800600c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006010:	fb09 770b 	mla	r7, r9, fp, r7
 8006014:	4457      	add	r7, sl
 8006016:	b29b      	uxth	r3, r3
 8006018:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800601c:	f84e 3b04 	str.w	r3, [lr], #4
 8006020:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006024:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006028:	f8be 3000 	ldrh.w	r3, [lr]
 800602c:	fb09 330a 	mla	r3, r9, sl, r3
 8006030:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006034:	4562      	cmp	r2, ip
 8006036:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800603a:	d8e5      	bhi.n	8006008 <__multiply+0x10c>
 800603c:	9f01      	ldr	r7, [sp, #4]
 800603e:	51eb      	str	r3, [r5, r7]
 8006040:	3504      	adds	r5, #4
 8006042:	e799      	b.n	8005f78 <__multiply+0x7c>
 8006044:	3e01      	subs	r6, #1
 8006046:	e79b      	b.n	8005f80 <__multiply+0x84>
 8006048:	08007080 	.word	0x08007080
 800604c:	08007091 	.word	0x08007091

08006050 <__pow5mult>:
 8006050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006054:	4615      	mov	r5, r2
 8006056:	f012 0203 	ands.w	r2, r2, #3
 800605a:	4607      	mov	r7, r0
 800605c:	460e      	mov	r6, r1
 800605e:	d007      	beq.n	8006070 <__pow5mult+0x20>
 8006060:	4c25      	ldr	r4, [pc, #148]	@ (80060f8 <__pow5mult+0xa8>)
 8006062:	3a01      	subs	r2, #1
 8006064:	2300      	movs	r3, #0
 8006066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800606a:	f7ff fe9f 	bl	8005dac <__multadd>
 800606e:	4606      	mov	r6, r0
 8006070:	10ad      	asrs	r5, r5, #2
 8006072:	d03d      	beq.n	80060f0 <__pow5mult+0xa0>
 8006074:	69fc      	ldr	r4, [r7, #28]
 8006076:	b97c      	cbnz	r4, 8006098 <__pow5mult+0x48>
 8006078:	2010      	movs	r0, #16
 800607a:	f7ff fd7f 	bl	8005b7c <malloc>
 800607e:	4602      	mov	r2, r0
 8006080:	61f8      	str	r0, [r7, #28]
 8006082:	b928      	cbnz	r0, 8006090 <__pow5mult+0x40>
 8006084:	4b1d      	ldr	r3, [pc, #116]	@ (80060fc <__pow5mult+0xac>)
 8006086:	481e      	ldr	r0, [pc, #120]	@ (8006100 <__pow5mult+0xb0>)
 8006088:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800608c:	f000 fbea 	bl	8006864 <__assert_func>
 8006090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006094:	6004      	str	r4, [r0, #0]
 8006096:	60c4      	str	r4, [r0, #12]
 8006098:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800609c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060a0:	b94c      	cbnz	r4, 80060b6 <__pow5mult+0x66>
 80060a2:	f240 2171 	movw	r1, #625	@ 0x271
 80060a6:	4638      	mov	r0, r7
 80060a8:	f7ff ff12 	bl	8005ed0 <__i2b>
 80060ac:	2300      	movs	r3, #0
 80060ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80060b2:	4604      	mov	r4, r0
 80060b4:	6003      	str	r3, [r0, #0]
 80060b6:	f04f 0900 	mov.w	r9, #0
 80060ba:	07eb      	lsls	r3, r5, #31
 80060bc:	d50a      	bpl.n	80060d4 <__pow5mult+0x84>
 80060be:	4631      	mov	r1, r6
 80060c0:	4622      	mov	r2, r4
 80060c2:	4638      	mov	r0, r7
 80060c4:	f7ff ff1a 	bl	8005efc <__multiply>
 80060c8:	4631      	mov	r1, r6
 80060ca:	4680      	mov	r8, r0
 80060cc:	4638      	mov	r0, r7
 80060ce:	f7ff fe4b 	bl	8005d68 <_Bfree>
 80060d2:	4646      	mov	r6, r8
 80060d4:	106d      	asrs	r5, r5, #1
 80060d6:	d00b      	beq.n	80060f0 <__pow5mult+0xa0>
 80060d8:	6820      	ldr	r0, [r4, #0]
 80060da:	b938      	cbnz	r0, 80060ec <__pow5mult+0x9c>
 80060dc:	4622      	mov	r2, r4
 80060de:	4621      	mov	r1, r4
 80060e0:	4638      	mov	r0, r7
 80060e2:	f7ff ff0b 	bl	8005efc <__multiply>
 80060e6:	6020      	str	r0, [r4, #0]
 80060e8:	f8c0 9000 	str.w	r9, [r0]
 80060ec:	4604      	mov	r4, r0
 80060ee:	e7e4      	b.n	80060ba <__pow5mult+0x6a>
 80060f0:	4630      	mov	r0, r6
 80060f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060f6:	bf00      	nop
 80060f8:	080070ec 	.word	0x080070ec
 80060fc:	08007011 	.word	0x08007011
 8006100:	08007091 	.word	0x08007091

08006104 <__lshift>:
 8006104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006108:	460c      	mov	r4, r1
 800610a:	6849      	ldr	r1, [r1, #4]
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006112:	68a3      	ldr	r3, [r4, #8]
 8006114:	4607      	mov	r7, r0
 8006116:	4691      	mov	r9, r2
 8006118:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800611c:	f108 0601 	add.w	r6, r8, #1
 8006120:	42b3      	cmp	r3, r6
 8006122:	db0b      	blt.n	800613c <__lshift+0x38>
 8006124:	4638      	mov	r0, r7
 8006126:	f7ff fddf 	bl	8005ce8 <_Balloc>
 800612a:	4605      	mov	r5, r0
 800612c:	b948      	cbnz	r0, 8006142 <__lshift+0x3e>
 800612e:	4602      	mov	r2, r0
 8006130:	4b28      	ldr	r3, [pc, #160]	@ (80061d4 <__lshift+0xd0>)
 8006132:	4829      	ldr	r0, [pc, #164]	@ (80061d8 <__lshift+0xd4>)
 8006134:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006138:	f000 fb94 	bl	8006864 <__assert_func>
 800613c:	3101      	adds	r1, #1
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	e7ee      	b.n	8006120 <__lshift+0x1c>
 8006142:	2300      	movs	r3, #0
 8006144:	f100 0114 	add.w	r1, r0, #20
 8006148:	f100 0210 	add.w	r2, r0, #16
 800614c:	4618      	mov	r0, r3
 800614e:	4553      	cmp	r3, sl
 8006150:	db33      	blt.n	80061ba <__lshift+0xb6>
 8006152:	6920      	ldr	r0, [r4, #16]
 8006154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006158:	f104 0314 	add.w	r3, r4, #20
 800615c:	f019 091f 	ands.w	r9, r9, #31
 8006160:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006164:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006168:	d02b      	beq.n	80061c2 <__lshift+0xbe>
 800616a:	f1c9 0e20 	rsb	lr, r9, #32
 800616e:	468a      	mov	sl, r1
 8006170:	2200      	movs	r2, #0
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	fa00 f009 	lsl.w	r0, r0, r9
 8006178:	4310      	orrs	r0, r2
 800617a:	f84a 0b04 	str.w	r0, [sl], #4
 800617e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006182:	459c      	cmp	ip, r3
 8006184:	fa22 f20e 	lsr.w	r2, r2, lr
 8006188:	d8f3      	bhi.n	8006172 <__lshift+0x6e>
 800618a:	ebac 0304 	sub.w	r3, ip, r4
 800618e:	3b15      	subs	r3, #21
 8006190:	f023 0303 	bic.w	r3, r3, #3
 8006194:	3304      	adds	r3, #4
 8006196:	f104 0015 	add.w	r0, r4, #21
 800619a:	4584      	cmp	ip, r0
 800619c:	bf38      	it	cc
 800619e:	2304      	movcc	r3, #4
 80061a0:	50ca      	str	r2, [r1, r3]
 80061a2:	b10a      	cbz	r2, 80061a8 <__lshift+0xa4>
 80061a4:	f108 0602 	add.w	r6, r8, #2
 80061a8:	3e01      	subs	r6, #1
 80061aa:	4638      	mov	r0, r7
 80061ac:	612e      	str	r6, [r5, #16]
 80061ae:	4621      	mov	r1, r4
 80061b0:	f7ff fdda 	bl	8005d68 <_Bfree>
 80061b4:	4628      	mov	r0, r5
 80061b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80061be:	3301      	adds	r3, #1
 80061c0:	e7c5      	b.n	800614e <__lshift+0x4a>
 80061c2:	3904      	subs	r1, #4
 80061c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80061cc:	459c      	cmp	ip, r3
 80061ce:	d8f9      	bhi.n	80061c4 <__lshift+0xc0>
 80061d0:	e7ea      	b.n	80061a8 <__lshift+0xa4>
 80061d2:	bf00      	nop
 80061d4:	08007080 	.word	0x08007080
 80061d8:	08007091 	.word	0x08007091

080061dc <__mcmp>:
 80061dc:	690a      	ldr	r2, [r1, #16]
 80061de:	4603      	mov	r3, r0
 80061e0:	6900      	ldr	r0, [r0, #16]
 80061e2:	1a80      	subs	r0, r0, r2
 80061e4:	b530      	push	{r4, r5, lr}
 80061e6:	d10e      	bne.n	8006206 <__mcmp+0x2a>
 80061e8:	3314      	adds	r3, #20
 80061ea:	3114      	adds	r1, #20
 80061ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80061f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80061f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061fc:	4295      	cmp	r5, r2
 80061fe:	d003      	beq.n	8006208 <__mcmp+0x2c>
 8006200:	d205      	bcs.n	800620e <__mcmp+0x32>
 8006202:	f04f 30ff 	mov.w	r0, #4294967295
 8006206:	bd30      	pop	{r4, r5, pc}
 8006208:	42a3      	cmp	r3, r4
 800620a:	d3f3      	bcc.n	80061f4 <__mcmp+0x18>
 800620c:	e7fb      	b.n	8006206 <__mcmp+0x2a>
 800620e:	2001      	movs	r0, #1
 8006210:	e7f9      	b.n	8006206 <__mcmp+0x2a>
	...

08006214 <__mdiff>:
 8006214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006218:	4689      	mov	r9, r1
 800621a:	4606      	mov	r6, r0
 800621c:	4611      	mov	r1, r2
 800621e:	4648      	mov	r0, r9
 8006220:	4614      	mov	r4, r2
 8006222:	f7ff ffdb 	bl	80061dc <__mcmp>
 8006226:	1e05      	subs	r5, r0, #0
 8006228:	d112      	bne.n	8006250 <__mdiff+0x3c>
 800622a:	4629      	mov	r1, r5
 800622c:	4630      	mov	r0, r6
 800622e:	f7ff fd5b 	bl	8005ce8 <_Balloc>
 8006232:	4602      	mov	r2, r0
 8006234:	b928      	cbnz	r0, 8006242 <__mdiff+0x2e>
 8006236:	4b3f      	ldr	r3, [pc, #252]	@ (8006334 <__mdiff+0x120>)
 8006238:	f240 2137 	movw	r1, #567	@ 0x237
 800623c:	483e      	ldr	r0, [pc, #248]	@ (8006338 <__mdiff+0x124>)
 800623e:	f000 fb11 	bl	8006864 <__assert_func>
 8006242:	2301      	movs	r3, #1
 8006244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006248:	4610      	mov	r0, r2
 800624a:	b003      	add	sp, #12
 800624c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006250:	bfbc      	itt	lt
 8006252:	464b      	movlt	r3, r9
 8006254:	46a1      	movlt	r9, r4
 8006256:	4630      	mov	r0, r6
 8006258:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800625c:	bfba      	itte	lt
 800625e:	461c      	movlt	r4, r3
 8006260:	2501      	movlt	r5, #1
 8006262:	2500      	movge	r5, #0
 8006264:	f7ff fd40 	bl	8005ce8 <_Balloc>
 8006268:	4602      	mov	r2, r0
 800626a:	b918      	cbnz	r0, 8006274 <__mdiff+0x60>
 800626c:	4b31      	ldr	r3, [pc, #196]	@ (8006334 <__mdiff+0x120>)
 800626e:	f240 2145 	movw	r1, #581	@ 0x245
 8006272:	e7e3      	b.n	800623c <__mdiff+0x28>
 8006274:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006278:	6926      	ldr	r6, [r4, #16]
 800627a:	60c5      	str	r5, [r0, #12]
 800627c:	f109 0310 	add.w	r3, r9, #16
 8006280:	f109 0514 	add.w	r5, r9, #20
 8006284:	f104 0e14 	add.w	lr, r4, #20
 8006288:	f100 0b14 	add.w	fp, r0, #20
 800628c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006290:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	46d9      	mov	r9, fp
 8006298:	f04f 0c00 	mov.w	ip, #0
 800629c:	9b01      	ldr	r3, [sp, #4]
 800629e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80062a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80062a6:	9301      	str	r3, [sp, #4]
 80062a8:	fa1f f38a 	uxth.w	r3, sl
 80062ac:	4619      	mov	r1, r3
 80062ae:	b283      	uxth	r3, r0
 80062b0:	1acb      	subs	r3, r1, r3
 80062b2:	0c00      	lsrs	r0, r0, #16
 80062b4:	4463      	add	r3, ip
 80062b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80062ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80062be:	b29b      	uxth	r3, r3
 80062c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80062c4:	4576      	cmp	r6, lr
 80062c6:	f849 3b04 	str.w	r3, [r9], #4
 80062ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80062ce:	d8e5      	bhi.n	800629c <__mdiff+0x88>
 80062d0:	1b33      	subs	r3, r6, r4
 80062d2:	3b15      	subs	r3, #21
 80062d4:	f023 0303 	bic.w	r3, r3, #3
 80062d8:	3415      	adds	r4, #21
 80062da:	3304      	adds	r3, #4
 80062dc:	42a6      	cmp	r6, r4
 80062de:	bf38      	it	cc
 80062e0:	2304      	movcc	r3, #4
 80062e2:	441d      	add	r5, r3
 80062e4:	445b      	add	r3, fp
 80062e6:	461e      	mov	r6, r3
 80062e8:	462c      	mov	r4, r5
 80062ea:	4544      	cmp	r4, r8
 80062ec:	d30e      	bcc.n	800630c <__mdiff+0xf8>
 80062ee:	f108 0103 	add.w	r1, r8, #3
 80062f2:	1b49      	subs	r1, r1, r5
 80062f4:	f021 0103 	bic.w	r1, r1, #3
 80062f8:	3d03      	subs	r5, #3
 80062fa:	45a8      	cmp	r8, r5
 80062fc:	bf38      	it	cc
 80062fe:	2100      	movcc	r1, #0
 8006300:	440b      	add	r3, r1
 8006302:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006306:	b191      	cbz	r1, 800632e <__mdiff+0x11a>
 8006308:	6117      	str	r7, [r2, #16]
 800630a:	e79d      	b.n	8006248 <__mdiff+0x34>
 800630c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006310:	46e6      	mov	lr, ip
 8006312:	0c08      	lsrs	r0, r1, #16
 8006314:	fa1c fc81 	uxtah	ip, ip, r1
 8006318:	4471      	add	r1, lr
 800631a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800631e:	b289      	uxth	r1, r1
 8006320:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006324:	f846 1b04 	str.w	r1, [r6], #4
 8006328:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800632c:	e7dd      	b.n	80062ea <__mdiff+0xd6>
 800632e:	3f01      	subs	r7, #1
 8006330:	e7e7      	b.n	8006302 <__mdiff+0xee>
 8006332:	bf00      	nop
 8006334:	08007080 	.word	0x08007080
 8006338:	08007091 	.word	0x08007091

0800633c <__d2b>:
 800633c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006340:	460f      	mov	r7, r1
 8006342:	2101      	movs	r1, #1
 8006344:	ec59 8b10 	vmov	r8, r9, d0
 8006348:	4616      	mov	r6, r2
 800634a:	f7ff fccd 	bl	8005ce8 <_Balloc>
 800634e:	4604      	mov	r4, r0
 8006350:	b930      	cbnz	r0, 8006360 <__d2b+0x24>
 8006352:	4602      	mov	r2, r0
 8006354:	4b23      	ldr	r3, [pc, #140]	@ (80063e4 <__d2b+0xa8>)
 8006356:	4824      	ldr	r0, [pc, #144]	@ (80063e8 <__d2b+0xac>)
 8006358:	f240 310f 	movw	r1, #783	@ 0x30f
 800635c:	f000 fa82 	bl	8006864 <__assert_func>
 8006360:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006364:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006368:	b10d      	cbz	r5, 800636e <__d2b+0x32>
 800636a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800636e:	9301      	str	r3, [sp, #4]
 8006370:	f1b8 0300 	subs.w	r3, r8, #0
 8006374:	d023      	beq.n	80063be <__d2b+0x82>
 8006376:	4668      	mov	r0, sp
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	f7ff fd7c 	bl	8005e76 <__lo0bits>
 800637e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006382:	b1d0      	cbz	r0, 80063ba <__d2b+0x7e>
 8006384:	f1c0 0320 	rsb	r3, r0, #32
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	430b      	orrs	r3, r1
 800638e:	40c2      	lsrs	r2, r0
 8006390:	6163      	str	r3, [r4, #20]
 8006392:	9201      	str	r2, [sp, #4]
 8006394:	9b01      	ldr	r3, [sp, #4]
 8006396:	61a3      	str	r3, [r4, #24]
 8006398:	2b00      	cmp	r3, #0
 800639a:	bf0c      	ite	eq
 800639c:	2201      	moveq	r2, #1
 800639e:	2202      	movne	r2, #2
 80063a0:	6122      	str	r2, [r4, #16]
 80063a2:	b1a5      	cbz	r5, 80063ce <__d2b+0x92>
 80063a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80063a8:	4405      	add	r5, r0
 80063aa:	603d      	str	r5, [r7, #0]
 80063ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80063b0:	6030      	str	r0, [r6, #0]
 80063b2:	4620      	mov	r0, r4
 80063b4:	b003      	add	sp, #12
 80063b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063ba:	6161      	str	r1, [r4, #20]
 80063bc:	e7ea      	b.n	8006394 <__d2b+0x58>
 80063be:	a801      	add	r0, sp, #4
 80063c0:	f7ff fd59 	bl	8005e76 <__lo0bits>
 80063c4:	9b01      	ldr	r3, [sp, #4]
 80063c6:	6163      	str	r3, [r4, #20]
 80063c8:	3020      	adds	r0, #32
 80063ca:	2201      	movs	r2, #1
 80063cc:	e7e8      	b.n	80063a0 <__d2b+0x64>
 80063ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80063d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80063d6:	6038      	str	r0, [r7, #0]
 80063d8:	6918      	ldr	r0, [r3, #16]
 80063da:	f7ff fd2d 	bl	8005e38 <__hi0bits>
 80063de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80063e2:	e7e5      	b.n	80063b0 <__d2b+0x74>
 80063e4:	08007080 	.word	0x08007080
 80063e8:	08007091 	.word	0x08007091

080063ec <__ssputs_r>:
 80063ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f0:	688e      	ldr	r6, [r1, #8]
 80063f2:	461f      	mov	r7, r3
 80063f4:	42be      	cmp	r6, r7
 80063f6:	680b      	ldr	r3, [r1, #0]
 80063f8:	4682      	mov	sl, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	4690      	mov	r8, r2
 80063fe:	d82d      	bhi.n	800645c <__ssputs_r+0x70>
 8006400:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006404:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006408:	d026      	beq.n	8006458 <__ssputs_r+0x6c>
 800640a:	6965      	ldr	r5, [r4, #20]
 800640c:	6909      	ldr	r1, [r1, #16]
 800640e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006412:	eba3 0901 	sub.w	r9, r3, r1
 8006416:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800641a:	1c7b      	adds	r3, r7, #1
 800641c:	444b      	add	r3, r9
 800641e:	106d      	asrs	r5, r5, #1
 8006420:	429d      	cmp	r5, r3
 8006422:	bf38      	it	cc
 8006424:	461d      	movcc	r5, r3
 8006426:	0553      	lsls	r3, r2, #21
 8006428:	d527      	bpl.n	800647a <__ssputs_r+0x8e>
 800642a:	4629      	mov	r1, r5
 800642c:	f7ff fbd0 	bl	8005bd0 <_malloc_r>
 8006430:	4606      	mov	r6, r0
 8006432:	b360      	cbz	r0, 800648e <__ssputs_r+0xa2>
 8006434:	6921      	ldr	r1, [r4, #16]
 8006436:	464a      	mov	r2, r9
 8006438:	f000 fa06 	bl	8006848 <memcpy>
 800643c:	89a3      	ldrh	r3, [r4, #12]
 800643e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006446:	81a3      	strh	r3, [r4, #12]
 8006448:	6126      	str	r6, [r4, #16]
 800644a:	6165      	str	r5, [r4, #20]
 800644c:	444e      	add	r6, r9
 800644e:	eba5 0509 	sub.w	r5, r5, r9
 8006452:	6026      	str	r6, [r4, #0]
 8006454:	60a5      	str	r5, [r4, #8]
 8006456:	463e      	mov	r6, r7
 8006458:	42be      	cmp	r6, r7
 800645a:	d900      	bls.n	800645e <__ssputs_r+0x72>
 800645c:	463e      	mov	r6, r7
 800645e:	6820      	ldr	r0, [r4, #0]
 8006460:	4632      	mov	r2, r6
 8006462:	4641      	mov	r1, r8
 8006464:	f000 f9c6 	bl	80067f4 <memmove>
 8006468:	68a3      	ldr	r3, [r4, #8]
 800646a:	1b9b      	subs	r3, r3, r6
 800646c:	60a3      	str	r3, [r4, #8]
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	4433      	add	r3, r6
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	2000      	movs	r0, #0
 8006476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647a:	462a      	mov	r2, r5
 800647c:	f000 fa36 	bl	80068ec <_realloc_r>
 8006480:	4606      	mov	r6, r0
 8006482:	2800      	cmp	r0, #0
 8006484:	d1e0      	bne.n	8006448 <__ssputs_r+0x5c>
 8006486:	6921      	ldr	r1, [r4, #16]
 8006488:	4650      	mov	r0, sl
 800648a:	f7ff fb2d 	bl	8005ae8 <_free_r>
 800648e:	230c      	movs	r3, #12
 8006490:	f8ca 3000 	str.w	r3, [sl]
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800649a:	81a3      	strh	r3, [r4, #12]
 800649c:	f04f 30ff 	mov.w	r0, #4294967295
 80064a0:	e7e9      	b.n	8006476 <__ssputs_r+0x8a>
	...

080064a4 <_svfiprintf_r>:
 80064a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a8:	4698      	mov	r8, r3
 80064aa:	898b      	ldrh	r3, [r1, #12]
 80064ac:	061b      	lsls	r3, r3, #24
 80064ae:	b09d      	sub	sp, #116	@ 0x74
 80064b0:	4607      	mov	r7, r0
 80064b2:	460d      	mov	r5, r1
 80064b4:	4614      	mov	r4, r2
 80064b6:	d510      	bpl.n	80064da <_svfiprintf_r+0x36>
 80064b8:	690b      	ldr	r3, [r1, #16]
 80064ba:	b973      	cbnz	r3, 80064da <_svfiprintf_r+0x36>
 80064bc:	2140      	movs	r1, #64	@ 0x40
 80064be:	f7ff fb87 	bl	8005bd0 <_malloc_r>
 80064c2:	6028      	str	r0, [r5, #0]
 80064c4:	6128      	str	r0, [r5, #16]
 80064c6:	b930      	cbnz	r0, 80064d6 <_svfiprintf_r+0x32>
 80064c8:	230c      	movs	r3, #12
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	b01d      	add	sp, #116	@ 0x74
 80064d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d6:	2340      	movs	r3, #64	@ 0x40
 80064d8:	616b      	str	r3, [r5, #20]
 80064da:	2300      	movs	r3, #0
 80064dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80064de:	2320      	movs	r3, #32
 80064e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80064e8:	2330      	movs	r3, #48	@ 0x30
 80064ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006688 <_svfiprintf_r+0x1e4>
 80064ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064f2:	f04f 0901 	mov.w	r9, #1
 80064f6:	4623      	mov	r3, r4
 80064f8:	469a      	mov	sl, r3
 80064fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064fe:	b10a      	cbz	r2, 8006504 <_svfiprintf_r+0x60>
 8006500:	2a25      	cmp	r2, #37	@ 0x25
 8006502:	d1f9      	bne.n	80064f8 <_svfiprintf_r+0x54>
 8006504:	ebba 0b04 	subs.w	fp, sl, r4
 8006508:	d00b      	beq.n	8006522 <_svfiprintf_r+0x7e>
 800650a:	465b      	mov	r3, fp
 800650c:	4622      	mov	r2, r4
 800650e:	4629      	mov	r1, r5
 8006510:	4638      	mov	r0, r7
 8006512:	f7ff ff6b 	bl	80063ec <__ssputs_r>
 8006516:	3001      	adds	r0, #1
 8006518:	f000 80a7 	beq.w	800666a <_svfiprintf_r+0x1c6>
 800651c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800651e:	445a      	add	r2, fp
 8006520:	9209      	str	r2, [sp, #36]	@ 0x24
 8006522:	f89a 3000 	ldrb.w	r3, [sl]
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 809f 	beq.w	800666a <_svfiprintf_r+0x1c6>
 800652c:	2300      	movs	r3, #0
 800652e:	f04f 32ff 	mov.w	r2, #4294967295
 8006532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006536:	f10a 0a01 	add.w	sl, sl, #1
 800653a:	9304      	str	r3, [sp, #16]
 800653c:	9307      	str	r3, [sp, #28]
 800653e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006542:	931a      	str	r3, [sp, #104]	@ 0x68
 8006544:	4654      	mov	r4, sl
 8006546:	2205      	movs	r2, #5
 8006548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800654c:	484e      	ldr	r0, [pc, #312]	@ (8006688 <_svfiprintf_r+0x1e4>)
 800654e:	f7f9 fe5f 	bl	8000210 <memchr>
 8006552:	9a04      	ldr	r2, [sp, #16]
 8006554:	b9d8      	cbnz	r0, 800658e <_svfiprintf_r+0xea>
 8006556:	06d0      	lsls	r0, r2, #27
 8006558:	bf44      	itt	mi
 800655a:	2320      	movmi	r3, #32
 800655c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006560:	0711      	lsls	r1, r2, #28
 8006562:	bf44      	itt	mi
 8006564:	232b      	movmi	r3, #43	@ 0x2b
 8006566:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800656a:	f89a 3000 	ldrb.w	r3, [sl]
 800656e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006570:	d015      	beq.n	800659e <_svfiprintf_r+0xfa>
 8006572:	9a07      	ldr	r2, [sp, #28]
 8006574:	4654      	mov	r4, sl
 8006576:	2000      	movs	r0, #0
 8006578:	f04f 0c0a 	mov.w	ip, #10
 800657c:	4621      	mov	r1, r4
 800657e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006582:	3b30      	subs	r3, #48	@ 0x30
 8006584:	2b09      	cmp	r3, #9
 8006586:	d94b      	bls.n	8006620 <_svfiprintf_r+0x17c>
 8006588:	b1b0      	cbz	r0, 80065b8 <_svfiprintf_r+0x114>
 800658a:	9207      	str	r2, [sp, #28]
 800658c:	e014      	b.n	80065b8 <_svfiprintf_r+0x114>
 800658e:	eba0 0308 	sub.w	r3, r0, r8
 8006592:	fa09 f303 	lsl.w	r3, r9, r3
 8006596:	4313      	orrs	r3, r2
 8006598:	9304      	str	r3, [sp, #16]
 800659a:	46a2      	mov	sl, r4
 800659c:	e7d2      	b.n	8006544 <_svfiprintf_r+0xa0>
 800659e:	9b03      	ldr	r3, [sp, #12]
 80065a0:	1d19      	adds	r1, r3, #4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	9103      	str	r1, [sp, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	bfbb      	ittet	lt
 80065aa:	425b      	neglt	r3, r3
 80065ac:	f042 0202 	orrlt.w	r2, r2, #2
 80065b0:	9307      	strge	r3, [sp, #28]
 80065b2:	9307      	strlt	r3, [sp, #28]
 80065b4:	bfb8      	it	lt
 80065b6:	9204      	strlt	r2, [sp, #16]
 80065b8:	7823      	ldrb	r3, [r4, #0]
 80065ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80065bc:	d10a      	bne.n	80065d4 <_svfiprintf_r+0x130>
 80065be:	7863      	ldrb	r3, [r4, #1]
 80065c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80065c2:	d132      	bne.n	800662a <_svfiprintf_r+0x186>
 80065c4:	9b03      	ldr	r3, [sp, #12]
 80065c6:	1d1a      	adds	r2, r3, #4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	9203      	str	r2, [sp, #12]
 80065cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065d0:	3402      	adds	r4, #2
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006698 <_svfiprintf_r+0x1f4>
 80065d8:	7821      	ldrb	r1, [r4, #0]
 80065da:	2203      	movs	r2, #3
 80065dc:	4650      	mov	r0, sl
 80065de:	f7f9 fe17 	bl	8000210 <memchr>
 80065e2:	b138      	cbz	r0, 80065f4 <_svfiprintf_r+0x150>
 80065e4:	9b04      	ldr	r3, [sp, #16]
 80065e6:	eba0 000a 	sub.w	r0, r0, sl
 80065ea:	2240      	movs	r2, #64	@ 0x40
 80065ec:	4082      	lsls	r2, r0
 80065ee:	4313      	orrs	r3, r2
 80065f0:	3401      	adds	r4, #1
 80065f2:	9304      	str	r3, [sp, #16]
 80065f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f8:	4824      	ldr	r0, [pc, #144]	@ (800668c <_svfiprintf_r+0x1e8>)
 80065fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065fe:	2206      	movs	r2, #6
 8006600:	f7f9 fe06 	bl	8000210 <memchr>
 8006604:	2800      	cmp	r0, #0
 8006606:	d036      	beq.n	8006676 <_svfiprintf_r+0x1d2>
 8006608:	4b21      	ldr	r3, [pc, #132]	@ (8006690 <_svfiprintf_r+0x1ec>)
 800660a:	bb1b      	cbnz	r3, 8006654 <_svfiprintf_r+0x1b0>
 800660c:	9b03      	ldr	r3, [sp, #12]
 800660e:	3307      	adds	r3, #7
 8006610:	f023 0307 	bic.w	r3, r3, #7
 8006614:	3308      	adds	r3, #8
 8006616:	9303      	str	r3, [sp, #12]
 8006618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800661a:	4433      	add	r3, r6
 800661c:	9309      	str	r3, [sp, #36]	@ 0x24
 800661e:	e76a      	b.n	80064f6 <_svfiprintf_r+0x52>
 8006620:	fb0c 3202 	mla	r2, ip, r2, r3
 8006624:	460c      	mov	r4, r1
 8006626:	2001      	movs	r0, #1
 8006628:	e7a8      	b.n	800657c <_svfiprintf_r+0xd8>
 800662a:	2300      	movs	r3, #0
 800662c:	3401      	adds	r4, #1
 800662e:	9305      	str	r3, [sp, #20]
 8006630:	4619      	mov	r1, r3
 8006632:	f04f 0c0a 	mov.w	ip, #10
 8006636:	4620      	mov	r0, r4
 8006638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800663c:	3a30      	subs	r2, #48	@ 0x30
 800663e:	2a09      	cmp	r2, #9
 8006640:	d903      	bls.n	800664a <_svfiprintf_r+0x1a6>
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0c6      	beq.n	80065d4 <_svfiprintf_r+0x130>
 8006646:	9105      	str	r1, [sp, #20]
 8006648:	e7c4      	b.n	80065d4 <_svfiprintf_r+0x130>
 800664a:	fb0c 2101 	mla	r1, ip, r1, r2
 800664e:	4604      	mov	r4, r0
 8006650:	2301      	movs	r3, #1
 8006652:	e7f0      	b.n	8006636 <_svfiprintf_r+0x192>
 8006654:	ab03      	add	r3, sp, #12
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	462a      	mov	r2, r5
 800665a:	4b0e      	ldr	r3, [pc, #56]	@ (8006694 <_svfiprintf_r+0x1f0>)
 800665c:	a904      	add	r1, sp, #16
 800665e:	4638      	mov	r0, r7
 8006660:	f7fd fe84 	bl	800436c <_printf_float>
 8006664:	1c42      	adds	r2, r0, #1
 8006666:	4606      	mov	r6, r0
 8006668:	d1d6      	bne.n	8006618 <_svfiprintf_r+0x174>
 800666a:	89ab      	ldrh	r3, [r5, #12]
 800666c:	065b      	lsls	r3, r3, #25
 800666e:	f53f af2d 	bmi.w	80064cc <_svfiprintf_r+0x28>
 8006672:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006674:	e72c      	b.n	80064d0 <_svfiprintf_r+0x2c>
 8006676:	ab03      	add	r3, sp, #12
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	462a      	mov	r2, r5
 800667c:	4b05      	ldr	r3, [pc, #20]	@ (8006694 <_svfiprintf_r+0x1f0>)
 800667e:	a904      	add	r1, sp, #16
 8006680:	4638      	mov	r0, r7
 8006682:	f7fe f90b 	bl	800489c <_printf_i>
 8006686:	e7ed      	b.n	8006664 <_svfiprintf_r+0x1c0>
 8006688:	080071e8 	.word	0x080071e8
 800668c:	080071f2 	.word	0x080071f2
 8006690:	0800436d 	.word	0x0800436d
 8006694:	080063ed 	.word	0x080063ed
 8006698:	080071ee 	.word	0x080071ee

0800669c <__sflush_r>:
 800669c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a4:	0716      	lsls	r6, r2, #28
 80066a6:	4605      	mov	r5, r0
 80066a8:	460c      	mov	r4, r1
 80066aa:	d454      	bmi.n	8006756 <__sflush_r+0xba>
 80066ac:	684b      	ldr	r3, [r1, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	dc02      	bgt.n	80066b8 <__sflush_r+0x1c>
 80066b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	dd48      	ble.n	800674a <__sflush_r+0xae>
 80066b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066ba:	2e00      	cmp	r6, #0
 80066bc:	d045      	beq.n	800674a <__sflush_r+0xae>
 80066be:	2300      	movs	r3, #0
 80066c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80066c4:	682f      	ldr	r7, [r5, #0]
 80066c6:	6a21      	ldr	r1, [r4, #32]
 80066c8:	602b      	str	r3, [r5, #0]
 80066ca:	d030      	beq.n	800672e <__sflush_r+0x92>
 80066cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	0759      	lsls	r1, r3, #29
 80066d2:	d505      	bpl.n	80066e0 <__sflush_r+0x44>
 80066d4:	6863      	ldr	r3, [r4, #4]
 80066d6:	1ad2      	subs	r2, r2, r3
 80066d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066da:	b10b      	cbz	r3, 80066e0 <__sflush_r+0x44>
 80066dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066de:	1ad2      	subs	r2, r2, r3
 80066e0:	2300      	movs	r3, #0
 80066e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066e4:	6a21      	ldr	r1, [r4, #32]
 80066e6:	4628      	mov	r0, r5
 80066e8:	47b0      	blx	r6
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	d106      	bne.n	80066fe <__sflush_r+0x62>
 80066f0:	6829      	ldr	r1, [r5, #0]
 80066f2:	291d      	cmp	r1, #29
 80066f4:	d82b      	bhi.n	800674e <__sflush_r+0xb2>
 80066f6:	4a2a      	ldr	r2, [pc, #168]	@ (80067a0 <__sflush_r+0x104>)
 80066f8:	410a      	asrs	r2, r1
 80066fa:	07d6      	lsls	r6, r2, #31
 80066fc:	d427      	bmi.n	800674e <__sflush_r+0xb2>
 80066fe:	2200      	movs	r2, #0
 8006700:	6062      	str	r2, [r4, #4]
 8006702:	04d9      	lsls	r1, r3, #19
 8006704:	6922      	ldr	r2, [r4, #16]
 8006706:	6022      	str	r2, [r4, #0]
 8006708:	d504      	bpl.n	8006714 <__sflush_r+0x78>
 800670a:	1c42      	adds	r2, r0, #1
 800670c:	d101      	bne.n	8006712 <__sflush_r+0x76>
 800670e:	682b      	ldr	r3, [r5, #0]
 8006710:	b903      	cbnz	r3, 8006714 <__sflush_r+0x78>
 8006712:	6560      	str	r0, [r4, #84]	@ 0x54
 8006714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006716:	602f      	str	r7, [r5, #0]
 8006718:	b1b9      	cbz	r1, 800674a <__sflush_r+0xae>
 800671a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800671e:	4299      	cmp	r1, r3
 8006720:	d002      	beq.n	8006728 <__sflush_r+0x8c>
 8006722:	4628      	mov	r0, r5
 8006724:	f7ff f9e0 	bl	8005ae8 <_free_r>
 8006728:	2300      	movs	r3, #0
 800672a:	6363      	str	r3, [r4, #52]	@ 0x34
 800672c:	e00d      	b.n	800674a <__sflush_r+0xae>
 800672e:	2301      	movs	r3, #1
 8006730:	4628      	mov	r0, r5
 8006732:	47b0      	blx	r6
 8006734:	4602      	mov	r2, r0
 8006736:	1c50      	adds	r0, r2, #1
 8006738:	d1c9      	bne.n	80066ce <__sflush_r+0x32>
 800673a:	682b      	ldr	r3, [r5, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0c6      	beq.n	80066ce <__sflush_r+0x32>
 8006740:	2b1d      	cmp	r3, #29
 8006742:	d001      	beq.n	8006748 <__sflush_r+0xac>
 8006744:	2b16      	cmp	r3, #22
 8006746:	d11e      	bne.n	8006786 <__sflush_r+0xea>
 8006748:	602f      	str	r7, [r5, #0]
 800674a:	2000      	movs	r0, #0
 800674c:	e022      	b.n	8006794 <__sflush_r+0xf8>
 800674e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006752:	b21b      	sxth	r3, r3
 8006754:	e01b      	b.n	800678e <__sflush_r+0xf2>
 8006756:	690f      	ldr	r7, [r1, #16]
 8006758:	2f00      	cmp	r7, #0
 800675a:	d0f6      	beq.n	800674a <__sflush_r+0xae>
 800675c:	0793      	lsls	r3, r2, #30
 800675e:	680e      	ldr	r6, [r1, #0]
 8006760:	bf08      	it	eq
 8006762:	694b      	ldreq	r3, [r1, #20]
 8006764:	600f      	str	r7, [r1, #0]
 8006766:	bf18      	it	ne
 8006768:	2300      	movne	r3, #0
 800676a:	eba6 0807 	sub.w	r8, r6, r7
 800676e:	608b      	str	r3, [r1, #8]
 8006770:	f1b8 0f00 	cmp.w	r8, #0
 8006774:	dde9      	ble.n	800674a <__sflush_r+0xae>
 8006776:	6a21      	ldr	r1, [r4, #32]
 8006778:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800677a:	4643      	mov	r3, r8
 800677c:	463a      	mov	r2, r7
 800677e:	4628      	mov	r0, r5
 8006780:	47b0      	blx	r6
 8006782:	2800      	cmp	r0, #0
 8006784:	dc08      	bgt.n	8006798 <__sflush_r+0xfc>
 8006786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800678a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800678e:	81a3      	strh	r3, [r4, #12]
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006798:	4407      	add	r7, r0
 800679a:	eba8 0800 	sub.w	r8, r8, r0
 800679e:	e7e7      	b.n	8006770 <__sflush_r+0xd4>
 80067a0:	dfbffffe 	.word	0xdfbffffe

080067a4 <_fflush_r>:
 80067a4:	b538      	push	{r3, r4, r5, lr}
 80067a6:	690b      	ldr	r3, [r1, #16]
 80067a8:	4605      	mov	r5, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	b913      	cbnz	r3, 80067b4 <_fflush_r+0x10>
 80067ae:	2500      	movs	r5, #0
 80067b0:	4628      	mov	r0, r5
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	b118      	cbz	r0, 80067be <_fflush_r+0x1a>
 80067b6:	6a03      	ldr	r3, [r0, #32]
 80067b8:	b90b      	cbnz	r3, 80067be <_fflush_r+0x1a>
 80067ba:	f7fe fa1b 	bl	8004bf4 <__sinit>
 80067be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0f3      	beq.n	80067ae <_fflush_r+0xa>
 80067c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067c8:	07d0      	lsls	r0, r2, #31
 80067ca:	d404      	bmi.n	80067d6 <_fflush_r+0x32>
 80067cc:	0599      	lsls	r1, r3, #22
 80067ce:	d402      	bmi.n	80067d6 <_fflush_r+0x32>
 80067d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067d2:	f7fe fb3a 	bl	8004e4a <__retarget_lock_acquire_recursive>
 80067d6:	4628      	mov	r0, r5
 80067d8:	4621      	mov	r1, r4
 80067da:	f7ff ff5f 	bl	800669c <__sflush_r>
 80067de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067e0:	07da      	lsls	r2, r3, #31
 80067e2:	4605      	mov	r5, r0
 80067e4:	d4e4      	bmi.n	80067b0 <_fflush_r+0xc>
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	059b      	lsls	r3, r3, #22
 80067ea:	d4e1      	bmi.n	80067b0 <_fflush_r+0xc>
 80067ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067ee:	f7fe fb2d 	bl	8004e4c <__retarget_lock_release_recursive>
 80067f2:	e7dd      	b.n	80067b0 <_fflush_r+0xc>

080067f4 <memmove>:
 80067f4:	4288      	cmp	r0, r1
 80067f6:	b510      	push	{r4, lr}
 80067f8:	eb01 0402 	add.w	r4, r1, r2
 80067fc:	d902      	bls.n	8006804 <memmove+0x10>
 80067fe:	4284      	cmp	r4, r0
 8006800:	4623      	mov	r3, r4
 8006802:	d807      	bhi.n	8006814 <memmove+0x20>
 8006804:	1e43      	subs	r3, r0, #1
 8006806:	42a1      	cmp	r1, r4
 8006808:	d008      	beq.n	800681c <memmove+0x28>
 800680a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800680e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006812:	e7f8      	b.n	8006806 <memmove+0x12>
 8006814:	4402      	add	r2, r0
 8006816:	4601      	mov	r1, r0
 8006818:	428a      	cmp	r2, r1
 800681a:	d100      	bne.n	800681e <memmove+0x2a>
 800681c:	bd10      	pop	{r4, pc}
 800681e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006822:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006826:	e7f7      	b.n	8006818 <memmove+0x24>

08006828 <_sbrk_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4d06      	ldr	r5, [pc, #24]	@ (8006844 <_sbrk_r+0x1c>)
 800682c:	2300      	movs	r3, #0
 800682e:	4604      	mov	r4, r0
 8006830:	4608      	mov	r0, r1
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	f7fb f91c 	bl	8001a70 <_sbrk>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d102      	bne.n	8006842 <_sbrk_r+0x1a>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	b103      	cbz	r3, 8006842 <_sbrk_r+0x1a>
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	2000051c 	.word	0x2000051c

08006848 <memcpy>:
 8006848:	440a      	add	r2, r1
 800684a:	4291      	cmp	r1, r2
 800684c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006850:	d100      	bne.n	8006854 <memcpy+0xc>
 8006852:	4770      	bx	lr
 8006854:	b510      	push	{r4, lr}
 8006856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800685a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800685e:	4291      	cmp	r1, r2
 8006860:	d1f9      	bne.n	8006856 <memcpy+0xe>
 8006862:	bd10      	pop	{r4, pc}

08006864 <__assert_func>:
 8006864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006866:	4614      	mov	r4, r2
 8006868:	461a      	mov	r2, r3
 800686a:	4b09      	ldr	r3, [pc, #36]	@ (8006890 <__assert_func+0x2c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4605      	mov	r5, r0
 8006870:	68d8      	ldr	r0, [r3, #12]
 8006872:	b954      	cbnz	r4, 800688a <__assert_func+0x26>
 8006874:	4b07      	ldr	r3, [pc, #28]	@ (8006894 <__assert_func+0x30>)
 8006876:	461c      	mov	r4, r3
 8006878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800687c:	9100      	str	r1, [sp, #0]
 800687e:	462b      	mov	r3, r5
 8006880:	4905      	ldr	r1, [pc, #20]	@ (8006898 <__assert_func+0x34>)
 8006882:	f000 f86f 	bl	8006964 <fiprintf>
 8006886:	f000 f87f 	bl	8006988 <abort>
 800688a:	4b04      	ldr	r3, [pc, #16]	@ (800689c <__assert_func+0x38>)
 800688c:	e7f4      	b.n	8006878 <__assert_func+0x14>
 800688e:	bf00      	nop
 8006890:	20000028 	.word	0x20000028
 8006894:	0800723e 	.word	0x0800723e
 8006898:	08007210 	.word	0x08007210
 800689c:	08007203 	.word	0x08007203

080068a0 <_calloc_r>:
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	fba1 5402 	umull	r5, r4, r1, r2
 80068a6:	b93c      	cbnz	r4, 80068b8 <_calloc_r+0x18>
 80068a8:	4629      	mov	r1, r5
 80068aa:	f7ff f991 	bl	8005bd0 <_malloc_r>
 80068ae:	4606      	mov	r6, r0
 80068b0:	b928      	cbnz	r0, 80068be <_calloc_r+0x1e>
 80068b2:	2600      	movs	r6, #0
 80068b4:	4630      	mov	r0, r6
 80068b6:	bd70      	pop	{r4, r5, r6, pc}
 80068b8:	220c      	movs	r2, #12
 80068ba:	6002      	str	r2, [r0, #0]
 80068bc:	e7f9      	b.n	80068b2 <_calloc_r+0x12>
 80068be:	462a      	mov	r2, r5
 80068c0:	4621      	mov	r1, r4
 80068c2:	f7fe fa44 	bl	8004d4e <memset>
 80068c6:	e7f5      	b.n	80068b4 <_calloc_r+0x14>

080068c8 <__ascii_mbtowc>:
 80068c8:	b082      	sub	sp, #8
 80068ca:	b901      	cbnz	r1, 80068ce <__ascii_mbtowc+0x6>
 80068cc:	a901      	add	r1, sp, #4
 80068ce:	b142      	cbz	r2, 80068e2 <__ascii_mbtowc+0x1a>
 80068d0:	b14b      	cbz	r3, 80068e6 <__ascii_mbtowc+0x1e>
 80068d2:	7813      	ldrb	r3, [r2, #0]
 80068d4:	600b      	str	r3, [r1, #0]
 80068d6:	7812      	ldrb	r2, [r2, #0]
 80068d8:	1e10      	subs	r0, r2, #0
 80068da:	bf18      	it	ne
 80068dc:	2001      	movne	r0, #1
 80068de:	b002      	add	sp, #8
 80068e0:	4770      	bx	lr
 80068e2:	4610      	mov	r0, r2
 80068e4:	e7fb      	b.n	80068de <__ascii_mbtowc+0x16>
 80068e6:	f06f 0001 	mvn.w	r0, #1
 80068ea:	e7f8      	b.n	80068de <__ascii_mbtowc+0x16>

080068ec <_realloc_r>:
 80068ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f0:	4680      	mov	r8, r0
 80068f2:	4615      	mov	r5, r2
 80068f4:	460c      	mov	r4, r1
 80068f6:	b921      	cbnz	r1, 8006902 <_realloc_r+0x16>
 80068f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068fc:	4611      	mov	r1, r2
 80068fe:	f7ff b967 	b.w	8005bd0 <_malloc_r>
 8006902:	b92a      	cbnz	r2, 8006910 <_realloc_r+0x24>
 8006904:	f7ff f8f0 	bl	8005ae8 <_free_r>
 8006908:	2400      	movs	r4, #0
 800690a:	4620      	mov	r0, r4
 800690c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006910:	f000 f841 	bl	8006996 <_malloc_usable_size_r>
 8006914:	4285      	cmp	r5, r0
 8006916:	4606      	mov	r6, r0
 8006918:	d802      	bhi.n	8006920 <_realloc_r+0x34>
 800691a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800691e:	d8f4      	bhi.n	800690a <_realloc_r+0x1e>
 8006920:	4629      	mov	r1, r5
 8006922:	4640      	mov	r0, r8
 8006924:	f7ff f954 	bl	8005bd0 <_malloc_r>
 8006928:	4607      	mov	r7, r0
 800692a:	2800      	cmp	r0, #0
 800692c:	d0ec      	beq.n	8006908 <_realloc_r+0x1c>
 800692e:	42b5      	cmp	r5, r6
 8006930:	462a      	mov	r2, r5
 8006932:	4621      	mov	r1, r4
 8006934:	bf28      	it	cs
 8006936:	4632      	movcs	r2, r6
 8006938:	f7ff ff86 	bl	8006848 <memcpy>
 800693c:	4621      	mov	r1, r4
 800693e:	4640      	mov	r0, r8
 8006940:	f7ff f8d2 	bl	8005ae8 <_free_r>
 8006944:	463c      	mov	r4, r7
 8006946:	e7e0      	b.n	800690a <_realloc_r+0x1e>

08006948 <__ascii_wctomb>:
 8006948:	4603      	mov	r3, r0
 800694a:	4608      	mov	r0, r1
 800694c:	b141      	cbz	r1, 8006960 <__ascii_wctomb+0x18>
 800694e:	2aff      	cmp	r2, #255	@ 0xff
 8006950:	d904      	bls.n	800695c <__ascii_wctomb+0x14>
 8006952:	228a      	movs	r2, #138	@ 0x8a
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	f04f 30ff 	mov.w	r0, #4294967295
 800695a:	4770      	bx	lr
 800695c:	700a      	strb	r2, [r1, #0]
 800695e:	2001      	movs	r0, #1
 8006960:	4770      	bx	lr
	...

08006964 <fiprintf>:
 8006964:	b40e      	push	{r1, r2, r3}
 8006966:	b503      	push	{r0, r1, lr}
 8006968:	4601      	mov	r1, r0
 800696a:	ab03      	add	r3, sp, #12
 800696c:	4805      	ldr	r0, [pc, #20]	@ (8006984 <fiprintf+0x20>)
 800696e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006972:	6800      	ldr	r0, [r0, #0]
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	f000 f83f 	bl	80069f8 <_vfiprintf_r>
 800697a:	b002      	add	sp, #8
 800697c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006980:	b003      	add	sp, #12
 8006982:	4770      	bx	lr
 8006984:	20000028 	.word	0x20000028

08006988 <abort>:
 8006988:	b508      	push	{r3, lr}
 800698a:	2006      	movs	r0, #6
 800698c:	f000 fa08 	bl	8006da0 <raise>
 8006990:	2001      	movs	r0, #1
 8006992:	f7fa fff5 	bl	8001980 <_exit>

08006996 <_malloc_usable_size_r>:
 8006996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800699a:	1f18      	subs	r0, r3, #4
 800699c:	2b00      	cmp	r3, #0
 800699e:	bfbc      	itt	lt
 80069a0:	580b      	ldrlt	r3, [r1, r0]
 80069a2:	18c0      	addlt	r0, r0, r3
 80069a4:	4770      	bx	lr

080069a6 <__sfputc_r>:
 80069a6:	6893      	ldr	r3, [r2, #8]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	b410      	push	{r4}
 80069ae:	6093      	str	r3, [r2, #8]
 80069b0:	da08      	bge.n	80069c4 <__sfputc_r+0x1e>
 80069b2:	6994      	ldr	r4, [r2, #24]
 80069b4:	42a3      	cmp	r3, r4
 80069b6:	db01      	blt.n	80069bc <__sfputc_r+0x16>
 80069b8:	290a      	cmp	r1, #10
 80069ba:	d103      	bne.n	80069c4 <__sfputc_r+0x1e>
 80069bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c0:	f000 b932 	b.w	8006c28 <__swbuf_r>
 80069c4:	6813      	ldr	r3, [r2, #0]
 80069c6:	1c58      	adds	r0, r3, #1
 80069c8:	6010      	str	r0, [r2, #0]
 80069ca:	7019      	strb	r1, [r3, #0]
 80069cc:	4608      	mov	r0, r1
 80069ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <__sfputs_r>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	4606      	mov	r6, r0
 80069d8:	460f      	mov	r7, r1
 80069da:	4614      	mov	r4, r2
 80069dc:	18d5      	adds	r5, r2, r3
 80069de:	42ac      	cmp	r4, r5
 80069e0:	d101      	bne.n	80069e6 <__sfputs_r+0x12>
 80069e2:	2000      	movs	r0, #0
 80069e4:	e007      	b.n	80069f6 <__sfputs_r+0x22>
 80069e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ea:	463a      	mov	r2, r7
 80069ec:	4630      	mov	r0, r6
 80069ee:	f7ff ffda 	bl	80069a6 <__sfputc_r>
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	d1f3      	bne.n	80069de <__sfputs_r+0xa>
 80069f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080069f8 <_vfiprintf_r>:
 80069f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	460d      	mov	r5, r1
 80069fe:	b09d      	sub	sp, #116	@ 0x74
 8006a00:	4614      	mov	r4, r2
 8006a02:	4698      	mov	r8, r3
 8006a04:	4606      	mov	r6, r0
 8006a06:	b118      	cbz	r0, 8006a10 <_vfiprintf_r+0x18>
 8006a08:	6a03      	ldr	r3, [r0, #32]
 8006a0a:	b90b      	cbnz	r3, 8006a10 <_vfiprintf_r+0x18>
 8006a0c:	f7fe f8f2 	bl	8004bf4 <__sinit>
 8006a10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a12:	07d9      	lsls	r1, r3, #31
 8006a14:	d405      	bmi.n	8006a22 <_vfiprintf_r+0x2a>
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	059a      	lsls	r2, r3, #22
 8006a1a:	d402      	bmi.n	8006a22 <_vfiprintf_r+0x2a>
 8006a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a1e:	f7fe fa14 	bl	8004e4a <__retarget_lock_acquire_recursive>
 8006a22:	89ab      	ldrh	r3, [r5, #12]
 8006a24:	071b      	lsls	r3, r3, #28
 8006a26:	d501      	bpl.n	8006a2c <_vfiprintf_r+0x34>
 8006a28:	692b      	ldr	r3, [r5, #16]
 8006a2a:	b99b      	cbnz	r3, 8006a54 <_vfiprintf_r+0x5c>
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f000 f938 	bl	8006ca4 <__swsetup_r>
 8006a34:	b170      	cbz	r0, 8006a54 <_vfiprintf_r+0x5c>
 8006a36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a38:	07dc      	lsls	r4, r3, #31
 8006a3a:	d504      	bpl.n	8006a46 <_vfiprintf_r+0x4e>
 8006a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a40:	b01d      	add	sp, #116	@ 0x74
 8006a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a46:	89ab      	ldrh	r3, [r5, #12]
 8006a48:	0598      	lsls	r0, r3, #22
 8006a4a:	d4f7      	bmi.n	8006a3c <_vfiprintf_r+0x44>
 8006a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a4e:	f7fe f9fd 	bl	8004e4c <__retarget_lock_release_recursive>
 8006a52:	e7f3      	b.n	8006a3c <_vfiprintf_r+0x44>
 8006a54:	2300      	movs	r3, #0
 8006a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a58:	2320      	movs	r3, #32
 8006a5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a62:	2330      	movs	r3, #48	@ 0x30
 8006a64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006c14 <_vfiprintf_r+0x21c>
 8006a68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a6c:	f04f 0901 	mov.w	r9, #1
 8006a70:	4623      	mov	r3, r4
 8006a72:	469a      	mov	sl, r3
 8006a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a78:	b10a      	cbz	r2, 8006a7e <_vfiprintf_r+0x86>
 8006a7a:	2a25      	cmp	r2, #37	@ 0x25
 8006a7c:	d1f9      	bne.n	8006a72 <_vfiprintf_r+0x7a>
 8006a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a82:	d00b      	beq.n	8006a9c <_vfiprintf_r+0xa4>
 8006a84:	465b      	mov	r3, fp
 8006a86:	4622      	mov	r2, r4
 8006a88:	4629      	mov	r1, r5
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f7ff ffa2 	bl	80069d4 <__sfputs_r>
 8006a90:	3001      	adds	r0, #1
 8006a92:	f000 80a7 	beq.w	8006be4 <_vfiprintf_r+0x1ec>
 8006a96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a98:	445a      	add	r2, fp
 8006a9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 809f 	beq.w	8006be4 <_vfiprintf_r+0x1ec>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8006aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ab0:	f10a 0a01 	add.w	sl, sl, #1
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	9307      	str	r3, [sp, #28]
 8006ab8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006abc:	931a      	str	r3, [sp, #104]	@ 0x68
 8006abe:	4654      	mov	r4, sl
 8006ac0:	2205      	movs	r2, #5
 8006ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac6:	4853      	ldr	r0, [pc, #332]	@ (8006c14 <_vfiprintf_r+0x21c>)
 8006ac8:	f7f9 fba2 	bl	8000210 <memchr>
 8006acc:	9a04      	ldr	r2, [sp, #16]
 8006ace:	b9d8      	cbnz	r0, 8006b08 <_vfiprintf_r+0x110>
 8006ad0:	06d1      	lsls	r1, r2, #27
 8006ad2:	bf44      	itt	mi
 8006ad4:	2320      	movmi	r3, #32
 8006ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ada:	0713      	lsls	r3, r2, #28
 8006adc:	bf44      	itt	mi
 8006ade:	232b      	movmi	r3, #43	@ 0x2b
 8006ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006aea:	d015      	beq.n	8006b18 <_vfiprintf_r+0x120>
 8006aec:	9a07      	ldr	r2, [sp, #28]
 8006aee:	4654      	mov	r4, sl
 8006af0:	2000      	movs	r0, #0
 8006af2:	f04f 0c0a 	mov.w	ip, #10
 8006af6:	4621      	mov	r1, r4
 8006af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006afc:	3b30      	subs	r3, #48	@ 0x30
 8006afe:	2b09      	cmp	r3, #9
 8006b00:	d94b      	bls.n	8006b9a <_vfiprintf_r+0x1a2>
 8006b02:	b1b0      	cbz	r0, 8006b32 <_vfiprintf_r+0x13a>
 8006b04:	9207      	str	r2, [sp, #28]
 8006b06:	e014      	b.n	8006b32 <_vfiprintf_r+0x13a>
 8006b08:	eba0 0308 	sub.w	r3, r0, r8
 8006b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b10:	4313      	orrs	r3, r2
 8006b12:	9304      	str	r3, [sp, #16]
 8006b14:	46a2      	mov	sl, r4
 8006b16:	e7d2      	b.n	8006abe <_vfiprintf_r+0xc6>
 8006b18:	9b03      	ldr	r3, [sp, #12]
 8006b1a:	1d19      	adds	r1, r3, #4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	9103      	str	r1, [sp, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	bfbb      	ittet	lt
 8006b24:	425b      	neglt	r3, r3
 8006b26:	f042 0202 	orrlt.w	r2, r2, #2
 8006b2a:	9307      	strge	r3, [sp, #28]
 8006b2c:	9307      	strlt	r3, [sp, #28]
 8006b2e:	bfb8      	it	lt
 8006b30:	9204      	strlt	r2, [sp, #16]
 8006b32:	7823      	ldrb	r3, [r4, #0]
 8006b34:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b36:	d10a      	bne.n	8006b4e <_vfiprintf_r+0x156>
 8006b38:	7863      	ldrb	r3, [r4, #1]
 8006b3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b3c:	d132      	bne.n	8006ba4 <_vfiprintf_r+0x1ac>
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	1d1a      	adds	r2, r3, #4
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	9203      	str	r2, [sp, #12]
 8006b46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b4a:	3402      	adds	r4, #2
 8006b4c:	9305      	str	r3, [sp, #20]
 8006b4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006c24 <_vfiprintf_r+0x22c>
 8006b52:	7821      	ldrb	r1, [r4, #0]
 8006b54:	2203      	movs	r2, #3
 8006b56:	4650      	mov	r0, sl
 8006b58:	f7f9 fb5a 	bl	8000210 <memchr>
 8006b5c:	b138      	cbz	r0, 8006b6e <_vfiprintf_r+0x176>
 8006b5e:	9b04      	ldr	r3, [sp, #16]
 8006b60:	eba0 000a 	sub.w	r0, r0, sl
 8006b64:	2240      	movs	r2, #64	@ 0x40
 8006b66:	4082      	lsls	r2, r0
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	3401      	adds	r4, #1
 8006b6c:	9304      	str	r3, [sp, #16]
 8006b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b72:	4829      	ldr	r0, [pc, #164]	@ (8006c18 <_vfiprintf_r+0x220>)
 8006b74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b78:	2206      	movs	r2, #6
 8006b7a:	f7f9 fb49 	bl	8000210 <memchr>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d03f      	beq.n	8006c02 <_vfiprintf_r+0x20a>
 8006b82:	4b26      	ldr	r3, [pc, #152]	@ (8006c1c <_vfiprintf_r+0x224>)
 8006b84:	bb1b      	cbnz	r3, 8006bce <_vfiprintf_r+0x1d6>
 8006b86:	9b03      	ldr	r3, [sp, #12]
 8006b88:	3307      	adds	r3, #7
 8006b8a:	f023 0307 	bic.w	r3, r3, #7
 8006b8e:	3308      	adds	r3, #8
 8006b90:	9303      	str	r3, [sp, #12]
 8006b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b94:	443b      	add	r3, r7
 8006b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b98:	e76a      	b.n	8006a70 <_vfiprintf_r+0x78>
 8006b9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	e7a8      	b.n	8006af6 <_vfiprintf_r+0xfe>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	3401      	adds	r4, #1
 8006ba8:	9305      	str	r3, [sp, #20]
 8006baa:	4619      	mov	r1, r3
 8006bac:	f04f 0c0a 	mov.w	ip, #10
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bb6:	3a30      	subs	r2, #48	@ 0x30
 8006bb8:	2a09      	cmp	r2, #9
 8006bba:	d903      	bls.n	8006bc4 <_vfiprintf_r+0x1cc>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0c6      	beq.n	8006b4e <_vfiprintf_r+0x156>
 8006bc0:	9105      	str	r1, [sp, #20]
 8006bc2:	e7c4      	b.n	8006b4e <_vfiprintf_r+0x156>
 8006bc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bc8:	4604      	mov	r4, r0
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e7f0      	b.n	8006bb0 <_vfiprintf_r+0x1b8>
 8006bce:	ab03      	add	r3, sp, #12
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	462a      	mov	r2, r5
 8006bd4:	4b12      	ldr	r3, [pc, #72]	@ (8006c20 <_vfiprintf_r+0x228>)
 8006bd6:	a904      	add	r1, sp, #16
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f7fd fbc7 	bl	800436c <_printf_float>
 8006bde:	4607      	mov	r7, r0
 8006be0:	1c78      	adds	r0, r7, #1
 8006be2:	d1d6      	bne.n	8006b92 <_vfiprintf_r+0x19a>
 8006be4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006be6:	07d9      	lsls	r1, r3, #31
 8006be8:	d405      	bmi.n	8006bf6 <_vfiprintf_r+0x1fe>
 8006bea:	89ab      	ldrh	r3, [r5, #12]
 8006bec:	059a      	lsls	r2, r3, #22
 8006bee:	d402      	bmi.n	8006bf6 <_vfiprintf_r+0x1fe>
 8006bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bf2:	f7fe f92b 	bl	8004e4c <__retarget_lock_release_recursive>
 8006bf6:	89ab      	ldrh	r3, [r5, #12]
 8006bf8:	065b      	lsls	r3, r3, #25
 8006bfa:	f53f af1f 	bmi.w	8006a3c <_vfiprintf_r+0x44>
 8006bfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c00:	e71e      	b.n	8006a40 <_vfiprintf_r+0x48>
 8006c02:	ab03      	add	r3, sp, #12
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	462a      	mov	r2, r5
 8006c08:	4b05      	ldr	r3, [pc, #20]	@ (8006c20 <_vfiprintf_r+0x228>)
 8006c0a:	a904      	add	r1, sp, #16
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	f7fd fe45 	bl	800489c <_printf_i>
 8006c12:	e7e4      	b.n	8006bde <_vfiprintf_r+0x1e6>
 8006c14:	080071e8 	.word	0x080071e8
 8006c18:	080071f2 	.word	0x080071f2
 8006c1c:	0800436d 	.word	0x0800436d
 8006c20:	080069d5 	.word	0x080069d5
 8006c24:	080071ee 	.word	0x080071ee

08006c28 <__swbuf_r>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	460e      	mov	r6, r1
 8006c2c:	4614      	mov	r4, r2
 8006c2e:	4605      	mov	r5, r0
 8006c30:	b118      	cbz	r0, 8006c3a <__swbuf_r+0x12>
 8006c32:	6a03      	ldr	r3, [r0, #32]
 8006c34:	b90b      	cbnz	r3, 8006c3a <__swbuf_r+0x12>
 8006c36:	f7fd ffdd 	bl	8004bf4 <__sinit>
 8006c3a:	69a3      	ldr	r3, [r4, #24]
 8006c3c:	60a3      	str	r3, [r4, #8]
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	071a      	lsls	r2, r3, #28
 8006c42:	d501      	bpl.n	8006c48 <__swbuf_r+0x20>
 8006c44:	6923      	ldr	r3, [r4, #16]
 8006c46:	b943      	cbnz	r3, 8006c5a <__swbuf_r+0x32>
 8006c48:	4621      	mov	r1, r4
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f000 f82a 	bl	8006ca4 <__swsetup_r>
 8006c50:	b118      	cbz	r0, 8006c5a <__swbuf_r+0x32>
 8006c52:	f04f 37ff 	mov.w	r7, #4294967295
 8006c56:	4638      	mov	r0, r7
 8006c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	6922      	ldr	r2, [r4, #16]
 8006c5e:	1a98      	subs	r0, r3, r2
 8006c60:	6963      	ldr	r3, [r4, #20]
 8006c62:	b2f6      	uxtb	r6, r6
 8006c64:	4283      	cmp	r3, r0
 8006c66:	4637      	mov	r7, r6
 8006c68:	dc05      	bgt.n	8006c76 <__swbuf_r+0x4e>
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f7ff fd99 	bl	80067a4 <_fflush_r>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d1ed      	bne.n	8006c52 <__swbuf_r+0x2a>
 8006c76:	68a3      	ldr	r3, [r4, #8]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	60a3      	str	r3, [r4, #8]
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	6022      	str	r2, [r4, #0]
 8006c82:	701e      	strb	r6, [r3, #0]
 8006c84:	6962      	ldr	r2, [r4, #20]
 8006c86:	1c43      	adds	r3, r0, #1
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d004      	beq.n	8006c96 <__swbuf_r+0x6e>
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	07db      	lsls	r3, r3, #31
 8006c90:	d5e1      	bpl.n	8006c56 <__swbuf_r+0x2e>
 8006c92:	2e0a      	cmp	r6, #10
 8006c94:	d1df      	bne.n	8006c56 <__swbuf_r+0x2e>
 8006c96:	4621      	mov	r1, r4
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f7ff fd83 	bl	80067a4 <_fflush_r>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d0d9      	beq.n	8006c56 <__swbuf_r+0x2e>
 8006ca2:	e7d6      	b.n	8006c52 <__swbuf_r+0x2a>

08006ca4 <__swsetup_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4b29      	ldr	r3, [pc, #164]	@ (8006d4c <__swsetup_r+0xa8>)
 8006ca8:	4605      	mov	r5, r0
 8006caa:	6818      	ldr	r0, [r3, #0]
 8006cac:	460c      	mov	r4, r1
 8006cae:	b118      	cbz	r0, 8006cb8 <__swsetup_r+0x14>
 8006cb0:	6a03      	ldr	r3, [r0, #32]
 8006cb2:	b90b      	cbnz	r3, 8006cb8 <__swsetup_r+0x14>
 8006cb4:	f7fd ff9e 	bl	8004bf4 <__sinit>
 8006cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cbc:	0719      	lsls	r1, r3, #28
 8006cbe:	d422      	bmi.n	8006d06 <__swsetup_r+0x62>
 8006cc0:	06da      	lsls	r2, r3, #27
 8006cc2:	d407      	bmi.n	8006cd4 <__swsetup_r+0x30>
 8006cc4:	2209      	movs	r2, #9
 8006cc6:	602a      	str	r2, [r5, #0]
 8006cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ccc:	81a3      	strh	r3, [r4, #12]
 8006cce:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd2:	e033      	b.n	8006d3c <__swsetup_r+0x98>
 8006cd4:	0758      	lsls	r0, r3, #29
 8006cd6:	d512      	bpl.n	8006cfe <__swsetup_r+0x5a>
 8006cd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cda:	b141      	cbz	r1, 8006cee <__swsetup_r+0x4a>
 8006cdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ce0:	4299      	cmp	r1, r3
 8006ce2:	d002      	beq.n	8006cea <__swsetup_r+0x46>
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f7fe feff 	bl	8005ae8 <_free_r>
 8006cea:	2300      	movs	r3, #0
 8006cec:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006cf4:	81a3      	strh	r3, [r4, #12]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	6063      	str	r3, [r4, #4]
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	f043 0308 	orr.w	r3, r3, #8
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	6923      	ldr	r3, [r4, #16]
 8006d08:	b94b      	cbnz	r3, 8006d1e <__swsetup_r+0x7a>
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d14:	d003      	beq.n	8006d1e <__swsetup_r+0x7a>
 8006d16:	4621      	mov	r1, r4
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f000 f883 	bl	8006e24 <__smakebuf_r>
 8006d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d22:	f013 0201 	ands.w	r2, r3, #1
 8006d26:	d00a      	beq.n	8006d3e <__swsetup_r+0x9a>
 8006d28:	2200      	movs	r2, #0
 8006d2a:	60a2      	str	r2, [r4, #8]
 8006d2c:	6962      	ldr	r2, [r4, #20]
 8006d2e:	4252      	negs	r2, r2
 8006d30:	61a2      	str	r2, [r4, #24]
 8006d32:	6922      	ldr	r2, [r4, #16]
 8006d34:	b942      	cbnz	r2, 8006d48 <__swsetup_r+0xa4>
 8006d36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d3a:	d1c5      	bne.n	8006cc8 <__swsetup_r+0x24>
 8006d3c:	bd38      	pop	{r3, r4, r5, pc}
 8006d3e:	0799      	lsls	r1, r3, #30
 8006d40:	bf58      	it	pl
 8006d42:	6962      	ldrpl	r2, [r4, #20]
 8006d44:	60a2      	str	r2, [r4, #8]
 8006d46:	e7f4      	b.n	8006d32 <__swsetup_r+0x8e>
 8006d48:	2000      	movs	r0, #0
 8006d4a:	e7f7      	b.n	8006d3c <__swsetup_r+0x98>
 8006d4c:	20000028 	.word	0x20000028

08006d50 <_raise_r>:
 8006d50:	291f      	cmp	r1, #31
 8006d52:	b538      	push	{r3, r4, r5, lr}
 8006d54:	4605      	mov	r5, r0
 8006d56:	460c      	mov	r4, r1
 8006d58:	d904      	bls.n	8006d64 <_raise_r+0x14>
 8006d5a:	2316      	movs	r3, #22
 8006d5c:	6003      	str	r3, [r0, #0]
 8006d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
 8006d64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006d66:	b112      	cbz	r2, 8006d6e <_raise_r+0x1e>
 8006d68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d6c:	b94b      	cbnz	r3, 8006d82 <_raise_r+0x32>
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f000 f830 	bl	8006dd4 <_getpid_r>
 8006d74:	4622      	mov	r2, r4
 8006d76:	4601      	mov	r1, r0
 8006d78:	4628      	mov	r0, r5
 8006d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d7e:	f000 b817 	b.w	8006db0 <_kill_r>
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d00a      	beq.n	8006d9c <_raise_r+0x4c>
 8006d86:	1c59      	adds	r1, r3, #1
 8006d88:	d103      	bne.n	8006d92 <_raise_r+0x42>
 8006d8a:	2316      	movs	r3, #22
 8006d8c:	6003      	str	r3, [r0, #0]
 8006d8e:	2001      	movs	r0, #1
 8006d90:	e7e7      	b.n	8006d62 <_raise_r+0x12>
 8006d92:	2100      	movs	r1, #0
 8006d94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006d98:	4620      	mov	r0, r4
 8006d9a:	4798      	blx	r3
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	e7e0      	b.n	8006d62 <_raise_r+0x12>

08006da0 <raise>:
 8006da0:	4b02      	ldr	r3, [pc, #8]	@ (8006dac <raise+0xc>)
 8006da2:	4601      	mov	r1, r0
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	f7ff bfd3 	b.w	8006d50 <_raise_r>
 8006daa:	bf00      	nop
 8006dac:	20000028 	.word	0x20000028

08006db0 <_kill_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4d07      	ldr	r5, [pc, #28]	@ (8006dd0 <_kill_r+0x20>)
 8006db4:	2300      	movs	r3, #0
 8006db6:	4604      	mov	r4, r0
 8006db8:	4608      	mov	r0, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	602b      	str	r3, [r5, #0]
 8006dbe:	f7fa fdcf 	bl	8001960 <_kill>
 8006dc2:	1c43      	adds	r3, r0, #1
 8006dc4:	d102      	bne.n	8006dcc <_kill_r+0x1c>
 8006dc6:	682b      	ldr	r3, [r5, #0]
 8006dc8:	b103      	cbz	r3, 8006dcc <_kill_r+0x1c>
 8006dca:	6023      	str	r3, [r4, #0]
 8006dcc:	bd38      	pop	{r3, r4, r5, pc}
 8006dce:	bf00      	nop
 8006dd0:	2000051c 	.word	0x2000051c

08006dd4 <_getpid_r>:
 8006dd4:	f7fa bdbc 	b.w	8001950 <_getpid>

08006dd8 <__swhatbuf_r>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	460c      	mov	r4, r1
 8006ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de0:	2900      	cmp	r1, #0
 8006de2:	b096      	sub	sp, #88	@ 0x58
 8006de4:	4615      	mov	r5, r2
 8006de6:	461e      	mov	r6, r3
 8006de8:	da0d      	bge.n	8006e06 <__swhatbuf_r+0x2e>
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006df0:	f04f 0100 	mov.w	r1, #0
 8006df4:	bf14      	ite	ne
 8006df6:	2340      	movne	r3, #64	@ 0x40
 8006df8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	6031      	str	r1, [r6, #0]
 8006e00:	602b      	str	r3, [r5, #0]
 8006e02:	b016      	add	sp, #88	@ 0x58
 8006e04:	bd70      	pop	{r4, r5, r6, pc}
 8006e06:	466a      	mov	r2, sp
 8006e08:	f000 f848 	bl	8006e9c <_fstat_r>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	dbec      	blt.n	8006dea <__swhatbuf_r+0x12>
 8006e10:	9901      	ldr	r1, [sp, #4]
 8006e12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e1a:	4259      	negs	r1, r3
 8006e1c:	4159      	adcs	r1, r3
 8006e1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e22:	e7eb      	b.n	8006dfc <__swhatbuf_r+0x24>

08006e24 <__smakebuf_r>:
 8006e24:	898b      	ldrh	r3, [r1, #12]
 8006e26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e28:	079d      	lsls	r5, r3, #30
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	d507      	bpl.n	8006e40 <__smakebuf_r+0x1c>
 8006e30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	6123      	str	r3, [r4, #16]
 8006e38:	2301      	movs	r3, #1
 8006e3a:	6163      	str	r3, [r4, #20]
 8006e3c:	b003      	add	sp, #12
 8006e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e40:	ab01      	add	r3, sp, #4
 8006e42:	466a      	mov	r2, sp
 8006e44:	f7ff ffc8 	bl	8006dd8 <__swhatbuf_r>
 8006e48:	9f00      	ldr	r7, [sp, #0]
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f7fe febe 	bl	8005bd0 <_malloc_r>
 8006e54:	b948      	cbnz	r0, 8006e6a <__smakebuf_r+0x46>
 8006e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5a:	059a      	lsls	r2, r3, #22
 8006e5c:	d4ee      	bmi.n	8006e3c <__smakebuf_r+0x18>
 8006e5e:	f023 0303 	bic.w	r3, r3, #3
 8006e62:	f043 0302 	orr.w	r3, r3, #2
 8006e66:	81a3      	strh	r3, [r4, #12]
 8006e68:	e7e2      	b.n	8006e30 <__smakebuf_r+0xc>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	6020      	str	r0, [r4, #0]
 8006e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e72:	81a3      	strh	r3, [r4, #12]
 8006e74:	9b01      	ldr	r3, [sp, #4]
 8006e76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e7a:	b15b      	cbz	r3, 8006e94 <__smakebuf_r+0x70>
 8006e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e80:	4630      	mov	r0, r6
 8006e82:	f000 f81d 	bl	8006ec0 <_isatty_r>
 8006e86:	b128      	cbz	r0, 8006e94 <__smakebuf_r+0x70>
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	f023 0303 	bic.w	r3, r3, #3
 8006e8e:	f043 0301 	orr.w	r3, r3, #1
 8006e92:	81a3      	strh	r3, [r4, #12]
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	431d      	orrs	r5, r3
 8006e98:	81a5      	strh	r5, [r4, #12]
 8006e9a:	e7cf      	b.n	8006e3c <__smakebuf_r+0x18>

08006e9c <_fstat_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d07      	ldr	r5, [pc, #28]	@ (8006ebc <_fstat_r+0x20>)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	602b      	str	r3, [r5, #0]
 8006eaa:	f7fa fdb9 	bl	8001a20 <_fstat>
 8006eae:	1c43      	adds	r3, r0, #1
 8006eb0:	d102      	bne.n	8006eb8 <_fstat_r+0x1c>
 8006eb2:	682b      	ldr	r3, [r5, #0]
 8006eb4:	b103      	cbz	r3, 8006eb8 <_fstat_r+0x1c>
 8006eb6:	6023      	str	r3, [r4, #0]
 8006eb8:	bd38      	pop	{r3, r4, r5, pc}
 8006eba:	bf00      	nop
 8006ebc:	2000051c 	.word	0x2000051c

08006ec0 <_isatty_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4d06      	ldr	r5, [pc, #24]	@ (8006edc <_isatty_r+0x1c>)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4608      	mov	r0, r1
 8006eca:	602b      	str	r3, [r5, #0]
 8006ecc:	f7fa fdb8 	bl	8001a40 <_isatty>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_isatty_r+0x1a>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_isatty_r+0x1a>
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	2000051c 	.word	0x2000051c

08006ee0 <_init>:
 8006ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee2:	bf00      	nop
 8006ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee6:	bc08      	pop	{r3}
 8006ee8:	469e      	mov	lr, r3
 8006eea:	4770      	bx	lr

08006eec <_fini>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	bf00      	nop
 8006ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef2:	bc08      	pop	{r3}
 8006ef4:	469e      	mov	lr, r3
 8006ef6:	4770      	bx	lr
