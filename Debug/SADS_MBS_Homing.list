
SADS_MBS_Homing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fc0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  08009190  08009190  0000a190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009990  08009990  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009990  08009990  0000a990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009998  08009998  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009998  08009998  0000a998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800999c  0800999c  0000a99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080099a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  200001e4  08009b84  0000b1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000090c  08009b84  0000b90c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131fd  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b50  00000000  00000000  0001e411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00020f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dab  00000000  00000000  000220c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024266  00000000  00000000  00022e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168e9  00000000  00000000  000470d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d60e7  00000000  00000000  0005d9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133aa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b04  00000000  00000000  00133ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001395e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009178 	.word	0x08009178

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08009178 	.word	0x08009178

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MTi_init>:
uint16_t measurementMessageSize;
uint8_t status[4];



void MTi_init(uint8_t sampleRate, UART_HandleTypeDef *huart) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
	m_dataBuffer[0] = XBUS_PREAMBLE;
 8000ee4:	4b39      	ldr	r3, [pc, #228]	@ (8000fcc <MTi_init+0xf4>)
 8000ee6:	22fa      	movs	r2, #250	@ 0xfa
 8000ee8:	701a      	strb	r2, [r3, #0]
	m_dataBuffer[1] = XBUS_MASTERDEVICE;
 8000eea:	4b38      	ldr	r3, [pc, #224]	@ (8000fcc <MTi_init+0xf4>)
 8000eec:	22ff      	movs	r2, #255	@ 0xff
 8000eee:	705a      	strb	r2, [r3, #1]
	state = WAITING_FOR_WAKEUP;
 8000ef0:	4b37      	ldr	r3, [pc, #220]	@ (8000fd0 <MTi_init+0xf8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2120      	movs	r1, #32
 8000efa:	4836      	ldr	r0, [pc, #216]	@ (8000fd4 <MTi_init+0xfc>)
 8000efc:	f002 fac4 	bl	8003488 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f00:	2064      	movs	r0, #100	@ 0x64
 8000f02:	f001 ffdf 	bl	8002ec4 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2120      	movs	r1, #32
 8000f0a:	4832      	ldr	r0, [pc, #200]	@ (8000fd4 <MTi_init+0xfc>)
 8000f0c:	f002 fabc 	bl	8003488 <HAL_GPIO_WritePin>

	while(state != READY) {
 8000f10:	e178      	b.n	8001204 <MTi_init+0x32c>
		// HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
		if(checkDataReadyLineMain()) {
 8000f12:	f001 fe09 	bl	8002b28 <checkDataReadyLineMain>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d023      	beq.n	8000f64 <MTi_init+0x8c>
			HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_PIPE_STATUS, 1, status, sizeof(status), 100);
 8000f1c:	2364      	movs	r3, #100	@ 0x64
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2304      	movs	r3, #4
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd8 <MTi_init+0x100>)
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	21d6      	movs	r1, #214	@ 0xd6
 8000f2e:	482b      	ldr	r0, [pc, #172]	@ (8000fdc <MTi_init+0x104>)
 8000f30:	f002 fd1e 	bl	8003970 <HAL_I2C_Mem_Read>
			notificationMessageSize = status[0] | (status[1] << 8);
 8000f34:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <MTi_init+0x100>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <MTi_init+0x100>)
 8000f3c:	785b      	ldrb	r3, [r3, #1]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <MTi_init+0x108>)
 8000f4a:	801a      	strh	r2, [r3, #0]
			measurementMessageSize = status[2] | (status[3] << 8);
 8000f4c:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <MTi_init+0x100>)
 8000f4e:	789b      	ldrb	r3, [r3, #2]
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <MTi_init+0x100>)
 8000f54:	78db      	ldrb	r3, [r3, #3]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <MTi_init+0x10c>)
 8000f62:	801a      	strh	r2, [r3, #0]
		}

		if ((notificationMessageSize && notificationMessageSize < sizeof(m_dataBuffer)) ) {
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <MTi_init+0x108>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 814b 	beq.w	8001204 <MTi_init+0x32c>
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <MTi_init+0x108>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	2bff      	cmp	r3, #255	@ 0xff
 8000f74:	f200 8146 	bhi.w	8001204 <MTi_init+0x32c>
			if(checkDataReadyLineMain()) {
 8000f78:	f001 fdd6 	bl	8002b28 <checkDataReadyLineMain>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 8140 	beq.w	8001204 <MTi_init+0x32c>
				if(HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_NOTIFICATION_PIPE, 1, &m_dataBuffer[2], notificationMessageSize, 1000) != HAL_OK) {
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <MTi_init+0x108>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f8c:	9202      	str	r2, [sp, #8]
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <MTi_init+0x110>)
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	2205      	movs	r2, #5
 8000f98:	21d6      	movs	r1, #214	@ 0xd6
 8000f9a:	4810      	ldr	r0, [pc, #64]	@ (8000fdc <MTi_init+0x104>)
 8000f9c:	f002 fce8 	bl	8003970 <HAL_I2C_Mem_Read>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d028      	beq.n	8000ff8 <MTi_init+0x120>
					len = snprintf(UART_buffer, sizeof(UART_buffer), "Failed to connect to MTi\n");
 8000fa6:	4a11      	ldr	r2, [pc, #68]	@ (8000fec <MTi_init+0x114>)
 8000fa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fac:	4810      	ldr	r0, [pc, #64]	@ (8000ff0 <MTi_init+0x118>)
 8000fae:	f005 ffa3 	bl	8006ef8 <sniprintf>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <MTi_init+0x11c>)
 8000fb6:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MTi_init+0x11c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000fc2:	490b      	ldr	r1, [pc, #44]	@ (8000ff0 <MTi_init+0x118>)
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	f004 fda3 	bl	8005b10 <HAL_UART_Transmit>

					break;
 8000fca:	e121      	b.n	8001210 <MTi_init+0x338>
 8000fcc:	20000308 	.word	0x20000308
 8000fd0:	20000304 	.word	0x20000304
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	20000590 	.word	0x20000590
 8000fdc:	20000594 	.word	0x20000594
 8000fe0:	2000058c 	.word	0x2000058c
 8000fe4:	2000058e 	.word	0x2000058e
 8000fe8:	2000030a 	.word	0x2000030a
 8000fec:	08009190 	.word	0x08009190
 8000ff0:	20000200 	.word	0x20000200
 8000ff4:	20000300 	.word	0x20000300
				}
				// 3) User xbus.h helper to read the message ID and enter a new program state if needed
				if (Xbus_getMessageId(m_dataBuffer) == XMID_Wakeup && state == WAITING_FOR_WAKEUP)
 8000ff8:	4887      	ldr	r0, [pc, #540]	@ (8001218 <MTi_init+0x340>)
 8000ffa:	f001 fcf1 	bl	80029e0 <Xbus_getMessageId>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b3e      	cmp	r3, #62	@ 0x3e
 8001002:	d12f      	bne.n	8001064 <MTi_init+0x18c>
 8001004:	4b85      	ldr	r3, [pc, #532]	@ (800121c <MTi_init+0x344>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d12b      	bne.n	8001064 <MTi_init+0x18c>
				{
					len = snprintf(UART_buffer, sizeof(UART_buffer), "Got Wakeup\n");
 800100c:	4a84      	ldr	r2, [pc, #528]	@ (8001220 <MTi_init+0x348>)
 800100e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001012:	4884      	ldr	r0, [pc, #528]	@ (8001224 <MTi_init+0x34c>)
 8001014:	f005 ff70 	bl	8006ef8 <sniprintf>
 8001018:	4603      	mov	r3, r0
 800101a:	4a83      	ldr	r2, [pc, #524]	@ (8001228 <MTi_init+0x350>)
 800101c:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 800101e:	4b82      	ldr	r3, [pc, #520]	@ (8001228 <MTi_init+0x350>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001028:	497e      	ldr	r1, [pc, #504]	@ (8001224 <MTi_init+0x34c>)
 800102a:	6838      	ldr	r0, [r7, #0]
 800102c:	f004 fd70 	bl	8005b10 <HAL_UART_Transmit>

					Xbus_message(m_xbusTxBuffer, 0xFF, XMID_ReqDid, 0);
 8001030:	2300      	movs	r3, #0
 8001032:	2200      	movs	r2, #0
 8001034:	21ff      	movs	r1, #255	@ 0xff
 8001036:	487d      	ldr	r0, [pc, #500]	@ (800122c <MTi_init+0x354>)
 8001038:	f001 fd33 	bl	8002aa2 <Xbus_message>

					rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
 800103c:	497b      	ldr	r1, [pc, #492]	@ (800122c <MTi_init+0x354>)
 800103e:	487c      	ldr	r0, [pc, #496]	@ (8001230 <MTi_init+0x358>)
 8001040:	f001 fd82 	bl	8002b48 <Xbus_createRawMessageHelper>
 8001044:	4603      	mov	r3, r0
 8001046:	4a7b      	ldr	r2, [pc, #492]	@ (8001234 <MTi_init+0x35c>)
 8001048:	6013      	str	r3, [r2, #0]
					HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);
 800104a:	4b7a      	ldr	r3, [pc, #488]	@ (8001234 <MTi_init+0x35c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	b29b      	uxth	r3, r3
 8001050:	2264      	movs	r2, #100	@ 0x64
 8001052:	9200      	str	r2, [sp, #0]
 8001054:	4a76      	ldr	r2, [pc, #472]	@ (8001230 <MTi_init+0x358>)
 8001056:	21d6      	movs	r1, #214	@ 0xd6
 8001058:	4877      	ldr	r0, [pc, #476]	@ (8001238 <MTi_init+0x360>)
 800105a:	f002 fb8b 	bl	8003774 <HAL_I2C_Master_Transmit>

					state = WAITING_FOR_ID;
 800105e:	4b6f      	ldr	r3, [pc, #444]	@ (800121c <MTi_init+0x344>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
				}

				if (Xbus_getMessageId(m_dataBuffer) == XMID_DeviceId && state == WAITING_FOR_ID)
 8001064:	486c      	ldr	r0, [pc, #432]	@ (8001218 <MTi_init+0x340>)
 8001066:	f001 fcbb 	bl	80029e0 <Xbus_getMessageId>
 800106a:	4603      	mov	r3, r0
 800106c:	2b01      	cmp	r3, #1
 800106e:	f040 8083 	bne.w	8001178 <MTi_init+0x2a0>
 8001072:	4b6a      	ldr	r3, [pc, #424]	@ (800121c <MTi_init+0x344>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d17e      	bne.n	8001178 <MTi_init+0x2a0>
				{
					len = snprintf(UART_buffer, sizeof(UART_buffer), "Got Device ID\n");
 800107a:	4a70      	ldr	r2, [pc, #448]	@ (800123c <MTi_init+0x364>)
 800107c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001080:	4868      	ldr	r0, [pc, #416]	@ (8001224 <MTi_init+0x34c>)
 8001082:	f005 ff39 	bl	8006ef8 <sniprintf>
 8001086:	4603      	mov	r3, r0
 8001088:	4a67      	ldr	r2, [pc, #412]	@ (8001228 <MTi_init+0x350>)
 800108a:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 800108c:	4b66      	ldr	r3, [pc, #408]	@ (8001228 <MTi_init+0x350>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	b29a      	uxth	r2, r3
 8001092:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001096:	4963      	ldr	r1, [pc, #396]	@ (8001224 <MTi_init+0x34c>)
 8001098:	6838      	ldr	r0, [r7, #0]
 800109a:	f004 fd39 	bl	8005b10 <HAL_UART_Transmit>

					Xbus_message(m_xbusTxBuffer, 0xFF, XMID_SetOutputConfig, 12);
 800109e:	230c      	movs	r3, #12
 80010a0:	22c0      	movs	r2, #192	@ 0xc0
 80010a2:	21ff      	movs	r1, #255	@ 0xff
 80010a4:	4861      	ldr	r0, [pc, #388]	@ (800122c <MTi_init+0x354>)
 80010a6:	f001 fcfc 	bl	8002aa2 <Xbus_message>
					// Set Output mode: RotMatrix (0x2020)
					Xbus_getPointerToPayload(m_xbusTxBuffer)[0] = 0x20;
 80010aa:	4860      	ldr	r0, [pc, #384]	@ (800122c <MTi_init+0x354>)
 80010ac:	f001 fd1c 	bl	8002ae8 <Xbus_getPointerToPayload>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2220      	movs	r2, #32
 80010b4:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[1] = 0x20;
 80010b6:	485d      	ldr	r0, [pc, #372]	@ (800122c <MTi_init+0x354>)
 80010b8:	f001 fd16 	bl	8002ae8 <Xbus_getPointerToPayload>
 80010bc:	4603      	mov	r3, r0
 80010be:	3301      	adds	r3, #1
 80010c0:	2220      	movs	r2, #32
 80010c2:	701a      	strb	r2, [r3, #0]
					// Set Output rate
					Xbus_getPointerToPayload(m_xbusTxBuffer)[2] = 0x00;
 80010c4:	4859      	ldr	r0, [pc, #356]	@ (800122c <MTi_init+0x354>)
 80010c6:	f001 fd0f 	bl	8002ae8 <Xbus_getPointerToPayload>
 80010ca:	4603      	mov	r3, r0
 80010cc:	3302      	adds	r3, #2
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[3] = sampleRate;
 80010d2:	4856      	ldr	r0, [pc, #344]	@ (800122c <MTi_init+0x354>)
 80010d4:	f001 fd08 	bl	8002ae8 <Xbus_getPointerToPayload>
 80010d8:	4603      	mov	r3, r0
 80010da:	3303      	adds	r3, #3
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	701a      	strb	r2, [r3, #0]

					// Set Output mode: Quaternion (0x2010)
					Xbus_getPointerToPayload(m_xbusTxBuffer)[4] = 0x20;
 80010e0:	4852      	ldr	r0, [pc, #328]	@ (800122c <MTi_init+0x354>)
 80010e2:	f001 fd01 	bl	8002ae8 <Xbus_getPointerToPayload>
 80010e6:	4603      	mov	r3, r0
 80010e8:	3304      	adds	r3, #4
 80010ea:	2220      	movs	r2, #32
 80010ec:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[5] = 0x10;
 80010ee:	484f      	ldr	r0, [pc, #316]	@ (800122c <MTi_init+0x354>)
 80010f0:	f001 fcfa 	bl	8002ae8 <Xbus_getPointerToPayload>
 80010f4:	4603      	mov	r3, r0
 80010f6:	3305      	adds	r3, #5
 80010f8:	2210      	movs	r2, #16
 80010fa:	701a      	strb	r2, [r3, #0]
					// Set Output rate
					Xbus_getPointerToPayload(m_xbusTxBuffer)[6] = 0x00;
 80010fc:	484b      	ldr	r0, [pc, #300]	@ (800122c <MTi_init+0x354>)
 80010fe:	f001 fcf3 	bl	8002ae8 <Xbus_getPointerToPayload>
 8001102:	4603      	mov	r3, r0
 8001104:	3306      	adds	r3, #6
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[7] = sampleRate;
 800110a:	4848      	ldr	r0, [pc, #288]	@ (800122c <MTi_init+0x354>)
 800110c:	f001 fcec 	bl	8002ae8 <Xbus_getPointerToPayload>
 8001110:	4603      	mov	r3, r0
 8001112:	3307      	adds	r3, #7
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	701a      	strb	r2, [r3, #0]

					// Set Output mode: Body Rates (0x8020)
					Xbus_getPointerToPayload(m_xbusTxBuffer)[8] = 0x80;
 8001118:	4844      	ldr	r0, [pc, #272]	@ (800122c <MTi_init+0x354>)
 800111a:	f001 fce5 	bl	8002ae8 <Xbus_getPointerToPayload>
 800111e:	4603      	mov	r3, r0
 8001120:	3308      	adds	r3, #8
 8001122:	2280      	movs	r2, #128	@ 0x80
 8001124:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[9] = 0x20;
 8001126:	4841      	ldr	r0, [pc, #260]	@ (800122c <MTi_init+0x354>)
 8001128:	f001 fcde 	bl	8002ae8 <Xbus_getPointerToPayload>
 800112c:	4603      	mov	r3, r0
 800112e:	3309      	adds	r3, #9
 8001130:	2220      	movs	r2, #32
 8001132:	701a      	strb	r2, [r3, #0]
					// Set Output rate
					Xbus_getPointerToPayload(m_xbusTxBuffer)[10] = 0x00;
 8001134:	483d      	ldr	r0, [pc, #244]	@ (800122c <MTi_init+0x354>)
 8001136:	f001 fcd7 	bl	8002ae8 <Xbus_getPointerToPayload>
 800113a:	4603      	mov	r3, r0
 800113c:	330a      	adds	r3, #10
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
					Xbus_getPointerToPayload(m_xbusTxBuffer)[11] = sampleRate;
 8001142:	483a      	ldr	r0, [pc, #232]	@ (800122c <MTi_init+0x354>)
 8001144:	f001 fcd0 	bl	8002ae8 <Xbus_getPointerToPayload>
 8001148:	4603      	mov	r3, r0
 800114a:	330b      	adds	r3, #11
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	701a      	strb	r2, [r3, #0]

					rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
 8001150:	4936      	ldr	r1, [pc, #216]	@ (800122c <MTi_init+0x354>)
 8001152:	4837      	ldr	r0, [pc, #220]	@ (8001230 <MTi_init+0x358>)
 8001154:	f001 fcf8 	bl	8002b48 <Xbus_createRawMessageHelper>
 8001158:	4603      	mov	r3, r0
 800115a:	4a36      	ldr	r2, [pc, #216]	@ (8001234 <MTi_init+0x35c>)
 800115c:	6013      	str	r3, [r2, #0]
					HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);
 800115e:	4b35      	ldr	r3, [pc, #212]	@ (8001234 <MTi_init+0x35c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	2264      	movs	r2, #100	@ 0x64
 8001166:	9200      	str	r2, [sp, #0]
 8001168:	4a31      	ldr	r2, [pc, #196]	@ (8001230 <MTi_init+0x358>)
 800116a:	21d6      	movs	r1, #214	@ 0xd6
 800116c:	4832      	ldr	r0, [pc, #200]	@ (8001238 <MTi_init+0x360>)
 800116e:	f002 fb01 	bl	8003774 <HAL_I2C_Master_Transmit>

					state = WAITING_FOR_CONFIG_ACK;
 8001172:	4b2a      	ldr	r3, [pc, #168]	@ (800121c <MTi_init+0x344>)
 8001174:	2202      	movs	r2, #2
 8001176:	701a      	strb	r2, [r3, #0]
				}

				// note: the config ack message is just the output config itself
				if(Xbus_getMessageId(m_dataBuffer) == XMID_OutputConfig && state == WAITING_FOR_CONFIG_ACK)
 8001178:	4827      	ldr	r0, [pc, #156]	@ (8001218 <MTi_init+0x340>)
 800117a:	f001 fc31 	bl	80029e0 <Xbus_getMessageId>
 800117e:	4603      	mov	r3, r0
 8001180:	2bc1      	cmp	r3, #193	@ 0xc1
 8001182:	d13f      	bne.n	8001204 <MTi_init+0x32c>
 8001184:	4b25      	ldr	r3, [pc, #148]	@ (800121c <MTi_init+0x344>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d13b      	bne.n	8001204 <MTi_init+0x32c>
				{
					len = snprintf(UART_buffer, sizeof(UART_buffer), "Got config ACK\n");
 800118c:	4a2c      	ldr	r2, [pc, #176]	@ (8001240 <MTi_init+0x368>)
 800118e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001192:	4824      	ldr	r0, [pc, #144]	@ (8001224 <MTi_init+0x34c>)
 8001194:	f005 feb0 	bl	8006ef8 <sniprintf>
 8001198:	4603      	mov	r3, r0
 800119a:	4a23      	ldr	r2, [pc, #140]	@ (8001228 <MTi_init+0x350>)
 800119c:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 800119e:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <MTi_init+0x350>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80011a8:	491e      	ldr	r1, [pc, #120]	@ (8001224 <MTi_init+0x34c>)
 80011aa:	6838      	ldr	r0, [r7, #0]
 80011ac:	f004 fcb0 	bl	8005b10 <HAL_UART_Transmit>

					uint8_t buffer[2];
					HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_PROTOCOL_INFO, 1, buffer, sizeof(buffer), 100);
 80011b0:	2364      	movs	r3, #100	@ 0x64
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2302      	movs	r3, #2
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	2201      	movs	r2, #1
 80011c2:	21d6      	movs	r1, #214	@ 0xd6
 80011c4:	481c      	ldr	r0, [pc, #112]	@ (8001238 <MTi_init+0x360>)
 80011c6:	f002 fbd3 	bl	8003970 <HAL_I2C_Mem_Read>

					uint8_t version = buffer[0];
 80011ca:	7b3b      	ldrb	r3, [r7, #12]
 80011cc:	73fb      	strb	r3, [r7, #15]
					uint8_t dataReadyConfig = buffer[1];
 80011ce:	7b7b      	ldrb	r3, [r7, #13]
 80011d0:	73bb      	strb	r3, [r7, #14]

					len = snprintf(UART_buffer, sizeof(UART_buffer), "Version: %d\nData Ready Pin configuartion: %d\n",version,dataReadyConfig);
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	4a1a      	ldr	r2, [pc, #104]	@ (8001244 <MTi_init+0x36c>)
 80011dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011e0:	4810      	ldr	r0, [pc, #64]	@ (8001224 <MTi_init+0x34c>)
 80011e2:	f005 fe89 	bl	8006ef8 <sniprintf>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <MTi_init+0x350>)
 80011ea:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(huart, (uint8_t *)UART_buffer, len, 10000);
 80011ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <MTi_init+0x350>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80011f6:	490b      	ldr	r1, [pc, #44]	@ (8001224 <MTi_init+0x34c>)
 80011f8:	6838      	ldr	r0, [r7, #0]
 80011fa:	f004 fc89 	bl	8005b10 <HAL_UART_Transmit>

//					Xbus_message(m_xbusTxBuffer, 0xFF, XMID_GotoMeasurement, 0);
//					rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
//					HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);

					state = READY;
 80011fe:	4b07      	ldr	r3, [pc, #28]	@ (800121c <MTi_init+0x344>)
 8001200:	2204      	movs	r2, #4
 8001202:	701a      	strb	r2, [r3, #0]
	while(state != READY) {
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <MTi_init+0x344>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b04      	cmp	r3, #4
 800120a:	f47f ae82 	bne.w	8000f12 <MTi_init+0x3a>
				}
			}
		}
	}
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000308 	.word	0x20000308
 800121c:	20000304 	.word	0x20000304
 8001220:	080091ac 	.word	0x080091ac
 8001224:	20000200 	.word	0x20000200
 8001228:	20000300 	.word	0x20000300
 800122c:	20000408 	.word	0x20000408
 8001230:	20000508 	.word	0x20000508
 8001234:	20000588 	.word	0x20000588
 8001238:	20000594 	.word	0x20000594
 800123c:	080091b8 	.word	0x080091b8
 8001240:	080091c8 	.word	0x080091c8
 8001244:	080091d8 	.word	0x080091d8

08001248 <MTi_manual_init>:

void MTi_manual_init(UART_HandleTypeDef *huart) {
 8001248:	b580      	push	{r7, lr}
 800124a:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800124e:	af00      	add	r7, sp, #0
 8001250:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001254:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001258:	6018      	str	r0, [r3, #0]
	uint8_t rxChar;
	char txBuffer[256];
	char inputBuffer[256];
	int index = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
	int len = snprintf(txBuffer, sizeof(txBuffer), "Enter a sample rate less than 100:\r\n");
 8001260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001264:	4a61      	ldr	r2, [pc, #388]	@ (80013ec <MTi_manual_init+0x1a4>)
 8001266:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800126a:	4618      	mov	r0, r3
 800126c:	f005 fe44 	bl	8006ef8 <sniprintf>
 8001270:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 8001274:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8001278:	b29a      	uxth	r2, r3
 800127a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800127e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001282:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 8001286:	2364      	movs	r3, #100	@ 0x64
 8001288:	6800      	ldr	r0, [r0, #0]
 800128a:	f004 fc41 	bl	8005b10 <HAL_UART_Transmit>

	// Loop to receive one character at a time
	while (1) {
		// Blocking call to receive one character
		if (HAL_UART_Receive(huart, &rxChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 800128e:	f207 210b 	addw	r1, r7, #523	@ 0x20b
 8001292:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001296:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	2201      	movs	r2, #1
 80012a0:	6800      	ldr	r0, [r0, #0]
 80012a2:	f004 fcc0 	bl	8005c26 <HAL_UART_Receive>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f0      	bne.n	800128e <MTi_manual_init+0x46>
			// Optionally echo the character back to the terminal
			HAL_UART_Transmit(huart, &rxChar, 1, 100);
 80012ac:	f207 210b 	addw	r1, r7, #523	@ 0x20b
 80012b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80012b4:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80012b8:	2364      	movs	r3, #100	@ 0x64
 80012ba:	2201      	movs	r2, #1
 80012bc:	6800      	ldr	r0, [r0, #0]
 80012be:	f004 fc27 	bl	8005b10 <HAL_UART_Transmit>

			// Check if the character is a newline or carriage return (end of input)
			if (rxChar == '\n' || rxChar == '\r') {
 80012c2:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 80012c6:	2b0a      	cmp	r3, #10
 80012c8:	d003      	beq.n	80012d2 <MTi_manual_init+0x8a>
 80012ca:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 80012ce:	2b0d      	cmp	r3, #13
 80012d0:	d109      	bne.n	80012e6 <MTi_manual_init+0x9e>
				inputBuffer[index] = '\0';  // Null-terminate the string
 80012d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80012d6:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80012da:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80012de:	4413      	add	r3, r2
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
				break;
 80012e4:	e038      	b.n	8001358 <MTi_manual_init+0x110>
			} else if (rxChar == 8){
 80012e6:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d11a      	bne.n	8001324 <MTi_manual_init+0xdc>
				int len = snprintf(txBuffer, sizeof(txBuffer), "\nInput buffer cleared, re-enter number:\n");
 80012ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80012f2:	4a3f      	ldr	r2, [pc, #252]	@ (80013f0 <MTi_manual_init+0x1a8>)
 80012f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012f8:	4618      	mov	r0, r3
 80012fa:	f005 fdfd 	bl	8006ef8 <sniprintf>
 80012fe:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
				HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 8001302:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001306:	b29a      	uxth	r2, r3
 8001308:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800130c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001310:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 8001314:	2364      	movs	r3, #100	@ 0x64
 8001316:	6800      	ldr	r0, [r0, #0]
 8001318:	f004 fbfa 	bl	8005b10 <HAL_UART_Transmit>
				index = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8001322:	e7b4      	b.n	800128e <MTi_manual_init+0x46>
			} else {
				// Only store the character if there is still room in the buffer
				if (index < 256 - 1) {
 8001324:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001328:	2bfe      	cmp	r3, #254	@ 0xfe
 800132a:	dc0c      	bgt.n	8001346 <MTi_manual_init+0xfe>
					inputBuffer[index++] = rxChar;
 800132c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8001336:	f897 120b 	ldrb.w	r1, [r7, #523]	@ 0x20b
 800133a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800133e:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8001342:	54d1      	strb	r1, [r2, r3]
 8001344:	e7a3      	b.n	800128e <MTi_manual_init+0x46>
				} else {
					// If the buffer is full, null-terminate and break out
					inputBuffer[index] = '\0';
 8001346:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800134a:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 800134e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001352:	4413      	add	r3, r2
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// Convert the accumulated string to an integer
	int userSampleRate = atoi(inputBuffer);
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	4618      	mov	r0, r3
 800135e:	f005 f829 	bl	80063b4 <atoi>
 8001362:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
	if (userSampleRate > 100) {
 8001366:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800136a:	2b64      	cmp	r3, #100	@ 0x64
 800136c:	dd17      	ble.n	800139e <MTi_manual_init+0x156>
		int len = snprintf(txBuffer, sizeof(txBuffer), "Error: ensure sample rate is less than 100\n");
 800136e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001372:	4a20      	ldr	r2, [pc, #128]	@ (80013f4 <MTi_manual_init+0x1ac>)
 8001374:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001378:	4618      	mov	r0, r3
 800137a:	f005 fdbd 	bl	8006ef8 <sniprintf>
 800137e:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
		HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 8001382:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001386:	b29a      	uxth	r2, r3
 8001388:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800138c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001390:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 8001394:	2364      	movs	r3, #100	@ 0x64
 8001396:	6800      	ldr	r0, [r0, #0]
 8001398:	f004 fbba 	bl	8005b10 <HAL_UART_Transmit>
 800139c:	e022      	b.n	80013e4 <MTi_manual_init+0x19c>
		return;
	}
	len = snprintf(txBuffer, sizeof(txBuffer), "Setting IMU Sample Rate to %d Hz\n",userSampleRate);
 800139e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80013a2:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80013a6:	4a14      	ldr	r2, [pc, #80]	@ (80013f8 <MTi_manual_init+0x1b0>)
 80013a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013ac:	f005 fda4 	bl	8006ef8 <sniprintf>
 80013b0:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 80013b4:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80013be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80013c2:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80013c6:	2364      	movs	r3, #100	@ 0x64
 80013c8:	6800      	ldr	r0, [r0, #0]
 80013ca:	f004 fba1 	bl	8005b10 <HAL_UART_Transmit>
	MTi_init(userSampleRate,huart);
 80013ce:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80013d8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80013dc:	6819      	ldr	r1, [r3, #0]
 80013de:	4610      	mov	r0, r2
 80013e0:	f7ff fd7a 	bl	8000ed8 <MTi_init>
}
 80013e4:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	08009208 	.word	0x08009208
 80013f0:	08009230 	.word	0x08009230
 80013f4:	0800925c 	.word	0x0800925c
 80013f8:	08009288 	.word	0x08009288

080013fc <MTi_step>:
	Xbus_message(m_xbusTxBuffer, 0xFF, XMID_GotoMeasurement, 0);
	rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
	HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);
}

void MTi_step() {
 80013fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001400:	b09e      	sub	sp, #120	@ 0x78
 8001402:	af08      	add	r7, sp, #32

    // Check if new data is available.
    if (checkDataReadyLineMain()) {
 8001404:	f001 fb90 	bl	8002b28 <checkDataReadyLineMain>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d023      	beq.n	8001456 <MTi_step+0x5a>
        HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1),
 800140e:	2364      	movs	r3, #100	@ 0x64
 8001410:	9302      	str	r3, [sp, #8]
 8001412:	2304      	movs	r3, #4
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	4b96      	ldr	r3, [pc, #600]	@ (8001670 <MTi_step+0x274>)
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2301      	movs	r3, #1
 800141c:	2204      	movs	r2, #4
 800141e:	21d6      	movs	r1, #214	@ 0xd6
 8001420:	4894      	ldr	r0, [pc, #592]	@ (8001674 <MTi_step+0x278>)
 8001422:	f002 faa5 	bl	8003970 <HAL_I2C_Mem_Read>
                           XBUS_PIPE_STATUS, 1, status, sizeof(status), 100);
        notificationMessageSize = status[0] | (status[1] << 8);
 8001426:	4b92      	ldr	r3, [pc, #584]	@ (8001670 <MTi_step+0x274>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b21a      	sxth	r2, r3
 800142c:	4b90      	ldr	r3, [pc, #576]	@ (8001670 <MTi_step+0x274>)
 800142e:	785b      	ldrb	r3, [r3, #1]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21b      	sxth	r3, r3
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b8f      	ldr	r3, [pc, #572]	@ (8001678 <MTi_step+0x27c>)
 800143c:	801a      	strh	r2, [r3, #0]
        measurementMessageSize    = status[2] | (status[3] << 8);
 800143e:	4b8c      	ldr	r3, [pc, #560]	@ (8001670 <MTi_step+0x274>)
 8001440:	789b      	ldrb	r3, [r3, #2]
 8001442:	b21a      	sxth	r2, r3
 8001444:	4b8a      	ldr	r3, [pc, #552]	@ (8001670 <MTi_step+0x274>)
 8001446:	78db      	ldrb	r3, [r3, #3]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b21b      	sxth	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	b21b      	sxth	r3, r3
 8001450:	b29a      	uxth	r2, r3
 8001452:	4b8a      	ldr	r3, [pc, #552]	@ (800167c <MTi_step+0x280>)
 8001454:	801a      	strh	r2, [r3, #0]
    }

    if (measurementMessageSize && measurementMessageSize < sizeof(m_dataBuffer)) {
 8001456:	4b89      	ldr	r3, [pc, #548]	@ (800167c <MTi_step+0x280>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8102 	beq.w	8001664 <MTi_step+0x268>
 8001460:	4b86      	ldr	r3, [pc, #536]	@ (800167c <MTi_step+0x280>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	2bff      	cmp	r3, #255	@ 0xff
 8001466:	f200 80fd 	bhi.w	8001664 <MTi_step+0x268>
        if (checkDataReadyLineMain()) {
 800146a:	f001 fb5d 	bl	8002b28 <checkDataReadyLineMain>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80f7 	beq.w	8001664 <MTi_step+0x268>
            // Read the measurement data into the buffer (starting at offset 2)
            HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1),
 8001476:	4b81      	ldr	r3, [pc, #516]	@ (800167c <MTi_step+0x280>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	2264      	movs	r2, #100	@ 0x64
 800147c:	9202      	str	r2, [sp, #8]
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	4b7f      	ldr	r3, [pc, #508]	@ (8001680 <MTi_step+0x284>)
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2301      	movs	r3, #1
 8001486:	2206      	movs	r2, #6
 8001488:	21d6      	movs	r1, #214	@ 0xd6
 800148a:	487a      	ldr	r0, [pc, #488]	@ (8001674 <MTi_step+0x278>)
 800148c:	f002 fa70 	bl	8003970 <HAL_I2C_Mem_Read>
                               XBUS_MEASUREMENT_PIPE, 1, &m_dataBuffer[2],
                               measurementMessageSize, 100);

            // Check that the message is of type XMID_MtData2
            if (Xbus_getMessageId(m_dataBuffer) == XMID_MtData2) {
 8001490:	487c      	ldr	r0, [pc, #496]	@ (8001684 <MTi_step+0x288>)
 8001492:	f001 faa5 	bl	80029e0 <Xbus_getMessageId>
 8001496:	4603      	mov	r3, r0
 8001498:	2b36      	cmp	r3, #54	@ 0x36
 800149a:	f040 80e3 	bne.w	8001664 <MTi_step+0x268>
//            	int len = snprintf(UART_buffer, sizeof(UART_buffer), "Took a meausrement\n");
//            	HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);
                int index = 4;  // Start index for reading the payload
 800149e:	2304      	movs	r3, #4
 80014a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                uint16_t dataId   = extractUint16(m_dataBuffer, &index);
 80014a2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014a6:	4619      	mov	r1, r3
 80014a8:	4876      	ldr	r0, [pc, #472]	@ (8001684 <MTi_step+0x288>)
 80014aa:	f001 fbe0 	bl	8002c6e <extractUint16>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                uint8_t  dataSize = extractUint8(m_dataBuffer, &index);
 80014b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014b8:	4619      	mov	r1, r3
 80014ba:	4872      	ldr	r0, [pc, #456]	@ (8001684 <MTi_step+0x288>)
 80014bc:	f001 fbbf 	bl	8002c3e <extractUint8>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                float rotMatrixBuffer[9];
                if (dataId == 0x2020) {
 80014c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80014ca:	f242 0220 	movw	r2, #8224	@ 0x2020
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d159      	bne.n	8001586 <MTi_step+0x18a>
                	rotMatrixBuffer[0] = extractFloat(m_dataBuffer, &index);
 80014d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014d6:	4619      	mov	r1, r3
 80014d8:	486a      	ldr	r0, [pc, #424]	@ (8001684 <MTi_step+0x288>)
 80014da:	f001 fc41 	bl	8002d60 <extractFloat>
 80014de:	eef0 7a40 	vmov.f32	s15, s0
 80014e2:	edc7 7a01 	vstr	s15, [r7, #4]
                	rotMatrixBuffer[1] = extractFloat(m_dataBuffer, &index);
 80014e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014ea:	4619      	mov	r1, r3
 80014ec:	4865      	ldr	r0, [pc, #404]	@ (8001684 <MTi_step+0x288>)
 80014ee:	f001 fc37 	bl	8002d60 <extractFloat>
 80014f2:	eef0 7a40 	vmov.f32	s15, s0
 80014f6:	edc7 7a02 	vstr	s15, [r7, #8]
                	rotMatrixBuffer[2] = extractFloat(m_dataBuffer, &index);
 80014fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014fe:	4619      	mov	r1, r3
 8001500:	4860      	ldr	r0, [pc, #384]	@ (8001684 <MTi_step+0x288>)
 8001502:	f001 fc2d 	bl	8002d60 <extractFloat>
 8001506:	eef0 7a40 	vmov.f32	s15, s0
 800150a:	edc7 7a03 	vstr	s15, [r7, #12]
                	rotMatrixBuffer[3] = extractFloat(m_dataBuffer, &index); // roll
 800150e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001512:	4619      	mov	r1, r3
 8001514:	485b      	ldr	r0, [pc, #364]	@ (8001684 <MTi_step+0x288>)
 8001516:	f001 fc23 	bl	8002d60 <extractFloat>
 800151a:	eef0 7a40 	vmov.f32	s15, s0
 800151e:	edc7 7a04 	vstr	s15, [r7, #16]
                	rotMatrixBuffer[4] = extractFloat(m_dataBuffer, &index); // pitch
 8001522:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001526:	4619      	mov	r1, r3
 8001528:	4856      	ldr	r0, [pc, #344]	@ (8001684 <MTi_step+0x288>)
 800152a:	f001 fc19 	bl	8002d60 <extractFloat>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	edc7 7a05 	vstr	s15, [r7, #20]
                	rotMatrixBuffer[5] = extractFloat(m_dataBuffer, &index); // yaw
 8001536:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800153a:	4619      	mov	r1, r3
 800153c:	4851      	ldr	r0, [pc, #324]	@ (8001684 <MTi_step+0x288>)
 800153e:	f001 fc0f 	bl	8002d60 <extractFloat>
 8001542:	eef0 7a40 	vmov.f32	s15, s0
 8001546:	edc7 7a06 	vstr	s15, [r7, #24]
                	rotMatrixBuffer[6] = extractFloat(m_dataBuffer, &index); // roll
 800154a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800154e:	4619      	mov	r1, r3
 8001550:	484c      	ldr	r0, [pc, #304]	@ (8001684 <MTi_step+0x288>)
 8001552:	f001 fc05 	bl	8002d60 <extractFloat>
 8001556:	eef0 7a40 	vmov.f32	s15, s0
 800155a:	edc7 7a07 	vstr	s15, [r7, #28]
                	rotMatrixBuffer[7] = extractFloat(m_dataBuffer, &index); // pitch
 800155e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001562:	4619      	mov	r1, r3
 8001564:	4847      	ldr	r0, [pc, #284]	@ (8001684 <MTi_step+0x288>)
 8001566:	f001 fbfb 	bl	8002d60 <extractFloat>
 800156a:	eef0 7a40 	vmov.f32	s15, s0
 800156e:	edc7 7a08 	vstr	s15, [r7, #32]
                	rotMatrixBuffer[8] = extractFloat(m_dataBuffer, &index); // yaw
 8001572:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001576:	4619      	mov	r1, r3
 8001578:	4842      	ldr	r0, [pc, #264]	@ (8001684 <MTi_step+0x288>)
 800157a:	f001 fbf1 	bl	8002d60 <extractFloat>
 800157e:	eef0 7a40 	vmov.f32	s15, s0
 8001582:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                }

                dataId   = extractUint16(m_dataBuffer, &index);
 8001586:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800158a:	4619      	mov	r1, r3
 800158c:	483d      	ldr	r0, [pc, #244]	@ (8001684 <MTi_step+0x288>)
 800158e:	f001 fb6e 	bl	8002c6e <extractUint16>
 8001592:	4603      	mov	r3, r0
 8001594:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				dataSize = extractUint8(m_dataBuffer, &index);
 8001598:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800159c:	4619      	mov	r1, r3
 800159e:	4839      	ldr	r0, [pc, #228]	@ (8001684 <MTi_step+0x288>)
 80015a0:	f001 fb4d 	bl	8002c3e <extractUint8>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				float quatBuffer[9];
				if (dataId == 0x2010) {
 80015aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80015ae:	f242 0210 	movw	r2, #8208	@ 0x2010
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d127      	bne.n	8001606 <MTi_step+0x20a>
					quatBuffer[0] = extractFloat(m_dataBuffer, &index);
 80015b6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015ba:	4619      	mov	r1, r3
 80015bc:	4831      	ldr	r0, [pc, #196]	@ (8001684 <MTi_step+0x288>)
 80015be:	f001 fbcf 	bl	8002d60 <extractFloat>
 80015c2:	eef0 7a40 	vmov.f32	s15, s0
 80015c6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
					quatBuffer[1] = extractFloat(m_dataBuffer, &index);
 80015ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015ce:	4619      	mov	r1, r3
 80015d0:	482c      	ldr	r0, [pc, #176]	@ (8001684 <MTi_step+0x288>)
 80015d2:	f001 fbc5 	bl	8002d60 <extractFloat>
 80015d6:	eef0 7a40 	vmov.f32	s15, s0
 80015da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
					quatBuffer[2] = extractFloat(m_dataBuffer, &index);
 80015de:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015e2:	4619      	mov	r1, r3
 80015e4:	4827      	ldr	r0, [pc, #156]	@ (8001684 <MTi_step+0x288>)
 80015e6:	f001 fbbb 	bl	8002d60 <extractFloat>
 80015ea:	eef0 7a40 	vmov.f32	s15, s0
 80015ee:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
					quatBuffer[3] = extractFloat(m_dataBuffer, &index);
 80015f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015f6:	4619      	mov	r1, r3
 80015f8:	4822      	ldr	r0, [pc, #136]	@ (8001684 <MTi_step+0x288>)
 80015fa:	f001 fbb1 	bl	8002d60 <extractFloat>
 80015fe:	eef0 7a40 	vmov.f32	s15, s0
 8001602:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
				int len;

//                len = snprintf(UART_buffer, sizeof(UART_buffer), "Rotation Matrix:\n  %.2f %.2f %.2f\n %.2f %.2f %.2f\n %.2f %.2f %.2f\n ",rotMatrixBuffer[0],rotMatrixBuffer[1],rotMatrixBuffer[2],rotMatrixBuffer[3],rotMatrixBuffer[4],rotMatrixBuffer[5],rotMatrixBuffer[6],rotMatrixBuffer[7],rotMatrixBuffer[8]);
//                HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);

				len = snprintf(UART_buffer, sizeof(UART_buffer), "Quaternion: %.2f %.2f %.2f %.2f\n",quatBuffer[0],quatBuffer[1],quatBuffer[2],quatBuffer[3]);
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ffbd 	bl	8000588 <__aeabi_f2d>
 800160e:	4604      	mov	r4, r0
 8001610:	460d      	mov	r5, r1
 8001612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ffb7 	bl	8000588 <__aeabi_f2d>
 800161a:	4680      	mov	r8, r0
 800161c:	4689      	mov	r9, r1
 800161e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ffb1 	bl	8000588 <__aeabi_f2d>
 8001626:	4682      	mov	sl, r0
 8001628:	468b      	mov	fp, r1
 800162a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ffab 	bl	8000588 <__aeabi_f2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800163a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800163e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001642:	e9cd 4500 	strd	r4, r5, [sp]
 8001646:	4a10      	ldr	r2, [pc, #64]	@ (8001688 <MTi_step+0x28c>)
 8001648:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800164c:	480f      	ldr	r0, [pc, #60]	@ (800168c <MTi_step+0x290>)
 800164e:	f005 fc53 	bl	8006ef8 <sniprintf>
 8001652:	6538      	str	r0, [r7, #80]	@ 0x50
				HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);
 8001654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001656:	b29a      	uxth	r2, r3
 8001658:	f242 7310 	movw	r3, #10000	@ 0x2710
 800165c:	490b      	ldr	r1, [pc, #44]	@ (800168c <MTi_step+0x290>)
 800165e:	480c      	ldr	r0, [pc, #48]	@ (8001690 <MTi_step+0x294>)
 8001660:	f004 fa56 	bl	8005b10 <HAL_UART_Transmit>
//				len = snprintf(UART_buffer, sizeof(UART_buffer), "g in body: %.2f %.2f %.2f\n",-9.81*rotMatrixBuffer[2],-9.81*rotMatrixBuffer[5],-9.81*rotMatrixBuffer[8]);
//				HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);
            }
        }
    }
}
 8001664:	bf00      	nop
 8001666:	3758      	adds	r7, #88	@ 0x58
 8001668:	46bd      	mov	sp, r7
 800166a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800166e:	bf00      	nop
 8001670:	20000590 	.word	0x20000590
 8001674:	20000594 	.word	0x20000594
 8001678:	2000058c 	.word	0x2000058c
 800167c:	2000058e 	.word	0x2000058e
 8001680:	2000030a 	.word	0x2000030a
 8001684:	20000308 	.word	0x20000308
 8001688:	080092ac 	.word	0x080092ac
 800168c:	20000200 	.word	0x20000200
 8001690:	20000678 	.word	0x20000678

08001694 <app_start>:
 */


#include "app.h"

void app_start(UART_HandleTypeDef *huart) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b0c4      	sub	sp, #272	@ 0x110
 8001698:	af00      	add	r7, sp, #0
 800169a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800169e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016a2:	6018      	str	r0, [r3, #0]
	char txBuffer[256];
	// uint8_t sampleRate = 0x40;

	while (1) {
		// Blocking call to receive one character
		int len = snprintf(txBuffer, sizeof(txBuffer), "------ SADS Balance Configuration Tool -----\n");
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	4a42      	ldr	r2, [pc, #264]	@ (80017b4 <app_start+0x120>)
 80016aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016ae:	4618      	mov	r0, r3
 80016b0:	f005 fc22 	bl	8006ef8 <sniprintf>
 80016b4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
		HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 80016b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80016bc:	b29a      	uxth	r2, r3
 80016be:	f107 0108 	add.w	r1, r7, #8
 80016c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016c6:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80016ca:	2364      	movs	r3, #100	@ 0x64
 80016cc:	6800      	ldr	r0, [r0, #0]
 80016ce:	f004 fa1f 	bl	8005b10 <HAL_UART_Transmit>
		len = snprintf(txBuffer, sizeof(txBuffer), "Press 'h' to home system\nPress 'm' to go into manual mode\nPress 'i' to configure IMU sample rate\n");
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4a38      	ldr	r2, [pc, #224]	@ (80017b8 <app_start+0x124>)
 80016d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016dc:	4618      	mov	r0, r3
 80016de:	f005 fc0b 	bl	8006ef8 <sniprintf>
 80016e2:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
		HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 80016e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f107 0108 	add.w	r1, r7, #8
 80016f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016f4:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80016f8:	2364      	movs	r3, #100	@ 0x64
 80016fa:	6800      	ldr	r0, [r0, #0]
 80016fc:	f004 fa08 	bl	8005b10 <HAL_UART_Transmit>

		if (HAL_UART_Receive(huart, &rxChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001700:	f207 110b 	addw	r1, r7, #267	@ 0x10b
 8001704:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001708:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	2201      	movs	r2, #1
 8001712:	6800      	ldr	r0, [r0, #0]
 8001714:	f004 fa87 	bl	8005c26 <HAL_UART_Receive>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1c2      	bne.n	80016a4 <app_start+0x10>
			if (rxChar == 'h') {
 800171e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8001722:	2b68      	cmp	r3, #104	@ 0x68
 8001724:	d11d      	bne.n	8001762 <app_start+0xce>
				len = snprintf(txBuffer, sizeof(txBuffer), "Entering homing routine in 5 seconds, ensure 24V power is connected...\n");
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4a24      	ldr	r2, [pc, #144]	@ (80017bc <app_start+0x128>)
 800172c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001730:	4618      	mov	r0, r3
 8001732:	f005 fbe1 	bl	8006ef8 <sniprintf>
 8001736:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
				HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 800173a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800173e:	b29a      	uxth	r2, r3
 8001740:	f107 0108 	add.w	r1, r7, #8
 8001744:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001748:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 800174c:	2364      	movs	r3, #100	@ 0x64
 800174e:	6800      	ldr	r0, [r0, #0]
 8001750:	f004 f9de 	bl	8005b10 <HAL_UART_Transmit>
				HAL_Delay(5000);
 8001754:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001758:	f001 fbb4 	bl	8002ec4 <HAL_Delay>
				home();
 800175c:	f000 fb8e 	bl	8001e7c <home>
 8001760:	e7a0      	b.n	80016a4 <app_start+0x10>

			} else if(rxChar == 'm') {
 8001762:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8001766:	2b6d      	cmp	r3, #109	@ 0x6d
 8001768:	d103      	bne.n	8001772 <app_start+0xde>
				manualControl(&huart5);
 800176a:	4815      	ldr	r0, [pc, #84]	@ (80017c0 <app_start+0x12c>)
 800176c:	f000 fc38 	bl	8001fe0 <manualControl>
 8001770:	e798      	b.n	80016a4 <app_start+0x10>
			} else if(rxChar == 'i') {
 8001772:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8001776:	2b69      	cmp	r3, #105	@ 0x69
 8001778:	d103      	bne.n	8001782 <app_start+0xee>
				MTi_manual_init(&huart5);
 800177a:	4811      	ldr	r0, [pc, #68]	@ (80017c0 <app_start+0x12c>)
 800177c:	f7ff fd64 	bl	8001248 <MTi_manual_init>
 8001780:	e790      	b.n	80016a4 <app_start+0x10>
			} else {
				len = snprintf(txBuffer, sizeof(txBuffer), "Invalid keystroke\n");
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4a0f      	ldr	r2, [pc, #60]	@ (80017c4 <app_start+0x130>)
 8001788:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800178c:	4618      	mov	r0, r3
 800178e:	f005 fbb3 	bl	8006ef8 <sniprintf>
 8001792:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
				HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 8001796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800179a:	b29a      	uxth	r2, r3
 800179c:	f107 0108 	add.w	r1, r7, #8
 80017a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017a4:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80017a8:	2364      	movs	r3, #100	@ 0x64
 80017aa:	6800      	ldr	r0, [r0, #0]
 80017ac:	f004 f9b0 	bl	8005b10 <HAL_UART_Transmit>
	while (1) {
 80017b0:	e778      	b.n	80016a4 <app_start+0x10>
 80017b2:	bf00      	nop
 80017b4:	080092d0 	.word	0x080092d0
 80017b8:	08009300 	.word	0x08009300
 80017bc:	08009364 	.word	0x08009364
 80017c0:	20000630 	.word	0x20000630
 80017c4:	080093ac 	.word	0x080093ac

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017cc:	f001 fb08 	bl	8002de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d0:	f000 f81a 	bl	8001808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d4:	f000 f95a 	bl	8001a8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017d8:	f000 f92e 	bl	8001a38 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80017dc:	f000 f886 	bl	80018ec <MX_I2C1_Init>
  MX_TIM2_Init();
 80017e0:	f000 f8b4 	bl	800194c <MX_TIM2_Init>
  MX_UART5_Init();
 80017e4:	f000 f8fe 	bl	80019e4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); // Start TIM2 interrupts
 80017e8:	4805      	ldr	r0, [pc, #20]	@ (8001800 <main+0x38>)
 80017ea:	f003 fd1b 	bl	8005224 <HAL_TIM_Base_Start_IT>

  stepperControl_init();
 80017ee:	f000 fac7 	bl	8001d80 <stepperControl_init>
  app_start(&huart5);
 80017f2:	4804      	ldr	r0, [pc, #16]	@ (8001804 <main+0x3c>)
 80017f4:	f7ff ff4e 	bl	8001694 <app_start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 MTi_step();
 80017f8:	f7ff fe00 	bl	80013fc <MTi_step>
 80017fc:	e7fc      	b.n	80017f8 <main+0x30>
 80017fe:	bf00      	nop
 8001800:	200005e8 	.word	0x200005e8
 8001804:	20000630 	.word	0x20000630

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b094      	sub	sp, #80	@ 0x50
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	2234      	movs	r2, #52	@ 0x34
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f005 fbe5 	bl	8006fe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	4b2c      	ldr	r3, [pc, #176]	@ (80018e4 <SystemClock_Config+0xdc>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	4a2b      	ldr	r2, [pc, #172]	@ (80018e4 <SystemClock_Config+0xdc>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183a:	6413      	str	r3, [r2, #64]	@ 0x40
 800183c:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <SystemClock_Config+0xdc>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001848:	2300      	movs	r3, #0
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	4b26      	ldr	r3, [pc, #152]	@ (80018e8 <SystemClock_Config+0xe0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a25      	ldr	r2, [pc, #148]	@ (80018e8 <SystemClock_Config+0xe0>)
 8001852:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <SystemClock_Config+0xe0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001864:	2302      	movs	r3, #2
 8001866:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001868:	2301      	movs	r3, #1
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800186c:	2310      	movs	r3, #16
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001870:	2302      	movs	r3, #2
 8001872:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001874:	2300      	movs	r3, #0
 8001876:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001878:	2308      	movs	r3, #8
 800187a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800187c:	23b4      	movs	r3, #180	@ 0xb4
 800187e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001880:	2302      	movs	r3, #2
 8001882:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001884:	2302      	movs	r3, #2
 8001886:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001888:	2302      	movs	r3, #2
 800188a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4618      	mov	r0, r3
 8001892:	f003 f9d9 	bl	8004c48 <HAL_RCC_OscConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800189c:	f000 f9fa 	bl	8001c94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018a0:	f002 fe38 	bl	8004514 <HAL_PWREx_EnableOverDrive>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018aa:	f000 f9f3 	bl	8001c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ae:	230f      	movs	r3, #15
 80018b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b2:	2302      	movs	r3, #2
 80018b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	2105      	movs	r1, #5
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 fe71 	bl	80045b4 <HAL_RCC_ClockConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80018d8:	f000 f9dc 	bl	8001c94 <Error_Handler>
  }
}
 80018dc:	bf00      	nop
 80018de:	3750      	adds	r7, #80	@ 0x50
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000

080018ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018f0:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <MX_I2C1_Init+0x54>)
 80018f2:	4a14      	ldr	r2, [pc, #80]	@ (8001944 <MX_I2C1_Init+0x58>)
 80018f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018f6:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <MX_I2C1_Init+0x54>)
 80018f8:	4a13      	ldr	r2, [pc, #76]	@ (8001948 <MX_I2C1_Init+0x5c>)
 80018fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80018fc:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <MX_I2C1_Init+0x54>)
 80018fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001902:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001904:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <MX_I2C1_Init+0x54>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800190a:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <MX_I2C1_Init+0x54>)
 800190c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001910:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <MX_I2C1_Init+0x54>)
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001918:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <MX_I2C1_Init+0x54>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <MX_I2C1_Init+0x54>)
 8001920:	2200      	movs	r2, #0
 8001922:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <MX_I2C1_Init+0x54>)
 8001926:	2200      	movs	r2, #0
 8001928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	@ (8001940 <MX_I2C1_Init+0x54>)
 800192c:	f001 fdde 	bl	80034ec <HAL_I2C_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001936:	f000 f9ad 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000594 	.word	0x20000594
 8001944:	40005400 	.word	0x40005400
 8001948:	00061a80 	.word	0x00061a80

0800194c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001960:	463b      	mov	r3, r7
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001968:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <MX_TIM2_Init+0x94>)
 800196a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800196e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17999;
 8001970:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <MX_TIM2_Init+0x94>)
 8001972:	f244 624f 	movw	r2, #17999	@ 0x464f
 8001976:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <MX_TIM2_Init+0x94>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 800197e:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <MX_TIM2_Init+0x94>)
 8001980:	2202      	movs	r2, #2
 8001982:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001984:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <MX_TIM2_Init+0x94>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <MX_TIM2_Init+0x94>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001990:	4813      	ldr	r0, [pc, #76]	@ (80019e0 <MX_TIM2_Init+0x94>)
 8001992:	f003 fbf7 	bl	8005184 <HAL_TIM_Base_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800199c:	f000 f97a 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	4619      	mov	r1, r3
 80019ac:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <MX_TIM2_Init+0x94>)
 80019ae:	f003 fd99 	bl	80054e4 <HAL_TIM_ConfigClockSource>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019b8:	f000 f96c 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <MX_TIM2_Init+0x94>)
 80019ca:	f003 ffc1 	bl	8005950 <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019d4:	f000 f95e 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200005e8 	.word	0x200005e8

080019e4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <MX_UART5_Init+0x4c>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <MX_UART5_Init+0x50>)
 80019ec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80019ee:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <MX_UART5_Init+0x4c>)
 80019f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019f4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <MX_UART5_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <MX_UART5_Init+0x4c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <MX_UART5_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a08:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <MX_UART5_Init+0x4c>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <MX_UART5_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <MX_UART5_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a1a:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <MX_UART5_Init+0x4c>)
 8001a1c:	f004 f828 	bl	8005a70 <HAL_UART_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001a26:	f000 f935 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000630 	.word	0x20000630
 8001a34:	40005000 	.word	0x40005000

08001a38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <MX_USART2_UART_Init+0x50>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a44:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a70:	f003 fffe 	bl	8005a70 <HAL_UART_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a7a:	f000 f90b 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000678 	.word	0x20000678
 8001a88:	40004400 	.word	0x40004400

08001a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	@ 0x28
 8001a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b77      	ldr	r3, [pc, #476]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a76      	ldr	r2, [pc, #472]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b74      	ldr	r3, [pc, #464]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b70      	ldr	r3, [pc, #448]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4a6f      	ldr	r2, [pc, #444]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ace:	4b6d      	ldr	r3, [pc, #436]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b69      	ldr	r3, [pc, #420]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a68      	ldr	r2, [pc, #416]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b66      	ldr	r3, [pc, #408]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b62      	ldr	r3, [pc, #392]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a61      	ldr	r2, [pc, #388]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b5f      	ldr	r3, [pc, #380]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4b5b      	ldr	r3, [pc, #364]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a5a      	ldr	r2, [pc, #360]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b58      	ldr	r3, [pc, #352]	@ (8001c84 <MX_GPIO_Init+0x1f8>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, I2C_ADD0_Pin|I2C_ADD1_Pin|I2C_ADD2_Pin|PSEL_1_Pin, GPIO_PIN_SET);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8001b34:	4854      	ldr	r0, [pc, #336]	@ (8001c88 <MX_GPIO_Init+0x1fc>)
 8001b36:	f001 fca7 	bl	8003488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP4_Pin|DIR3_Pin|STEP1_Pin|STEP2_Pin
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f24e 4132 	movw	r1, #58418	@ 0xe432
 8001b40:	4852      	ldr	r0, [pc, #328]	@ (8001c8c <MX_GPIO_Init+0x200>)
 8001b42:	f001 fca1 	bl	8003488 <HAL_GPIO_WritePin>
                          |STEP3_Pin|DIR2_Pin|RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PSEL_0_GPIO_Port, PSEL_0_Pin, GPIO_PIN_SET);
 8001b46:	2201      	movs	r2, #1
 8001b48:	2180      	movs	r1, #128	@ 0x80
 8001b4a:	4851      	ldr	r0, [pc, #324]	@ (8001c90 <MX_GPIO_Init+0x204>)
 8001b4c:	f001 fc9c 	bl	8003488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR4_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001b56:	484c      	ldr	r0, [pc, #304]	@ (8001c88 <MX_GPIO_Init+0x1fc>)
 8001b58:	f001 fc96 	bl	8003488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	4847      	ldr	r0, [pc, #284]	@ (8001c90 <MX_GPIO_Init+0x204>)
 8001b74:	f001 fadc 	bl	8003130 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_ADD0_Pin I2C_ADD1_Pin I2C_ADD2_Pin DIR4_Pin
                           PSEL_1_Pin DIR1_Pin */
  GPIO_InitStruct.Pin = I2C_ADD0_Pin|I2C_ADD1_Pin|I2C_ADD2_Pin|DIR4_Pin
 8001b78:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b7c:	617b      	str	r3, [r7, #20]
                          |PSEL_1_Pin|DIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	483d      	ldr	r0, [pc, #244]	@ (8001c88 <MX_GPIO_Init+0x1fc>)
 8001b92:	f001 facd 	bl	8003130 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP4_Pin DIR3_Pin STEP1_Pin STEP2_Pin
                           STEP3_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = STEP4_Pin|DIR3_Pin|STEP1_Pin|STEP2_Pin
 8001b96:	f24e 4312 	movw	r3, #58386	@ 0xe412
 8001b9a:	617b      	str	r3, [r7, #20]
                          |STEP3_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4837      	ldr	r0, [pc, #220]	@ (8001c8c <MX_GPIO_Init+0x200>)
 8001bb0:	f001 fabe 	bl	8003130 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH2_Pin LIMIT_SWITCH1_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH2_Pin|LIMIT_SWITCH1_Pin;
 8001bb4:	2344      	movs	r3, #68	@ 0x44
 8001bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bb8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4830      	ldr	r0, [pc, #192]	@ (8001c8c <MX_GPIO_Init+0x200>)
 8001bca:	f001 fab1 	bl	8003130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PSEL_0_Pin */
  GPIO_InitStruct.Pin = PSEL_0_Pin;
 8001bce:	2380      	movs	r3, #128	@ 0x80
 8001bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PSEL_0_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	482a      	ldr	r0, [pc, #168]	@ (8001c90 <MX_GPIO_Init+0x204>)
 8001be6:	f001 faa3 	bl	8003130 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH4_Pin LIMIT_SWITCH3_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH4_Pin|LIMIT_SWITCH3_Pin;
 8001bea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4821      	ldr	r0, [pc, #132]	@ (8001c88 <MX_GPIO_Init+0x1fc>)
 8001c02:	f001 fa95 	bl	8003130 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_READY_Pin */
  GPIO_InitStruct.Pin = DATA_READY_Pin;
 8001c06:	2308      	movs	r3, #8
 8001c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c0a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_READY_GPIO_Port, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	481c      	ldr	r0, [pc, #112]	@ (8001c8c <MX_GPIO_Init+0x200>)
 8001c1c:	f001 fa88 	bl	8003130 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8001c20:	2320      	movs	r3, #32
 8001c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4815      	ldr	r0, [pc, #84]	@ (8001c8c <MX_GPIO_Init+0x200>)
 8001c38:	f001 fa7a 	bl	8003130 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2008      	movs	r0, #8
 8001c42:	f001 fa3e 	bl	80030c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c46:	2008      	movs	r0, #8
 8001c48:	f001 fa57 	bl	80030fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2009      	movs	r0, #9
 8001c52:	f001 fa36 	bl	80030c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c56:	2009      	movs	r0, #9
 8001c58:	f001 fa4f 	bl	80030fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2017      	movs	r0, #23
 8001c62:	f001 fa2e 	bl	80030c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c66:	2017      	movs	r0, #23
 8001c68:	f001 fa47 	bl	80030fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2028      	movs	r0, #40	@ 0x28
 8001c72:	f001 fa26 	bl	80030c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c76:	2028      	movs	r0, #40	@ 0x28
 8001c78:	f001 fa3f 	bl	80030fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c7c:	bf00      	nop
 8001c7e:	3728      	adds	r7, #40	@ 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40020800 	.word	0x40020800

08001c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c98:	b672      	cpsid	i
}
 8001c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <Error_Handler+0x8>

08001ca0 <doStep>:
};

enum Status currentStatus;


void doStep() {
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0

	for (int i = 0; i < 4; i++) {
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	e05c      	b.n	8001d66 <doStep+0xc6>
		StepperMotor *motor = motors[i];
 8001cac:	4a33      	ldr	r2, [pc, #204]	@ (8001d7c <doStep+0xdc>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb4:	603b      	str	r3, [r7, #0]
		if (motor->active) {
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	7e1b      	ldrb	r3, [r3, #24]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d050      	beq.n	8001d60 <doStep+0xc0>
			if (motor->currentPos < motor->desiredPos) {
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	da23      	bge.n	8001d12 <doStep+0x72>
				// Set direction for forward motion
				motor->dirPort->BSRR = (motor->dirPin << 16);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	899b      	ldrh	r3, [r3, #12]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	0412      	lsls	r2, r2, #16
 8001cd6:	619a      	str	r2, [r3, #24]
				if (motor->toggleCount == 0) { // rising edge: set STEP high
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	7b9b      	ldrb	r3, [r3, #14]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d108      	bne.n	8001cf2 <doStep+0x52>
					motor->stepPort->BSRR = motor->stepPin;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	889a      	ldrh	r2, [r3, #4]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	619a      	str	r2, [r3, #24]
					motor->toggleCount = 1;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2201      	movs	r2, #1
 8001cee:	739a      	strb	r2, [r3, #14]
 8001cf0:	e036      	b.n	8001d60 <doStep+0xc0>
				} else { // falling edge: set STEP low and update position
					motor->stepPort->BSRR = (motor->stepPin << 16);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	889b      	ldrh	r3, [r3, #4]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0412      	lsls	r2, r2, #16
 8001cfe:	619a      	str	r2, [r3, #24]
					motor->toggleCount = 0;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	739a      	strb	r2, [r3, #14]
					motor->currentPos++;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	611a      	str	r2, [r3, #16]
 8001d10:	e026      	b.n	8001d60 <doStep+0xc0>
//					int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Motor %d At Position: %d\n",i,motor->currentPos);
//					HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer2, len, 10000);
				}
			} else if (motor->currentPos > motor->desiredPos) {
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	dd20      	ble.n	8001d60 <doStep+0xc0>
				// Set direction for reverse motion using DIR clear
				motor->dirPort->BSRR = motor->dirPin;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	899a      	ldrh	r2, [r3, #12]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	619a      	str	r2, [r3, #24]
				if (motor->toggleCount == 0) { // rising edge: set STEP high
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	7b9b      	ldrb	r3, [r3, #14]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d108      	bne.n	8001d42 <doStep+0xa2>
					motor->stepPort->BSRR = motor->stepPin;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	889a      	ldrh	r2, [r3, #4]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	619a      	str	r2, [r3, #24]
					motor->toggleCount = 1;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	739a      	strb	r2, [r3, #14]
 8001d40:	e00e      	b.n	8001d60 <doStep+0xc0>
				} else { // falling edge: set STEP low and update position
					motor->stepPort->BSRR = (motor->stepPin << 16);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	889b      	ldrh	r3, [r3, #4]
 8001d46:	461a      	mov	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0412      	lsls	r2, r2, #16
 8001d4e:	619a      	str	r2, [r3, #24]
					motor->toggleCount = 0;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2200      	movs	r2, #0
 8001d54:	739a      	strb	r2, [r3, #14]
					motor->currentPos--;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < 4; i++) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3301      	adds	r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	dd9f      	ble.n	8001cac <doStep+0xc>
				}
			}
		}
	}

}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000000 	.word	0x20000000

08001d80 <stepperControl_init>:

void stepperControl_init(){
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
	currentStatus = STANDBY;
 8001d84:	4b36      	ldr	r3, [pc, #216]	@ (8001e60 <stepperControl_init+0xe0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]

	motor4.stepPort = STEP4_GPIO_Port;
 8001d8a:	4b36      	ldr	r3, [pc, #216]	@ (8001e64 <stepperControl_init+0xe4>)
 8001d8c:	4a36      	ldr	r2, [pc, #216]	@ (8001e68 <stepperControl_init+0xe8>)
 8001d8e:	601a      	str	r2, [r3, #0]
	motor4.stepPin  = STEP4_Pin;
 8001d90:	4b34      	ldr	r3, [pc, #208]	@ (8001e64 <stepperControl_init+0xe4>)
 8001d92:	2202      	movs	r2, #2
 8001d94:	809a      	strh	r2, [r3, #4]
	motor4.dirPort  = DIR4_GPIO_Port;
 8001d96:	4b33      	ldr	r3, [pc, #204]	@ (8001e64 <stepperControl_init+0xe4>)
 8001d98:	4a34      	ldr	r2, [pc, #208]	@ (8001e6c <stepperControl_init+0xec>)
 8001d9a:	609a      	str	r2, [r3, #8]
	motor4.dirPin   = DIR4_Pin;
 8001d9c:	4b31      	ldr	r3, [pc, #196]	@ (8001e64 <stepperControl_init+0xe4>)
 8001d9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001da2:	819a      	strh	r2, [r3, #12]
	motor4.currentPos = 0;
 8001da4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e64 <stepperControl_init+0xe4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
	motor4.desiredPos = 0;
 8001daa:	4b2e      	ldr	r3, [pc, #184]	@ (8001e64 <stepperControl_init+0xe4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	615a      	str	r2, [r3, #20]
	motor4.toggleCount = 0;
 8001db0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <stepperControl_init+0xe4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	739a      	strb	r2, [r3, #14]
	motor4.active = 0;
 8001db6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e64 <stepperControl_init+0xe4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	761a      	strb	r2, [r3, #24]

	motor3.stepPort = STEP3_GPIO_Port;
 8001dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001e70 <stepperControl_init+0xf0>)
 8001dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8001e68 <stepperControl_init+0xe8>)
 8001dc0:	601a      	str	r2, [r3, #0]
	motor3.stepPin  = STEP3_Pin;
 8001dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e70 <stepperControl_init+0xf0>)
 8001dc4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001dc8:	809a      	strh	r2, [r3, #4]
	motor3.dirPort  = DIR3_GPIO_Port;
 8001dca:	4b29      	ldr	r3, [pc, #164]	@ (8001e70 <stepperControl_init+0xf0>)
 8001dcc:	4a26      	ldr	r2, [pc, #152]	@ (8001e68 <stepperControl_init+0xe8>)
 8001dce:	609a      	str	r2, [r3, #8]
	motor3.dirPin   = DIR3_Pin;
 8001dd0:	4b27      	ldr	r3, [pc, #156]	@ (8001e70 <stepperControl_init+0xf0>)
 8001dd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dd6:	819a      	strh	r2, [r3, #12]
	motor3.currentPos = 0;
 8001dd8:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <stepperControl_init+0xf0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
	motor3.desiredPos = 0;
 8001dde:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <stepperControl_init+0xf0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	615a      	str	r2, [r3, #20]
	motor3.toggleCount = 0;
 8001de4:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <stepperControl_init+0xf0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	739a      	strb	r2, [r3, #14]
	motor3.active = 0;
 8001dea:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <stepperControl_init+0xf0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	761a      	strb	r2, [r3, #24]

    motor2.stepPort = STEP2_GPIO_Port;
 8001df0:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <stepperControl_init+0xf4>)
 8001df2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e68 <stepperControl_init+0xe8>)
 8001df4:	601a      	str	r2, [r3, #0]
	motor2.stepPin  = STEP2_Pin;
 8001df6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e74 <stepperControl_init+0xf4>)
 8001df8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dfc:	809a      	strh	r2, [r3, #4]
	motor2.dirPort  = DIR2_GPIO_Port;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <stepperControl_init+0xf4>)
 8001e00:	4a19      	ldr	r2, [pc, #100]	@ (8001e68 <stepperControl_init+0xe8>)
 8001e02:	609a      	str	r2, [r3, #8]
	motor2.dirPin   = DIR2_Pin;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <stepperControl_init+0xf4>)
 8001e06:	2210      	movs	r2, #16
 8001e08:	819a      	strh	r2, [r3, #12]
	motor2.currentPos = 0;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <stepperControl_init+0xf4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
	motor2.desiredPos = 0;
 8001e10:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <stepperControl_init+0xf4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	615a      	str	r2, [r3, #20]
	motor2.toggleCount = 0;
 8001e16:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <stepperControl_init+0xf4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	739a      	strb	r2, [r3, #14]
	motor2.active = 0;
 8001e1c:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <stepperControl_init+0xf4>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	761a      	strb	r2, [r3, #24]

	motor1.stepPort = STEP1_GPIO_Port;
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <stepperControl_init+0xf8>)
 8001e24:	4a10      	ldr	r2, [pc, #64]	@ (8001e68 <stepperControl_init+0xe8>)
 8001e26:	601a      	str	r2, [r3, #0]
	motor1.stepPin  = STEP1_Pin;
 8001e28:	4b13      	ldr	r3, [pc, #76]	@ (8001e78 <stepperControl_init+0xf8>)
 8001e2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e2e:	809a      	strh	r2, [r3, #4]
	motor1.dirPort  = DIR1_GPIO_Port;
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <stepperControl_init+0xf8>)
 8001e32:	4a0e      	ldr	r2, [pc, #56]	@ (8001e6c <stepperControl_init+0xec>)
 8001e34:	609a      	str	r2, [r3, #8]
	motor1.dirPin   = DIR1_Pin;
 8001e36:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <stepperControl_init+0xf8>)
 8001e38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e3c:	819a      	strh	r2, [r3, #12]
	motor1.currentPos = 0;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <stepperControl_init+0xf8>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
	motor1.desiredPos = 0;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <stepperControl_init+0xf8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	615a      	str	r2, [r3, #20]
	motor1.toggleCount = 0;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <stepperControl_init+0xf8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	739a      	strb	r2, [r3, #14]
	motor1.active = 0;
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <stepperControl_init+0xf8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	761a      	strb	r2, [r3, #24]
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	200007b5 	.word	0x200007b5
 8001e64:	20000740 	.word	0x20000740
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	2000075c 	.word	0x2000075c
 8001e74:	20000778 	.word	0x20000778
 8001e78:	20000794 	.word	0x20000794

08001e7c <home>:

void home(){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0

	currentStatus = HOMING;
 8001e82:	4b46      	ldr	r3, [pc, #280]	@ (8001f9c <home+0x120>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
	MOTOR3_READY = 0;
 8001e88:	4b45      	ldr	r3, [pc, #276]	@ (8001fa0 <home+0x124>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
	MOTOR4_READY = 0;
 8001e8e:	4b45      	ldr	r3, [pc, #276]	@ (8001fa4 <home+0x128>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
	homing = 1;
 8001e94:	4b44      	ldr	r3, [pc, #272]	@ (8001fa8 <home+0x12c>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]

	motor3.desiredPos = 100000;
 8001e9a:	4b44      	ldr	r3, [pc, #272]	@ (8001fac <home+0x130>)
 8001e9c:	4a44      	ldr	r2, [pc, #272]	@ (8001fb0 <home+0x134>)
 8001e9e:	615a      	str	r2, [r3, #20]
	motor3.active = 1;
 8001ea0:	4b42      	ldr	r3, [pc, #264]	@ (8001fac <home+0x130>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	761a      	strb	r2, [r3, #24]
	motor4.desiredPos = 100000;
 8001ea6:	4b43      	ldr	r3, [pc, #268]	@ (8001fb4 <home+0x138>)
 8001ea8:	4a41      	ldr	r2, [pc, #260]	@ (8001fb0 <home+0x134>)
 8001eaa:	615a      	str	r2, [r3, #20]
	motor4.active = 1;
 8001eac:	4b41      	ldr	r3, [pc, #260]	@ (8001fb4 <home+0x138>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	761a      	strb	r2, [r3, #24]
	int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Motor 3 and 4 Active and Desired Pos Set\n");
 8001eb2:	4a41      	ldr	r2, [pc, #260]	@ (8001fb8 <home+0x13c>)
 8001eb4:	2180      	movs	r1, #128	@ 0x80
 8001eb6:	4841      	ldr	r0, [pc, #260]	@ (8001fbc <home+0x140>)
 8001eb8:	f005 f81e 	bl	8006ef8 <sniprintf>
 8001ebc:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 10000);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001ec6:	493d      	ldr	r1, [pc, #244]	@ (8001fbc <home+0x140>)
 8001ec8:	483d      	ldr	r0, [pc, #244]	@ (8001fc0 <home+0x144>)
 8001eca:	f003 fe21 	bl	8005b10 <HAL_UART_Transmit>
	while((!MOTOR3_READY) || (!MOTOR4_READY)) {
 8001ece:	bf00      	nop
 8001ed0:	4b33      	ldr	r3, [pc, #204]	@ (8001fa0 <home+0x124>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0fb      	beq.n	8001ed0 <home+0x54>
 8001ed8:	4b32      	ldr	r3, [pc, #200]	@ (8001fa4 <home+0x128>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f7      	beq.n	8001ed0 <home+0x54>

	}

	len = snprintf(UART_buffer2, sizeof(UART_buffer2), "MOT 3 and 4 done, beginning next stage in 10 seconds...\r\n");
 8001ee0:	4a38      	ldr	r2, [pc, #224]	@ (8001fc4 <home+0x148>)
 8001ee2:	2180      	movs	r1, #128	@ 0x80
 8001ee4:	4835      	ldr	r0, [pc, #212]	@ (8001fbc <home+0x140>)
 8001ee6:	f005 f807 	bl	8006ef8 <sniprintf>
 8001eea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 10000);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001ef4:	4931      	ldr	r1, [pc, #196]	@ (8001fbc <home+0x140>)
 8001ef6:	4832      	ldr	r0, [pc, #200]	@ (8001fc0 <home+0x144>)
 8001ef8:	f003 fe0a 	bl	8005b10 <HAL_UART_Transmit>
	HAL_Delay(10000);
 8001efc:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001f00:	f000 ffe0 	bl	8002ec4 <HAL_Delay>

	motor4.active = 0;
 8001f04:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb4 <home+0x138>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	761a      	strb	r2, [r3, #24]
	motor3.active = 0;
 8001f0a:	4b28      	ldr	r3, [pc, #160]	@ (8001fac <home+0x130>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	761a      	strb	r2, [r3, #24]

	MOTOR1_READY = 0;
 8001f10:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc8 <home+0x14c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
	MOTOR2_READY = 0;
 8001f16:	4b2d      	ldr	r3, [pc, #180]	@ (8001fcc <home+0x150>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]

	motor1.desiredPos = 100000;
 8001f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd0 <home+0x154>)
 8001f1e:	4a24      	ldr	r2, [pc, #144]	@ (8001fb0 <home+0x134>)
 8001f20:	615a      	str	r2, [r3, #20]
	motor1.active = 1;
 8001f22:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd0 <home+0x154>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	761a      	strb	r2, [r3, #24]
	motor2.desiredPos = 100000;
 8001f28:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd4 <home+0x158>)
 8001f2a:	4a21      	ldr	r2, [pc, #132]	@ (8001fb0 <home+0x134>)
 8001f2c:	615a      	str	r2, [r3, #20]
	motor2.active = 1;
 8001f2e:	4b29      	ldr	r3, [pc, #164]	@ (8001fd4 <home+0x158>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	761a      	strb	r2, [r3, #24]

	len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Motor 1 and 2 Active and Desired Pos Set\n");
 8001f34:	4a28      	ldr	r2, [pc, #160]	@ (8001fd8 <home+0x15c>)
 8001f36:	2180      	movs	r1, #128	@ 0x80
 8001f38:	4820      	ldr	r0, [pc, #128]	@ (8001fbc <home+0x140>)
 8001f3a:	f004 ffdd 	bl	8006ef8 <sniprintf>
 8001f3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 10000);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001f48:	491c      	ldr	r1, [pc, #112]	@ (8001fbc <home+0x140>)
 8001f4a:	481d      	ldr	r0, [pc, #116]	@ (8001fc0 <home+0x144>)
 8001f4c:	f003 fde0 	bl	8005b10 <HAL_UART_Transmit>
	while((!MOTOR1_READY) || (!MOTOR2_READY)) {
 8001f50:	bf00      	nop
 8001f52:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc8 <home+0x14c>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0fb      	beq.n	8001f52 <home+0xd6>
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <home+0x150>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f7      	beq.n	8001f52 <home+0xd6>

	}

	currentStatus = STANDBY;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <home+0x120>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
	homing = 0;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <home+0x12c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]

	len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Homing routine finished\n");
 8001f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fdc <home+0x160>)
 8001f70:	2180      	movs	r1, #128	@ 0x80
 8001f72:	4812      	ldr	r0, [pc, #72]	@ (8001fbc <home+0x140>)
 8001f74:	f004 ffc0 	bl	8006ef8 <sniprintf>
 8001f78:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 10000);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001f82:	490e      	ldr	r1, [pc, #56]	@ (8001fbc <home+0x140>)
 8001f84:	480e      	ldr	r0, [pc, #56]	@ (8001fc0 <home+0x144>)
 8001f86:	f003 fdc3 	bl	8005b10 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8001f8a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f8e:	f000 ff99 	bl	8002ec4 <HAL_Delay>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200007b5 	.word	0x200007b5
 8001fa0:	200007b3 	.word	0x200007b3
 8001fa4:	200007b4 	.word	0x200007b4
 8001fa8:	200007b0 	.word	0x200007b0
 8001fac:	2000075c 	.word	0x2000075c
 8001fb0:	000186a0 	.word	0x000186a0
 8001fb4:	20000740 	.word	0x20000740
 8001fb8:	080093c0 	.word	0x080093c0
 8001fbc:	200006c0 	.word	0x200006c0
 8001fc0:	20000630 	.word	0x20000630
 8001fc4:	080093ec 	.word	0x080093ec
 8001fc8:	200007b1 	.word	0x200007b1
 8001fcc:	200007b2 	.word	0x200007b2
 8001fd0:	20000794 	.word	0x20000794
 8001fd4:	20000778 	.word	0x20000778
 8001fd8:	08009428 	.word	0x08009428
 8001fdc:	08009454 	.word	0x08009454

08001fe0 <manualControl>:

void manualControl(UART_HandleTypeDef *huart) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001fec:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001ff0:	6018      	str	r0, [r3, #0]
	currentStatus = MANUAL_CONTROL;
 8001ff2:	4bb9      	ldr	r3, [pc, #740]	@ (80022d8 <manualControl+0x2f8>)
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	701a      	strb	r2, [r3, #0]
		};

		enum axis userAxis;
		char inputBuffer[256];
		uint8_t rxChar;
		int index = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218

		// Prompt the user for input
		char txBuffer[256];

		int len = snprintf(txBuffer, sizeof(txBuffer), "Select an axis 'x' or 'y', or press 'b' to return\r\n");
 8001ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002002:	4ab6      	ldr	r2, [pc, #728]	@ (80022dc <manualControl+0x2fc>)
 8002004:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002008:	4618      	mov	r0, r3
 800200a:	f004 ff75 	bl	8006ef8 <sniprintf>
 800200e:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 8002012:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002016:	b29a      	uxth	r2, r3
 8002018:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800201c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002020:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 8002024:	2364      	movs	r3, #100	@ 0x64
 8002026:	6800      	ldr	r0, [r0, #0]
 8002028:	f003 fd72 	bl	8005b10 <HAL_UART_Transmit>

		while (1) {
			// Blocking call to receive one character
			if (HAL_UART_Receive(huart, &rxChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 800202c:	f207 210b 	addw	r1, r7, #523	@ 0x20b
 8002030:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002034:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	2201      	movs	r2, #1
 800203e:	6800      	ldr	r0, [r0, #0]
 8002040:	f003 fdf1 	bl	8005c26 <HAL_UART_Receive>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <manualControl+0x4c>
				if (rxChar == 'x') {
 800204a:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 800204e:	2b78      	cmp	r3, #120	@ 0x78
 8002050:	d103      	bne.n	800205a <manualControl+0x7a>
					userAxis = X_AXIS;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
					break;
 8002058:	e024      	b.n	80020a4 <manualControl+0xc4>

				} else if(rxChar == 'y') {
 800205a:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 800205e:	2b79      	cmp	r3, #121	@ 0x79
 8002060:	d103      	bne.n	800206a <manualControl+0x8a>
					userAxis = Y_AXIS;
 8002062:	2301      	movs	r3, #1
 8002064:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
					break;
 8002068:	e01c      	b.n	80020a4 <manualControl+0xc4>

				} else if(rxChar == 'b' ) {
 800206a:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 800206e:	2b62      	cmp	r3, #98	@ 0x62
 8002070:	f000 812d 	beq.w	80022ce <manualControl+0x2ee>
					return;
				} else {
					len = snprintf(txBuffer, sizeof(txBuffer), "Invalid keystroke\r\n");
 8002074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002078:	4a99      	ldr	r2, [pc, #612]	@ (80022e0 <manualControl+0x300>)
 800207a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800207e:	4618      	mov	r0, r3
 8002080:	f004 ff3a 	bl	8006ef8 <sniprintf>
 8002084:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
					HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 8002088:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800208c:	b29a      	uxth	r2, r3
 800208e:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002092:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002096:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 800209a:	2364      	movs	r3, #100	@ 0x64
 800209c:	6800      	ldr	r0, [r0, #0]
 800209e:	f003 fd37 	bl	8005b10 <HAL_UART_Transmit>
			if (HAL_UART_Receive(huart, &rxChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 80020a2:	e7c3      	b.n	800202c <manualControl+0x4c>
				}
			}
		}

		len = snprintf(txBuffer, sizeof(txBuffer), "%d, Enter a step number and press Return:\r\n", userAxis);
 80020a4:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80020a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80020ac:	4a8d      	ldr	r2, [pc, #564]	@ (80022e4 <manualControl+0x304>)
 80020ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020b2:	f004 ff21 	bl	8006ef8 <sniprintf>
 80020b6:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 80020ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80020be:	b29a      	uxth	r2, r3
 80020c0:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80020c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80020c8:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80020cc:	2364      	movs	r3, #100	@ 0x64
 80020ce:	6800      	ldr	r0, [r0, #0]
 80020d0:	f003 fd1e 	bl	8005b10 <HAL_UART_Transmit>

		// Loop to receive one character at a time
		while (1) {
			// Blocking call to receive one character
			if (HAL_UART_Receive(huart, &rxChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 80020d4:	f207 210b 	addw	r1, r7, #523	@ 0x20b
 80020d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80020dc:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
 80020e4:	2201      	movs	r2, #1
 80020e6:	6800      	ldr	r0, [r0, #0]
 80020e8:	f003 fd9d 	bl	8005c26 <HAL_UART_Receive>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <manualControl+0xf4>
				// Optionally echo the character back to the terminal
				HAL_UART_Transmit(huart, &rxChar, 1, 100);
 80020f2:	f207 210b 	addw	r1, r7, #523	@ 0x20b
 80020f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80020fa:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80020fe:	2364      	movs	r3, #100	@ 0x64
 8002100:	2201      	movs	r2, #1
 8002102:	6800      	ldr	r0, [r0, #0]
 8002104:	f003 fd04 	bl	8005b10 <HAL_UART_Transmit>

				// Check if the character is a newline or carriage return (end of input)
				if (rxChar == '\n' || rxChar == '\r') {
 8002108:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 800210c:	2b0a      	cmp	r3, #10
 800210e:	d003      	beq.n	8002118 <manualControl+0x138>
 8002110:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8002114:	2b0d      	cmp	r3, #13
 8002116:	d109      	bne.n	800212c <manualControl+0x14c>
					inputBuffer[index] = '\0';  // Null-terminate the string
 8002118:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800211c:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8002120:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8002124:	4413      	add	r3, r2
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
					break;
 800212a:	e038      	b.n	800219e <manualControl+0x1be>
				} else if (rxChar == 8){
 800212c:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8002130:	2b08      	cmp	r3, #8
 8002132:	d11a      	bne.n	800216a <manualControl+0x18a>
					int len = snprintf(txBuffer, sizeof(txBuffer), "\nInput buffer cleared, re-enter number:\n");
 8002134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002138:	4a6b      	ldr	r2, [pc, #428]	@ (80022e8 <manualControl+0x308>)
 800213a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800213e:	4618      	mov	r0, r3
 8002140:	f004 feda 	bl	8006ef8 <sniprintf>
 8002144:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
					HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 8002148:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800214c:	b29a      	uxth	r2, r3
 800214e:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002152:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002156:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 800215a:	2364      	movs	r3, #100	@ 0x64
 800215c:	6800      	ldr	r0, [r0, #0]
 800215e:	f003 fcd7 	bl	8005b10 <HAL_UART_Transmit>
					index = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8002168:	e7b4      	b.n	80020d4 <manualControl+0xf4>
				} else {
					// Only store the character if there is still room in the buffer
					if (index < 256 - 1) {
 800216a:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800216e:	2bfe      	cmp	r3, #254	@ 0xfe
 8002170:	dc0c      	bgt.n	800218c <manualControl+0x1ac>
						inputBuffer[index++] = rxChar;
 8002172:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 800217c:	f897 120b 	ldrb.w	r1, [r7, #523]	@ 0x20b
 8002180:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002184:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8002188:	54d1      	strb	r1, [r2, r3]
 800218a:	e7a3      	b.n	80020d4 <manualControl+0xf4>
					} else {
						// If the buffer is full, null-terminate and break out
						inputBuffer[index] = '\0';
 800218c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002190:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8002194:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8002198:	4413      	add	r3, r2
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		// Convert the accumulated string to an integer
		int userSteps = atoi(inputBuffer);
 800219e:	f107 0308 	add.w	r3, r7, #8
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 f906 	bl	80063b4 <atoi>
 80021a8:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c

		// Send back the result
		len = snprintf(txBuffer, sizeof(txBuffer), "Waiting %d milliseconds to step...\n",(int)(userSteps*1.2));
 80021ac:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 80021b0:	f7fe f9d8 	bl	8000564 <__aeabi_i2d>
 80021b4:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80021b8:	4b4c      	ldr	r3, [pc, #304]	@ (80022ec <manualControl+0x30c>)
 80021ba:	f7fe fa3d 	bl	8000638 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	f7fe fce7 	bl	8000b98 <__aeabi_d2iz>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80021d0:	4a47      	ldr	r2, [pc, #284]	@ (80022f0 <manualControl+0x310>)
 80021d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021d6:	f004 fe8f 	bl	8006ef8 <sniprintf>
 80021da:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		HAL_UART_Transmit(huart, (uint8_t *)txBuffer, len, 100);
 80021de:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80021e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80021ec:	f5a3 7007 	sub.w	r0, r3, #540	@ 0x21c
 80021f0:	2364      	movs	r3, #100	@ 0x64
 80021f2:	6800      	ldr	r0, [r0, #0]
 80021f4:	f003 fc8c 	bl	8005b10 <HAL_UART_Transmit>

		if(userAxis == X_AXIS) {
 80021f8:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d130      	bne.n	8002262 <manualControl+0x282>
			motor1.active = 1;
 8002200:	4b3c      	ldr	r3, [pc, #240]	@ (80022f4 <manualControl+0x314>)
 8002202:	2201      	movs	r2, #1
 8002204:	761a      	strb	r2, [r3, #24]
			motor2.active = 2;
 8002206:	4b3c      	ldr	r3, [pc, #240]	@ (80022f8 <manualControl+0x318>)
 8002208:	2202      	movs	r2, #2
 800220a:	761a      	strb	r2, [r3, #24]
			motor1.desiredPos = motor1.currentPos + userSteps;
 800220c:	4b39      	ldr	r3, [pc, #228]	@ (80022f4 <manualControl+0x314>)
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002214:	4413      	add	r3, r2
 8002216:	4a37      	ldr	r2, [pc, #220]	@ (80022f4 <manualControl+0x314>)
 8002218:	6153      	str	r3, [r2, #20]
			motor2.desiredPos = motor2.currentPos - userSteps;
 800221a:	4b37      	ldr	r3, [pc, #220]	@ (80022f8 <manualControl+0x318>)
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	4a34      	ldr	r2, [pc, #208]	@ (80022f8 <manualControl+0x318>)
 8002226:	6153      	str	r3, [r2, #20]
			HAL_Delay((int)(abs(userSteps*1.2)));
 8002228:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 800222c:	f7fe f99a 	bl	8000564 <__aeabi_i2d>
 8002230:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002234:	4b2d      	ldr	r3, [pc, #180]	@ (80022ec <manualControl+0x30c>)
 8002236:	f7fe f9ff 	bl	8000638 <__aeabi_dmul>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	f7fe fca9 	bl	8000b98 <__aeabi_d2iz>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	bfb8      	it	lt
 800224c:	425b      	neglt	r3, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fe38 	bl	8002ec4 <HAL_Delay>
			motor1.active = 0;
 8002254:	4b27      	ldr	r3, [pc, #156]	@ (80022f4 <manualControl+0x314>)
 8002256:	2200      	movs	r2, #0
 8002258:	761a      	strb	r2, [r3, #24]
			motor2.active = 0;
 800225a:	4b27      	ldr	r3, [pc, #156]	@ (80022f8 <manualControl+0x318>)
 800225c:	2200      	movs	r2, #0
 800225e:	761a      	strb	r2, [r3, #24]
 8002260:	e6ca      	b.n	8001ff8 <manualControl+0x18>

		} else if(userAxis == Y_AXIS) {
 8002262:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8002266:	2b01      	cmp	r3, #1
 8002268:	f47f aec6 	bne.w	8001ff8 <manualControl+0x18>
			motor3.active = 1;
 800226c:	4b23      	ldr	r3, [pc, #140]	@ (80022fc <manualControl+0x31c>)
 800226e:	2201      	movs	r2, #1
 8002270:	761a      	strb	r2, [r3, #24]
			motor4.active = 2;
 8002272:	4b23      	ldr	r3, [pc, #140]	@ (8002300 <manualControl+0x320>)
 8002274:	2202      	movs	r2, #2
 8002276:	761a      	strb	r2, [r3, #24]
			motor3.desiredPos = motor3.currentPos + userSteps;
 8002278:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <manualControl+0x31c>)
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002280:	4413      	add	r3, r2
 8002282:	4a1e      	ldr	r2, [pc, #120]	@ (80022fc <manualControl+0x31c>)
 8002284:	6153      	str	r3, [r2, #20]
			motor4.desiredPos = motor4.currentPos - userSteps;
 8002286:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <manualControl+0x320>)
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	4a1b      	ldr	r2, [pc, #108]	@ (8002300 <manualControl+0x320>)
 8002292:	6153      	str	r3, [r2, #20]
			HAL_Delay((int)(abs(userSteps*1.2)));
 8002294:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8002298:	f7fe f964 	bl	8000564 <__aeabi_i2d>
 800229c:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80022a0:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <manualControl+0x30c>)
 80022a2:	f7fe f9c9 	bl	8000638 <__aeabi_dmul>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fc73 	bl	8000b98 <__aeabi_d2iz>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bfb8      	it	lt
 80022b8:	425b      	neglt	r3, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fe02 	bl	8002ec4 <HAL_Delay>
			motor3.active = 0;
 80022c0:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <manualControl+0x31c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	761a      	strb	r2, [r3, #24]
			motor4.active = 0;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <manualControl+0x320>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	761a      	strb	r2, [r3, #24]
	while(1) {
 80022cc:	e694      	b.n	8001ff8 <manualControl+0x18>
					return;
 80022ce:	bf00      	nop
		}
	}
}
 80022d0:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	200007b5 	.word	0x200007b5
 80022dc:	08009470 	.word	0x08009470
 80022e0:	080094a4 	.word	0x080094a4
 80022e4:	080094b8 	.word	0x080094b8
 80022e8:	080094e4 	.word	0x080094e4
 80022ec:	3ff33333 	.word	0x3ff33333
 80022f0:	08009510 	.word	0x08009510
 80022f4:	20000794 	.word	0x20000794
 80022f8:	20000778 	.word	0x20000778
 80022fc:	2000075c 	.word	0x2000075c
 8002300:	20000740 	.word	0x20000740

08002304 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	80fb      	strh	r3, [r7, #6]
	if(currentStatus == MANUAL_CONTROL) {
 800230e:	4b5f      	ldr	r3, [pc, #380]	@ (800248c <HAL_GPIO_EXTI_Callback+0x188>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d137      	bne.n	8002386 <HAL_GPIO_EXTI_Callback+0x82>
	    if ((GPIO_Pin == LIMIT_SWITCH3_Pin) || (GPIO_Pin == LIMIT_SWITCH4_Pin) || (GPIO_Pin == LIMIT_SWITCH1_Pin)|| (GPIO_Pin == LIMIT_SWITCH2_Pin)) {
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800231c:	d009      	beq.n	8002332 <HAL_GPIO_EXTI_Callback+0x2e>
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002324:	d005      	beq.n	8002332 <HAL_GPIO_EXTI_Callback+0x2e>
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	2b40      	cmp	r3, #64	@ 0x40
 800232a:	d002      	beq.n	8002332 <HAL_GPIO_EXTI_Callback+0x2e>
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d128      	bne.n	8002384 <HAL_GPIO_EXTI_Callback+0x80>
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered, entering safemode. Restart program when ready\n");
 8002332:	4a57      	ldr	r2, [pc, #348]	@ (8002490 <HAL_GPIO_EXTI_Callback+0x18c>)
 8002334:	2180      	movs	r1, #128	@ 0x80
 8002336:	4857      	ldr	r0, [pc, #348]	@ (8002494 <HAL_GPIO_EXTI_Callback+0x190>)
 8002338:	f004 fdde 	bl	8006ef8 <sniprintf>
 800233c:	61f8      	str	r0, [r7, #28]
			HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 100);
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	b29a      	uxth	r2, r3
 8002342:	2364      	movs	r3, #100	@ 0x64
 8002344:	4953      	ldr	r1, [pc, #332]	@ (8002494 <HAL_GPIO_EXTI_Callback+0x190>)
 8002346:	4854      	ldr	r0, [pc, #336]	@ (8002498 <HAL_GPIO_EXTI_Callback+0x194>)
 8002348:	f003 fbe2 	bl	8005b10 <HAL_UART_Transmit>

	        motor1.active = 0;
 800234c:	4b53      	ldr	r3, [pc, #332]	@ (800249c <HAL_GPIO_EXTI_Callback+0x198>)
 800234e:	2200      	movs	r2, #0
 8002350:	761a      	strb	r2, [r3, #24]
	        motor2.active = 0;
 8002352:	4b53      	ldr	r3, [pc, #332]	@ (80024a0 <HAL_GPIO_EXTI_Callback+0x19c>)
 8002354:	2200      	movs	r2, #0
 8002356:	761a      	strb	r2, [r3, #24]
	        motor3.active = 0;
 8002358:	4b52      	ldr	r3, [pc, #328]	@ (80024a4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800235a:	2200      	movs	r2, #0
 800235c:	761a      	strb	r2, [r3, #24]
	        motor4.active = 0;
 800235e:	4b52      	ldr	r3, [pc, #328]	@ (80024a8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8002360:	2200      	movs	r2, #0
 8002362:	761a      	strb	r2, [r3, #24]

	        motor1.currentPos = 0;
 8002364:	4b4d      	ldr	r3, [pc, #308]	@ (800249c <HAL_GPIO_EXTI_Callback+0x198>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
	        motor2.currentPos = 0;
 800236a:	4b4d      	ldr	r3, [pc, #308]	@ (80024a0 <HAL_GPIO_EXTI_Callback+0x19c>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
	        motor3.currentPos = 0;
 8002370:	4b4c      	ldr	r3, [pc, #304]	@ (80024a4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
	        motor4.currentPos = 0;
 8002376:	4b4c      	ldr	r3, [pc, #304]	@ (80024a8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]

	        currentStatus = SAFE_MODE;
 800237c:	4b43      	ldr	r3, [pc, #268]	@ (800248c <HAL_GPIO_EXTI_Callback+0x188>)
 800237e:	2203      	movs	r2, #3
 8002380:	701a      	strb	r2, [r3, #0]
	    if ((GPIO_Pin == LIMIT_SWITCH3_Pin) || (GPIO_Pin == LIMIT_SWITCH4_Pin) || (GPIO_Pin == LIMIT_SWITCH1_Pin)|| (GPIO_Pin == LIMIT_SWITCH2_Pin)) {
 8002382:	e000      	b.n	8002386 <HAL_GPIO_EXTI_Callback+0x82>
	    } else {
	    	__NOP();
 8002384:	bf00      	nop
	    }
	}

	if(currentStatus == HOMING) {
 8002386:	4b41      	ldr	r3, [pc, #260]	@ (800248c <HAL_GPIO_EXTI_Callback+0x188>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d179      	bne.n	8002482 <HAL_GPIO_EXTI_Callback+0x17e>
		if ((GPIO_Pin == LIMIT_SWITCH3_Pin) && (!MOTOR3_READY)) {
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002394:	d11a      	bne.n	80023cc <HAL_GPIO_EXTI_Callback+0xc8>
 8002396:	4b45      	ldr	r3, [pc, #276]	@ (80024ac <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d116      	bne.n	80023cc <HAL_GPIO_EXTI_Callback+0xc8>
			MOTOR3_READY = 1;
 800239e:	4b43      	ldr	r3, [pc, #268]	@ (80024ac <HAL_GPIO_EXTI_Callback+0x1a8>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
			motor3.currentPos = HOMING_STEPS_REQ;
 80023a4:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 80023a8:	4b3e      	ldr	r3, [pc, #248]	@ (80024a4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80023aa:	611a      	str	r2, [r3, #16]
			motor3.desiredPos = 0;
 80023ac:	4b3d      	ldr	r3, [pc, #244]	@ (80024a4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	615a      	str	r2, [r3, #20]
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 3!\r\n");
 80023b2:	4a3f      	ldr	r2, [pc, #252]	@ (80024b0 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80023b4:	2180      	movs	r1, #128	@ 0x80
 80023b6:	4837      	ldr	r0, [pc, #220]	@ (8002494 <HAL_GPIO_EXTI_Callback+0x190>)
 80023b8:	f004 fd9e 	bl	8006ef8 <sniprintf>
 80023bc:	61b8      	str	r0, [r7, #24]
			HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 100);
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	2364      	movs	r3, #100	@ 0x64
 80023c4:	4933      	ldr	r1, [pc, #204]	@ (8002494 <HAL_GPIO_EXTI_Callback+0x190>)
 80023c6:	4834      	ldr	r0, [pc, #208]	@ (8002498 <HAL_GPIO_EXTI_Callback+0x194>)
 80023c8:	f003 fba2 	bl	8005b10 <HAL_UART_Transmit>

		}
		if ((GPIO_Pin == LIMIT_SWITCH4_Pin) && (!MOTOR4_READY)) {
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023d2:	d11a      	bne.n	800240a <HAL_GPIO_EXTI_Callback+0x106>
 80023d4:	4b37      	ldr	r3, [pc, #220]	@ (80024b4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d116      	bne.n	800240a <HAL_GPIO_EXTI_Callback+0x106>
			MOTOR4_READY = 1;
 80023dc:	4b35      	ldr	r3, [pc, #212]	@ (80024b4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
			motor4.currentPos = HOMING_STEPS_REQ;
 80023e2:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 80023e6:	4b30      	ldr	r3, [pc, #192]	@ (80024a8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80023e8:	611a      	str	r2, [r3, #16]
			motor4.desiredPos = 0;
 80023ea:	4b2f      	ldr	r3, [pc, #188]	@ (80024a8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	615a      	str	r2, [r3, #20]
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 4!\r\n");
 80023f0:	4a31      	ldr	r2, [pc, #196]	@ (80024b8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80023f2:	2180      	movs	r1, #128	@ 0x80
 80023f4:	4827      	ldr	r0, [pc, #156]	@ (8002494 <HAL_GPIO_EXTI_Callback+0x190>)
 80023f6:	f004 fd7f 	bl	8006ef8 <sniprintf>
 80023fa:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 100);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	2364      	movs	r3, #100	@ 0x64
 8002402:	4924      	ldr	r1, [pc, #144]	@ (8002494 <HAL_GPIO_EXTI_Callback+0x190>)
 8002404:	4824      	ldr	r0, [pc, #144]	@ (8002498 <HAL_GPIO_EXTI_Callback+0x194>)
 8002406:	f003 fb83 	bl	8005b10 <HAL_UART_Transmit>
		}
		if ((GPIO_Pin == LIMIT_SWITCH1_Pin) && (!MOTOR1_READY)) {
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	2b40      	cmp	r3, #64	@ 0x40
 800240e:	d11a      	bne.n	8002446 <HAL_GPIO_EXTI_Callback+0x142>
 8002410:	4b2a      	ldr	r3, [pc, #168]	@ (80024bc <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d116      	bne.n	8002446 <HAL_GPIO_EXTI_Callback+0x142>
			MOTOR1_READY = 1;
 8002418:	4b28      	ldr	r3, [pc, #160]	@ (80024bc <HAL_GPIO_EXTI_Callback+0x1b8>)
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
			motor1.currentPos = HOMING_STEPS_REQ;
 800241e:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8002422:	4b1e      	ldr	r3, [pc, #120]	@ (800249c <HAL_GPIO_EXTI_Callback+0x198>)
 8002424:	611a      	str	r2, [r3, #16]
			motor1.desiredPos = 0;
 8002426:	4b1d      	ldr	r3, [pc, #116]	@ (800249c <HAL_GPIO_EXTI_Callback+0x198>)
 8002428:	2200      	movs	r2, #0
 800242a:	615a      	str	r2, [r3, #20]
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 1!\r\n");
 800242c:	4a24      	ldr	r2, [pc, #144]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800242e:	2180      	movs	r1, #128	@ 0x80
 8002430:	4818      	ldr	r0, [pc, #96]	@ (8002494 <HAL_GPIO_EXTI_Callback+0x190>)
 8002432:	f004 fd61 	bl	8006ef8 <sniprintf>
 8002436:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 100);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	b29a      	uxth	r2, r3
 800243c:	2364      	movs	r3, #100	@ 0x64
 800243e:	4915      	ldr	r1, [pc, #84]	@ (8002494 <HAL_GPIO_EXTI_Callback+0x190>)
 8002440:	4815      	ldr	r0, [pc, #84]	@ (8002498 <HAL_GPIO_EXTI_Callback+0x194>)
 8002442:	f003 fb65 	bl	8005b10 <HAL_UART_Transmit>
		}
		if ((GPIO_Pin == LIMIT_SWITCH2_Pin) && (!MOTOR2_READY)) {
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	2b04      	cmp	r3, #4
 800244a:	d11a      	bne.n	8002482 <HAL_GPIO_EXTI_Callback+0x17e>
 800244c:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d116      	bne.n	8002482 <HAL_GPIO_EXTI_Callback+0x17e>
			MOTOR2_READY = 1;
 8002454:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
			motor2.currentPos = HOMING_STEPS_REQ;
 800245a:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <HAL_GPIO_EXTI_Callback+0x19c>)
 8002460:	611a      	str	r2, [r3, #16]
			motor2.desiredPos = 0;
 8002462:	4b0f      	ldr	r3, [pc, #60]	@ (80024a0 <HAL_GPIO_EXTI_Callback+0x19c>)
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
			int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered on switch 2!\r\n");
 8002468:	4a17      	ldr	r2, [pc, #92]	@ (80024c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800246a:	2180      	movs	r1, #128	@ 0x80
 800246c:	4809      	ldr	r0, [pc, #36]	@ (8002494 <HAL_GPIO_EXTI_Callback+0x190>)
 800246e:	f004 fd43 	bl	8006ef8 <sniprintf>
 8002472:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart5, (uint8_t *)UART_buffer2, len, 100);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	b29a      	uxth	r2, r3
 8002478:	2364      	movs	r3, #100	@ 0x64
 800247a:	4906      	ldr	r1, [pc, #24]	@ (8002494 <HAL_GPIO_EXTI_Callback+0x190>)
 800247c:	4806      	ldr	r0, [pc, #24]	@ (8002498 <HAL_GPIO_EXTI_Callback+0x194>)
 800247e:	f003 fb47 	bl	8005b10 <HAL_UART_Transmit>
		}
	}
}
 8002482:	bf00      	nop
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200007b5 	.word	0x200007b5
 8002490:	08009534 	.word	0x08009534
 8002494:	200006c0 	.word	0x200006c0
 8002498:	20000630 	.word	0x20000630
 800249c:	20000794 	.word	0x20000794
 80024a0:	20000778 	.word	0x20000778
 80024a4:	2000075c 	.word	0x2000075c
 80024a8:	20000740 	.word	0x20000740
 80024ac:	200007b3 	.word	0x200007b3
 80024b0:	08009578 	.word	0x08009578
 80024b4:	200007b4 	.word	0x200007b4
 80024b8:	0800959c 	.word	0x0800959c
 80024bc:	200007b1 	.word	0x200007b1
 80024c0:	080095c0 	.word	0x080095c0
 80024c4:	200007b2 	.word	0x200007b2
 80024c8:	080095e4 	.word	0x080095e4

080024cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024dc:	d101      	bne.n	80024e2 <HAL_TIM_PeriodElapsedCallback+0x16>
        doStep();
 80024de:	f7ff fbdf 	bl	8001ca0 <doStep>
    }
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <HAL_MspInit+0x4c>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002538 <HAL_MspInit+0x4c>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002500:	6453      	str	r3, [r2, #68]	@ 0x44
 8002502:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <HAL_MspInit+0x4c>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_MspInit+0x4c>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	4a08      	ldr	r2, [pc, #32]	@ (8002538 <HAL_MspInit+0x4c>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	@ 0x40
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <HAL_MspInit+0x4c>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800252a:	2007      	movs	r0, #7
 800252c:	f000 fdbe 	bl	80030ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40023800 	.word	0x40023800

0800253c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	@ 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a19      	ldr	r2, [pc, #100]	@ (80025c0 <HAL_I2C_MspInit+0x84>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d12c      	bne.n	80025b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	4b18      	ldr	r3, [pc, #96]	@ (80025c4 <HAL_I2C_MspInit+0x88>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	4a17      	ldr	r2, [pc, #92]	@ (80025c4 <HAL_I2C_MspInit+0x88>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6313      	str	r3, [r2, #48]	@ 0x30
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_I2C_MspInit+0x88>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800257a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800257e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002580:	2312      	movs	r3, #18
 8002582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002588:	2303      	movs	r3, #3
 800258a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800258c:	2304      	movs	r3, #4
 800258e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4619      	mov	r1, r3
 8002596:	480c      	ldr	r0, [pc, #48]	@ (80025c8 <HAL_I2C_MspInit+0x8c>)
 8002598:	f000 fdca 	bl	8003130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <HAL_I2C_MspInit+0x88>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	4a07      	ldr	r2, [pc, #28]	@ (80025c4 <HAL_I2C_MspInit+0x88>)
 80025a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ac:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <HAL_I2C_MspInit+0x88>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	@ 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40005400 	.word	0x40005400
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020400 	.word	0x40020400

080025cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025dc:	d115      	bne.n	800260a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <HAL_TIM_Base_MspInit+0x48>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002614 <HAL_TIM_Base_MspInit+0x48>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ee:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <HAL_TIM_Base_MspInit+0x48>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	201c      	movs	r0, #28
 8002600:	f000 fd5f 	bl	80030c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002604:	201c      	movs	r0, #28
 8002606:	f000 fd78 	bl	80030fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800

08002618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08c      	sub	sp, #48	@ 0x30
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 031c 	add.w	r3, r7, #28
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a41      	ldr	r2, [pc, #260]	@ (800273c <HAL_UART_MspInit+0x124>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d14b      	bne.n	80026d2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	4b40      	ldr	r3, [pc, #256]	@ (8002740 <HAL_UART_MspInit+0x128>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	4a3f      	ldr	r2, [pc, #252]	@ (8002740 <HAL_UART_MspInit+0x128>)
 8002644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002648:	6413      	str	r3, [r2, #64]	@ 0x40
 800264a:	4b3d      	ldr	r3, [pc, #244]	@ (8002740 <HAL_UART_MspInit+0x128>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	4b39      	ldr	r3, [pc, #228]	@ (8002740 <HAL_UART_MspInit+0x128>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	4a38      	ldr	r2, [pc, #224]	@ (8002740 <HAL_UART_MspInit+0x128>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6313      	str	r3, [r2, #48]	@ 0x30
 8002666:	4b36      	ldr	r3, [pc, #216]	@ (8002740 <HAL_UART_MspInit+0x128>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	4b32      	ldr	r3, [pc, #200]	@ (8002740 <HAL_UART_MspInit+0x128>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	4a31      	ldr	r2, [pc, #196]	@ (8002740 <HAL_UART_MspInit+0x128>)
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	6313      	str	r3, [r2, #48]	@ 0x30
 8002682:	4b2f      	ldr	r3, [pc, #188]	@ (8002740 <HAL_UART_MspInit+0x128>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800268e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026a0:	2308      	movs	r3, #8
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	4619      	mov	r1, r3
 80026aa:	4826      	ldr	r0, [pc, #152]	@ (8002744 <HAL_UART_MspInit+0x12c>)
 80026ac:	f000 fd40 	bl	8003130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026b0:	2304      	movs	r3, #4
 80026b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026bc:	2303      	movs	r3, #3
 80026be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026c0:	2308      	movs	r3, #8
 80026c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	4619      	mov	r1, r3
 80026ca:	481f      	ldr	r0, [pc, #124]	@ (8002748 <HAL_UART_MspInit+0x130>)
 80026cc:	f000 fd30 	bl	8003130 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026d0:	e030      	b.n	8002734 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1d      	ldr	r2, [pc, #116]	@ (800274c <HAL_UART_MspInit+0x134>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d12b      	bne.n	8002734 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	4b17      	ldr	r3, [pc, #92]	@ (8002740 <HAL_UART_MspInit+0x128>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	4a16      	ldr	r2, [pc, #88]	@ (8002740 <HAL_UART_MspInit+0x128>)
 80026e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ec:	4b14      	ldr	r3, [pc, #80]	@ (8002740 <HAL_UART_MspInit+0x128>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <HAL_UART_MspInit+0x128>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002700:	4a0f      	ldr	r2, [pc, #60]	@ (8002740 <HAL_UART_MspInit+0x128>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6313      	str	r3, [r2, #48]	@ 0x30
 8002708:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <HAL_UART_MspInit+0x128>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002714:	230c      	movs	r3, #12
 8002716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002724:	2307      	movs	r3, #7
 8002726:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002728:	f107 031c 	add.w	r3, r7, #28
 800272c:	4619      	mov	r1, r3
 800272e:	4808      	ldr	r0, [pc, #32]	@ (8002750 <HAL_UART_MspInit+0x138>)
 8002730:	f000 fcfe 	bl	8003130 <HAL_GPIO_Init>
}
 8002734:	bf00      	nop
 8002736:	3730      	adds	r7, #48	@ 0x30
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40005000 	.word	0x40005000
 8002740:	40023800 	.word	0x40023800
 8002744:	40020800 	.word	0x40020800
 8002748:	40020c00 	.word	0x40020c00
 800274c:	40004400 	.word	0x40004400
 8002750:	40020000 	.word	0x40020000

08002754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <NMI_Handler+0x4>

0800275c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <HardFault_Handler+0x4>

08002764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <MemManage_Handler+0x4>

0800276c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <BusFault_Handler+0x4>

08002774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <UsageFault_Handler+0x4>

0800277c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027aa:	f000 fb6b 	bl	8002e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH2_Pin);
 80027b6:	2004      	movs	r0, #4
 80027b8:	f000 fe80 	bl	80034bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}

080027c0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DATA_READY_Pin);
 80027c4:	2008      	movs	r0, #8
 80027c6:	f000 fe79 	bl	80034bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}

080027ce <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH1_Pin);
 80027d2:	2040      	movs	r0, #64	@ 0x40
 80027d4:	f000 fe72 	bl	80034bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}

080027dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027e0:	4802      	ldr	r0, [pc, #8]	@ (80027ec <TIM2_IRQHandler+0x10>)
 80027e2:	f002 fd8f 	bl	8005304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200005e8 	.word	0x200005e8

080027f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH4_Pin);
 80027f4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80027f8:	f000 fe60 	bl	80034bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH3_Pin);
 80027fc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002800:	f000 fe5c 	bl	80034bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002804:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002808:	f000 fe58 	bl	80034bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}

08002810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return 1;
 8002814:	2301      	movs	r3, #1
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <_kill>:

int _kill(int pid, int sig)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800282a:	f004 fc2f 	bl	800708c <__errno>
 800282e:	4603      	mov	r3, r0
 8002830:	2216      	movs	r2, #22
 8002832:	601a      	str	r2, [r3, #0]
  return -1;
 8002834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <_exit>:

void _exit (int status)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ffe7 	bl	8002820 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002852:	bf00      	nop
 8002854:	e7fd      	b.n	8002852 <_exit+0x12>

08002856 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	e00a      	b.n	800287e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002868:	f3af 8000 	nop.w
 800286c:	4601      	mov	r1, r0
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	60ba      	str	r2, [r7, #8]
 8002874:	b2ca      	uxtb	r2, r1
 8002876:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	3301      	adds	r3, #1
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	dbf0      	blt.n	8002868 <_read+0x12>
  }

  return len;
 8002886:	687b      	ldr	r3, [r7, #4]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	e009      	b.n	80028b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	60ba      	str	r2, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3301      	adds	r3, #1
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	dbf1      	blt.n	80028a2 <_write+0x12>
  }
  return len;
 80028be:	687b      	ldr	r3, [r7, #4]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <_close>:

int _close(int file)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028f0:	605a      	str	r2, [r3, #4]
  return 0;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <_isatty>:

int _isatty(int file)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002908:	2301      	movs	r3, #1
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002938:	4a14      	ldr	r2, [pc, #80]	@ (800298c <_sbrk+0x5c>)
 800293a:	4b15      	ldr	r3, [pc, #84]	@ (8002990 <_sbrk+0x60>)
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002944:	4b13      	ldr	r3, [pc, #76]	@ (8002994 <_sbrk+0x64>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <_sbrk+0x64>)
 800294e:	4a12      	ldr	r2, [pc, #72]	@ (8002998 <_sbrk+0x68>)
 8002950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002952:	4b10      	ldr	r3, [pc, #64]	@ (8002994 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	429a      	cmp	r2, r3
 800295e:	d207      	bcs.n	8002970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002960:	f004 fb94 	bl	800708c <__errno>
 8002964:	4603      	mov	r3, r0
 8002966:	220c      	movs	r2, #12
 8002968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
 800296e:	e009      	b.n	8002984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002970:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <_sbrk+0x64>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002976:	4b07      	ldr	r3, [pc, #28]	@ (8002994 <_sbrk+0x64>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	4a05      	ldr	r2, [pc, #20]	@ (8002994 <_sbrk+0x64>)
 8002980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002982:	68fb      	ldr	r3, [r7, #12]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20020000 	.word	0x20020000
 8002990:	00000400 	.word	0x00000400
 8002994:	200007b8 	.word	0x200007b8
 8002998:	20000910 	.word	0x20000910

0800299c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a0:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <SystemInit+0x20>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a6:	4a05      	ldr	r2, [pc, #20]	@ (80029bc <SystemInit+0x20>)
 80029a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <Xbus_setBusId>:
}

/*! \brief Sets xbus Bus identifier
*/
void Xbus_setBusId(uint8_t* xbusMessage, uint8_t busId)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	70fb      	strb	r3, [r7, #3]
	xbusMessage[OFFSET_TO_BID] = busId & 0xff;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3301      	adds	r3, #1
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	701a      	strb	r2, [r3, #0]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <Xbus_getMessageId>:

/*! \brief Returns xbus Message identifier
*/
int Xbus_getMessageId(const uint8_t* xbusMessage)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	return (xbusMessage[OFFSET_TO_MID] & 0xff);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3302      	adds	r3, #2
 80029ec:	781b      	ldrb	r3, [r3, #0]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <Xbus_setMessageId>:

/*! \brief Sets xbus Message identifier
*/
void Xbus_setMessageId(uint8_t* xbusMessage, uint8_t messageId)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	70fb      	strb	r3, [r7, #3]
	xbusMessage[OFFSET_TO_MID] = messageId & 0xff;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3302      	adds	r3, #2
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	701a      	strb	r2, [r3, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <Xbus_getPayloadLength>:

/*! \brief Returns xbus message (payload) length
*/
int Xbus_getPayloadLength(const uint8_t* xbusMessage)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b085      	sub	sp, #20
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
	int length = xbusMessage[OFFSET_TO_LEN] & 0xff;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3303      	adds	r3, #3
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
	if (length != LENGTH_EXTENDER_BYTE)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2bff      	cmp	r3, #255	@ 0xff
 8002a2e:	d001      	beq.n	8002a34 <Xbus_getPayloadLength+0x1a>
		return length;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	e00b      	b.n	8002a4c <Xbus_getPayloadLength+0x32>
	else
	{
		int result = (xbusMessage[OFFSET_TO_LEN + 2] & 0xff);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3305      	adds	r3, #5
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	60bb      	str	r3, [r7, #8]
		result += (xbusMessage[OFFSET_TO_LEN + 1] & 0xff) << 8;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	4413      	add	r3, r2
 8002a48:	60bb      	str	r3, [r7, #8]
		return result;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
	}
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <Xbus_setPayloadLength>:

/*! \brief Sets xbus message (payload) length
*/
void Xbus_setPayloadLength(uint8_t* xbusMessage, uint16_t payloadLength)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
	if (payloadLength < 255)
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	2bfe      	cmp	r3, #254	@ 0xfe
 8002a68:	d805      	bhi.n	8002a76 <Xbus_setPayloadLength+0x1e>
		xbusMessage[OFFSET_TO_LEN] = payloadLength & 0xff;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3303      	adds	r3, #3
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	701a      	strb	r2, [r3, #0]
	{
		xbusMessage[OFFSET_TO_LEN] = LENGTH_EXTENDER_BYTE;
		xbusMessage[OFFSET_TO_LEN + 1] = (payloadLength >> 8) & 0xff;
		xbusMessage[OFFSET_TO_LEN + 2] = payloadLength & 0xff;
	}
}
 8002a74:	e00f      	b.n	8002a96 <Xbus_setPayloadLength+0x3e>
		xbusMessage[OFFSET_TO_LEN] = LENGTH_EXTENDER_BYTE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3303      	adds	r3, #3
 8002a7a:	22ff      	movs	r2, #255	@ 0xff
 8002a7c:	701a      	strb	r2, [r3, #0]
		xbusMessage[OFFSET_TO_LEN + 1] = (payloadLength >> 8) & 0xff;
 8002a7e:	887b      	ldrh	r3, [r7, #2]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3304      	adds	r3, #4
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	701a      	strb	r2, [r3, #0]
		xbusMessage[OFFSET_TO_LEN + 2] = payloadLength & 0xff;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3305      	adds	r3, #5
 8002a90:	887a      	ldrh	r2, [r7, #2]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <Xbus_message>:

/*! \brief Initialize a xbus message with BID, MID and Length
*/
void Xbus_message(uint8_t* xbusMessage, uint8_t bid, uint8_t mid, uint16_t len)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	4608      	mov	r0, r1
 8002aac:	4611      	mov	r1, r2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	70fb      	strb	r3, [r7, #3]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	70bb      	strb	r3, [r7, #2]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	803b      	strh	r3, [r7, #0]
	xbusMessage[0] = 0xFA;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	22fa      	movs	r2, #250	@ 0xfa
 8002ac0:	701a      	strb	r2, [r3, #0]
	Xbus_setBusId(xbusMessage, bid);
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ff7a 	bl	80029c0 <Xbus_setBusId>
	Xbus_setMessageId(xbusMessage, mid);
 8002acc:	78bb      	ldrb	r3, [r7, #2]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ff92 	bl	80029fa <Xbus_setMessageId>
	Xbus_setPayloadLength(xbusMessage, len);
 8002ad6:	883b      	ldrh	r3, [r7, #0]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffbc 	bl	8002a58 <Xbus_setPayloadLength>
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <Xbus_getPointerToPayload>:
}

/*! \brief Returns pointer to payload of an xbus message
*/
uint8_t* Xbus_getPointerToPayload(uint8_t* xbusMessage)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	if ((xbusMessage[OFFSET_TO_LEN] & 0xff) == LENGTH_EXTENDER_BYTE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3303      	adds	r3, #3
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2bff      	cmp	r3, #255	@ 0xff
 8002af8:	d102      	bne.n	8002b00 <Xbus_getPointerToPayload+0x18>
		return xbusMessage + OFFSET_TO_PAYLOAD_EXT;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3306      	adds	r3, #6
 8002afe:	e001      	b.n	8002b04 <Xbus_getPointerToPayload+0x1c>
	else
		return xbusMessage + OFFSET_TO_PAYLOAD;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <Xbus_getConstPointerToPayload>:

/*! \brief Returns a const pointer to payload of an xbus message
*/
uint8_t const* Xbus_getConstPointerToPayload(uint8_t const* xbusMessage)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	return Xbus_getPointerToPayload((uint8_t*)xbusMessage);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ffe5 	bl	8002ae8 <Xbus_getPointerToPayload>
 8002b1e:	4603      	mov	r3, r0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <checkDataReadyLineMain>:
	checksum &= 0xff;
	return (checksum == 0);
}

bool checkDataReadyLineMain()
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(DATA_READY_PORT, DATA_READY_PIN) == GPIO_PIN_SET;
 8002b2c:	2108      	movs	r1, #8
 8002b2e:	4805      	ldr	r0, [pc, #20]	@ (8002b44 <checkDataReadyLineMain+0x1c>)
 8002b30:	f000 fc92 	bl	8003458 <HAL_GPIO_ReadPin>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	bf0c      	ite	eq
 8002b3a:	2301      	moveq	r3, #1
 8002b3c:	2300      	movne	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40020400 	.word	0x40020400

08002b48 <Xbus_createRawMessageHelper>:

size_t Xbus_createRawMessageHelper(uint8_t* dest, uint8_t const* message)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
	int n;
	uint8_t checksum;
	uint16_t length;
	uint8_t* dptr = dest;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	60fb      	str	r3, [r7, #12]

	length = Xbus_getPayloadLength(message);
 8002b56:	6838      	ldr	r0, [r7, #0]
 8002b58:	f7ff ff5f 	bl	8002a1a <Xbus_getPayloadLength>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	817b      	strh	r3, [r7, #10]

	*dptr++ = XBUS_CONTROL_PIPE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	60fa      	str	r2, [r7, #12]
 8002b66:	2203      	movs	r2, #3
 8002b68:	701a      	strb	r2, [r3, #0]

	checksum = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	74fb      	strb	r3, [r7, #19]
	checksum -= XBUS_MASTERDEVICE;
 8002b6e:	7cfb      	ldrb	r3, [r7, #19]
 8002b70:	3301      	adds	r3, #1
 8002b72:	74fb      	strb	r3, [r7, #19]

	*dptr = Xbus_getMessageId(message);
 8002b74:	6838      	ldr	r0, [r7, #0]
 8002b76:	f7ff ff33 	bl	80029e0 <Xbus_getMessageId>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	701a      	strb	r2, [r3, #0]
	checksum -= *dptr++;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	60fa      	str	r2, [r7, #12]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	7cfa      	ldrb	r2, [r7, #19]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	74fb      	strb	r3, [r7, #19]

	if (length < XBUS_EXTENDED_LENGTH)
 8002b90:	897b      	ldrh	r3, [r7, #10]
 8002b92:	2bfe      	cmp	r3, #254	@ 0xfe
 8002b94:	d80b      	bhi.n	8002bae <Xbus_createRawMessageHelper+0x66>
	{
		*dptr = length;
 8002b96:	897b      	ldrh	r3, [r7, #10]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	60fa      	str	r2, [r7, #12]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	7cfa      	ldrb	r2, [r7, #19]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	74fb      	strb	r3, [r7, #19]
 8002bac:	e021      	b.n	8002bf2 <Xbus_createRawMessageHelper+0xaa>
	}
	else
	{
		*dptr = XBUS_EXTENDED_LENGTH;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	22ff      	movs	r2, #255	@ 0xff
 8002bb2:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	60fa      	str	r2, [r7, #12]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	7cfa      	ldrb	r2, [r7, #19]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	74fb      	strb	r3, [r7, #19]
		*dptr = length >> 8;
 8002bc2:	897b      	ldrh	r3, [r7, #10]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	60fa      	str	r2, [r7, #12]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	7cfa      	ldrb	r2, [r7, #19]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	74fb      	strb	r3, [r7, #19]
		*dptr = length & 0xFF;
 8002bdc:	897b      	ldrh	r3, [r7, #10]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	60fa      	str	r2, [r7, #12]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	7cfa      	ldrb	r2, [r7, #19]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	74fb      	strb	r3, [r7, #19]
	}

	for (n = 0; n < length; n++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	e012      	b.n	8002c1e <Xbus_createRawMessageHelper+0xd6>
	{
		*dptr = Xbus_getConstPointerToPayload(message)[n];
 8002bf8:	6838      	ldr	r0, [r7, #0]
 8002bfa:	f7ff ff89 	bl	8002b10 <Xbus_getConstPointerToPayload>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	4413      	add	r3, r2
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	60fa      	str	r2, [r7, #12]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	7cfa      	ldrb	r2, [r7, #19]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	74fb      	strb	r3, [r7, #19]
	for (n = 0; n < length; n++)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	897b      	ldrh	r3, [r7, #10]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	dbe8      	blt.n	8002bf8 <Xbus_createRawMessageHelper+0xb0>
	}

	*dptr++ = checksum;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	60fa      	str	r2, [r7, #12]
 8002c2c:	7cfa      	ldrb	r2, [r7, #19]
 8002c2e:	701a      	strb	r2, [r3, #0]

	return dptr - dest;
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	1ad3      	subs	r3, r2, r3
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <extractUint8>:

uint8_t extractUint8(const uint8_t *data, int *index) {
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
    uint8_t result = data[*index];
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	73fb      	strb	r3, [r7, #15]
    (*index)++;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	601a      	str	r2, [r3, #0]
    return result;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <extractUint16>:

/* Extract a 16-bit unsigned integer from data in big-endian order.
   The first byte becomes the high 8 bits and the second byte the low 8 bits. */
uint16_t extractUint16(const uint8_t *data, int *index) {
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	81fb      	strh	r3, [r7, #14]
    result |= ((uint16_t)data[*index]) << 8;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	b21a      	sxth	r2, r3
 8002c8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	b21b      	sxth	r3, r3
 8002c94:	81fb      	strh	r3, [r7, #14]
    (*index)++;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	601a      	str	r2, [r3, #0]
    result |= ((uint16_t)data[*index]);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	89fb      	ldrh	r3, [r7, #14]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	81fb      	strh	r3, [r7, #14]
    (*index)++;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	601a      	str	r2, [r3, #0]
    return result;
 8002cbe:	89fb      	ldrh	r3, [r7, #14]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <extractUint32>:

/* Extract a 32-bit unsigned integer from data in big-endian order.
   The first byte is shifted to the most significant position, etc. */
uint32_t extractUint32(const uint8_t *data, int *index) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
    uint32_t result = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
    result |= ((uint32_t)data[*index]) << 24;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	061b      	lsls	r3, r3, #24
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
    (*index)++;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]) << 16;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	041b      	lsls	r3, r3, #16
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
    (*index)++;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]) << 8;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
    (*index)++;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
    (*index)++;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	601a      	str	r2, [r3, #0]
    return result;
 8002d52:	68fb      	ldr	r3, [r7, #12]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <extractFloat>:

/* Extract a float by first reading 4 bytes as a 32-bit unsigned integer
   and then copying them into a float. */
float extractFloat(const uint8_t *data, int *index) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
    uint32_t temp = extractUint32(data, index);
 8002d6a:	6839      	ldr	r1, [r7, #0]
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ffad 	bl	8002ccc <extractUint32>
 8002d72:	4603      	mov	r3, r0
 8002d74:	60fb      	str	r3, [r7, #12]
    float result;
    memcpy(&result, &temp, sizeof(result));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	60bb      	str	r3, [r7, #8]
    return result;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	ee07 3a90 	vmov	s15, r3
}
 8002d80:	eeb0 0a67 	vmov.f32	s0, s15
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d90:	f7ff fe04 	bl	800299c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d94:	480c      	ldr	r0, [pc, #48]	@ (8002dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d96:	490d      	ldr	r1, [pc, #52]	@ (8002dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d98:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d9c:	e002      	b.n	8002da4 <LoopCopyDataInit>

08002d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002da2:	3304      	adds	r3, #4

08002da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002da8:	d3f9      	bcc.n	8002d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002daa:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dac:	4c0a      	ldr	r4, [pc, #40]	@ (8002dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db0:	e001      	b.n	8002db6 <LoopFillZerobss>

08002db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db4:	3204      	adds	r2, #4

08002db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002db8:	d3fb      	bcc.n	8002db2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002dba:	f004 f96d 	bl	8007098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dbe:	f7fe fd03 	bl	80017c8 <main>
  bx  lr    
 8002dc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dcc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002dd0:	080099a0 	.word	0x080099a0
  ldr r2, =_sbss
 8002dd4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002dd8:	2000090c 	.word	0x2000090c

08002ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ddc:	e7fe      	b.n	8002ddc <ADC_IRQHandler>
	...

08002de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002de4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e20 <HAL_Init+0x40>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e20 <HAL_Init+0x40>)
 8002dea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002df0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <HAL_Init+0x40>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0a      	ldr	r2, [pc, #40]	@ (8002e20 <HAL_Init+0x40>)
 8002df6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dfc:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <HAL_Init+0x40>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a07      	ldr	r2, [pc, #28]	@ (8002e20 <HAL_Init+0x40>)
 8002e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e08:	2003      	movs	r0, #3
 8002e0a:	f000 f94f 	bl	80030ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f000 f808 	bl	8002e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e14:	f7ff fb6a 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023c00 	.word	0x40023c00

08002e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e2c:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <HAL_InitTick+0x54>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b12      	ldr	r3, [pc, #72]	@ (8002e7c <HAL_InitTick+0x58>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	4619      	mov	r1, r3
 8002e36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f967 	bl	8003116 <HAL_SYSTICK_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e00e      	b.n	8002e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b0f      	cmp	r3, #15
 8002e56:	d80a      	bhi.n	8002e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	f000 f92f 	bl	80030c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e64:	4a06      	ldr	r2, [pc, #24]	@ (8002e80 <HAL_InitTick+0x5c>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e000      	b.n	8002e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000010 	.word	0x20000010
 8002e7c:	20000018 	.word	0x20000018
 8002e80:	20000014 	.word	0x20000014

08002e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e88:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <HAL_IncTick+0x20>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_IncTick+0x24>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	4a04      	ldr	r2, [pc, #16]	@ (8002ea8 <HAL_IncTick+0x24>)
 8002e96:	6013      	str	r3, [r2, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000018 	.word	0x20000018
 8002ea8:	200007bc 	.word	0x200007bc

08002eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb0:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <HAL_GetTick+0x14>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	200007bc 	.word	0x200007bc

08002ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7ff ffee 	bl	8002eac <HAL_GetTick>
 8002ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d005      	beq.n	8002eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ede:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <HAL_Delay+0x44>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eea:	bf00      	nop
 8002eec:	f7ff ffde 	bl	8002eac <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d8f7      	bhi.n	8002eec <HAL_Delay+0x28>
  {
  }
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000018 	.word	0x20000018

08002f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <__NVIC_SetPriorityGrouping+0x44>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f3e:	4a04      	ldr	r2, [pc, #16]	@ (8002f50 <__NVIC_SetPriorityGrouping+0x44>)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	60d3      	str	r3, [r2, #12]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f58:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <__NVIC_GetPriorityGrouping+0x18>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	f003 0307 	and.w	r3, r3, #7
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	db0b      	blt.n	8002f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	4907      	ldr	r1, [pc, #28]	@ (8002fa8 <__NVIC_EnableIRQ+0x38>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2001      	movs	r0, #1
 8002f92:	fa00 f202 	lsl.w	r2, r0, r2
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000e100 	.word	0xe000e100

08002fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	6039      	str	r1, [r7, #0]
 8002fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	db0a      	blt.n	8002fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	490c      	ldr	r1, [pc, #48]	@ (8002ff8 <__NVIC_SetPriority+0x4c>)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	0112      	lsls	r2, r2, #4
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	440b      	add	r3, r1
 8002fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd4:	e00a      	b.n	8002fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4908      	ldr	r1, [pc, #32]	@ (8002ffc <__NVIC_SetPriority+0x50>)
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	3b04      	subs	r3, #4
 8002fe4:	0112      	lsls	r2, r2, #4
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	440b      	add	r3, r1
 8002fea:	761a      	strb	r2, [r3, #24]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000e100 	.word	0xe000e100
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	@ 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f1c3 0307 	rsb	r3, r3, #7
 800301a:	2b04      	cmp	r3, #4
 800301c:	bf28      	it	cs
 800301e:	2304      	movcs	r3, #4
 8003020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3304      	adds	r3, #4
 8003026:	2b06      	cmp	r3, #6
 8003028:	d902      	bls.n	8003030 <NVIC_EncodePriority+0x30>
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3b03      	subs	r3, #3
 800302e:	e000      	b.n	8003032 <NVIC_EncodePriority+0x32>
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003034:	f04f 32ff 	mov.w	r2, #4294967295
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43da      	mvns	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	401a      	ands	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003048:	f04f 31ff 	mov.w	r1, #4294967295
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	43d9      	mvns	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003058:	4313      	orrs	r3, r2
         );
}
 800305a:	4618      	mov	r0, r3
 800305c:	3724      	adds	r7, #36	@ 0x24
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3b01      	subs	r3, #1
 8003074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003078:	d301      	bcc.n	800307e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800307a:	2301      	movs	r3, #1
 800307c:	e00f      	b.n	800309e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800307e:	4a0a      	ldr	r2, [pc, #40]	@ (80030a8 <SysTick_Config+0x40>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3b01      	subs	r3, #1
 8003084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003086:	210f      	movs	r1, #15
 8003088:	f04f 30ff 	mov.w	r0, #4294967295
 800308c:	f7ff ff8e 	bl	8002fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <SysTick_Config+0x40>)
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003096:	4b04      	ldr	r3, [pc, #16]	@ (80030a8 <SysTick_Config+0x40>)
 8003098:	2207      	movs	r2, #7
 800309a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	e000e010 	.word	0xe000e010

080030ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ff29 	bl	8002f0c <__NVIC_SetPriorityGrouping>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	4603      	mov	r3, r0
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030d4:	f7ff ff3e 	bl	8002f54 <__NVIC_GetPriorityGrouping>
 80030d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	6978      	ldr	r0, [r7, #20]
 80030e0:	f7ff ff8e 	bl	8003000 <NVIC_EncodePriority>
 80030e4:	4602      	mov	r2, r0
 80030e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff5d 	bl	8002fac <__NVIC_SetPriority>
}
 80030f2:	bf00      	nop
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	4603      	mov	r3, r0
 8003102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff31 	bl	8002f70 <__NVIC_EnableIRQ>
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff ffa2 	bl	8003068 <SysTick_Config>
 8003124:	4603      	mov	r3, r0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	@ 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e165      	b.n	8003418 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800314c:	2201      	movs	r2, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	429a      	cmp	r2, r3
 8003166:	f040 8154 	bne.w	8003412 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d005      	beq.n	8003182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800317e:	2b02      	cmp	r3, #2
 8003180:	d130      	bne.n	80031e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	2203      	movs	r2, #3
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031b8:	2201      	movs	r2, #1
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 0201 	and.w	r2, r3, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d017      	beq.n	8003220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	2203      	movs	r2, #3
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d123      	bne.n	8003274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	08da      	lsrs	r2, r3, #3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3208      	adds	r2, #8
 8003234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	220f      	movs	r2, #15
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	08da      	lsrs	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3208      	adds	r2, #8
 800326e:	69b9      	ldr	r1, [r7, #24]
 8003270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	2203      	movs	r2, #3
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0203 	and.w	r2, r3, #3
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80ae 	beq.w	8003412 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003430 <HAL_GPIO_Init+0x300>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	4a5c      	ldr	r2, [pc, #368]	@ (8003430 <HAL_GPIO_Init+0x300>)
 80032c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003430 <HAL_GPIO_Init+0x300>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d2:	4a58      	ldr	r2, [pc, #352]	@ (8003434 <HAL_GPIO_Init+0x304>)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	3302      	adds	r3, #2
 80032da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	220f      	movs	r2, #15
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003438 <HAL_GPIO_Init+0x308>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d025      	beq.n	800334a <HAL_GPIO_Init+0x21a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a4e      	ldr	r2, [pc, #312]	@ (800343c <HAL_GPIO_Init+0x30c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d01f      	beq.n	8003346 <HAL_GPIO_Init+0x216>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a4d      	ldr	r2, [pc, #308]	@ (8003440 <HAL_GPIO_Init+0x310>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d019      	beq.n	8003342 <HAL_GPIO_Init+0x212>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a4c      	ldr	r2, [pc, #304]	@ (8003444 <HAL_GPIO_Init+0x314>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d013      	beq.n	800333e <HAL_GPIO_Init+0x20e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a4b      	ldr	r2, [pc, #300]	@ (8003448 <HAL_GPIO_Init+0x318>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00d      	beq.n	800333a <HAL_GPIO_Init+0x20a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a4a      	ldr	r2, [pc, #296]	@ (800344c <HAL_GPIO_Init+0x31c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <HAL_GPIO_Init+0x206>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a49      	ldr	r2, [pc, #292]	@ (8003450 <HAL_GPIO_Init+0x320>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_GPIO_Init+0x202>
 800332e:	2306      	movs	r3, #6
 8003330:	e00c      	b.n	800334c <HAL_GPIO_Init+0x21c>
 8003332:	2307      	movs	r3, #7
 8003334:	e00a      	b.n	800334c <HAL_GPIO_Init+0x21c>
 8003336:	2305      	movs	r3, #5
 8003338:	e008      	b.n	800334c <HAL_GPIO_Init+0x21c>
 800333a:	2304      	movs	r3, #4
 800333c:	e006      	b.n	800334c <HAL_GPIO_Init+0x21c>
 800333e:	2303      	movs	r3, #3
 8003340:	e004      	b.n	800334c <HAL_GPIO_Init+0x21c>
 8003342:	2302      	movs	r3, #2
 8003344:	e002      	b.n	800334c <HAL_GPIO_Init+0x21c>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_GPIO_Init+0x21c>
 800334a:	2300      	movs	r3, #0
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	f002 0203 	and.w	r2, r2, #3
 8003352:	0092      	lsls	r2, r2, #2
 8003354:	4093      	lsls	r3, r2
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800335c:	4935      	ldr	r1, [pc, #212]	@ (8003434 <HAL_GPIO_Init+0x304>)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	3302      	adds	r3, #2
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800336a:	4b3a      	ldr	r3, [pc, #232]	@ (8003454 <HAL_GPIO_Init+0x324>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800338e:	4a31      	ldr	r2, [pc, #196]	@ (8003454 <HAL_GPIO_Init+0x324>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003394:	4b2f      	ldr	r3, [pc, #188]	@ (8003454 <HAL_GPIO_Init+0x324>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033b8:	4a26      	ldr	r2, [pc, #152]	@ (8003454 <HAL_GPIO_Init+0x324>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033be:	4b25      	ldr	r3, [pc, #148]	@ (8003454 <HAL_GPIO_Init+0x324>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003454 <HAL_GPIO_Init+0x324>)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003454 <HAL_GPIO_Init+0x324>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800340c:	4a11      	ldr	r2, [pc, #68]	@ (8003454 <HAL_GPIO_Init+0x324>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3301      	adds	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	f67f ae96 	bls.w	800314c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	3724      	adds	r7, #36	@ 0x24
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
 8003434:	40013800 	.word	0x40013800
 8003438:	40020000 	.word	0x40020000
 800343c:	40020400 	.word	0x40020400
 8003440:	40020800 	.word	0x40020800
 8003444:	40020c00 	.word	0x40020c00
 8003448:	40021000 	.word	0x40021000
 800344c:	40021400 	.word	0x40021400
 8003450:	40021800 	.word	0x40021800
 8003454:	40013c00 	.word	0x40013c00

08003458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	887b      	ldrh	r3, [r7, #2]
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
 8003474:	e001      	b.n	800347a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800347a:	7bfb      	ldrb	r3, [r7, #15]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	807b      	strh	r3, [r7, #2]
 8003494:	4613      	mov	r3, r2
 8003496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003498:	787b      	ldrb	r3, [r7, #1]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800349e:	887a      	ldrh	r2, [r7, #2]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034a4:	e003      	b.n	80034ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034a6:	887b      	ldrh	r3, [r7, #2]
 80034a8:	041a      	lsls	r2, r3, #16
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	619a      	str	r2, [r3, #24]
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034c6:	4b08      	ldr	r3, [pc, #32]	@ (80034e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	88fb      	ldrh	r3, [r7, #6]
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d006      	beq.n	80034e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034d2:	4a05      	ldr	r2, [pc, #20]	@ (80034e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fe ff12 	bl	8002304 <HAL_GPIO_EXTI_Callback>
  }
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40013c00 	.word	0x40013c00

080034ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e12b      	b.n	8003756 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff f812 	bl	800253c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2224      	movs	r2, #36	@ 0x24
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800353e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800354e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003550:	f001 f922 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8003554:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4a81      	ldr	r2, [pc, #516]	@ (8003760 <HAL_I2C_Init+0x274>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d807      	bhi.n	8003570 <HAL_I2C_Init+0x84>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a80      	ldr	r2, [pc, #512]	@ (8003764 <HAL_I2C_Init+0x278>)
 8003564:	4293      	cmp	r3, r2
 8003566:	bf94      	ite	ls
 8003568:	2301      	movls	r3, #1
 800356a:	2300      	movhi	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e006      	b.n	800357e <HAL_I2C_Init+0x92>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4a7d      	ldr	r2, [pc, #500]	@ (8003768 <HAL_I2C_Init+0x27c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	bf94      	ite	ls
 8003578:	2301      	movls	r3, #1
 800357a:	2300      	movhi	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e0e7      	b.n	8003756 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4a78      	ldr	r2, [pc, #480]	@ (800376c <HAL_I2C_Init+0x280>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	0c9b      	lsrs	r3, r3, #18
 8003590:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4a6a      	ldr	r2, [pc, #424]	@ (8003760 <HAL_I2C_Init+0x274>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d802      	bhi.n	80035c0 <HAL_I2C_Init+0xd4>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	3301      	adds	r3, #1
 80035be:	e009      	b.n	80035d4 <HAL_I2C_Init+0xe8>
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035c6:	fb02 f303 	mul.w	r3, r2, r3
 80035ca:	4a69      	ldr	r2, [pc, #420]	@ (8003770 <HAL_I2C_Init+0x284>)
 80035cc:	fba2 2303 	umull	r2, r3, r2, r3
 80035d0:	099b      	lsrs	r3, r3, #6
 80035d2:	3301      	adds	r3, #1
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	430b      	orrs	r3, r1
 80035da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	495c      	ldr	r1, [pc, #368]	@ (8003760 <HAL_I2C_Init+0x274>)
 80035f0:	428b      	cmp	r3, r1
 80035f2:	d819      	bhi.n	8003628 <HAL_I2C_Init+0x13c>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1e59      	subs	r1, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003602:	1c59      	adds	r1, r3, #1
 8003604:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003608:	400b      	ands	r3, r1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_I2C_Init+0x138>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1e59      	subs	r1, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fbb1 f3f3 	udiv	r3, r1, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003622:	e051      	b.n	80036c8 <HAL_I2C_Init+0x1dc>
 8003624:	2304      	movs	r3, #4
 8003626:	e04f      	b.n	80036c8 <HAL_I2C_Init+0x1dc>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d111      	bne.n	8003654 <HAL_I2C_Init+0x168>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1e58      	subs	r0, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	440b      	add	r3, r1
 800363e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003642:	3301      	adds	r3, #1
 8003644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003648:	2b00      	cmp	r3, #0
 800364a:	bf0c      	ite	eq
 800364c:	2301      	moveq	r3, #1
 800364e:	2300      	movne	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	e012      	b.n	800367a <HAL_I2C_Init+0x18e>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1e58      	subs	r0, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	0099      	lsls	r1, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	fbb0 f3f3 	udiv	r3, r0, r3
 800366a:	3301      	adds	r3, #1
 800366c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_I2C_Init+0x196>
 800367e:	2301      	movs	r3, #1
 8003680:	e022      	b.n	80036c8 <HAL_I2C_Init+0x1dc>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10e      	bne.n	80036a8 <HAL_I2C_Init+0x1bc>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1e58      	subs	r0, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6859      	ldr	r1, [r3, #4]
 8003692:	460b      	mov	r3, r1
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	440b      	add	r3, r1
 8003698:	fbb0 f3f3 	udiv	r3, r0, r3
 800369c:	3301      	adds	r3, #1
 800369e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036a6:	e00f      	b.n	80036c8 <HAL_I2C_Init+0x1dc>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	0099      	lsls	r1, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	6809      	ldr	r1, [r1, #0]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6911      	ldr	r1, [r2, #16]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68d2      	ldr	r2, [r2, #12]
 8003702:	4311      	orrs	r1, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	430b      	orrs	r3, r1
 800370a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	000186a0 	.word	0x000186a0
 8003764:	001e847f 	.word	0x001e847f
 8003768:	003d08ff 	.word	0x003d08ff
 800376c:	431bde83 	.word	0x431bde83
 8003770:	10624dd3 	.word	0x10624dd3

08003774 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	461a      	mov	r2, r3
 8003780:	460b      	mov	r3, r1
 8003782:	817b      	strh	r3, [r7, #10]
 8003784:	4613      	mov	r3, r2
 8003786:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003788:	f7ff fb90 	bl	8002eac <HAL_GetTick>
 800378c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b20      	cmp	r3, #32
 8003798:	f040 80e0 	bne.w	800395c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	2319      	movs	r3, #25
 80037a2:	2201      	movs	r2, #1
 80037a4:	4970      	ldr	r1, [pc, #448]	@ (8003968 <HAL_I2C_Master_Transmit+0x1f4>)
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fc7e 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
 80037b4:	e0d3      	b.n	800395e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_I2C_Master_Transmit+0x50>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e0cc      	b.n	800395e <HAL_I2C_Master_Transmit+0x1ea>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d007      	beq.n	80037ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0201 	orr.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2221      	movs	r2, #33	@ 0x21
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2210      	movs	r2, #16
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	893a      	ldrh	r2, [r7, #8]
 800381a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a50      	ldr	r2, [pc, #320]	@ (800396c <HAL_I2C_Master_Transmit+0x1f8>)
 800382a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800382c:	8979      	ldrh	r1, [r7, #10]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 face 	bl	8003dd4 <I2C_MasterRequestWrite>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e08d      	b.n	800395e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003858:	e066      	b.n	8003928 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	6a39      	ldr	r1, [r7, #32]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fd3c 	bl	80042dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	2b04      	cmp	r3, #4
 8003870:	d107      	bne.n	8003882 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003880:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e06b      	b.n	800395e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d11b      	bne.n	80038fc <HAL_I2C_Master_Transmit+0x188>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d017      	beq.n	80038fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	6a39      	ldr	r1, [r7, #32]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fd33 	bl	800436c <I2C_WaitOnBTFFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	2b04      	cmp	r3, #4
 8003912:	d107      	bne.n	8003924 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003922:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e01a      	b.n	800395e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	d194      	bne.n	800385a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800393e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e000      	b.n	800395e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	00100002 	.word	0x00100002
 800396c:	ffff0000 	.word	0xffff0000

08003970 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08c      	sub	sp, #48	@ 0x30
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	4608      	mov	r0, r1
 800397a:	4611      	mov	r1, r2
 800397c:	461a      	mov	r2, r3
 800397e:	4603      	mov	r3, r0
 8003980:	817b      	strh	r3, [r7, #10]
 8003982:	460b      	mov	r3, r1
 8003984:	813b      	strh	r3, [r7, #8]
 8003986:	4613      	mov	r3, r2
 8003988:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800398a:	f7ff fa8f 	bl	8002eac <HAL_GetTick>
 800398e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b20      	cmp	r3, #32
 800399a:	f040 8214 	bne.w	8003dc6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	2319      	movs	r3, #25
 80039a4:	2201      	movs	r2, #1
 80039a6:	497b      	ldr	r1, [pc, #492]	@ (8003b94 <HAL_I2C_Mem_Read+0x224>)
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 fb7d 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039b4:	2302      	movs	r3, #2
 80039b6:	e207      	b.n	8003dc8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_I2C_Mem_Read+0x56>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e200      	b.n	8003dc8 <HAL_I2C_Mem_Read+0x458>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d007      	beq.n	80039ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2222      	movs	r2, #34	@ 0x22
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2240      	movs	r2, #64	@ 0x40
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8003b98 <HAL_I2C_Mem_Read+0x228>)
 8003a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a2e:	88f8      	ldrh	r0, [r7, #6]
 8003a30:	893a      	ldrh	r2, [r7, #8]
 8003a32:	8979      	ldrh	r1, [r7, #10]
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fa4a 	bl	8003ed8 <I2C_RequestMemoryRead>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e1bc      	b.n	8003dc8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d113      	bne.n	8003a7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a56:	2300      	movs	r3, #0
 8003a58:	623b      	str	r3, [r7, #32]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	623b      	str	r3, [r7, #32]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	623b      	str	r3, [r7, #32]
 8003a6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e190      	b.n	8003da0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d11b      	bne.n	8003abe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e170      	b.n	8003da0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d11b      	bne.n	8003afe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ae4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	e150      	b.n	8003da0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b14:	e144      	b.n	8003da0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	f200 80f1 	bhi.w	8003d02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d123      	bne.n	8003b70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fc65 	bl	80043fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e145      	b.n	8003dc8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b6e:	e117      	b.n	8003da0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d14e      	bne.n	8003c16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4906      	ldr	r1, [pc, #24]	@ (8003b9c <HAL_I2C_Mem_Read+0x22c>)
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fa90 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e11a      	b.n	8003dc8 <HAL_I2C_Mem_Read+0x458>
 8003b92:	bf00      	nop
 8003b94:	00100002 	.word	0x00100002
 8003b98:	ffff0000 	.word	0xffff0000
 8003b9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c14:	e0c4      	b.n	8003da0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	496c      	ldr	r1, [pc, #432]	@ (8003dd0 <HAL_I2C_Mem_Read+0x460>)
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fa41 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0cb      	b.n	8003dc8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c78:	2200      	movs	r2, #0
 8003c7a:	4955      	ldr	r1, [pc, #340]	@ (8003dd0 <HAL_I2C_Mem_Read+0x460>)
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fa13 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e09d      	b.n	8003dc8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d00:	e04e      	b.n	8003da0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 fb78 	bl	80043fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e058      	b.n	8003dc8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d124      	bne.n	8003da0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d107      	bne.n	8003d6e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f47f aeb6 	bne.w	8003b16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003dc6:	2302      	movs	r3, #2
  }
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3728      	adds	r7, #40	@ 0x28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	00010004 	.word	0x00010004

08003dd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	607a      	str	r2, [r7, #4]
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	460b      	mov	r3, r1
 8003de2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d006      	beq.n	8003dfe <I2C_MasterRequestWrite+0x2a>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d003      	beq.n	8003dfe <I2C_MasterRequestWrite+0x2a>
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dfc:	d108      	bne.n	8003e10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	e00b      	b.n	8003e28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e14:	2b12      	cmp	r3, #18
 8003e16:	d107      	bne.n	8003e28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f937 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00d      	beq.n	8003e5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e4e:	d103      	bne.n	8003e58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e035      	b.n	8003ec8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e64:	d108      	bne.n	8003e78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e66:	897b      	ldrh	r3, [r7, #10]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e74:	611a      	str	r2, [r3, #16]
 8003e76:	e01b      	b.n	8003eb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e78:	897b      	ldrh	r3, [r7, #10]
 8003e7a:	11db      	asrs	r3, r3, #7
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	f003 0306 	and.w	r3, r3, #6
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f063 030f 	orn	r3, r3, #15
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	490e      	ldr	r1, [pc, #56]	@ (8003ed0 <I2C_MasterRequestWrite+0xfc>)
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f980 	bl	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e010      	b.n	8003ec8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ea6:	897b      	ldrh	r3, [r7, #10]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4907      	ldr	r1, [pc, #28]	@ (8003ed4 <I2C_MasterRequestWrite+0x100>)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f970 	bl	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	00010008 	.word	0x00010008
 8003ed4:	00010002 	.word	0x00010002

08003ed8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	817b      	strh	r3, [r7, #10]
 8003eea:	460b      	mov	r3, r1
 8003eec:	813b      	strh	r3, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f8c2 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00d      	beq.n	8003f46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f38:	d103      	bne.n	8003f42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e0aa      	b.n	800409c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f46:	897b      	ldrh	r3, [r7, #10]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	6a3a      	ldr	r2, [r7, #32]
 8003f5a:	4952      	ldr	r1, [pc, #328]	@ (80040a4 <I2C_RequestMemoryRead+0x1cc>)
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f91d 	bl	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e097      	b.n	800409c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f84:	6a39      	ldr	r1, [r7, #32]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f9a8 	bl	80042dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00d      	beq.n	8003fae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d107      	bne.n	8003faa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e076      	b.n	800409c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d105      	bne.n	8003fc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fb4:	893b      	ldrh	r3, [r7, #8]
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	611a      	str	r2, [r3, #16]
 8003fbe:	e021      	b.n	8004004 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fc0:	893b      	ldrh	r3, [r7, #8]
 8003fc2:	0a1b      	lsrs	r3, r3, #8
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd0:	6a39      	ldr	r1, [r7, #32]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f982 	bl	80042dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d107      	bne.n	8003ff6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e050      	b.n	800409c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ffa:	893b      	ldrh	r3, [r7, #8]
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004006:	6a39      	ldr	r1, [r7, #32]
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f967 	bl	80042dc <I2C_WaitOnTXEFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00d      	beq.n	8004030 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004018:	2b04      	cmp	r3, #4
 800401a:	d107      	bne.n	800402c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800402a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e035      	b.n	800409c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800403e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	2200      	movs	r2, #0
 8004048:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f82b 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00d      	beq.n	8004074 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004066:	d103      	bne.n	8004070 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e013      	b.n	800409c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004074:	897b      	ldrh	r3, [r7, #10]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	b2da      	uxtb	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004086:	6a3a      	ldr	r2, [r7, #32]
 8004088:	4906      	ldr	r1, [pc, #24]	@ (80040a4 <I2C_RequestMemoryRead+0x1cc>)
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f886 	bl	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	00010002 	.word	0x00010002

080040a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040b8:	e048      	b.n	800414c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d044      	beq.n	800414c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7fe fef3 	bl	8002eac <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d139      	bne.n	800414c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	0c1b      	lsrs	r3, r3, #16
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d10d      	bne.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	43da      	mvns	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	4013      	ands	r3, r2
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	e00c      	b.n	8004118 <I2C_WaitOnFlagUntilTimeout+0x70>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	43da      	mvns	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4013      	ands	r3, r2
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	429a      	cmp	r2, r3
 800411c:	d116      	bne.n	800414c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e023      	b.n	8004194 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	0c1b      	lsrs	r3, r3, #16
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d10d      	bne.n	8004172 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	43da      	mvns	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4013      	ands	r3, r2
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	e00c      	b.n	800418c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	43da      	mvns	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4013      	ands	r3, r2
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	429a      	cmp	r2, r3
 8004190:	d093      	beq.n	80040ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041aa:	e071      	b.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ba:	d123      	bne.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	f043 0204 	orr.w	r2, r3, #4
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e067      	b.n	80042d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d041      	beq.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420c:	f7fe fe4e 	bl	8002eac <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d136      	bne.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	0c1b      	lsrs	r3, r3, #16
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d10c      	bne.n	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	43da      	mvns	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4013      	ands	r3, r2
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	bf14      	ite	ne
 800423e:	2301      	movne	r3, #1
 8004240:	2300      	moveq	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	e00b      	b.n	800425e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	43da      	mvns	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4013      	ands	r3, r2
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	bf14      	ite	ne
 8004258:	2301      	movne	r3, #1
 800425a:	2300      	moveq	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d016      	beq.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427c:	f043 0220 	orr.w	r2, r3, #32
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e021      	b.n	80042d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	0c1b      	lsrs	r3, r3, #16
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b01      	cmp	r3, #1
 8004298:	d10c      	bne.n	80042b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	43da      	mvns	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4013      	ands	r3, r2
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e00b      	b.n	80042cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	43da      	mvns	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4013      	ands	r3, r2
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bf14      	ite	ne
 80042c6:	2301      	movne	r3, #1
 80042c8:	2300      	moveq	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f47f af6d 	bne.w	80041ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e8:	e034      	b.n	8004354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f8e3 	bl	80044b6 <I2C_IsAcknowledgeFailed>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e034      	b.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d028      	beq.n	8004354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004302:	f7fe fdd3 	bl	8002eac <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d11d      	bne.n	8004354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004322:	2b80      	cmp	r3, #128	@ 0x80
 8004324:	d016      	beq.n	8004354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	f043 0220 	orr.w	r2, r3, #32
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e007      	b.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435e:	2b80      	cmp	r3, #128	@ 0x80
 8004360:	d1c3      	bne.n	80042ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004378:	e034      	b.n	80043e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f89b 	bl	80044b6 <I2C_IsAcknowledgeFailed>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e034      	b.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d028      	beq.n	80043e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004392:	f7fe fd8b 	bl	8002eac <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d302      	bcc.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11d      	bne.n	80043e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d016      	beq.n	80043e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d0:	f043 0220 	orr.w	r2, r3, #32
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e007      	b.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d1c3      	bne.n	800437a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004408:	e049      	b.n	800449e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b10      	cmp	r3, #16
 8004416:	d119      	bne.n	800444c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0210 	mvn.w	r2, #16
 8004420:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e030      	b.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444c:	f7fe fd2e 	bl	8002eac <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	429a      	cmp	r2, r3
 800445a:	d302      	bcc.n	8004462 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d11d      	bne.n	800449e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446c:	2b40      	cmp	r3, #64	@ 0x40
 800446e:	d016      	beq.n	800449e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	f043 0220 	orr.w	r2, r3, #32
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e007      	b.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a8:	2b40      	cmp	r3, #64	@ 0x40
 80044aa:	d1ae      	bne.n	800440a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044cc:	d11b      	bne.n	8004506 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	f043 0204 	orr.w	r2, r3, #4
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	4b20      	ldr	r3, [pc, #128]	@ (80045a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	4a1f      	ldr	r2, [pc, #124]	@ (80045a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800452c:	6413      	str	r3, [r2, #64]	@ 0x40
 800452e:	4b1d      	ldr	r3, [pc, #116]	@ (80045a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800453a:	4b1b      	ldr	r3, [pc, #108]	@ (80045a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004540:	f7fe fcb4 	bl	8002eac <HAL_GetTick>
 8004544:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004546:	e009      	b.n	800455c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004548:	f7fe fcb0 	bl	8002eac <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004556:	d901      	bls.n	800455c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e01f      	b.n	800459c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800455c:	4b13      	ldr	r3, [pc, #76]	@ (80045ac <HAL_PWREx_EnableOverDrive+0x98>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004568:	d1ee      	bne.n	8004548 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800456a:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004570:	f7fe fc9c 	bl	8002eac <HAL_GetTick>
 8004574:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004576:	e009      	b.n	800458c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004578:	f7fe fc98 	bl	8002eac <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004586:	d901      	bls.n	800458c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e007      	b.n	800459c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800458c:	4b07      	ldr	r3, [pc, #28]	@ (80045ac <HAL_PWREx_EnableOverDrive+0x98>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004594:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004598:	d1ee      	bne.n	8004578 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40023800 	.word	0x40023800
 80045a8:	420e0040 	.word	0x420e0040
 80045ac:	40007000 	.word	0x40007000
 80045b0:	420e0044 	.word	0x420e0044

080045b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0cc      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c8:	4b68      	ldr	r3, [pc, #416]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d90c      	bls.n	80045f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b65      	ldr	r3, [pc, #404]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b63      	ldr	r3, [pc, #396]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0b8      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004608:	4b59      	ldr	r3, [pc, #356]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4a58      	ldr	r2, [pc, #352]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004620:	4b53      	ldr	r3, [pc, #332]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4a52      	ldr	r2, [pc, #328]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800462a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462c:	4b50      	ldr	r3, [pc, #320]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	494d      	ldr	r1, [pc, #308]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d044      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004652:	4b47      	ldr	r3, [pc, #284]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d119      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e07f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d003      	beq.n	8004672 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466e:	2b03      	cmp	r3, #3
 8004670:	d107      	bne.n	8004682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004672:	4b3f      	ldr	r3, [pc, #252]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e06f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004682:	4b3b      	ldr	r3, [pc, #236]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e067      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004692:	4b37      	ldr	r3, [pc, #220]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f023 0203 	bic.w	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4934      	ldr	r1, [pc, #208]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a4:	f7fe fc02 	bl	8002eac <HAL_GetTick>
 80046a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ac:	f7fe fbfe 	bl	8002eac <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e04f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 020c 	and.w	r2, r3, #12
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d1eb      	bne.n	80046ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046d4:	4b25      	ldr	r3, [pc, #148]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d20c      	bcs.n	80046fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b22      	ldr	r3, [pc, #136]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ea:	4b20      	ldr	r3, [pc, #128]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e032      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004708:	4b19      	ldr	r3, [pc, #100]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4916      	ldr	r1, [pc, #88]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004726:	4b12      	ldr	r3, [pc, #72]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	490e      	ldr	r1, [pc, #56]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800473a:	f000 f855 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 800473e:	4602      	mov	r2, r0
 8004740:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	490a      	ldr	r1, [pc, #40]	@ (8004774 <HAL_RCC_ClockConfig+0x1c0>)
 800474c:	5ccb      	ldrb	r3, [r1, r3]
 800474e:	fa22 f303 	lsr.w	r3, r2, r3
 8004752:	4a09      	ldr	r2, [pc, #36]	@ (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004756:	4b09      	ldr	r3, [pc, #36]	@ (800477c <HAL_RCC_ClockConfig+0x1c8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe fb62 	bl	8002e24 <HAL_InitTick>

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40023c00 	.word	0x40023c00
 8004770:	40023800 	.word	0x40023800
 8004774:	08009608 	.word	0x08009608
 8004778:	20000010 	.word	0x20000010
 800477c:	20000014 	.word	0x20000014

08004780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004784:	4b03      	ldr	r3, [pc, #12]	@ (8004794 <HAL_RCC_GetHCLKFreq+0x14>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000010 	.word	0x20000010

08004798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800479c:	f7ff fff0 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	0a9b      	lsrs	r3, r3, #10
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	4903      	ldr	r1, [pc, #12]	@ (80047bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ae:	5ccb      	ldrb	r3, [r1, r3]
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40023800 	.word	0x40023800
 80047bc:	08009618 	.word	0x08009618

080047c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047c4:	f7ff ffdc 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047c8:	4602      	mov	r2, r0
 80047ca:	4b05      	ldr	r3, [pc, #20]	@ (80047e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	0b5b      	lsrs	r3, r3, #13
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	4903      	ldr	r1, [pc, #12]	@ (80047e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047d6:	5ccb      	ldrb	r3, [r1, r3]
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40023800 	.word	0x40023800
 80047e4:	08009618 	.word	0x08009618

080047e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ec:	b0ae      	sub	sp, #184	@ 0xb8
 80047ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800480e:	4bcb      	ldr	r3, [pc, #812]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b0c      	cmp	r3, #12
 8004818:	f200 8206 	bhi.w	8004c28 <HAL_RCC_GetSysClockFreq+0x440>
 800481c:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <HAL_RCC_GetSysClockFreq+0x3c>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004859 	.word	0x08004859
 8004828:	08004c29 	.word	0x08004c29
 800482c:	08004c29 	.word	0x08004c29
 8004830:	08004c29 	.word	0x08004c29
 8004834:	08004861 	.word	0x08004861
 8004838:	08004c29 	.word	0x08004c29
 800483c:	08004c29 	.word	0x08004c29
 8004840:	08004c29 	.word	0x08004c29
 8004844:	08004869 	.word	0x08004869
 8004848:	08004c29 	.word	0x08004c29
 800484c:	08004c29 	.word	0x08004c29
 8004850:	08004c29 	.word	0x08004c29
 8004854:	08004a59 	.word	0x08004a59
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004858:	4bb9      	ldr	r3, [pc, #740]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x358>)
 800485a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800485e:	e1e7      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004860:	4bb8      	ldr	r3, [pc, #736]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004862:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004866:	e1e3      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004868:	4bb4      	ldr	r3, [pc, #720]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004870:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004874:	4bb1      	ldr	r3, [pc, #708]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d071      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004880:	4bae      	ldr	r3, [pc, #696]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	099b      	lsrs	r3, r3, #6
 8004886:	2200      	movs	r2, #0
 8004888:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800488c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004890:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004898:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800489c:	2300      	movs	r3, #0
 800489e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048a6:	4622      	mov	r2, r4
 80048a8:	462b      	mov	r3, r5
 80048aa:	f04f 0000 	mov.w	r0, #0
 80048ae:	f04f 0100 	mov.w	r1, #0
 80048b2:	0159      	lsls	r1, r3, #5
 80048b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b8:	0150      	lsls	r0, r2, #5
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4621      	mov	r1, r4
 80048c0:	1a51      	subs	r1, r2, r1
 80048c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80048c4:	4629      	mov	r1, r5
 80048c6:	eb63 0301 	sbc.w	r3, r3, r1
 80048ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80048d8:	4649      	mov	r1, r9
 80048da:	018b      	lsls	r3, r1, #6
 80048dc:	4641      	mov	r1, r8
 80048de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048e2:	4641      	mov	r1, r8
 80048e4:	018a      	lsls	r2, r1, #6
 80048e6:	4641      	mov	r1, r8
 80048e8:	1a51      	subs	r1, r2, r1
 80048ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048ec:	4649      	mov	r1, r9
 80048ee:	eb63 0301 	sbc.w	r3, r3, r1
 80048f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004900:	4649      	mov	r1, r9
 8004902:	00cb      	lsls	r3, r1, #3
 8004904:	4641      	mov	r1, r8
 8004906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800490a:	4641      	mov	r1, r8
 800490c:	00ca      	lsls	r2, r1, #3
 800490e:	4610      	mov	r0, r2
 8004910:	4619      	mov	r1, r3
 8004912:	4603      	mov	r3, r0
 8004914:	4622      	mov	r2, r4
 8004916:	189b      	adds	r3, r3, r2
 8004918:	633b      	str	r3, [r7, #48]	@ 0x30
 800491a:	462b      	mov	r3, r5
 800491c:	460a      	mov	r2, r1
 800491e:	eb42 0303 	adc.w	r3, r2, r3
 8004922:	637b      	str	r3, [r7, #52]	@ 0x34
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004930:	4629      	mov	r1, r5
 8004932:	024b      	lsls	r3, r1, #9
 8004934:	4621      	mov	r1, r4
 8004936:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800493a:	4621      	mov	r1, r4
 800493c:	024a      	lsls	r2, r1, #9
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004946:	2200      	movs	r2, #0
 8004948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800494c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004950:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004954:	f7fc f948 	bl	8000be8 <__aeabi_uldivmod>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4613      	mov	r3, r2
 800495e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004962:	e067      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004964:	4b75      	ldr	r3, [pc, #468]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	099b      	lsrs	r3, r3, #6
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004970:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004974:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800497e:	2300      	movs	r3, #0
 8004980:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004982:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004986:	4622      	mov	r2, r4
 8004988:	462b      	mov	r3, r5
 800498a:	f04f 0000 	mov.w	r0, #0
 800498e:	f04f 0100 	mov.w	r1, #0
 8004992:	0159      	lsls	r1, r3, #5
 8004994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004998:	0150      	lsls	r0, r2, #5
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4621      	mov	r1, r4
 80049a0:	1a51      	subs	r1, r2, r1
 80049a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049a4:	4629      	mov	r1, r5
 80049a6:	eb63 0301 	sbc.w	r3, r3, r1
 80049aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80049b8:	4649      	mov	r1, r9
 80049ba:	018b      	lsls	r3, r1, #6
 80049bc:	4641      	mov	r1, r8
 80049be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049c2:	4641      	mov	r1, r8
 80049c4:	018a      	lsls	r2, r1, #6
 80049c6:	4641      	mov	r1, r8
 80049c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80049cc:	4649      	mov	r1, r9
 80049ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049e6:	4692      	mov	sl, r2
 80049e8:	469b      	mov	fp, r3
 80049ea:	4623      	mov	r3, r4
 80049ec:	eb1a 0303 	adds.w	r3, sl, r3
 80049f0:	623b      	str	r3, [r7, #32]
 80049f2:	462b      	mov	r3, r5
 80049f4:	eb4b 0303 	adc.w	r3, fp, r3
 80049f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004a06:	4629      	mov	r1, r5
 8004a08:	028b      	lsls	r3, r1, #10
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a10:	4621      	mov	r1, r4
 8004a12:	028a      	lsls	r2, r1, #10
 8004a14:	4610      	mov	r0, r2
 8004a16:	4619      	mov	r1, r3
 8004a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a20:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004a26:	f7fc f8df 	bl	8000be8 <__aeabi_uldivmod>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4613      	mov	r3, r2
 8004a30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a34:	4b41      	ldr	r3, [pc, #260]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a56:	e0eb      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a58:	4b38      	ldr	r3, [pc, #224]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a64:	4b35      	ldr	r3, [pc, #212]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d06b      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a70:	4b32      	ldr	r3, [pc, #200]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	099b      	lsrs	r3, r3, #6
 8004a76:	2200      	movs	r2, #0
 8004a78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a82:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a84:	2300      	movs	r3, #0
 8004a86:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a88:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004a8c:	4622      	mov	r2, r4
 8004a8e:	462b      	mov	r3, r5
 8004a90:	f04f 0000 	mov.w	r0, #0
 8004a94:	f04f 0100 	mov.w	r1, #0
 8004a98:	0159      	lsls	r1, r3, #5
 8004a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a9e:	0150      	lsls	r0, r2, #5
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	1a51      	subs	r1, r2, r1
 8004aa8:	61b9      	str	r1, [r7, #24]
 8004aaa:	4629      	mov	r1, r5
 8004aac:	eb63 0301 	sbc.w	r3, r3, r1
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004abe:	4659      	mov	r1, fp
 8004ac0:	018b      	lsls	r3, r1, #6
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac8:	4651      	mov	r1, sl
 8004aca:	018a      	lsls	r2, r1, #6
 8004acc:	4651      	mov	r1, sl
 8004ace:	ebb2 0801 	subs.w	r8, r2, r1
 8004ad2:	4659      	mov	r1, fp
 8004ad4:	eb63 0901 	sbc.w	r9, r3, r1
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ae4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ae8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aec:	4690      	mov	r8, r2
 8004aee:	4699      	mov	r9, r3
 8004af0:	4623      	mov	r3, r4
 8004af2:	eb18 0303 	adds.w	r3, r8, r3
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	462b      	mov	r3, r5
 8004afa:	eb49 0303 	adc.w	r3, r9, r3
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	024b      	lsls	r3, r1, #9
 8004b10:	4621      	mov	r1, r4
 8004b12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b16:	4621      	mov	r1, r4
 8004b18:	024a      	lsls	r2, r1, #9
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b22:	2200      	movs	r2, #0
 8004b24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b26:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004b28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b2c:	f7fc f85c 	bl	8000be8 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4613      	mov	r3, r2
 8004b36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b3a:	e065      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x420>
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	00f42400 	.word	0x00f42400
 8004b44:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b48:	4b3d      	ldr	r3, [pc, #244]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	099b      	lsrs	r3, r3, #6
 8004b4e:	2200      	movs	r2, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	4611      	mov	r1, r2
 8004b54:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b58:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b5e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004b62:	4642      	mov	r2, r8
 8004b64:	464b      	mov	r3, r9
 8004b66:	f04f 0000 	mov.w	r0, #0
 8004b6a:	f04f 0100 	mov.w	r1, #0
 8004b6e:	0159      	lsls	r1, r3, #5
 8004b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b74:	0150      	lsls	r0, r2, #5
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	1a51      	subs	r1, r2, r1
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	4649      	mov	r1, r9
 8004b82:	eb63 0301 	sbc.w	r3, r3, r1
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b94:	4659      	mov	r1, fp
 8004b96:	018b      	lsls	r3, r1, #6
 8004b98:	4651      	mov	r1, sl
 8004b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b9e:	4651      	mov	r1, sl
 8004ba0:	018a      	lsls	r2, r1, #6
 8004ba2:	4651      	mov	r1, sl
 8004ba4:	1a54      	subs	r4, r2, r1
 8004ba6:	4659      	mov	r1, fp
 8004ba8:	eb63 0501 	sbc.w	r5, r3, r1
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	00eb      	lsls	r3, r5, #3
 8004bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bba:	00e2      	lsls	r2, r4, #3
 8004bbc:	4614      	mov	r4, r2
 8004bbe:	461d      	mov	r5, r3
 8004bc0:	4643      	mov	r3, r8
 8004bc2:	18e3      	adds	r3, r4, r3
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	eb45 0303 	adc.w	r3, r5, r3
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bda:	4629      	mov	r1, r5
 8004bdc:	028b      	lsls	r3, r1, #10
 8004bde:	4621      	mov	r1, r4
 8004be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004be4:	4621      	mov	r1, r4
 8004be6:	028a      	lsls	r2, r1, #10
 8004be8:	4610      	mov	r0, r2
 8004bea:	4619      	mov	r1, r3
 8004bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bf4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004bf6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004bfa:	f7fb fff5 	bl	8000be8 <__aeabi_uldivmod>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4613      	mov	r3, r2
 8004c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c08:	4b0d      	ldr	r3, [pc, #52]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x458>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	0f1b      	lsrs	r3, r3, #28
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c26:	e003      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c28:	4b06      	ldr	r3, [pc, #24]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	37b8      	adds	r7, #184	@ 0xb8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800
 8004c44:	00f42400 	.word	0x00f42400

08004c48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e28d      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8083 	beq.w	8004d6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c68:	4b94      	ldr	r3, [pc, #592]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 030c 	and.w	r3, r3, #12
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d019      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c74:	4b91      	ldr	r3, [pc, #580]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d106      	bne.n	8004c8e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c80:	4b8e      	ldr	r3, [pc, #568]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c8c:	d00c      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c96:	2b0c      	cmp	r3, #12
 8004c98:	d112      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c9a:	4b88      	ldr	r3, [pc, #544]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca6:	d10b      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	4b84      	ldr	r3, [pc, #528]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d05b      	beq.n	8004d6c <HAL_RCC_OscConfig+0x124>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d157      	bne.n	8004d6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e25a      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc8:	d106      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x90>
 8004cca:	4b7c      	ldr	r3, [pc, #496]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a7b      	ldr	r2, [pc, #492]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e01d      	b.n	8004d14 <HAL_RCC_OscConfig+0xcc>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0xb4>
 8004ce2:	4b76      	ldr	r3, [pc, #472]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a75      	ldr	r2, [pc, #468]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b73      	ldr	r3, [pc, #460]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a72      	ldr	r2, [pc, #456]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e00b      	b.n	8004d14 <HAL_RCC_OscConfig+0xcc>
 8004cfc:	4b6f      	ldr	r3, [pc, #444]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a6e      	ldr	r2, [pc, #440]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	4b6c      	ldr	r3, [pc, #432]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a6b      	ldr	r2, [pc, #428]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d013      	beq.n	8004d44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fe f8c6 	bl	8002eac <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fe f8c2 	bl	8002eac <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	@ 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e21f      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b61      	ldr	r3, [pc, #388]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0xdc>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fe f8b2 	bl	8002eac <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fe f8ae 	bl	8002eac <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	@ 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e20b      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5e:	4b57      	ldr	r3, [pc, #348]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x104>
 8004d6a:	e000      	b.n	8004d6e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d06f      	beq.n	8004e5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d7a:	4b50      	ldr	r3, [pc, #320]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d017      	beq.n	8004db6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d86:	4b4d      	ldr	r3, [pc, #308]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d105      	bne.n	8004d9e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d92:	4b4a      	ldr	r3, [pc, #296]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00b      	beq.n	8004db6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9e:	4b47      	ldr	r3, [pc, #284]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004da6:	2b0c      	cmp	r3, #12
 8004da8:	d11c      	bne.n	8004de4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004daa:	4b44      	ldr	r3, [pc, #272]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d116      	bne.n	8004de4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db6:	4b41      	ldr	r3, [pc, #260]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_RCC_OscConfig+0x186>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d001      	beq.n	8004dce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e1d3      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dce:	4b3b      	ldr	r3, [pc, #236]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4937      	ldr	r1, [pc, #220]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de2:	e03a      	b.n	8004e5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d020      	beq.n	8004e2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dec:	4b34      	ldr	r3, [pc, #208]	@ (8004ec0 <HAL_RCC_OscConfig+0x278>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df2:	f7fe f85b 	bl	8002eac <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dfa:	f7fe f857 	bl	8002eac <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e1b4      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e18:	4b28      	ldr	r3, [pc, #160]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	4925      	ldr	r1, [pc, #148]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	600b      	str	r3, [r1, #0]
 8004e2c:	e015      	b.n	8004e5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2e:	4b24      	ldr	r3, [pc, #144]	@ (8004ec0 <HAL_RCC_OscConfig+0x278>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fe f83a 	bl	8002eac <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3c:	f7fe f836 	bl	8002eac <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e193      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f0      	bne.n	8004e3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d036      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d016      	beq.n	8004e9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ec4 <HAL_RCC_OscConfig+0x27c>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e74:	f7fe f81a 	bl	8002eac <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e7c:	f7fe f816 	bl	8002eac <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e173      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0x234>
 8004e9a:	e01b      	b.n	8004ed4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <HAL_RCC_OscConfig+0x27c>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea2:	f7fe f803 	bl	8002eac <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea8:	e00e      	b.n	8004ec8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eaa:	f7fd ffff 	bl	8002eac <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d907      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e15c      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	42470000 	.word	0x42470000
 8004ec4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec8:	4b8a      	ldr	r3, [pc, #552]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ea      	bne.n	8004eaa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8097 	beq.w	8005010 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee6:	4b83      	ldr	r3, [pc, #524]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10f      	bne.n	8004f12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	4a7e      	ldr	r2, [pc, #504]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f02:	4b7c      	ldr	r3, [pc, #496]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f12:	4b79      	ldr	r3, [pc, #484]	@ (80050f8 <HAL_RCC_OscConfig+0x4b0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d118      	bne.n	8004f50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f1e:	4b76      	ldr	r3, [pc, #472]	@ (80050f8 <HAL_RCC_OscConfig+0x4b0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a75      	ldr	r2, [pc, #468]	@ (80050f8 <HAL_RCC_OscConfig+0x4b0>)
 8004f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2a:	f7fd ffbf 	bl	8002eac <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f32:	f7fd ffbb 	bl	8002eac <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e118      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f44:	4b6c      	ldr	r3, [pc, #432]	@ (80050f8 <HAL_RCC_OscConfig+0x4b0>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d106      	bne.n	8004f66 <HAL_RCC_OscConfig+0x31e>
 8004f58:	4b66      	ldr	r3, [pc, #408]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5c:	4a65      	ldr	r2, [pc, #404]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f64:	e01c      	b.n	8004fa0 <HAL_RCC_OscConfig+0x358>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b05      	cmp	r3, #5
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x340>
 8004f6e:	4b61      	ldr	r3, [pc, #388]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f72:	4a60      	ldr	r2, [pc, #384]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f74:	f043 0304 	orr.w	r3, r3, #4
 8004f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f7a:	4b5e      	ldr	r3, [pc, #376]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	4a5d      	ldr	r2, [pc, #372]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f80:	f043 0301 	orr.w	r3, r3, #1
 8004f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f86:	e00b      	b.n	8004fa0 <HAL_RCC_OscConfig+0x358>
 8004f88:	4b5a      	ldr	r3, [pc, #360]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8c:	4a59      	ldr	r2, [pc, #356]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f94:	4b57      	ldr	r3, [pc, #348]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f98:	4a56      	ldr	r2, [pc, #344]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f9a:	f023 0304 	bic.w	r3, r3, #4
 8004f9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d015      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa8:	f7fd ff80 	bl	8002eac <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb0:	f7fd ff7c 	bl	8002eac <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e0d7      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc6:	4b4b      	ldr	r3, [pc, #300]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0ee      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x368>
 8004fd2:	e014      	b.n	8004ffe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd4:	f7fd ff6a 	bl	8002eac <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fda:	e00a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fdc:	f7fd ff66 	bl	8002eac <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e0c1      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff2:	4b40      	ldr	r3, [pc, #256]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1ee      	bne.n	8004fdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d105      	bne.n	8005010 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005004:	4b3b      	ldr	r3, [pc, #236]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8005006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005008:	4a3a      	ldr	r2, [pc, #232]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 800500a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800500e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80ad 	beq.w	8005174 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800501a:	4b36      	ldr	r3, [pc, #216]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
 8005022:	2b08      	cmp	r3, #8
 8005024:	d060      	beq.n	80050e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d145      	bne.n	80050ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502e:	4b33      	ldr	r3, [pc, #204]	@ (80050fc <HAL_RCC_OscConfig+0x4b4>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fd ff3a 	bl	8002eac <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800503c:	f7fd ff36 	bl	8002eac <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e093      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504e:	4b29      	ldr	r3, [pc, #164]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	019b      	lsls	r3, r3, #6
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	3b01      	subs	r3, #1
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507c:	061b      	lsls	r3, r3, #24
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005084:	071b      	lsls	r3, r3, #28
 8005086:	491b      	ldr	r1, [pc, #108]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8005088:	4313      	orrs	r3, r2
 800508a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800508c:	4b1b      	ldr	r3, [pc, #108]	@ (80050fc <HAL_RCC_OscConfig+0x4b4>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005092:	f7fd ff0b 	bl	8002eac <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800509a:	f7fd ff07 	bl	8002eac <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e064      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ac:	4b11      	ldr	r3, [pc, #68]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x452>
 80050b8:	e05c      	b.n	8005174 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ba:	4b10      	ldr	r3, [pc, #64]	@ (80050fc <HAL_RCC_OscConfig+0x4b4>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fd fef4 	bl	8002eac <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fd fef0 	bl	8002eac <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e04d      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050da:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0x480>
 80050e6:	e045      	b.n	8005174 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e040      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
 80050f4:	40023800 	.word	0x40023800
 80050f8:	40007000 	.word	0x40007000
 80050fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005100:	4b1f      	ldr	r3, [pc, #124]	@ (8005180 <HAL_RCC_OscConfig+0x538>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d030      	beq.n	8005170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005118:	429a      	cmp	r2, r3
 800511a:	d129      	bne.n	8005170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005126:	429a      	cmp	r2, r3
 8005128:	d122      	bne.n	8005170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005130:	4013      	ands	r3, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005138:	4293      	cmp	r3, r2
 800513a:	d119      	bne.n	8005170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	3b01      	subs	r3, #1
 800514a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d10f      	bne.n	8005170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800515c:	429a      	cmp	r2, r3
 800515e:	d107      	bne.n	8005170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40023800 	.word	0x40023800

08005184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e041      	b.n	800521a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fd fa0e 	bl	80025cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3304      	adds	r3, #4
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f000 fa7e 	bl	80056c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	d001      	beq.n	800523c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e04e      	b.n	80052da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a23      	ldr	r2, [pc, #140]	@ (80052e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d022      	beq.n	80052a4 <HAL_TIM_Base_Start_IT+0x80>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005266:	d01d      	beq.n	80052a4 <HAL_TIM_Base_Start_IT+0x80>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ec <HAL_TIM_Base_Start_IT+0xc8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d018      	beq.n	80052a4 <HAL_TIM_Base_Start_IT+0x80>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1e      	ldr	r2, [pc, #120]	@ (80052f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d013      	beq.n	80052a4 <HAL_TIM_Base_Start_IT+0x80>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1c      	ldr	r2, [pc, #112]	@ (80052f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00e      	beq.n	80052a4 <HAL_TIM_Base_Start_IT+0x80>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1b      	ldr	r2, [pc, #108]	@ (80052f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_TIM_Base_Start_IT+0x80>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a19      	ldr	r2, [pc, #100]	@ (80052fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d004      	beq.n	80052a4 <HAL_TIM_Base_Start_IT+0x80>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a18      	ldr	r2, [pc, #96]	@ (8005300 <HAL_TIM_Base_Start_IT+0xdc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d111      	bne.n	80052c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b06      	cmp	r3, #6
 80052b4:	d010      	beq.n	80052d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0201 	orr.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c6:	e007      	b.n	80052d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40010000 	.word	0x40010000
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40000c00 	.word	0x40000c00
 80052f8:	40010400 	.word	0x40010400
 80052fc:	40014000 	.word	0x40014000
 8005300:	40001800 	.word	0x40001800

08005304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d020      	beq.n	8005368 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01b      	beq.n	8005368 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0202 	mvn.w	r2, #2
 8005338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f999 	bl	8005686 <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f98b 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f99c 	bl	800569a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	d020      	beq.n	80053b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01b      	beq.n	80053b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0204 	mvn.w	r2, #4
 8005384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f973 	bl	8005686 <HAL_TIM_IC_CaptureCallback>
 80053a0:	e005      	b.n	80053ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f965 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f976 	bl	800569a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d020      	beq.n	8005400 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01b      	beq.n	8005400 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0208 	mvn.w	r2, #8
 80053d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2204      	movs	r2, #4
 80053d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f94d 	bl	8005686 <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f93f 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f950 	bl	800569a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b00      	cmp	r3, #0
 8005408:	d020      	beq.n	800544c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01b      	beq.n	800544c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0210 	mvn.w	r2, #16
 800541c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2208      	movs	r2, #8
 8005422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f927 	bl	8005686 <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f919 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f92a 	bl	800569a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00c      	beq.n	8005470 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d007      	beq.n	8005470 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0201 	mvn.w	r2, #1
 8005468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fd f82e 	bl	80024cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00c      	beq.n	8005494 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fae4 	bl	8005a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00c      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f8fb 	bl	80056ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00c      	beq.n	80054dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0220 	mvn.w	r2, #32
 80054d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fab6 	bl	8005a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054dc:	bf00      	nop
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_TIM_ConfigClockSource+0x1c>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e0b4      	b.n	800566a <HAL_TIM_ConfigClockSource+0x186>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800551e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005538:	d03e      	beq.n	80055b8 <HAL_TIM_ConfigClockSource+0xd4>
 800553a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800553e:	f200 8087 	bhi.w	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005546:	f000 8086 	beq.w	8005656 <HAL_TIM_ConfigClockSource+0x172>
 800554a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800554e:	d87f      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005550:	2b70      	cmp	r3, #112	@ 0x70
 8005552:	d01a      	beq.n	800558a <HAL_TIM_ConfigClockSource+0xa6>
 8005554:	2b70      	cmp	r3, #112	@ 0x70
 8005556:	d87b      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005558:	2b60      	cmp	r3, #96	@ 0x60
 800555a:	d050      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x11a>
 800555c:	2b60      	cmp	r3, #96	@ 0x60
 800555e:	d877      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005560:	2b50      	cmp	r3, #80	@ 0x50
 8005562:	d03c      	beq.n	80055de <HAL_TIM_ConfigClockSource+0xfa>
 8005564:	2b50      	cmp	r3, #80	@ 0x50
 8005566:	d873      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005568:	2b40      	cmp	r3, #64	@ 0x40
 800556a:	d058      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x13a>
 800556c:	2b40      	cmp	r3, #64	@ 0x40
 800556e:	d86f      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005570:	2b30      	cmp	r3, #48	@ 0x30
 8005572:	d064      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x15a>
 8005574:	2b30      	cmp	r3, #48	@ 0x30
 8005576:	d86b      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005578:	2b20      	cmp	r3, #32
 800557a:	d060      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x15a>
 800557c:	2b20      	cmp	r3, #32
 800557e:	d867      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d05c      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x15a>
 8005584:	2b10      	cmp	r3, #16
 8005586:	d05a      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x15a>
 8005588:	e062      	b.n	8005650 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800559a:	f000 f9b9 	bl	8005910 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	609a      	str	r2, [r3, #8]
      break;
 80055b6:	e04f      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055c8:	f000 f9a2 	bl	8005910 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055da:	609a      	str	r2, [r3, #8]
      break;
 80055dc:	e03c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ea:	461a      	mov	r2, r3
 80055ec:	f000 f916 	bl	800581c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2150      	movs	r1, #80	@ 0x50
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 f96f 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 80055fc:	e02c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800560a:	461a      	mov	r2, r3
 800560c:	f000 f935 	bl	800587a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2160      	movs	r1, #96	@ 0x60
 8005616:	4618      	mov	r0, r3
 8005618:	f000 f95f 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 800561c:	e01c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800562a:	461a      	mov	r2, r3
 800562c:	f000 f8f6 	bl	800581c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2140      	movs	r1, #64	@ 0x40
 8005636:	4618      	mov	r0, r3
 8005638:	f000 f94f 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 800563c:	e00c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4619      	mov	r1, r3
 8005648:	4610      	mov	r0, r2
 800564a:	f000 f946 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 800564e:	e003      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
      break;
 8005654:	e000      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a46      	ldr	r2, [pc, #280]	@ (80057f0 <TIM_Base_SetConfig+0x12c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d013      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e2:	d00f      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a43      	ldr	r2, [pc, #268]	@ (80057f4 <TIM_Base_SetConfig+0x130>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00b      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a42      	ldr	r2, [pc, #264]	@ (80057f8 <TIM_Base_SetConfig+0x134>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d007      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a41      	ldr	r2, [pc, #260]	@ (80057fc <TIM_Base_SetConfig+0x138>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a40      	ldr	r2, [pc, #256]	@ (8005800 <TIM_Base_SetConfig+0x13c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d108      	bne.n	8005716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a35      	ldr	r2, [pc, #212]	@ (80057f0 <TIM_Base_SetConfig+0x12c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d02b      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005724:	d027      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a32      	ldr	r2, [pc, #200]	@ (80057f4 <TIM_Base_SetConfig+0x130>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d023      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a31      	ldr	r2, [pc, #196]	@ (80057f8 <TIM_Base_SetConfig+0x134>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01f      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a30      	ldr	r2, [pc, #192]	@ (80057fc <TIM_Base_SetConfig+0x138>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d01b      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2f      	ldr	r2, [pc, #188]	@ (8005800 <TIM_Base_SetConfig+0x13c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d017      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2e      	ldr	r2, [pc, #184]	@ (8005804 <TIM_Base_SetConfig+0x140>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a2d      	ldr	r2, [pc, #180]	@ (8005808 <TIM_Base_SetConfig+0x144>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00f      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2c      	ldr	r2, [pc, #176]	@ (800580c <TIM_Base_SetConfig+0x148>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00b      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a2b      	ldr	r2, [pc, #172]	@ (8005810 <TIM_Base_SetConfig+0x14c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d007      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a2a      	ldr	r2, [pc, #168]	@ (8005814 <TIM_Base_SetConfig+0x150>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d003      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a29      	ldr	r2, [pc, #164]	@ (8005818 <TIM_Base_SetConfig+0x154>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d108      	bne.n	8005788 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800577c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a10      	ldr	r2, [pc, #64]	@ (80057f0 <TIM_Base_SetConfig+0x12c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_Base_SetConfig+0xf8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a12      	ldr	r2, [pc, #72]	@ (8005800 <TIM_Base_SetConfig+0x13c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d103      	bne.n	80057c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d105      	bne.n	80057e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f023 0201 	bic.w	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	611a      	str	r2, [r3, #16]
  }
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800
 80057fc:	40000c00 	.word	0x40000c00
 8005800:	40010400 	.word	0x40010400
 8005804:	40014000 	.word	0x40014000
 8005808:	40014400 	.word	0x40014400
 800580c:	40014800 	.word	0x40014800
 8005810:	40001800 	.word	0x40001800
 8005814:	40001c00 	.word	0x40001c00
 8005818:	40002000 	.word	0x40002000

0800581c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f023 0201 	bic.w	r2, r3, #1
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f023 030a 	bic.w	r3, r3, #10
 8005858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800587a:	b480      	push	{r7}
 800587c:	b087      	sub	sp, #28
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f023 0210 	bic.w	r2, r3, #16
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	031b      	lsls	r3, r3, #12
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f043 0307 	orr.w	r3, r3, #7
 80058fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	609a      	str	r2, [r3, #8]
}
 8005904:	bf00      	nop
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800592a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	021a      	lsls	r2, r3, #8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	431a      	orrs	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4313      	orrs	r3, r2
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	609a      	str	r2, [r3, #8]
}
 8005944:	bf00      	nop
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005964:	2302      	movs	r3, #2
 8005966:	e05a      	b.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800598e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a21      	ldr	r2, [pc, #132]	@ (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d022      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b4:	d01d      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d018      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00e      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a18      	ldr	r2, [pc, #96]	@ (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a17      	ldr	r2, [pc, #92]	@ (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a15      	ldr	r2, [pc, #84]	@ (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d10c      	bne.n	8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40010400 	.word	0x40010400
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40001800 	.word	0x40001800

08005a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e042      	b.n	8005b08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fc fdbe 	bl	8002618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2224      	movs	r2, #36	@ 0x24
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fa09 	bl	8005ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	@ 0x28
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d175      	bne.n	8005c1c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_UART_Transmit+0x2c>
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e06e      	b.n	8005c1e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2221      	movs	r2, #33	@ 0x21
 8005b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b4e:	f7fd f9ad 	bl	8002eac <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	88fa      	ldrh	r2, [r7, #6]
 8005b58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	88fa      	ldrh	r2, [r7, #6]
 8005b5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b68:	d108      	bne.n	8005b7c <HAL_UART_Transmit+0x6c>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d104      	bne.n	8005b7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	e003      	b.n	8005b84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b84:	e02e      	b.n	8005be4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2180      	movs	r1, #128	@ 0x80
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f8df 	bl	8005d54 <UART_WaitOnFlagUntilTimeout>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e03a      	b.n	8005c1e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10b      	bne.n	8005bc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	e007      	b.n	8005bd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	781a      	ldrb	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1cb      	bne.n	8005b86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2140      	movs	r1, #64	@ 0x40
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f8ab 	bl	8005d54 <UART_WaitOnFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e006      	b.n	8005c1e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	e000      	b.n	8005c1e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c1c:	2302      	movs	r3, #2
  }
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3720      	adds	r7, #32
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b08a      	sub	sp, #40	@ 0x28
 8005c2a:	af02      	add	r7, sp, #8
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	603b      	str	r3, [r7, #0]
 8005c32:	4613      	mov	r3, r2
 8005c34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	f040 8081 	bne.w	8005d4a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_UART_Receive+0x2e>
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e079      	b.n	8005d4c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2222      	movs	r2, #34	@ 0x22
 8005c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c6c:	f7fd f91e 	bl	8002eac <HAL_GetTick>
 8005c70:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	88fa      	ldrh	r2, [r7, #6]
 8005c76:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	88fa      	ldrh	r2, [r7, #6]
 8005c7c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c86:	d108      	bne.n	8005c9a <HAL_UART_Receive+0x74>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	e003      	b.n	8005ca2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005ca2:	e047      	b.n	8005d34 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2200      	movs	r2, #0
 8005cac:	2120      	movs	r1, #32
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f850 	bl	8005d54 <UART_WaitOnFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e042      	b.n	8005d4c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10c      	bne.n	8005ce6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	3302      	adds	r3, #2
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	e01f      	b.n	8005d26 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cee:	d007      	beq.n	8005d00 <HAL_UART_Receive+0xda>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10a      	bne.n	8005d0e <HAL_UART_Receive+0xe8>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	e008      	b.n	8005d20 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	3301      	adds	r3, #1
 8005d24:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1b2      	bne.n	8005ca4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e000      	b.n	8005d4c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005d4a:	2302      	movs	r3, #2
  }
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3720      	adds	r7, #32
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d64:	e03b      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d037      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6e:	f7fd f89d 	bl	8002eac <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	6a3a      	ldr	r2, [r7, #32]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d302      	bcc.n	8005d84 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e03a      	b.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0304 	and.w	r3, r3, #4
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d023      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b80      	cmp	r3, #128	@ 0x80
 8005d9a:	d020      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2b40      	cmp	r3, #64	@ 0x40
 8005da0:	d01d      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d116      	bne.n	8005dde <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f81d 	bl	8005e06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2208      	movs	r2, #8
 8005dd0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e00f      	b.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	4013      	ands	r3, r2
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	bf0c      	ite	eq
 8005dee:	2301      	moveq	r3, #1
 8005df0:	2300      	movne	r3, #0
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	461a      	mov	r2, r3
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d0b4      	beq.n	8005d66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b095      	sub	sp, #84	@ 0x54
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	330c      	adds	r3, #12
 8005e14:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e5      	bne.n	8005e0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3314      	adds	r3, #20
 8005e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3314      	adds	r3, #20
 8005e60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e5      	bne.n	8005e42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d119      	bne.n	8005eb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	330c      	adds	r3, #12
 8005e84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f023 0310 	bic.w	r3, r3, #16
 8005e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	330c      	adds	r3, #12
 8005e9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e9e:	61ba      	str	r2, [r7, #24]
 8005ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6979      	ldr	r1, [r7, #20]
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e5      	bne.n	8005e7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ec0:	bf00      	nop
 8005ec2:	3754      	adds	r7, #84	@ 0x54
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed0:	b0c0      	sub	sp, #256	@ 0x100
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee8:	68d9      	ldr	r1, [r3, #12]
 8005eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	ea40 0301 	orr.w	r3, r0, r1
 8005ef4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f24:	f021 010c 	bic.w	r1, r1, #12
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f32:	430b      	orrs	r3, r1
 8005f34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f46:	6999      	ldr	r1, [r3, #24]
 8005f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	ea40 0301 	orr.w	r3, r0, r1
 8005f52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	4b8f      	ldr	r3, [pc, #572]	@ (8006198 <UART_SetConfig+0x2cc>)
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d005      	beq.n	8005f6c <UART_SetConfig+0xa0>
 8005f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4b8d      	ldr	r3, [pc, #564]	@ (800619c <UART_SetConfig+0x2d0>)
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d104      	bne.n	8005f76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f6c:	f7fe fc28 	bl	80047c0 <HAL_RCC_GetPCLK2Freq>
 8005f70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f74:	e003      	b.n	8005f7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f76:	f7fe fc0f 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8005f7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f88:	f040 810c 	bne.w	80061a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	1891      	adds	r1, r2, r2
 8005fa4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005fa6:	415b      	adcs	r3, r3
 8005fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005faa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005fae:	4621      	mov	r1, r4
 8005fb0:	eb12 0801 	adds.w	r8, r2, r1
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	eb43 0901 	adc.w	r9, r3, r1
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fce:	4690      	mov	r8, r2
 8005fd0:	4699      	mov	r9, r3
 8005fd2:	4623      	mov	r3, r4
 8005fd4:	eb18 0303 	adds.w	r3, r8, r3
 8005fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fdc:	462b      	mov	r3, r5
 8005fde:	eb49 0303 	adc.w	r3, r9, r3
 8005fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ff2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ff6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	18db      	adds	r3, r3, r3
 8005ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006000:	4613      	mov	r3, r2
 8006002:	eb42 0303 	adc.w	r3, r2, r3
 8006006:	657b      	str	r3, [r7, #84]	@ 0x54
 8006008:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800600c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006010:	f7fa fdea 	bl	8000be8 <__aeabi_uldivmod>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4b61      	ldr	r3, [pc, #388]	@ (80061a0 <UART_SetConfig+0x2d4>)
 800601a:	fba3 2302 	umull	r2, r3, r3, r2
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	011c      	lsls	r4, r3, #4
 8006022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006026:	2200      	movs	r2, #0
 8006028:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800602c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006030:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006034:	4642      	mov	r2, r8
 8006036:	464b      	mov	r3, r9
 8006038:	1891      	adds	r1, r2, r2
 800603a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800603c:	415b      	adcs	r3, r3
 800603e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006040:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006044:	4641      	mov	r1, r8
 8006046:	eb12 0a01 	adds.w	sl, r2, r1
 800604a:	4649      	mov	r1, r9
 800604c:	eb43 0b01 	adc.w	fp, r3, r1
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800605c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006060:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006064:	4692      	mov	sl, r2
 8006066:	469b      	mov	fp, r3
 8006068:	4643      	mov	r3, r8
 800606a:	eb1a 0303 	adds.w	r3, sl, r3
 800606e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006072:	464b      	mov	r3, r9
 8006074:	eb4b 0303 	adc.w	r3, fp, r3
 8006078:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006088:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800608c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006090:	460b      	mov	r3, r1
 8006092:	18db      	adds	r3, r3, r3
 8006094:	643b      	str	r3, [r7, #64]	@ 0x40
 8006096:	4613      	mov	r3, r2
 8006098:	eb42 0303 	adc.w	r3, r2, r3
 800609c:	647b      	str	r3, [r7, #68]	@ 0x44
 800609e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80060a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80060a6:	f7fa fd9f 	bl	8000be8 <__aeabi_uldivmod>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4611      	mov	r1, r2
 80060b0:	4b3b      	ldr	r3, [pc, #236]	@ (80061a0 <UART_SetConfig+0x2d4>)
 80060b2:	fba3 2301 	umull	r2, r3, r3, r1
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	2264      	movs	r2, #100	@ 0x64
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	1acb      	subs	r3, r1, r3
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80060c6:	4b36      	ldr	r3, [pc, #216]	@ (80061a0 <UART_SetConfig+0x2d4>)
 80060c8:	fba3 2302 	umull	r2, r3, r3, r2
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80060d4:	441c      	add	r4, r3
 80060d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80060e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80060e8:	4642      	mov	r2, r8
 80060ea:	464b      	mov	r3, r9
 80060ec:	1891      	adds	r1, r2, r2
 80060ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060f0:	415b      	adcs	r3, r3
 80060f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060f8:	4641      	mov	r1, r8
 80060fa:	1851      	adds	r1, r2, r1
 80060fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80060fe:	4649      	mov	r1, r9
 8006100:	414b      	adcs	r3, r1
 8006102:	637b      	str	r3, [r7, #52]	@ 0x34
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006110:	4659      	mov	r1, fp
 8006112:	00cb      	lsls	r3, r1, #3
 8006114:	4651      	mov	r1, sl
 8006116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800611a:	4651      	mov	r1, sl
 800611c:	00ca      	lsls	r2, r1, #3
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	4603      	mov	r3, r0
 8006124:	4642      	mov	r2, r8
 8006126:	189b      	adds	r3, r3, r2
 8006128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800612c:	464b      	mov	r3, r9
 800612e:	460a      	mov	r2, r1
 8006130:	eb42 0303 	adc.w	r3, r2, r3
 8006134:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006144:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006148:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800614c:	460b      	mov	r3, r1
 800614e:	18db      	adds	r3, r3, r3
 8006150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006152:	4613      	mov	r3, r2
 8006154:	eb42 0303 	adc.w	r3, r2, r3
 8006158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800615a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800615e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006162:	f7fa fd41 	bl	8000be8 <__aeabi_uldivmod>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4b0d      	ldr	r3, [pc, #52]	@ (80061a0 <UART_SetConfig+0x2d4>)
 800616c:	fba3 1302 	umull	r1, r3, r3, r2
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	2164      	movs	r1, #100	@ 0x64
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	3332      	adds	r3, #50	@ 0x32
 800617e:	4a08      	ldr	r2, [pc, #32]	@ (80061a0 <UART_SetConfig+0x2d4>)
 8006180:	fba2 2303 	umull	r2, r3, r2, r3
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	f003 0207 	and.w	r2, r3, #7
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4422      	add	r2, r4
 8006192:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006194:	e106      	b.n	80063a4 <UART_SetConfig+0x4d8>
 8006196:	bf00      	nop
 8006198:	40011000 	.word	0x40011000
 800619c:	40011400 	.word	0x40011400
 80061a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80061ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80061b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80061b6:	4642      	mov	r2, r8
 80061b8:	464b      	mov	r3, r9
 80061ba:	1891      	adds	r1, r2, r2
 80061bc:	6239      	str	r1, [r7, #32]
 80061be:	415b      	adcs	r3, r3
 80061c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061c6:	4641      	mov	r1, r8
 80061c8:	1854      	adds	r4, r2, r1
 80061ca:	4649      	mov	r1, r9
 80061cc:	eb43 0501 	adc.w	r5, r3, r1
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	00eb      	lsls	r3, r5, #3
 80061da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061de:	00e2      	lsls	r2, r4, #3
 80061e0:	4614      	mov	r4, r2
 80061e2:	461d      	mov	r5, r3
 80061e4:	4643      	mov	r3, r8
 80061e6:	18e3      	adds	r3, r4, r3
 80061e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061ec:	464b      	mov	r3, r9
 80061ee:	eb45 0303 	adc.w	r3, r5, r3
 80061f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006202:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006212:	4629      	mov	r1, r5
 8006214:	008b      	lsls	r3, r1, #2
 8006216:	4621      	mov	r1, r4
 8006218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800621c:	4621      	mov	r1, r4
 800621e:	008a      	lsls	r2, r1, #2
 8006220:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006224:	f7fa fce0 	bl	8000be8 <__aeabi_uldivmod>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4b60      	ldr	r3, [pc, #384]	@ (80063b0 <UART_SetConfig+0x4e4>)
 800622e:	fba3 2302 	umull	r2, r3, r3, r2
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	011c      	lsls	r4, r3, #4
 8006236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800623a:	2200      	movs	r2, #0
 800623c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006240:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006244:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006248:	4642      	mov	r2, r8
 800624a:	464b      	mov	r3, r9
 800624c:	1891      	adds	r1, r2, r2
 800624e:	61b9      	str	r1, [r7, #24]
 8006250:	415b      	adcs	r3, r3
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006258:	4641      	mov	r1, r8
 800625a:	1851      	adds	r1, r2, r1
 800625c:	6139      	str	r1, [r7, #16]
 800625e:	4649      	mov	r1, r9
 8006260:	414b      	adcs	r3, r1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006270:	4659      	mov	r1, fp
 8006272:	00cb      	lsls	r3, r1, #3
 8006274:	4651      	mov	r1, sl
 8006276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800627a:	4651      	mov	r1, sl
 800627c:	00ca      	lsls	r2, r1, #3
 800627e:	4610      	mov	r0, r2
 8006280:	4619      	mov	r1, r3
 8006282:	4603      	mov	r3, r0
 8006284:	4642      	mov	r2, r8
 8006286:	189b      	adds	r3, r3, r2
 8006288:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800628c:	464b      	mov	r3, r9
 800628e:	460a      	mov	r2, r1
 8006290:	eb42 0303 	adc.w	r3, r2, r3
 8006294:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80062b0:	4649      	mov	r1, r9
 80062b2:	008b      	lsls	r3, r1, #2
 80062b4:	4641      	mov	r1, r8
 80062b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062ba:	4641      	mov	r1, r8
 80062bc:	008a      	lsls	r2, r1, #2
 80062be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80062c2:	f7fa fc91 	bl	8000be8 <__aeabi_uldivmod>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4611      	mov	r1, r2
 80062cc:	4b38      	ldr	r3, [pc, #224]	@ (80063b0 <UART_SetConfig+0x4e4>)
 80062ce:	fba3 2301 	umull	r2, r3, r3, r1
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	2264      	movs	r2, #100	@ 0x64
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
 80062da:	1acb      	subs	r3, r1, r3
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	3332      	adds	r3, #50	@ 0x32
 80062e0:	4a33      	ldr	r2, [pc, #204]	@ (80063b0 <UART_SetConfig+0x4e4>)
 80062e2:	fba2 2303 	umull	r2, r3, r2, r3
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062ec:	441c      	add	r4, r3
 80062ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062f2:	2200      	movs	r2, #0
 80062f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80062f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80062f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062fc:	4642      	mov	r2, r8
 80062fe:	464b      	mov	r3, r9
 8006300:	1891      	adds	r1, r2, r2
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	415b      	adcs	r3, r3
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800630c:	4641      	mov	r1, r8
 800630e:	1851      	adds	r1, r2, r1
 8006310:	6039      	str	r1, [r7, #0]
 8006312:	4649      	mov	r1, r9
 8006314:	414b      	adcs	r3, r1
 8006316:	607b      	str	r3, [r7, #4]
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006324:	4659      	mov	r1, fp
 8006326:	00cb      	lsls	r3, r1, #3
 8006328:	4651      	mov	r1, sl
 800632a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800632e:	4651      	mov	r1, sl
 8006330:	00ca      	lsls	r2, r1, #3
 8006332:	4610      	mov	r0, r2
 8006334:	4619      	mov	r1, r3
 8006336:	4603      	mov	r3, r0
 8006338:	4642      	mov	r2, r8
 800633a:	189b      	adds	r3, r3, r2
 800633c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800633e:	464b      	mov	r3, r9
 8006340:	460a      	mov	r2, r1
 8006342:	eb42 0303 	adc.w	r3, r2, r3
 8006346:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	663b      	str	r3, [r7, #96]	@ 0x60
 8006352:	667a      	str	r2, [r7, #100]	@ 0x64
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	f04f 0300 	mov.w	r3, #0
 800635c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006360:	4649      	mov	r1, r9
 8006362:	008b      	lsls	r3, r1, #2
 8006364:	4641      	mov	r1, r8
 8006366:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800636a:	4641      	mov	r1, r8
 800636c:	008a      	lsls	r2, r1, #2
 800636e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006372:	f7fa fc39 	bl	8000be8 <__aeabi_uldivmod>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4b0d      	ldr	r3, [pc, #52]	@ (80063b0 <UART_SetConfig+0x4e4>)
 800637c:	fba3 1302 	umull	r1, r3, r3, r2
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	2164      	movs	r1, #100	@ 0x64
 8006384:	fb01 f303 	mul.w	r3, r1, r3
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	3332      	adds	r3, #50	@ 0x32
 800638e:	4a08      	ldr	r2, [pc, #32]	@ (80063b0 <UART_SetConfig+0x4e4>)
 8006390:	fba2 2303 	umull	r2, r3, r2, r3
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	f003 020f 	and.w	r2, r3, #15
 800639a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4422      	add	r2, r4
 80063a2:	609a      	str	r2, [r3, #8]
}
 80063a4:	bf00      	nop
 80063a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80063aa:	46bd      	mov	sp, r7
 80063ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b0:	51eb851f 	.word	0x51eb851f

080063b4 <atoi>:
 80063b4:	220a      	movs	r2, #10
 80063b6:	2100      	movs	r1, #0
 80063b8:	f000 b87a 	b.w	80064b0 <strtol>

080063bc <_strtol_l.constprop.0>:
 80063bc:	2b24      	cmp	r3, #36	@ 0x24
 80063be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c2:	4686      	mov	lr, r0
 80063c4:	4690      	mov	r8, r2
 80063c6:	d801      	bhi.n	80063cc <_strtol_l.constprop.0+0x10>
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d106      	bne.n	80063da <_strtol_l.constprop.0+0x1e>
 80063cc:	f000 fe5e 	bl	800708c <__errno>
 80063d0:	2316      	movs	r3, #22
 80063d2:	6003      	str	r3, [r0, #0]
 80063d4:	2000      	movs	r0, #0
 80063d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063da:	4834      	ldr	r0, [pc, #208]	@ (80064ac <_strtol_l.constprop.0+0xf0>)
 80063dc:	460d      	mov	r5, r1
 80063de:	462a      	mov	r2, r5
 80063e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063e4:	5d06      	ldrb	r6, [r0, r4]
 80063e6:	f016 0608 	ands.w	r6, r6, #8
 80063ea:	d1f8      	bne.n	80063de <_strtol_l.constprop.0+0x22>
 80063ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80063ee:	d12d      	bne.n	800644c <_strtol_l.constprop.0+0x90>
 80063f0:	782c      	ldrb	r4, [r5, #0]
 80063f2:	2601      	movs	r6, #1
 80063f4:	1c95      	adds	r5, r2, #2
 80063f6:	f033 0210 	bics.w	r2, r3, #16
 80063fa:	d109      	bne.n	8006410 <_strtol_l.constprop.0+0x54>
 80063fc:	2c30      	cmp	r4, #48	@ 0x30
 80063fe:	d12a      	bne.n	8006456 <_strtol_l.constprop.0+0x9a>
 8006400:	782a      	ldrb	r2, [r5, #0]
 8006402:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006406:	2a58      	cmp	r2, #88	@ 0x58
 8006408:	d125      	bne.n	8006456 <_strtol_l.constprop.0+0x9a>
 800640a:	786c      	ldrb	r4, [r5, #1]
 800640c:	2310      	movs	r3, #16
 800640e:	3502      	adds	r5, #2
 8006410:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006414:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006418:	2200      	movs	r2, #0
 800641a:	fbbc f9f3 	udiv	r9, ip, r3
 800641e:	4610      	mov	r0, r2
 8006420:	fb03 ca19 	mls	sl, r3, r9, ip
 8006424:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006428:	2f09      	cmp	r7, #9
 800642a:	d81b      	bhi.n	8006464 <_strtol_l.constprop.0+0xa8>
 800642c:	463c      	mov	r4, r7
 800642e:	42a3      	cmp	r3, r4
 8006430:	dd27      	ble.n	8006482 <_strtol_l.constprop.0+0xc6>
 8006432:	1c57      	adds	r7, r2, #1
 8006434:	d007      	beq.n	8006446 <_strtol_l.constprop.0+0x8a>
 8006436:	4581      	cmp	r9, r0
 8006438:	d320      	bcc.n	800647c <_strtol_l.constprop.0+0xc0>
 800643a:	d101      	bne.n	8006440 <_strtol_l.constprop.0+0x84>
 800643c:	45a2      	cmp	sl, r4
 800643e:	db1d      	blt.n	800647c <_strtol_l.constprop.0+0xc0>
 8006440:	fb00 4003 	mla	r0, r0, r3, r4
 8006444:	2201      	movs	r2, #1
 8006446:	f815 4b01 	ldrb.w	r4, [r5], #1
 800644a:	e7eb      	b.n	8006424 <_strtol_l.constprop.0+0x68>
 800644c:	2c2b      	cmp	r4, #43	@ 0x2b
 800644e:	bf04      	itt	eq
 8006450:	782c      	ldrbeq	r4, [r5, #0]
 8006452:	1c95      	addeq	r5, r2, #2
 8006454:	e7cf      	b.n	80063f6 <_strtol_l.constprop.0+0x3a>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1da      	bne.n	8006410 <_strtol_l.constprop.0+0x54>
 800645a:	2c30      	cmp	r4, #48	@ 0x30
 800645c:	bf0c      	ite	eq
 800645e:	2308      	moveq	r3, #8
 8006460:	230a      	movne	r3, #10
 8006462:	e7d5      	b.n	8006410 <_strtol_l.constprop.0+0x54>
 8006464:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006468:	2f19      	cmp	r7, #25
 800646a:	d801      	bhi.n	8006470 <_strtol_l.constprop.0+0xb4>
 800646c:	3c37      	subs	r4, #55	@ 0x37
 800646e:	e7de      	b.n	800642e <_strtol_l.constprop.0+0x72>
 8006470:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006474:	2f19      	cmp	r7, #25
 8006476:	d804      	bhi.n	8006482 <_strtol_l.constprop.0+0xc6>
 8006478:	3c57      	subs	r4, #87	@ 0x57
 800647a:	e7d8      	b.n	800642e <_strtol_l.constprop.0+0x72>
 800647c:	f04f 32ff 	mov.w	r2, #4294967295
 8006480:	e7e1      	b.n	8006446 <_strtol_l.constprop.0+0x8a>
 8006482:	1c53      	adds	r3, r2, #1
 8006484:	d108      	bne.n	8006498 <_strtol_l.constprop.0+0xdc>
 8006486:	2322      	movs	r3, #34	@ 0x22
 8006488:	f8ce 3000 	str.w	r3, [lr]
 800648c:	4660      	mov	r0, ip
 800648e:	f1b8 0f00 	cmp.w	r8, #0
 8006492:	d0a0      	beq.n	80063d6 <_strtol_l.constprop.0+0x1a>
 8006494:	1e69      	subs	r1, r5, #1
 8006496:	e006      	b.n	80064a6 <_strtol_l.constprop.0+0xea>
 8006498:	b106      	cbz	r6, 800649c <_strtol_l.constprop.0+0xe0>
 800649a:	4240      	negs	r0, r0
 800649c:	f1b8 0f00 	cmp.w	r8, #0
 80064a0:	d099      	beq.n	80063d6 <_strtol_l.constprop.0+0x1a>
 80064a2:	2a00      	cmp	r2, #0
 80064a4:	d1f6      	bne.n	8006494 <_strtol_l.constprop.0+0xd8>
 80064a6:	f8c8 1000 	str.w	r1, [r8]
 80064aa:	e794      	b.n	80063d6 <_strtol_l.constprop.0+0x1a>
 80064ac:	08009621 	.word	0x08009621

080064b0 <strtol>:
 80064b0:	4613      	mov	r3, r2
 80064b2:	460a      	mov	r2, r1
 80064b4:	4601      	mov	r1, r0
 80064b6:	4802      	ldr	r0, [pc, #8]	@ (80064c0 <strtol+0x10>)
 80064b8:	6800      	ldr	r0, [r0, #0]
 80064ba:	f7ff bf7f 	b.w	80063bc <_strtol_l.constprop.0>
 80064be:	bf00      	nop
 80064c0:	20000028 	.word	0x20000028

080064c4 <__cvt>:
 80064c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c8:	ec57 6b10 	vmov	r6, r7, d0
 80064cc:	2f00      	cmp	r7, #0
 80064ce:	460c      	mov	r4, r1
 80064d0:	4619      	mov	r1, r3
 80064d2:	463b      	mov	r3, r7
 80064d4:	bfbb      	ittet	lt
 80064d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80064da:	461f      	movlt	r7, r3
 80064dc:	2300      	movge	r3, #0
 80064de:	232d      	movlt	r3, #45	@ 0x2d
 80064e0:	700b      	strb	r3, [r1, #0]
 80064e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064e4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80064e8:	4691      	mov	r9, r2
 80064ea:	f023 0820 	bic.w	r8, r3, #32
 80064ee:	bfbc      	itt	lt
 80064f0:	4632      	movlt	r2, r6
 80064f2:	4616      	movlt	r6, r2
 80064f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064f8:	d005      	beq.n	8006506 <__cvt+0x42>
 80064fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80064fe:	d100      	bne.n	8006502 <__cvt+0x3e>
 8006500:	3401      	adds	r4, #1
 8006502:	2102      	movs	r1, #2
 8006504:	e000      	b.n	8006508 <__cvt+0x44>
 8006506:	2103      	movs	r1, #3
 8006508:	ab03      	add	r3, sp, #12
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	ab02      	add	r3, sp, #8
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	ec47 6b10 	vmov	d0, r6, r7
 8006514:	4653      	mov	r3, sl
 8006516:	4622      	mov	r2, r4
 8006518:	f000 fe6e 	bl	80071f8 <_dtoa_r>
 800651c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006520:	4605      	mov	r5, r0
 8006522:	d119      	bne.n	8006558 <__cvt+0x94>
 8006524:	f019 0f01 	tst.w	r9, #1
 8006528:	d00e      	beq.n	8006548 <__cvt+0x84>
 800652a:	eb00 0904 	add.w	r9, r0, r4
 800652e:	2200      	movs	r2, #0
 8006530:	2300      	movs	r3, #0
 8006532:	4630      	mov	r0, r6
 8006534:	4639      	mov	r1, r7
 8006536:	f7fa fae7 	bl	8000b08 <__aeabi_dcmpeq>
 800653a:	b108      	cbz	r0, 8006540 <__cvt+0x7c>
 800653c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006540:	2230      	movs	r2, #48	@ 0x30
 8006542:	9b03      	ldr	r3, [sp, #12]
 8006544:	454b      	cmp	r3, r9
 8006546:	d31e      	bcc.n	8006586 <__cvt+0xc2>
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800654c:	1b5b      	subs	r3, r3, r5
 800654e:	4628      	mov	r0, r5
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	b004      	add	sp, #16
 8006554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006558:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800655c:	eb00 0904 	add.w	r9, r0, r4
 8006560:	d1e5      	bne.n	800652e <__cvt+0x6a>
 8006562:	7803      	ldrb	r3, [r0, #0]
 8006564:	2b30      	cmp	r3, #48	@ 0x30
 8006566:	d10a      	bne.n	800657e <__cvt+0xba>
 8006568:	2200      	movs	r2, #0
 800656a:	2300      	movs	r3, #0
 800656c:	4630      	mov	r0, r6
 800656e:	4639      	mov	r1, r7
 8006570:	f7fa faca 	bl	8000b08 <__aeabi_dcmpeq>
 8006574:	b918      	cbnz	r0, 800657e <__cvt+0xba>
 8006576:	f1c4 0401 	rsb	r4, r4, #1
 800657a:	f8ca 4000 	str.w	r4, [sl]
 800657e:	f8da 3000 	ldr.w	r3, [sl]
 8006582:	4499      	add	r9, r3
 8006584:	e7d3      	b.n	800652e <__cvt+0x6a>
 8006586:	1c59      	adds	r1, r3, #1
 8006588:	9103      	str	r1, [sp, #12]
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	e7d9      	b.n	8006542 <__cvt+0x7e>

0800658e <__exponent>:
 800658e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006590:	2900      	cmp	r1, #0
 8006592:	bfba      	itte	lt
 8006594:	4249      	neglt	r1, r1
 8006596:	232d      	movlt	r3, #45	@ 0x2d
 8006598:	232b      	movge	r3, #43	@ 0x2b
 800659a:	2909      	cmp	r1, #9
 800659c:	7002      	strb	r2, [r0, #0]
 800659e:	7043      	strb	r3, [r0, #1]
 80065a0:	dd29      	ble.n	80065f6 <__exponent+0x68>
 80065a2:	f10d 0307 	add.w	r3, sp, #7
 80065a6:	461d      	mov	r5, r3
 80065a8:	270a      	movs	r7, #10
 80065aa:	461a      	mov	r2, r3
 80065ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80065b0:	fb07 1416 	mls	r4, r7, r6, r1
 80065b4:	3430      	adds	r4, #48	@ 0x30
 80065b6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065ba:	460c      	mov	r4, r1
 80065bc:	2c63      	cmp	r4, #99	@ 0x63
 80065be:	f103 33ff 	add.w	r3, r3, #4294967295
 80065c2:	4631      	mov	r1, r6
 80065c4:	dcf1      	bgt.n	80065aa <__exponent+0x1c>
 80065c6:	3130      	adds	r1, #48	@ 0x30
 80065c8:	1e94      	subs	r4, r2, #2
 80065ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065ce:	1c41      	adds	r1, r0, #1
 80065d0:	4623      	mov	r3, r4
 80065d2:	42ab      	cmp	r3, r5
 80065d4:	d30a      	bcc.n	80065ec <__exponent+0x5e>
 80065d6:	f10d 0309 	add.w	r3, sp, #9
 80065da:	1a9b      	subs	r3, r3, r2
 80065dc:	42ac      	cmp	r4, r5
 80065de:	bf88      	it	hi
 80065e0:	2300      	movhi	r3, #0
 80065e2:	3302      	adds	r3, #2
 80065e4:	4403      	add	r3, r0
 80065e6:	1a18      	subs	r0, r3, r0
 80065e8:	b003      	add	sp, #12
 80065ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 80065f0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80065f4:	e7ed      	b.n	80065d2 <__exponent+0x44>
 80065f6:	2330      	movs	r3, #48	@ 0x30
 80065f8:	3130      	adds	r1, #48	@ 0x30
 80065fa:	7083      	strb	r3, [r0, #2]
 80065fc:	70c1      	strb	r1, [r0, #3]
 80065fe:	1d03      	adds	r3, r0, #4
 8006600:	e7f1      	b.n	80065e6 <__exponent+0x58>
	...

08006604 <_printf_float>:
 8006604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006608:	b08d      	sub	sp, #52	@ 0x34
 800660a:	460c      	mov	r4, r1
 800660c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006610:	4616      	mov	r6, r2
 8006612:	461f      	mov	r7, r3
 8006614:	4605      	mov	r5, r0
 8006616:	f000 fcef 	bl	8006ff8 <_localeconv_r>
 800661a:	6803      	ldr	r3, [r0, #0]
 800661c:	9304      	str	r3, [sp, #16]
 800661e:	4618      	mov	r0, r3
 8006620:	f7f9 fe46 	bl	80002b0 <strlen>
 8006624:	2300      	movs	r3, #0
 8006626:	930a      	str	r3, [sp, #40]	@ 0x28
 8006628:	f8d8 3000 	ldr.w	r3, [r8]
 800662c:	9005      	str	r0, [sp, #20]
 800662e:	3307      	adds	r3, #7
 8006630:	f023 0307 	bic.w	r3, r3, #7
 8006634:	f103 0208 	add.w	r2, r3, #8
 8006638:	f894 a018 	ldrb.w	sl, [r4, #24]
 800663c:	f8d4 b000 	ldr.w	fp, [r4]
 8006640:	f8c8 2000 	str.w	r2, [r8]
 8006644:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006648:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800664c:	9307      	str	r3, [sp, #28]
 800664e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006652:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800665a:	4b9c      	ldr	r3, [pc, #624]	@ (80068cc <_printf_float+0x2c8>)
 800665c:	f04f 32ff 	mov.w	r2, #4294967295
 8006660:	f7fa fa84 	bl	8000b6c <__aeabi_dcmpun>
 8006664:	bb70      	cbnz	r0, 80066c4 <_printf_float+0xc0>
 8006666:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800666a:	4b98      	ldr	r3, [pc, #608]	@ (80068cc <_printf_float+0x2c8>)
 800666c:	f04f 32ff 	mov.w	r2, #4294967295
 8006670:	f7fa fa5e 	bl	8000b30 <__aeabi_dcmple>
 8006674:	bb30      	cbnz	r0, 80066c4 <_printf_float+0xc0>
 8006676:	2200      	movs	r2, #0
 8006678:	2300      	movs	r3, #0
 800667a:	4640      	mov	r0, r8
 800667c:	4649      	mov	r1, r9
 800667e:	f7fa fa4d 	bl	8000b1c <__aeabi_dcmplt>
 8006682:	b110      	cbz	r0, 800668a <_printf_float+0x86>
 8006684:	232d      	movs	r3, #45	@ 0x2d
 8006686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800668a:	4a91      	ldr	r2, [pc, #580]	@ (80068d0 <_printf_float+0x2cc>)
 800668c:	4b91      	ldr	r3, [pc, #580]	@ (80068d4 <_printf_float+0x2d0>)
 800668e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006692:	bf94      	ite	ls
 8006694:	4690      	movls	r8, r2
 8006696:	4698      	movhi	r8, r3
 8006698:	2303      	movs	r3, #3
 800669a:	6123      	str	r3, [r4, #16]
 800669c:	f02b 0304 	bic.w	r3, fp, #4
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	f04f 0900 	mov.w	r9, #0
 80066a6:	9700      	str	r7, [sp, #0]
 80066a8:	4633      	mov	r3, r6
 80066aa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80066ac:	4621      	mov	r1, r4
 80066ae:	4628      	mov	r0, r5
 80066b0:	f000 f9d2 	bl	8006a58 <_printf_common>
 80066b4:	3001      	adds	r0, #1
 80066b6:	f040 808d 	bne.w	80067d4 <_printf_float+0x1d0>
 80066ba:	f04f 30ff 	mov.w	r0, #4294967295
 80066be:	b00d      	add	sp, #52	@ 0x34
 80066c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c4:	4642      	mov	r2, r8
 80066c6:	464b      	mov	r3, r9
 80066c8:	4640      	mov	r0, r8
 80066ca:	4649      	mov	r1, r9
 80066cc:	f7fa fa4e 	bl	8000b6c <__aeabi_dcmpun>
 80066d0:	b140      	cbz	r0, 80066e4 <_printf_float+0xe0>
 80066d2:	464b      	mov	r3, r9
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bfbc      	itt	lt
 80066d8:	232d      	movlt	r3, #45	@ 0x2d
 80066da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80066de:	4a7e      	ldr	r2, [pc, #504]	@ (80068d8 <_printf_float+0x2d4>)
 80066e0:	4b7e      	ldr	r3, [pc, #504]	@ (80068dc <_printf_float+0x2d8>)
 80066e2:	e7d4      	b.n	800668e <_printf_float+0x8a>
 80066e4:	6863      	ldr	r3, [r4, #4]
 80066e6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80066ea:	9206      	str	r2, [sp, #24]
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	d13b      	bne.n	8006768 <_printf_float+0x164>
 80066f0:	2306      	movs	r3, #6
 80066f2:	6063      	str	r3, [r4, #4]
 80066f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80066f8:	2300      	movs	r3, #0
 80066fa:	6022      	str	r2, [r4, #0]
 80066fc:	9303      	str	r3, [sp, #12]
 80066fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8006700:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006704:	ab09      	add	r3, sp, #36	@ 0x24
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	6861      	ldr	r1, [r4, #4]
 800670a:	ec49 8b10 	vmov	d0, r8, r9
 800670e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006712:	4628      	mov	r0, r5
 8006714:	f7ff fed6 	bl	80064c4 <__cvt>
 8006718:	9b06      	ldr	r3, [sp, #24]
 800671a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800671c:	2b47      	cmp	r3, #71	@ 0x47
 800671e:	4680      	mov	r8, r0
 8006720:	d129      	bne.n	8006776 <_printf_float+0x172>
 8006722:	1cc8      	adds	r0, r1, #3
 8006724:	db02      	blt.n	800672c <_printf_float+0x128>
 8006726:	6863      	ldr	r3, [r4, #4]
 8006728:	4299      	cmp	r1, r3
 800672a:	dd41      	ble.n	80067b0 <_printf_float+0x1ac>
 800672c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006730:	fa5f fa8a 	uxtb.w	sl, sl
 8006734:	3901      	subs	r1, #1
 8006736:	4652      	mov	r2, sl
 8006738:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800673c:	9109      	str	r1, [sp, #36]	@ 0x24
 800673e:	f7ff ff26 	bl	800658e <__exponent>
 8006742:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006744:	1813      	adds	r3, r2, r0
 8006746:	2a01      	cmp	r2, #1
 8006748:	4681      	mov	r9, r0
 800674a:	6123      	str	r3, [r4, #16]
 800674c:	dc02      	bgt.n	8006754 <_printf_float+0x150>
 800674e:	6822      	ldr	r2, [r4, #0]
 8006750:	07d2      	lsls	r2, r2, #31
 8006752:	d501      	bpl.n	8006758 <_printf_float+0x154>
 8006754:	3301      	adds	r3, #1
 8006756:	6123      	str	r3, [r4, #16]
 8006758:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0a2      	beq.n	80066a6 <_printf_float+0xa2>
 8006760:	232d      	movs	r3, #45	@ 0x2d
 8006762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006766:	e79e      	b.n	80066a6 <_printf_float+0xa2>
 8006768:	9a06      	ldr	r2, [sp, #24]
 800676a:	2a47      	cmp	r2, #71	@ 0x47
 800676c:	d1c2      	bne.n	80066f4 <_printf_float+0xf0>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1c0      	bne.n	80066f4 <_printf_float+0xf0>
 8006772:	2301      	movs	r3, #1
 8006774:	e7bd      	b.n	80066f2 <_printf_float+0xee>
 8006776:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800677a:	d9db      	bls.n	8006734 <_printf_float+0x130>
 800677c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006780:	d118      	bne.n	80067b4 <_printf_float+0x1b0>
 8006782:	2900      	cmp	r1, #0
 8006784:	6863      	ldr	r3, [r4, #4]
 8006786:	dd0b      	ble.n	80067a0 <_printf_float+0x19c>
 8006788:	6121      	str	r1, [r4, #16]
 800678a:	b913      	cbnz	r3, 8006792 <_printf_float+0x18e>
 800678c:	6822      	ldr	r2, [r4, #0]
 800678e:	07d0      	lsls	r0, r2, #31
 8006790:	d502      	bpl.n	8006798 <_printf_float+0x194>
 8006792:	3301      	adds	r3, #1
 8006794:	440b      	add	r3, r1
 8006796:	6123      	str	r3, [r4, #16]
 8006798:	65a1      	str	r1, [r4, #88]	@ 0x58
 800679a:	f04f 0900 	mov.w	r9, #0
 800679e:	e7db      	b.n	8006758 <_printf_float+0x154>
 80067a0:	b913      	cbnz	r3, 80067a8 <_printf_float+0x1a4>
 80067a2:	6822      	ldr	r2, [r4, #0]
 80067a4:	07d2      	lsls	r2, r2, #31
 80067a6:	d501      	bpl.n	80067ac <_printf_float+0x1a8>
 80067a8:	3302      	adds	r3, #2
 80067aa:	e7f4      	b.n	8006796 <_printf_float+0x192>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e7f2      	b.n	8006796 <_printf_float+0x192>
 80067b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80067b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067b6:	4299      	cmp	r1, r3
 80067b8:	db05      	blt.n	80067c6 <_printf_float+0x1c2>
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	6121      	str	r1, [r4, #16]
 80067be:	07d8      	lsls	r0, r3, #31
 80067c0:	d5ea      	bpl.n	8006798 <_printf_float+0x194>
 80067c2:	1c4b      	adds	r3, r1, #1
 80067c4:	e7e7      	b.n	8006796 <_printf_float+0x192>
 80067c6:	2900      	cmp	r1, #0
 80067c8:	bfd4      	ite	le
 80067ca:	f1c1 0202 	rsble	r2, r1, #2
 80067ce:	2201      	movgt	r2, #1
 80067d0:	4413      	add	r3, r2
 80067d2:	e7e0      	b.n	8006796 <_printf_float+0x192>
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	055a      	lsls	r2, r3, #21
 80067d8:	d407      	bmi.n	80067ea <_printf_float+0x1e6>
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	4642      	mov	r2, r8
 80067de:	4631      	mov	r1, r6
 80067e0:	4628      	mov	r0, r5
 80067e2:	47b8      	blx	r7
 80067e4:	3001      	adds	r0, #1
 80067e6:	d12b      	bne.n	8006840 <_printf_float+0x23c>
 80067e8:	e767      	b.n	80066ba <_printf_float+0xb6>
 80067ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067ee:	f240 80dd 	bls.w	80069ac <_printf_float+0x3a8>
 80067f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067f6:	2200      	movs	r2, #0
 80067f8:	2300      	movs	r3, #0
 80067fa:	f7fa f985 	bl	8000b08 <__aeabi_dcmpeq>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d033      	beq.n	800686a <_printf_float+0x266>
 8006802:	4a37      	ldr	r2, [pc, #220]	@ (80068e0 <_printf_float+0x2dc>)
 8006804:	2301      	movs	r3, #1
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	f43f af54 	beq.w	80066ba <_printf_float+0xb6>
 8006812:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006816:	4543      	cmp	r3, r8
 8006818:	db02      	blt.n	8006820 <_printf_float+0x21c>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	07d8      	lsls	r0, r3, #31
 800681e:	d50f      	bpl.n	8006840 <_printf_float+0x23c>
 8006820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006824:	4631      	mov	r1, r6
 8006826:	4628      	mov	r0, r5
 8006828:	47b8      	blx	r7
 800682a:	3001      	adds	r0, #1
 800682c:	f43f af45 	beq.w	80066ba <_printf_float+0xb6>
 8006830:	f04f 0900 	mov.w	r9, #0
 8006834:	f108 38ff 	add.w	r8, r8, #4294967295
 8006838:	f104 0a1a 	add.w	sl, r4, #26
 800683c:	45c8      	cmp	r8, r9
 800683e:	dc09      	bgt.n	8006854 <_printf_float+0x250>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	079b      	lsls	r3, r3, #30
 8006844:	f100 8103 	bmi.w	8006a4e <_printf_float+0x44a>
 8006848:	68e0      	ldr	r0, [r4, #12]
 800684a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800684c:	4298      	cmp	r0, r3
 800684e:	bfb8      	it	lt
 8006850:	4618      	movlt	r0, r3
 8006852:	e734      	b.n	80066be <_printf_float+0xba>
 8006854:	2301      	movs	r3, #1
 8006856:	4652      	mov	r2, sl
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	f43f af2b 	beq.w	80066ba <_printf_float+0xb6>
 8006864:	f109 0901 	add.w	r9, r9, #1
 8006868:	e7e8      	b.n	800683c <_printf_float+0x238>
 800686a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800686c:	2b00      	cmp	r3, #0
 800686e:	dc39      	bgt.n	80068e4 <_printf_float+0x2e0>
 8006870:	4a1b      	ldr	r2, [pc, #108]	@ (80068e0 <_printf_float+0x2dc>)
 8006872:	2301      	movs	r3, #1
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	f43f af1d 	beq.w	80066ba <_printf_float+0xb6>
 8006880:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006884:	ea59 0303 	orrs.w	r3, r9, r3
 8006888:	d102      	bne.n	8006890 <_printf_float+0x28c>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	07d9      	lsls	r1, r3, #31
 800688e:	d5d7      	bpl.n	8006840 <_printf_float+0x23c>
 8006890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006894:	4631      	mov	r1, r6
 8006896:	4628      	mov	r0, r5
 8006898:	47b8      	blx	r7
 800689a:	3001      	adds	r0, #1
 800689c:	f43f af0d 	beq.w	80066ba <_printf_float+0xb6>
 80068a0:	f04f 0a00 	mov.w	sl, #0
 80068a4:	f104 0b1a 	add.w	fp, r4, #26
 80068a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068aa:	425b      	negs	r3, r3
 80068ac:	4553      	cmp	r3, sl
 80068ae:	dc01      	bgt.n	80068b4 <_printf_float+0x2b0>
 80068b0:	464b      	mov	r3, r9
 80068b2:	e793      	b.n	80067dc <_printf_float+0x1d8>
 80068b4:	2301      	movs	r3, #1
 80068b6:	465a      	mov	r2, fp
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b8      	blx	r7
 80068be:	3001      	adds	r0, #1
 80068c0:	f43f aefb 	beq.w	80066ba <_printf_float+0xb6>
 80068c4:	f10a 0a01 	add.w	sl, sl, #1
 80068c8:	e7ee      	b.n	80068a8 <_printf_float+0x2a4>
 80068ca:	bf00      	nop
 80068cc:	7fefffff 	.word	0x7fefffff
 80068d0:	08009721 	.word	0x08009721
 80068d4:	08009725 	.word	0x08009725
 80068d8:	08009729 	.word	0x08009729
 80068dc:	0800972d 	.word	0x0800972d
 80068e0:	08009731 	.word	0x08009731
 80068e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068ea:	4553      	cmp	r3, sl
 80068ec:	bfa8      	it	ge
 80068ee:	4653      	movge	r3, sl
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	4699      	mov	r9, r3
 80068f4:	dc36      	bgt.n	8006964 <_printf_float+0x360>
 80068f6:	f04f 0b00 	mov.w	fp, #0
 80068fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068fe:	f104 021a 	add.w	r2, r4, #26
 8006902:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006904:	9306      	str	r3, [sp, #24]
 8006906:	eba3 0309 	sub.w	r3, r3, r9
 800690a:	455b      	cmp	r3, fp
 800690c:	dc31      	bgt.n	8006972 <_printf_float+0x36e>
 800690e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006910:	459a      	cmp	sl, r3
 8006912:	dc3a      	bgt.n	800698a <_printf_float+0x386>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	07da      	lsls	r2, r3, #31
 8006918:	d437      	bmi.n	800698a <_printf_float+0x386>
 800691a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800691c:	ebaa 0903 	sub.w	r9, sl, r3
 8006920:	9b06      	ldr	r3, [sp, #24]
 8006922:	ebaa 0303 	sub.w	r3, sl, r3
 8006926:	4599      	cmp	r9, r3
 8006928:	bfa8      	it	ge
 800692a:	4699      	movge	r9, r3
 800692c:	f1b9 0f00 	cmp.w	r9, #0
 8006930:	dc33      	bgt.n	800699a <_printf_float+0x396>
 8006932:	f04f 0800 	mov.w	r8, #0
 8006936:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800693a:	f104 0b1a 	add.w	fp, r4, #26
 800693e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006940:	ebaa 0303 	sub.w	r3, sl, r3
 8006944:	eba3 0309 	sub.w	r3, r3, r9
 8006948:	4543      	cmp	r3, r8
 800694a:	f77f af79 	ble.w	8006840 <_printf_float+0x23c>
 800694e:	2301      	movs	r3, #1
 8006950:	465a      	mov	r2, fp
 8006952:	4631      	mov	r1, r6
 8006954:	4628      	mov	r0, r5
 8006956:	47b8      	blx	r7
 8006958:	3001      	adds	r0, #1
 800695a:	f43f aeae 	beq.w	80066ba <_printf_float+0xb6>
 800695e:	f108 0801 	add.w	r8, r8, #1
 8006962:	e7ec      	b.n	800693e <_printf_float+0x33a>
 8006964:	4642      	mov	r2, r8
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	d1c2      	bne.n	80068f6 <_printf_float+0x2f2>
 8006970:	e6a3      	b.n	80066ba <_printf_float+0xb6>
 8006972:	2301      	movs	r3, #1
 8006974:	4631      	mov	r1, r6
 8006976:	4628      	mov	r0, r5
 8006978:	9206      	str	r2, [sp, #24]
 800697a:	47b8      	blx	r7
 800697c:	3001      	adds	r0, #1
 800697e:	f43f ae9c 	beq.w	80066ba <_printf_float+0xb6>
 8006982:	9a06      	ldr	r2, [sp, #24]
 8006984:	f10b 0b01 	add.w	fp, fp, #1
 8006988:	e7bb      	b.n	8006902 <_printf_float+0x2fe>
 800698a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800698e:	4631      	mov	r1, r6
 8006990:	4628      	mov	r0, r5
 8006992:	47b8      	blx	r7
 8006994:	3001      	adds	r0, #1
 8006996:	d1c0      	bne.n	800691a <_printf_float+0x316>
 8006998:	e68f      	b.n	80066ba <_printf_float+0xb6>
 800699a:	9a06      	ldr	r2, [sp, #24]
 800699c:	464b      	mov	r3, r9
 800699e:	4442      	add	r2, r8
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	d1c3      	bne.n	8006932 <_printf_float+0x32e>
 80069aa:	e686      	b.n	80066ba <_printf_float+0xb6>
 80069ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069b0:	f1ba 0f01 	cmp.w	sl, #1
 80069b4:	dc01      	bgt.n	80069ba <_printf_float+0x3b6>
 80069b6:	07db      	lsls	r3, r3, #31
 80069b8:	d536      	bpl.n	8006a28 <_printf_float+0x424>
 80069ba:	2301      	movs	r3, #1
 80069bc:	4642      	mov	r2, r8
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	f43f ae78 	beq.w	80066ba <_printf_float+0xb6>
 80069ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ce:	4631      	mov	r1, r6
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b8      	blx	r7
 80069d4:	3001      	adds	r0, #1
 80069d6:	f43f ae70 	beq.w	80066ba <_printf_float+0xb6>
 80069da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069de:	2200      	movs	r2, #0
 80069e0:	2300      	movs	r3, #0
 80069e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069e6:	f7fa f88f 	bl	8000b08 <__aeabi_dcmpeq>
 80069ea:	b9c0      	cbnz	r0, 8006a1e <_printf_float+0x41a>
 80069ec:	4653      	mov	r3, sl
 80069ee:	f108 0201 	add.w	r2, r8, #1
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	d10c      	bne.n	8006a16 <_printf_float+0x412>
 80069fc:	e65d      	b.n	80066ba <_printf_float+0xb6>
 80069fe:	2301      	movs	r3, #1
 8006a00:	465a      	mov	r2, fp
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f ae56 	beq.w	80066ba <_printf_float+0xb6>
 8006a0e:	f108 0801 	add.w	r8, r8, #1
 8006a12:	45d0      	cmp	r8, sl
 8006a14:	dbf3      	blt.n	80069fe <_printf_float+0x3fa>
 8006a16:	464b      	mov	r3, r9
 8006a18:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a1c:	e6df      	b.n	80067de <_printf_float+0x1da>
 8006a1e:	f04f 0800 	mov.w	r8, #0
 8006a22:	f104 0b1a 	add.w	fp, r4, #26
 8006a26:	e7f4      	b.n	8006a12 <_printf_float+0x40e>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	4642      	mov	r2, r8
 8006a2c:	e7e1      	b.n	80069f2 <_printf_float+0x3ee>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	464a      	mov	r2, r9
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f ae3e 	beq.w	80066ba <_printf_float+0xb6>
 8006a3e:	f108 0801 	add.w	r8, r8, #1
 8006a42:	68e3      	ldr	r3, [r4, #12]
 8006a44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a46:	1a5b      	subs	r3, r3, r1
 8006a48:	4543      	cmp	r3, r8
 8006a4a:	dcf0      	bgt.n	8006a2e <_printf_float+0x42a>
 8006a4c:	e6fc      	b.n	8006848 <_printf_float+0x244>
 8006a4e:	f04f 0800 	mov.w	r8, #0
 8006a52:	f104 0919 	add.w	r9, r4, #25
 8006a56:	e7f4      	b.n	8006a42 <_printf_float+0x43e>

08006a58 <_printf_common>:
 8006a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	4698      	mov	r8, r3
 8006a60:	688a      	ldr	r2, [r1, #8]
 8006a62:	690b      	ldr	r3, [r1, #16]
 8006a64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	bfb8      	it	lt
 8006a6c:	4613      	movlt	r3, r2
 8006a6e:	6033      	str	r3, [r6, #0]
 8006a70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a74:	4607      	mov	r7, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	b10a      	cbz	r2, 8006a7e <_printf_common+0x26>
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	6033      	str	r3, [r6, #0]
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	0699      	lsls	r1, r3, #26
 8006a82:	bf42      	ittt	mi
 8006a84:	6833      	ldrmi	r3, [r6, #0]
 8006a86:	3302      	addmi	r3, #2
 8006a88:	6033      	strmi	r3, [r6, #0]
 8006a8a:	6825      	ldr	r5, [r4, #0]
 8006a8c:	f015 0506 	ands.w	r5, r5, #6
 8006a90:	d106      	bne.n	8006aa0 <_printf_common+0x48>
 8006a92:	f104 0a19 	add.w	sl, r4, #25
 8006a96:	68e3      	ldr	r3, [r4, #12]
 8006a98:	6832      	ldr	r2, [r6, #0]
 8006a9a:	1a9b      	subs	r3, r3, r2
 8006a9c:	42ab      	cmp	r3, r5
 8006a9e:	dc26      	bgt.n	8006aee <_printf_common+0x96>
 8006aa0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006aa4:	6822      	ldr	r2, [r4, #0]
 8006aa6:	3b00      	subs	r3, #0
 8006aa8:	bf18      	it	ne
 8006aaa:	2301      	movne	r3, #1
 8006aac:	0692      	lsls	r2, r2, #26
 8006aae:	d42b      	bmi.n	8006b08 <_printf_common+0xb0>
 8006ab0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ab4:	4641      	mov	r1, r8
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	47c8      	blx	r9
 8006aba:	3001      	adds	r0, #1
 8006abc:	d01e      	beq.n	8006afc <_printf_common+0xa4>
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	6922      	ldr	r2, [r4, #16]
 8006ac2:	f003 0306 	and.w	r3, r3, #6
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	bf02      	ittt	eq
 8006aca:	68e5      	ldreq	r5, [r4, #12]
 8006acc:	6833      	ldreq	r3, [r6, #0]
 8006ace:	1aed      	subeq	r5, r5, r3
 8006ad0:	68a3      	ldr	r3, [r4, #8]
 8006ad2:	bf0c      	ite	eq
 8006ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad8:	2500      	movne	r5, #0
 8006ada:	4293      	cmp	r3, r2
 8006adc:	bfc4      	itt	gt
 8006ade:	1a9b      	subgt	r3, r3, r2
 8006ae0:	18ed      	addgt	r5, r5, r3
 8006ae2:	2600      	movs	r6, #0
 8006ae4:	341a      	adds	r4, #26
 8006ae6:	42b5      	cmp	r5, r6
 8006ae8:	d11a      	bne.n	8006b20 <_printf_common+0xc8>
 8006aea:	2000      	movs	r0, #0
 8006aec:	e008      	b.n	8006b00 <_printf_common+0xa8>
 8006aee:	2301      	movs	r3, #1
 8006af0:	4652      	mov	r2, sl
 8006af2:	4641      	mov	r1, r8
 8006af4:	4638      	mov	r0, r7
 8006af6:	47c8      	blx	r9
 8006af8:	3001      	adds	r0, #1
 8006afa:	d103      	bne.n	8006b04 <_printf_common+0xac>
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b04:	3501      	adds	r5, #1
 8006b06:	e7c6      	b.n	8006a96 <_printf_common+0x3e>
 8006b08:	18e1      	adds	r1, r4, r3
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	2030      	movs	r0, #48	@ 0x30
 8006b0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b12:	4422      	add	r2, r4
 8006b14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	e7c7      	b.n	8006ab0 <_printf_common+0x58>
 8006b20:	2301      	movs	r3, #1
 8006b22:	4622      	mov	r2, r4
 8006b24:	4641      	mov	r1, r8
 8006b26:	4638      	mov	r0, r7
 8006b28:	47c8      	blx	r9
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d0e6      	beq.n	8006afc <_printf_common+0xa4>
 8006b2e:	3601      	adds	r6, #1
 8006b30:	e7d9      	b.n	8006ae6 <_printf_common+0x8e>
	...

08006b34 <_printf_i>:
 8006b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b38:	7e0f      	ldrb	r7, [r1, #24]
 8006b3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b3c:	2f78      	cmp	r7, #120	@ 0x78
 8006b3e:	4691      	mov	r9, r2
 8006b40:	4680      	mov	r8, r0
 8006b42:	460c      	mov	r4, r1
 8006b44:	469a      	mov	sl, r3
 8006b46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b4a:	d807      	bhi.n	8006b5c <_printf_i+0x28>
 8006b4c:	2f62      	cmp	r7, #98	@ 0x62
 8006b4e:	d80a      	bhi.n	8006b66 <_printf_i+0x32>
 8006b50:	2f00      	cmp	r7, #0
 8006b52:	f000 80d2 	beq.w	8006cfa <_printf_i+0x1c6>
 8006b56:	2f58      	cmp	r7, #88	@ 0x58
 8006b58:	f000 80b9 	beq.w	8006cce <_printf_i+0x19a>
 8006b5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b64:	e03a      	b.n	8006bdc <_printf_i+0xa8>
 8006b66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b6a:	2b15      	cmp	r3, #21
 8006b6c:	d8f6      	bhi.n	8006b5c <_printf_i+0x28>
 8006b6e:	a101      	add	r1, pc, #4	@ (adr r1, 8006b74 <_printf_i+0x40>)
 8006b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b74:	08006bcd 	.word	0x08006bcd
 8006b78:	08006be1 	.word	0x08006be1
 8006b7c:	08006b5d 	.word	0x08006b5d
 8006b80:	08006b5d 	.word	0x08006b5d
 8006b84:	08006b5d 	.word	0x08006b5d
 8006b88:	08006b5d 	.word	0x08006b5d
 8006b8c:	08006be1 	.word	0x08006be1
 8006b90:	08006b5d 	.word	0x08006b5d
 8006b94:	08006b5d 	.word	0x08006b5d
 8006b98:	08006b5d 	.word	0x08006b5d
 8006b9c:	08006b5d 	.word	0x08006b5d
 8006ba0:	08006ce1 	.word	0x08006ce1
 8006ba4:	08006c0b 	.word	0x08006c0b
 8006ba8:	08006c9b 	.word	0x08006c9b
 8006bac:	08006b5d 	.word	0x08006b5d
 8006bb0:	08006b5d 	.word	0x08006b5d
 8006bb4:	08006d03 	.word	0x08006d03
 8006bb8:	08006b5d 	.word	0x08006b5d
 8006bbc:	08006c0b 	.word	0x08006c0b
 8006bc0:	08006b5d 	.word	0x08006b5d
 8006bc4:	08006b5d 	.word	0x08006b5d
 8006bc8:	08006ca3 	.word	0x08006ca3
 8006bcc:	6833      	ldr	r3, [r6, #0]
 8006bce:	1d1a      	adds	r2, r3, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6032      	str	r2, [r6, #0]
 8006bd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e09d      	b.n	8006d1c <_printf_i+0x1e8>
 8006be0:	6833      	ldr	r3, [r6, #0]
 8006be2:	6820      	ldr	r0, [r4, #0]
 8006be4:	1d19      	adds	r1, r3, #4
 8006be6:	6031      	str	r1, [r6, #0]
 8006be8:	0606      	lsls	r6, r0, #24
 8006bea:	d501      	bpl.n	8006bf0 <_printf_i+0xbc>
 8006bec:	681d      	ldr	r5, [r3, #0]
 8006bee:	e003      	b.n	8006bf8 <_printf_i+0xc4>
 8006bf0:	0645      	lsls	r5, r0, #25
 8006bf2:	d5fb      	bpl.n	8006bec <_printf_i+0xb8>
 8006bf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bf8:	2d00      	cmp	r5, #0
 8006bfa:	da03      	bge.n	8006c04 <_printf_i+0xd0>
 8006bfc:	232d      	movs	r3, #45	@ 0x2d
 8006bfe:	426d      	negs	r5, r5
 8006c00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c04:	4859      	ldr	r0, [pc, #356]	@ (8006d6c <_printf_i+0x238>)
 8006c06:	230a      	movs	r3, #10
 8006c08:	e011      	b.n	8006c2e <_printf_i+0xfa>
 8006c0a:	6821      	ldr	r1, [r4, #0]
 8006c0c:	6833      	ldr	r3, [r6, #0]
 8006c0e:	0608      	lsls	r0, r1, #24
 8006c10:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c14:	d402      	bmi.n	8006c1c <_printf_i+0xe8>
 8006c16:	0649      	lsls	r1, r1, #25
 8006c18:	bf48      	it	mi
 8006c1a:	b2ad      	uxthmi	r5, r5
 8006c1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c1e:	4853      	ldr	r0, [pc, #332]	@ (8006d6c <_printf_i+0x238>)
 8006c20:	6033      	str	r3, [r6, #0]
 8006c22:	bf14      	ite	ne
 8006c24:	230a      	movne	r3, #10
 8006c26:	2308      	moveq	r3, #8
 8006c28:	2100      	movs	r1, #0
 8006c2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c2e:	6866      	ldr	r6, [r4, #4]
 8006c30:	60a6      	str	r6, [r4, #8]
 8006c32:	2e00      	cmp	r6, #0
 8006c34:	bfa2      	ittt	ge
 8006c36:	6821      	ldrge	r1, [r4, #0]
 8006c38:	f021 0104 	bicge.w	r1, r1, #4
 8006c3c:	6021      	strge	r1, [r4, #0]
 8006c3e:	b90d      	cbnz	r5, 8006c44 <_printf_i+0x110>
 8006c40:	2e00      	cmp	r6, #0
 8006c42:	d04b      	beq.n	8006cdc <_printf_i+0x1a8>
 8006c44:	4616      	mov	r6, r2
 8006c46:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c4a:	fb03 5711 	mls	r7, r3, r1, r5
 8006c4e:	5dc7      	ldrb	r7, [r0, r7]
 8006c50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c54:	462f      	mov	r7, r5
 8006c56:	42bb      	cmp	r3, r7
 8006c58:	460d      	mov	r5, r1
 8006c5a:	d9f4      	bls.n	8006c46 <_printf_i+0x112>
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d10b      	bne.n	8006c78 <_printf_i+0x144>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	07df      	lsls	r7, r3, #31
 8006c64:	d508      	bpl.n	8006c78 <_printf_i+0x144>
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	6861      	ldr	r1, [r4, #4]
 8006c6a:	4299      	cmp	r1, r3
 8006c6c:	bfde      	ittt	le
 8006c6e:	2330      	movle	r3, #48	@ 0x30
 8006c70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c78:	1b92      	subs	r2, r2, r6
 8006c7a:	6122      	str	r2, [r4, #16]
 8006c7c:	f8cd a000 	str.w	sl, [sp]
 8006c80:	464b      	mov	r3, r9
 8006c82:	aa03      	add	r2, sp, #12
 8006c84:	4621      	mov	r1, r4
 8006c86:	4640      	mov	r0, r8
 8006c88:	f7ff fee6 	bl	8006a58 <_printf_common>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d14a      	bne.n	8006d26 <_printf_i+0x1f2>
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295
 8006c94:	b004      	add	sp, #16
 8006c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	f043 0320 	orr.w	r3, r3, #32
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	4833      	ldr	r0, [pc, #204]	@ (8006d70 <_printf_i+0x23c>)
 8006ca4:	2778      	movs	r7, #120	@ 0x78
 8006ca6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	6831      	ldr	r1, [r6, #0]
 8006cae:	061f      	lsls	r7, r3, #24
 8006cb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cb4:	d402      	bmi.n	8006cbc <_printf_i+0x188>
 8006cb6:	065f      	lsls	r7, r3, #25
 8006cb8:	bf48      	it	mi
 8006cba:	b2ad      	uxthmi	r5, r5
 8006cbc:	6031      	str	r1, [r6, #0]
 8006cbe:	07d9      	lsls	r1, r3, #31
 8006cc0:	bf44      	itt	mi
 8006cc2:	f043 0320 	orrmi.w	r3, r3, #32
 8006cc6:	6023      	strmi	r3, [r4, #0]
 8006cc8:	b11d      	cbz	r5, 8006cd2 <_printf_i+0x19e>
 8006cca:	2310      	movs	r3, #16
 8006ccc:	e7ac      	b.n	8006c28 <_printf_i+0xf4>
 8006cce:	4827      	ldr	r0, [pc, #156]	@ (8006d6c <_printf_i+0x238>)
 8006cd0:	e7e9      	b.n	8006ca6 <_printf_i+0x172>
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	f023 0320 	bic.w	r3, r3, #32
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	e7f6      	b.n	8006cca <_printf_i+0x196>
 8006cdc:	4616      	mov	r6, r2
 8006cde:	e7bd      	b.n	8006c5c <_printf_i+0x128>
 8006ce0:	6833      	ldr	r3, [r6, #0]
 8006ce2:	6825      	ldr	r5, [r4, #0]
 8006ce4:	6961      	ldr	r1, [r4, #20]
 8006ce6:	1d18      	adds	r0, r3, #4
 8006ce8:	6030      	str	r0, [r6, #0]
 8006cea:	062e      	lsls	r6, r5, #24
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	d501      	bpl.n	8006cf4 <_printf_i+0x1c0>
 8006cf0:	6019      	str	r1, [r3, #0]
 8006cf2:	e002      	b.n	8006cfa <_printf_i+0x1c6>
 8006cf4:	0668      	lsls	r0, r5, #25
 8006cf6:	d5fb      	bpl.n	8006cf0 <_printf_i+0x1bc>
 8006cf8:	8019      	strh	r1, [r3, #0]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6123      	str	r3, [r4, #16]
 8006cfe:	4616      	mov	r6, r2
 8006d00:	e7bc      	b.n	8006c7c <_printf_i+0x148>
 8006d02:	6833      	ldr	r3, [r6, #0]
 8006d04:	1d1a      	adds	r2, r3, #4
 8006d06:	6032      	str	r2, [r6, #0]
 8006d08:	681e      	ldr	r6, [r3, #0]
 8006d0a:	6862      	ldr	r2, [r4, #4]
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f7f9 fa7e 	bl	8000210 <memchr>
 8006d14:	b108      	cbz	r0, 8006d1a <_printf_i+0x1e6>
 8006d16:	1b80      	subs	r0, r0, r6
 8006d18:	6060      	str	r0, [r4, #4]
 8006d1a:	6863      	ldr	r3, [r4, #4]
 8006d1c:	6123      	str	r3, [r4, #16]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d24:	e7aa      	b.n	8006c7c <_printf_i+0x148>
 8006d26:	6923      	ldr	r3, [r4, #16]
 8006d28:	4632      	mov	r2, r6
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	47d0      	blx	sl
 8006d30:	3001      	adds	r0, #1
 8006d32:	d0ad      	beq.n	8006c90 <_printf_i+0x15c>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	079b      	lsls	r3, r3, #30
 8006d38:	d413      	bmi.n	8006d62 <_printf_i+0x22e>
 8006d3a:	68e0      	ldr	r0, [r4, #12]
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	4298      	cmp	r0, r3
 8006d40:	bfb8      	it	lt
 8006d42:	4618      	movlt	r0, r3
 8006d44:	e7a6      	b.n	8006c94 <_printf_i+0x160>
 8006d46:	2301      	movs	r3, #1
 8006d48:	4632      	mov	r2, r6
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	47d0      	blx	sl
 8006d50:	3001      	adds	r0, #1
 8006d52:	d09d      	beq.n	8006c90 <_printf_i+0x15c>
 8006d54:	3501      	adds	r5, #1
 8006d56:	68e3      	ldr	r3, [r4, #12]
 8006d58:	9903      	ldr	r1, [sp, #12]
 8006d5a:	1a5b      	subs	r3, r3, r1
 8006d5c:	42ab      	cmp	r3, r5
 8006d5e:	dcf2      	bgt.n	8006d46 <_printf_i+0x212>
 8006d60:	e7eb      	b.n	8006d3a <_printf_i+0x206>
 8006d62:	2500      	movs	r5, #0
 8006d64:	f104 0619 	add.w	r6, r4, #25
 8006d68:	e7f5      	b.n	8006d56 <_printf_i+0x222>
 8006d6a:	bf00      	nop
 8006d6c:	08009733 	.word	0x08009733
 8006d70:	08009744 	.word	0x08009744

08006d74 <std>:
 8006d74:	2300      	movs	r3, #0
 8006d76:	b510      	push	{r4, lr}
 8006d78:	4604      	mov	r4, r0
 8006d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d82:	6083      	str	r3, [r0, #8]
 8006d84:	8181      	strh	r1, [r0, #12]
 8006d86:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d88:	81c2      	strh	r2, [r0, #14]
 8006d8a:	6183      	str	r3, [r0, #24]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	2208      	movs	r2, #8
 8006d90:	305c      	adds	r0, #92	@ 0x5c
 8006d92:	f000 f928 	bl	8006fe6 <memset>
 8006d96:	4b0d      	ldr	r3, [pc, #52]	@ (8006dcc <std+0x58>)
 8006d98:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd0 <std+0x5c>)
 8006d9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd4 <std+0x60>)
 8006da0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006da2:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd8 <std+0x64>)
 8006da4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006da6:	4b0d      	ldr	r3, [pc, #52]	@ (8006ddc <std+0x68>)
 8006da8:	6224      	str	r4, [r4, #32]
 8006daa:	429c      	cmp	r4, r3
 8006dac:	d006      	beq.n	8006dbc <std+0x48>
 8006dae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006db2:	4294      	cmp	r4, r2
 8006db4:	d002      	beq.n	8006dbc <std+0x48>
 8006db6:	33d0      	adds	r3, #208	@ 0xd0
 8006db8:	429c      	cmp	r4, r3
 8006dba:	d105      	bne.n	8006dc8 <std+0x54>
 8006dbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc4:	f000 b98c 	b.w	80070e0 <__retarget_lock_init_recursive>
 8006dc8:	bd10      	pop	{r4, pc}
 8006dca:	bf00      	nop
 8006dcc:	08006f61 	.word	0x08006f61
 8006dd0:	08006f83 	.word	0x08006f83
 8006dd4:	08006fbb 	.word	0x08006fbb
 8006dd8:	08006fdf 	.word	0x08006fdf
 8006ddc:	200007c0 	.word	0x200007c0

08006de0 <stdio_exit_handler>:
 8006de0:	4a02      	ldr	r2, [pc, #8]	@ (8006dec <stdio_exit_handler+0xc>)
 8006de2:	4903      	ldr	r1, [pc, #12]	@ (8006df0 <stdio_exit_handler+0x10>)
 8006de4:	4803      	ldr	r0, [pc, #12]	@ (8006df4 <stdio_exit_handler+0x14>)
 8006de6:	f000 b869 	b.w	8006ebc <_fwalk_sglue>
 8006dea:	bf00      	nop
 8006dec:	2000001c 	.word	0x2000001c
 8006df0:	08008a3d 	.word	0x08008a3d
 8006df4:	2000002c 	.word	0x2000002c

08006df8 <cleanup_stdio>:
 8006df8:	6841      	ldr	r1, [r0, #4]
 8006dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8006e2c <cleanup_stdio+0x34>)
 8006dfc:	4299      	cmp	r1, r3
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	4604      	mov	r4, r0
 8006e02:	d001      	beq.n	8006e08 <cleanup_stdio+0x10>
 8006e04:	f001 fe1a 	bl	8008a3c <_fflush_r>
 8006e08:	68a1      	ldr	r1, [r4, #8]
 8006e0a:	4b09      	ldr	r3, [pc, #36]	@ (8006e30 <cleanup_stdio+0x38>)
 8006e0c:	4299      	cmp	r1, r3
 8006e0e:	d002      	beq.n	8006e16 <cleanup_stdio+0x1e>
 8006e10:	4620      	mov	r0, r4
 8006e12:	f001 fe13 	bl	8008a3c <_fflush_r>
 8006e16:	68e1      	ldr	r1, [r4, #12]
 8006e18:	4b06      	ldr	r3, [pc, #24]	@ (8006e34 <cleanup_stdio+0x3c>)
 8006e1a:	4299      	cmp	r1, r3
 8006e1c:	d004      	beq.n	8006e28 <cleanup_stdio+0x30>
 8006e1e:	4620      	mov	r0, r4
 8006e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e24:	f001 be0a 	b.w	8008a3c <_fflush_r>
 8006e28:	bd10      	pop	{r4, pc}
 8006e2a:	bf00      	nop
 8006e2c:	200007c0 	.word	0x200007c0
 8006e30:	20000828 	.word	0x20000828
 8006e34:	20000890 	.word	0x20000890

08006e38 <global_stdio_init.part.0>:
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e68 <global_stdio_init.part.0+0x30>)
 8006e3c:	4c0b      	ldr	r4, [pc, #44]	@ (8006e6c <global_stdio_init.part.0+0x34>)
 8006e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8006e70 <global_stdio_init.part.0+0x38>)
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	4620      	mov	r0, r4
 8006e44:	2200      	movs	r2, #0
 8006e46:	2104      	movs	r1, #4
 8006e48:	f7ff ff94 	bl	8006d74 <std>
 8006e4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e50:	2201      	movs	r2, #1
 8006e52:	2109      	movs	r1, #9
 8006e54:	f7ff ff8e 	bl	8006d74 <std>
 8006e58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e62:	2112      	movs	r1, #18
 8006e64:	f7ff bf86 	b.w	8006d74 <std>
 8006e68:	200008f8 	.word	0x200008f8
 8006e6c:	200007c0 	.word	0x200007c0
 8006e70:	08006de1 	.word	0x08006de1

08006e74 <__sfp_lock_acquire>:
 8006e74:	4801      	ldr	r0, [pc, #4]	@ (8006e7c <__sfp_lock_acquire+0x8>)
 8006e76:	f000 b934 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	20000901 	.word	0x20000901

08006e80 <__sfp_lock_release>:
 8006e80:	4801      	ldr	r0, [pc, #4]	@ (8006e88 <__sfp_lock_release+0x8>)
 8006e82:	f000 b92f 	b.w	80070e4 <__retarget_lock_release_recursive>
 8006e86:	bf00      	nop
 8006e88:	20000901 	.word	0x20000901

08006e8c <__sinit>:
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	4604      	mov	r4, r0
 8006e90:	f7ff fff0 	bl	8006e74 <__sfp_lock_acquire>
 8006e94:	6a23      	ldr	r3, [r4, #32]
 8006e96:	b11b      	cbz	r3, 8006ea0 <__sinit+0x14>
 8006e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e9c:	f7ff bff0 	b.w	8006e80 <__sfp_lock_release>
 8006ea0:	4b04      	ldr	r3, [pc, #16]	@ (8006eb4 <__sinit+0x28>)
 8006ea2:	6223      	str	r3, [r4, #32]
 8006ea4:	4b04      	ldr	r3, [pc, #16]	@ (8006eb8 <__sinit+0x2c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f5      	bne.n	8006e98 <__sinit+0xc>
 8006eac:	f7ff ffc4 	bl	8006e38 <global_stdio_init.part.0>
 8006eb0:	e7f2      	b.n	8006e98 <__sinit+0xc>
 8006eb2:	bf00      	nop
 8006eb4:	08006df9 	.word	0x08006df9
 8006eb8:	200008f8 	.word	0x200008f8

08006ebc <_fwalk_sglue>:
 8006ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	4688      	mov	r8, r1
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8006ed0:	d505      	bpl.n	8006ede <_fwalk_sglue+0x22>
 8006ed2:	6824      	ldr	r4, [r4, #0]
 8006ed4:	2c00      	cmp	r4, #0
 8006ed6:	d1f7      	bne.n	8006ec8 <_fwalk_sglue+0xc>
 8006ed8:	4630      	mov	r0, r6
 8006eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ede:	89ab      	ldrh	r3, [r5, #12]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d907      	bls.n	8006ef4 <_fwalk_sglue+0x38>
 8006ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	d003      	beq.n	8006ef4 <_fwalk_sglue+0x38>
 8006eec:	4629      	mov	r1, r5
 8006eee:	4638      	mov	r0, r7
 8006ef0:	47c0      	blx	r8
 8006ef2:	4306      	orrs	r6, r0
 8006ef4:	3568      	adds	r5, #104	@ 0x68
 8006ef6:	e7e9      	b.n	8006ecc <_fwalk_sglue+0x10>

08006ef8 <sniprintf>:
 8006ef8:	b40c      	push	{r2, r3}
 8006efa:	b530      	push	{r4, r5, lr}
 8006efc:	4b17      	ldr	r3, [pc, #92]	@ (8006f5c <sniprintf+0x64>)
 8006efe:	1e0c      	subs	r4, r1, #0
 8006f00:	681d      	ldr	r5, [r3, #0]
 8006f02:	b09d      	sub	sp, #116	@ 0x74
 8006f04:	da08      	bge.n	8006f18 <sniprintf+0x20>
 8006f06:	238b      	movs	r3, #139	@ 0x8b
 8006f08:	602b      	str	r3, [r5, #0]
 8006f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0e:	b01d      	add	sp, #116	@ 0x74
 8006f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f14:	b002      	add	sp, #8
 8006f16:	4770      	bx	lr
 8006f18:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006f1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f20:	bf14      	ite	ne
 8006f22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f26:	4623      	moveq	r3, r4
 8006f28:	9304      	str	r3, [sp, #16]
 8006f2a:	9307      	str	r3, [sp, #28]
 8006f2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006f30:	9002      	str	r0, [sp, #8]
 8006f32:	9006      	str	r0, [sp, #24]
 8006f34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006f3a:	ab21      	add	r3, sp, #132	@ 0x84
 8006f3c:	a902      	add	r1, sp, #8
 8006f3e:	4628      	mov	r0, r5
 8006f40:	9301      	str	r3, [sp, #4]
 8006f42:	f001 fbfb 	bl	800873c <_svfiprintf_r>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	bfbc      	itt	lt
 8006f4a:	238b      	movlt	r3, #139	@ 0x8b
 8006f4c:	602b      	strlt	r3, [r5, #0]
 8006f4e:	2c00      	cmp	r4, #0
 8006f50:	d0dd      	beq.n	8006f0e <sniprintf+0x16>
 8006f52:	9b02      	ldr	r3, [sp, #8]
 8006f54:	2200      	movs	r2, #0
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	e7d9      	b.n	8006f0e <sniprintf+0x16>
 8006f5a:	bf00      	nop
 8006f5c:	20000028 	.word	0x20000028

08006f60 <__sread>:
 8006f60:	b510      	push	{r4, lr}
 8006f62:	460c      	mov	r4, r1
 8006f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f68:	f000 f86c 	bl	8007044 <_read_r>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	bfab      	itete	ge
 8006f70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f72:	89a3      	ldrhlt	r3, [r4, #12]
 8006f74:	181b      	addge	r3, r3, r0
 8006f76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f7a:	bfac      	ite	ge
 8006f7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f7e:	81a3      	strhlt	r3, [r4, #12]
 8006f80:	bd10      	pop	{r4, pc}

08006f82 <__swrite>:
 8006f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f86:	461f      	mov	r7, r3
 8006f88:	898b      	ldrh	r3, [r1, #12]
 8006f8a:	05db      	lsls	r3, r3, #23
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	4616      	mov	r6, r2
 8006f92:	d505      	bpl.n	8006fa0 <__swrite+0x1e>
 8006f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f98:	2302      	movs	r3, #2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f000 f840 	bl	8007020 <_lseek_r>
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006faa:	81a3      	strh	r3, [r4, #12]
 8006fac:	4632      	mov	r2, r6
 8006fae:	463b      	mov	r3, r7
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb6:	f000 b857 	b.w	8007068 <_write_r>

08006fba <__sseek>:
 8006fba:	b510      	push	{r4, lr}
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc2:	f000 f82d 	bl	8007020 <_lseek_r>
 8006fc6:	1c43      	adds	r3, r0, #1
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	bf15      	itete	ne
 8006fcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006fd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fd6:	81a3      	strheq	r3, [r4, #12]
 8006fd8:	bf18      	it	ne
 8006fda:	81a3      	strhne	r3, [r4, #12]
 8006fdc:	bd10      	pop	{r4, pc}

08006fde <__sclose>:
 8006fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe2:	f000 b80d 	b.w	8007000 <_close_r>

08006fe6 <memset>:
 8006fe6:	4402      	add	r2, r0
 8006fe8:	4603      	mov	r3, r0
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d100      	bne.n	8006ff0 <memset+0xa>
 8006fee:	4770      	bx	lr
 8006ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ff4:	e7f9      	b.n	8006fea <memset+0x4>
	...

08006ff8 <_localeconv_r>:
 8006ff8:	4800      	ldr	r0, [pc, #0]	@ (8006ffc <_localeconv_r+0x4>)
 8006ffa:	4770      	bx	lr
 8006ffc:	20000168 	.word	0x20000168

08007000 <_close_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d06      	ldr	r5, [pc, #24]	@ (800701c <_close_r+0x1c>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7fb fc5c 	bl	80028c8 <_close>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_close_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_close_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	200008fc 	.word	0x200008fc

08007020 <_lseek_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d07      	ldr	r5, [pc, #28]	@ (8007040 <_lseek_r+0x20>)
 8007024:	4604      	mov	r4, r0
 8007026:	4608      	mov	r0, r1
 8007028:	4611      	mov	r1, r2
 800702a:	2200      	movs	r2, #0
 800702c:	602a      	str	r2, [r5, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	f7fb fc71 	bl	8002916 <_lseek>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_lseek_r+0x1e>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	b103      	cbz	r3, 800703e <_lseek_r+0x1e>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	200008fc 	.word	0x200008fc

08007044 <_read_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4d07      	ldr	r5, [pc, #28]	@ (8007064 <_read_r+0x20>)
 8007048:	4604      	mov	r4, r0
 800704a:	4608      	mov	r0, r1
 800704c:	4611      	mov	r1, r2
 800704e:	2200      	movs	r2, #0
 8007050:	602a      	str	r2, [r5, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	f7fb fbff 	bl	8002856 <_read>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_read_r+0x1e>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_read_r+0x1e>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	200008fc 	.word	0x200008fc

08007068 <_write_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d07      	ldr	r5, [pc, #28]	@ (8007088 <_write_r+0x20>)
 800706c:	4604      	mov	r4, r0
 800706e:	4608      	mov	r0, r1
 8007070:	4611      	mov	r1, r2
 8007072:	2200      	movs	r2, #0
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7fb fc0a 	bl	8002890 <_write>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_write_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_write_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	200008fc 	.word	0x200008fc

0800708c <__errno>:
 800708c:	4b01      	ldr	r3, [pc, #4]	@ (8007094 <__errno+0x8>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000028 	.word	0x20000028

08007098 <__libc_init_array>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4d0d      	ldr	r5, [pc, #52]	@ (80070d0 <__libc_init_array+0x38>)
 800709c:	4c0d      	ldr	r4, [pc, #52]	@ (80070d4 <__libc_init_array+0x3c>)
 800709e:	1b64      	subs	r4, r4, r5
 80070a0:	10a4      	asrs	r4, r4, #2
 80070a2:	2600      	movs	r6, #0
 80070a4:	42a6      	cmp	r6, r4
 80070a6:	d109      	bne.n	80070bc <__libc_init_array+0x24>
 80070a8:	4d0b      	ldr	r5, [pc, #44]	@ (80070d8 <__libc_init_array+0x40>)
 80070aa:	4c0c      	ldr	r4, [pc, #48]	@ (80070dc <__libc_init_array+0x44>)
 80070ac:	f002 f864 	bl	8009178 <_init>
 80070b0:	1b64      	subs	r4, r4, r5
 80070b2:	10a4      	asrs	r4, r4, #2
 80070b4:	2600      	movs	r6, #0
 80070b6:	42a6      	cmp	r6, r4
 80070b8:	d105      	bne.n	80070c6 <__libc_init_array+0x2e>
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
 80070bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c0:	4798      	blx	r3
 80070c2:	3601      	adds	r6, #1
 80070c4:	e7ee      	b.n	80070a4 <__libc_init_array+0xc>
 80070c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ca:	4798      	blx	r3
 80070cc:	3601      	adds	r6, #1
 80070ce:	e7f2      	b.n	80070b6 <__libc_init_array+0x1e>
 80070d0:	08009998 	.word	0x08009998
 80070d4:	08009998 	.word	0x08009998
 80070d8:	08009998 	.word	0x08009998
 80070dc:	0800999c 	.word	0x0800999c

080070e0 <__retarget_lock_init_recursive>:
 80070e0:	4770      	bx	lr

080070e2 <__retarget_lock_acquire_recursive>:
 80070e2:	4770      	bx	lr

080070e4 <__retarget_lock_release_recursive>:
 80070e4:	4770      	bx	lr

080070e6 <quorem>:
 80070e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ea:	6903      	ldr	r3, [r0, #16]
 80070ec:	690c      	ldr	r4, [r1, #16]
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	4607      	mov	r7, r0
 80070f2:	db7e      	blt.n	80071f2 <quorem+0x10c>
 80070f4:	3c01      	subs	r4, #1
 80070f6:	f101 0814 	add.w	r8, r1, #20
 80070fa:	00a3      	lsls	r3, r4, #2
 80070fc:	f100 0514 	add.w	r5, r0, #20
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800710c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007110:	3301      	adds	r3, #1
 8007112:	429a      	cmp	r2, r3
 8007114:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007118:	fbb2 f6f3 	udiv	r6, r2, r3
 800711c:	d32e      	bcc.n	800717c <quorem+0x96>
 800711e:	f04f 0a00 	mov.w	sl, #0
 8007122:	46c4      	mov	ip, r8
 8007124:	46ae      	mov	lr, r5
 8007126:	46d3      	mov	fp, sl
 8007128:	f85c 3b04 	ldr.w	r3, [ip], #4
 800712c:	b298      	uxth	r0, r3
 800712e:	fb06 a000 	mla	r0, r6, r0, sl
 8007132:	0c02      	lsrs	r2, r0, #16
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	fb06 2303 	mla	r3, r6, r3, r2
 800713a:	f8de 2000 	ldr.w	r2, [lr]
 800713e:	b280      	uxth	r0, r0
 8007140:	b292      	uxth	r2, r2
 8007142:	1a12      	subs	r2, r2, r0
 8007144:	445a      	add	r2, fp
 8007146:	f8de 0000 	ldr.w	r0, [lr]
 800714a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800714e:	b29b      	uxth	r3, r3
 8007150:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007154:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007158:	b292      	uxth	r2, r2
 800715a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800715e:	45e1      	cmp	r9, ip
 8007160:	f84e 2b04 	str.w	r2, [lr], #4
 8007164:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007168:	d2de      	bcs.n	8007128 <quorem+0x42>
 800716a:	9b00      	ldr	r3, [sp, #0]
 800716c:	58eb      	ldr	r3, [r5, r3]
 800716e:	b92b      	cbnz	r3, 800717c <quorem+0x96>
 8007170:	9b01      	ldr	r3, [sp, #4]
 8007172:	3b04      	subs	r3, #4
 8007174:	429d      	cmp	r5, r3
 8007176:	461a      	mov	r2, r3
 8007178:	d32f      	bcc.n	80071da <quorem+0xf4>
 800717a:	613c      	str	r4, [r7, #16]
 800717c:	4638      	mov	r0, r7
 800717e:	f001 f979 	bl	8008474 <__mcmp>
 8007182:	2800      	cmp	r0, #0
 8007184:	db25      	blt.n	80071d2 <quorem+0xec>
 8007186:	4629      	mov	r1, r5
 8007188:	2000      	movs	r0, #0
 800718a:	f858 2b04 	ldr.w	r2, [r8], #4
 800718e:	f8d1 c000 	ldr.w	ip, [r1]
 8007192:	fa1f fe82 	uxth.w	lr, r2
 8007196:	fa1f f38c 	uxth.w	r3, ip
 800719a:	eba3 030e 	sub.w	r3, r3, lr
 800719e:	4403      	add	r3, r0
 80071a0:	0c12      	lsrs	r2, r2, #16
 80071a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071b0:	45c1      	cmp	r9, r8
 80071b2:	f841 3b04 	str.w	r3, [r1], #4
 80071b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071ba:	d2e6      	bcs.n	800718a <quorem+0xa4>
 80071bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071c4:	b922      	cbnz	r2, 80071d0 <quorem+0xea>
 80071c6:	3b04      	subs	r3, #4
 80071c8:	429d      	cmp	r5, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	d30b      	bcc.n	80071e6 <quorem+0x100>
 80071ce:	613c      	str	r4, [r7, #16]
 80071d0:	3601      	adds	r6, #1
 80071d2:	4630      	mov	r0, r6
 80071d4:	b003      	add	sp, #12
 80071d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	3b04      	subs	r3, #4
 80071de:	2a00      	cmp	r2, #0
 80071e0:	d1cb      	bne.n	800717a <quorem+0x94>
 80071e2:	3c01      	subs	r4, #1
 80071e4:	e7c6      	b.n	8007174 <quorem+0x8e>
 80071e6:	6812      	ldr	r2, [r2, #0]
 80071e8:	3b04      	subs	r3, #4
 80071ea:	2a00      	cmp	r2, #0
 80071ec:	d1ef      	bne.n	80071ce <quorem+0xe8>
 80071ee:	3c01      	subs	r4, #1
 80071f0:	e7ea      	b.n	80071c8 <quorem+0xe2>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e7ee      	b.n	80071d4 <quorem+0xee>
	...

080071f8 <_dtoa_r>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	69c7      	ldr	r7, [r0, #28]
 80071fe:	b099      	sub	sp, #100	@ 0x64
 8007200:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007204:	ec55 4b10 	vmov	r4, r5, d0
 8007208:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800720a:	9109      	str	r1, [sp, #36]	@ 0x24
 800720c:	4683      	mov	fp, r0
 800720e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007210:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007212:	b97f      	cbnz	r7, 8007234 <_dtoa_r+0x3c>
 8007214:	2010      	movs	r0, #16
 8007216:	f000 fdfd 	bl	8007e14 <malloc>
 800721a:	4602      	mov	r2, r0
 800721c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007220:	b920      	cbnz	r0, 800722c <_dtoa_r+0x34>
 8007222:	4ba7      	ldr	r3, [pc, #668]	@ (80074c0 <_dtoa_r+0x2c8>)
 8007224:	21ef      	movs	r1, #239	@ 0xef
 8007226:	48a7      	ldr	r0, [pc, #668]	@ (80074c4 <_dtoa_r+0x2cc>)
 8007228:	f001 fc68 	bl	8008afc <__assert_func>
 800722c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007230:	6007      	str	r7, [r0, #0]
 8007232:	60c7      	str	r7, [r0, #12]
 8007234:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007238:	6819      	ldr	r1, [r3, #0]
 800723a:	b159      	cbz	r1, 8007254 <_dtoa_r+0x5c>
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	604a      	str	r2, [r1, #4]
 8007240:	2301      	movs	r3, #1
 8007242:	4093      	lsls	r3, r2
 8007244:	608b      	str	r3, [r1, #8]
 8007246:	4658      	mov	r0, fp
 8007248:	f000 feda 	bl	8008000 <_Bfree>
 800724c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	1e2b      	subs	r3, r5, #0
 8007256:	bfb9      	ittee	lt
 8007258:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800725c:	9303      	strlt	r3, [sp, #12]
 800725e:	2300      	movge	r3, #0
 8007260:	6033      	strge	r3, [r6, #0]
 8007262:	9f03      	ldr	r7, [sp, #12]
 8007264:	4b98      	ldr	r3, [pc, #608]	@ (80074c8 <_dtoa_r+0x2d0>)
 8007266:	bfbc      	itt	lt
 8007268:	2201      	movlt	r2, #1
 800726a:	6032      	strlt	r2, [r6, #0]
 800726c:	43bb      	bics	r3, r7
 800726e:	d112      	bne.n	8007296 <_dtoa_r+0x9e>
 8007270:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007272:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800727c:	4323      	orrs	r3, r4
 800727e:	f000 854d 	beq.w	8007d1c <_dtoa_r+0xb24>
 8007282:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007284:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80074dc <_dtoa_r+0x2e4>
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 854f 	beq.w	8007d2c <_dtoa_r+0xb34>
 800728e:	f10a 0303 	add.w	r3, sl, #3
 8007292:	f000 bd49 	b.w	8007d28 <_dtoa_r+0xb30>
 8007296:	ed9d 7b02 	vldr	d7, [sp, #8]
 800729a:	2200      	movs	r2, #0
 800729c:	ec51 0b17 	vmov	r0, r1, d7
 80072a0:	2300      	movs	r3, #0
 80072a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80072a6:	f7f9 fc2f 	bl	8000b08 <__aeabi_dcmpeq>
 80072aa:	4680      	mov	r8, r0
 80072ac:	b158      	cbz	r0, 80072c6 <_dtoa_r+0xce>
 80072ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072b0:	2301      	movs	r3, #1
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072b6:	b113      	cbz	r3, 80072be <_dtoa_r+0xc6>
 80072b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80072ba:	4b84      	ldr	r3, [pc, #528]	@ (80074cc <_dtoa_r+0x2d4>)
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80074e0 <_dtoa_r+0x2e8>
 80072c2:	f000 bd33 	b.w	8007d2c <_dtoa_r+0xb34>
 80072c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80072ca:	aa16      	add	r2, sp, #88	@ 0x58
 80072cc:	a917      	add	r1, sp, #92	@ 0x5c
 80072ce:	4658      	mov	r0, fp
 80072d0:	f001 f980 	bl	80085d4 <__d2b>
 80072d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80072d8:	4681      	mov	r9, r0
 80072da:	2e00      	cmp	r6, #0
 80072dc:	d077      	beq.n	80073ce <_dtoa_r+0x1d6>
 80072de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80072e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80072f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80072f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80072f8:	4619      	mov	r1, r3
 80072fa:	2200      	movs	r2, #0
 80072fc:	4b74      	ldr	r3, [pc, #464]	@ (80074d0 <_dtoa_r+0x2d8>)
 80072fe:	f7f8 ffe3 	bl	80002c8 <__aeabi_dsub>
 8007302:	a369      	add	r3, pc, #420	@ (adr r3, 80074a8 <_dtoa_r+0x2b0>)
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f7f9 f996 	bl	8000638 <__aeabi_dmul>
 800730c:	a368      	add	r3, pc, #416	@ (adr r3, 80074b0 <_dtoa_r+0x2b8>)
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	f7f8 ffdb 	bl	80002cc <__adddf3>
 8007316:	4604      	mov	r4, r0
 8007318:	4630      	mov	r0, r6
 800731a:	460d      	mov	r5, r1
 800731c:	f7f9 f922 	bl	8000564 <__aeabi_i2d>
 8007320:	a365      	add	r3, pc, #404	@ (adr r3, 80074b8 <_dtoa_r+0x2c0>)
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	f7f9 f987 	bl	8000638 <__aeabi_dmul>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4620      	mov	r0, r4
 8007330:	4629      	mov	r1, r5
 8007332:	f7f8 ffcb 	bl	80002cc <__adddf3>
 8007336:	4604      	mov	r4, r0
 8007338:	460d      	mov	r5, r1
 800733a:	f7f9 fc2d 	bl	8000b98 <__aeabi_d2iz>
 800733e:	2200      	movs	r2, #0
 8007340:	4607      	mov	r7, r0
 8007342:	2300      	movs	r3, #0
 8007344:	4620      	mov	r0, r4
 8007346:	4629      	mov	r1, r5
 8007348:	f7f9 fbe8 	bl	8000b1c <__aeabi_dcmplt>
 800734c:	b140      	cbz	r0, 8007360 <_dtoa_r+0x168>
 800734e:	4638      	mov	r0, r7
 8007350:	f7f9 f908 	bl	8000564 <__aeabi_i2d>
 8007354:	4622      	mov	r2, r4
 8007356:	462b      	mov	r3, r5
 8007358:	f7f9 fbd6 	bl	8000b08 <__aeabi_dcmpeq>
 800735c:	b900      	cbnz	r0, 8007360 <_dtoa_r+0x168>
 800735e:	3f01      	subs	r7, #1
 8007360:	2f16      	cmp	r7, #22
 8007362:	d851      	bhi.n	8007408 <_dtoa_r+0x210>
 8007364:	4b5b      	ldr	r3, [pc, #364]	@ (80074d4 <_dtoa_r+0x2dc>)
 8007366:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007372:	f7f9 fbd3 	bl	8000b1c <__aeabi_dcmplt>
 8007376:	2800      	cmp	r0, #0
 8007378:	d048      	beq.n	800740c <_dtoa_r+0x214>
 800737a:	3f01      	subs	r7, #1
 800737c:	2300      	movs	r3, #0
 800737e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007380:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007382:	1b9b      	subs	r3, r3, r6
 8007384:	1e5a      	subs	r2, r3, #1
 8007386:	bf44      	itt	mi
 8007388:	f1c3 0801 	rsbmi	r8, r3, #1
 800738c:	2300      	movmi	r3, #0
 800738e:	9208      	str	r2, [sp, #32]
 8007390:	bf54      	ite	pl
 8007392:	f04f 0800 	movpl.w	r8, #0
 8007396:	9308      	strmi	r3, [sp, #32]
 8007398:	2f00      	cmp	r7, #0
 800739a:	db39      	blt.n	8007410 <_dtoa_r+0x218>
 800739c:	9b08      	ldr	r3, [sp, #32]
 800739e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80073a0:	443b      	add	r3, r7
 80073a2:	9308      	str	r3, [sp, #32]
 80073a4:	2300      	movs	r3, #0
 80073a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073aa:	2b09      	cmp	r3, #9
 80073ac:	d864      	bhi.n	8007478 <_dtoa_r+0x280>
 80073ae:	2b05      	cmp	r3, #5
 80073b0:	bfc4      	itt	gt
 80073b2:	3b04      	subgt	r3, #4
 80073b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80073b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b8:	f1a3 0302 	sub.w	r3, r3, #2
 80073bc:	bfcc      	ite	gt
 80073be:	2400      	movgt	r4, #0
 80073c0:	2401      	movle	r4, #1
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d863      	bhi.n	800748e <_dtoa_r+0x296>
 80073c6:	e8df f003 	tbb	[pc, r3]
 80073ca:	372a      	.short	0x372a
 80073cc:	5535      	.short	0x5535
 80073ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80073d2:	441e      	add	r6, r3
 80073d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80073d8:	2b20      	cmp	r3, #32
 80073da:	bfc1      	itttt	gt
 80073dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80073e0:	409f      	lslgt	r7, r3
 80073e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80073e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80073ea:	bfd6      	itet	le
 80073ec:	f1c3 0320 	rsble	r3, r3, #32
 80073f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80073f4:	fa04 f003 	lslle.w	r0, r4, r3
 80073f8:	f7f9 f8a4 	bl	8000544 <__aeabi_ui2d>
 80073fc:	2201      	movs	r2, #1
 80073fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007402:	3e01      	subs	r6, #1
 8007404:	9214      	str	r2, [sp, #80]	@ 0x50
 8007406:	e777      	b.n	80072f8 <_dtoa_r+0x100>
 8007408:	2301      	movs	r3, #1
 800740a:	e7b8      	b.n	800737e <_dtoa_r+0x186>
 800740c:	9012      	str	r0, [sp, #72]	@ 0x48
 800740e:	e7b7      	b.n	8007380 <_dtoa_r+0x188>
 8007410:	427b      	negs	r3, r7
 8007412:	930a      	str	r3, [sp, #40]	@ 0x28
 8007414:	2300      	movs	r3, #0
 8007416:	eba8 0807 	sub.w	r8, r8, r7
 800741a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800741c:	e7c4      	b.n	80073a8 <_dtoa_r+0x1b0>
 800741e:	2300      	movs	r3, #0
 8007420:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007424:	2b00      	cmp	r3, #0
 8007426:	dc35      	bgt.n	8007494 <_dtoa_r+0x29c>
 8007428:	2301      	movs	r3, #1
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	9307      	str	r3, [sp, #28]
 800742e:	461a      	mov	r2, r3
 8007430:	920e      	str	r2, [sp, #56]	@ 0x38
 8007432:	e00b      	b.n	800744c <_dtoa_r+0x254>
 8007434:	2301      	movs	r3, #1
 8007436:	e7f3      	b.n	8007420 <_dtoa_r+0x228>
 8007438:	2300      	movs	r3, #0
 800743a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800743c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800743e:	18fb      	adds	r3, r7, r3
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	3301      	adds	r3, #1
 8007444:	2b01      	cmp	r3, #1
 8007446:	9307      	str	r3, [sp, #28]
 8007448:	bfb8      	it	lt
 800744a:	2301      	movlt	r3, #1
 800744c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007450:	2100      	movs	r1, #0
 8007452:	2204      	movs	r2, #4
 8007454:	f102 0514 	add.w	r5, r2, #20
 8007458:	429d      	cmp	r5, r3
 800745a:	d91f      	bls.n	800749c <_dtoa_r+0x2a4>
 800745c:	6041      	str	r1, [r0, #4]
 800745e:	4658      	mov	r0, fp
 8007460:	f000 fd8e 	bl	8007f80 <_Balloc>
 8007464:	4682      	mov	sl, r0
 8007466:	2800      	cmp	r0, #0
 8007468:	d13c      	bne.n	80074e4 <_dtoa_r+0x2ec>
 800746a:	4b1b      	ldr	r3, [pc, #108]	@ (80074d8 <_dtoa_r+0x2e0>)
 800746c:	4602      	mov	r2, r0
 800746e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007472:	e6d8      	b.n	8007226 <_dtoa_r+0x2e>
 8007474:	2301      	movs	r3, #1
 8007476:	e7e0      	b.n	800743a <_dtoa_r+0x242>
 8007478:	2401      	movs	r4, #1
 800747a:	2300      	movs	r3, #0
 800747c:	9309      	str	r3, [sp, #36]	@ 0x24
 800747e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007480:	f04f 33ff 	mov.w	r3, #4294967295
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	9307      	str	r3, [sp, #28]
 8007488:	2200      	movs	r2, #0
 800748a:	2312      	movs	r3, #18
 800748c:	e7d0      	b.n	8007430 <_dtoa_r+0x238>
 800748e:	2301      	movs	r3, #1
 8007490:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007492:	e7f5      	b.n	8007480 <_dtoa_r+0x288>
 8007494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	9307      	str	r3, [sp, #28]
 800749a:	e7d7      	b.n	800744c <_dtoa_r+0x254>
 800749c:	3101      	adds	r1, #1
 800749e:	0052      	lsls	r2, r2, #1
 80074a0:	e7d8      	b.n	8007454 <_dtoa_r+0x25c>
 80074a2:	bf00      	nop
 80074a4:	f3af 8000 	nop.w
 80074a8:	636f4361 	.word	0x636f4361
 80074ac:	3fd287a7 	.word	0x3fd287a7
 80074b0:	8b60c8b3 	.word	0x8b60c8b3
 80074b4:	3fc68a28 	.word	0x3fc68a28
 80074b8:	509f79fb 	.word	0x509f79fb
 80074bc:	3fd34413 	.word	0x3fd34413
 80074c0:	08009762 	.word	0x08009762
 80074c4:	08009779 	.word	0x08009779
 80074c8:	7ff00000 	.word	0x7ff00000
 80074cc:	08009732 	.word	0x08009732
 80074d0:	3ff80000 	.word	0x3ff80000
 80074d4:	08009870 	.word	0x08009870
 80074d8:	080097d1 	.word	0x080097d1
 80074dc:	0800975e 	.word	0x0800975e
 80074e0:	08009731 	.word	0x08009731
 80074e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80074e8:	6018      	str	r0, [r3, #0]
 80074ea:	9b07      	ldr	r3, [sp, #28]
 80074ec:	2b0e      	cmp	r3, #14
 80074ee:	f200 80a4 	bhi.w	800763a <_dtoa_r+0x442>
 80074f2:	2c00      	cmp	r4, #0
 80074f4:	f000 80a1 	beq.w	800763a <_dtoa_r+0x442>
 80074f8:	2f00      	cmp	r7, #0
 80074fa:	dd33      	ble.n	8007564 <_dtoa_r+0x36c>
 80074fc:	4bad      	ldr	r3, [pc, #692]	@ (80077b4 <_dtoa_r+0x5bc>)
 80074fe:	f007 020f 	and.w	r2, r7, #15
 8007502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007506:	ed93 7b00 	vldr	d7, [r3]
 800750a:	05f8      	lsls	r0, r7, #23
 800750c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007510:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007514:	d516      	bpl.n	8007544 <_dtoa_r+0x34c>
 8007516:	4ba8      	ldr	r3, [pc, #672]	@ (80077b8 <_dtoa_r+0x5c0>)
 8007518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800751c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007520:	f7f9 f9b4 	bl	800088c <__aeabi_ddiv>
 8007524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007528:	f004 040f 	and.w	r4, r4, #15
 800752c:	2603      	movs	r6, #3
 800752e:	4da2      	ldr	r5, [pc, #648]	@ (80077b8 <_dtoa_r+0x5c0>)
 8007530:	b954      	cbnz	r4, 8007548 <_dtoa_r+0x350>
 8007532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800753a:	f7f9 f9a7 	bl	800088c <__aeabi_ddiv>
 800753e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007542:	e028      	b.n	8007596 <_dtoa_r+0x39e>
 8007544:	2602      	movs	r6, #2
 8007546:	e7f2      	b.n	800752e <_dtoa_r+0x336>
 8007548:	07e1      	lsls	r1, r4, #31
 800754a:	d508      	bpl.n	800755e <_dtoa_r+0x366>
 800754c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007550:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007554:	f7f9 f870 	bl	8000638 <__aeabi_dmul>
 8007558:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800755c:	3601      	adds	r6, #1
 800755e:	1064      	asrs	r4, r4, #1
 8007560:	3508      	adds	r5, #8
 8007562:	e7e5      	b.n	8007530 <_dtoa_r+0x338>
 8007564:	f000 80d2 	beq.w	800770c <_dtoa_r+0x514>
 8007568:	427c      	negs	r4, r7
 800756a:	4b92      	ldr	r3, [pc, #584]	@ (80077b4 <_dtoa_r+0x5bc>)
 800756c:	4d92      	ldr	r5, [pc, #584]	@ (80077b8 <_dtoa_r+0x5c0>)
 800756e:	f004 020f 	and.w	r2, r4, #15
 8007572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800757e:	f7f9 f85b 	bl	8000638 <__aeabi_dmul>
 8007582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007586:	1124      	asrs	r4, r4, #4
 8007588:	2300      	movs	r3, #0
 800758a:	2602      	movs	r6, #2
 800758c:	2c00      	cmp	r4, #0
 800758e:	f040 80b2 	bne.w	80076f6 <_dtoa_r+0x4fe>
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1d3      	bne.n	800753e <_dtoa_r+0x346>
 8007596:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007598:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80b7 	beq.w	8007710 <_dtoa_r+0x518>
 80075a2:	4b86      	ldr	r3, [pc, #536]	@ (80077bc <_dtoa_r+0x5c4>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	4620      	mov	r0, r4
 80075a8:	4629      	mov	r1, r5
 80075aa:	f7f9 fab7 	bl	8000b1c <__aeabi_dcmplt>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	f000 80ae 	beq.w	8007710 <_dtoa_r+0x518>
 80075b4:	9b07      	ldr	r3, [sp, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 80aa 	beq.w	8007710 <_dtoa_r+0x518>
 80075bc:	9b00      	ldr	r3, [sp, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	dd37      	ble.n	8007632 <_dtoa_r+0x43a>
 80075c2:	1e7b      	subs	r3, r7, #1
 80075c4:	9304      	str	r3, [sp, #16]
 80075c6:	4620      	mov	r0, r4
 80075c8:	4b7d      	ldr	r3, [pc, #500]	@ (80077c0 <_dtoa_r+0x5c8>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	4629      	mov	r1, r5
 80075ce:	f7f9 f833 	bl	8000638 <__aeabi_dmul>
 80075d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075d6:	9c00      	ldr	r4, [sp, #0]
 80075d8:	3601      	adds	r6, #1
 80075da:	4630      	mov	r0, r6
 80075dc:	f7f8 ffc2 	bl	8000564 <__aeabi_i2d>
 80075e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075e4:	f7f9 f828 	bl	8000638 <__aeabi_dmul>
 80075e8:	4b76      	ldr	r3, [pc, #472]	@ (80077c4 <_dtoa_r+0x5cc>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	f7f8 fe6e 	bl	80002cc <__adddf3>
 80075f0:	4605      	mov	r5, r0
 80075f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80075f6:	2c00      	cmp	r4, #0
 80075f8:	f040 808d 	bne.w	8007716 <_dtoa_r+0x51e>
 80075fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007600:	4b71      	ldr	r3, [pc, #452]	@ (80077c8 <_dtoa_r+0x5d0>)
 8007602:	2200      	movs	r2, #0
 8007604:	f7f8 fe60 	bl	80002c8 <__aeabi_dsub>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007610:	462a      	mov	r2, r5
 8007612:	4633      	mov	r3, r6
 8007614:	f7f9 faa0 	bl	8000b58 <__aeabi_dcmpgt>
 8007618:	2800      	cmp	r0, #0
 800761a:	f040 828b 	bne.w	8007b34 <_dtoa_r+0x93c>
 800761e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007622:	462a      	mov	r2, r5
 8007624:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007628:	f7f9 fa78 	bl	8000b1c <__aeabi_dcmplt>
 800762c:	2800      	cmp	r0, #0
 800762e:	f040 8128 	bne.w	8007882 <_dtoa_r+0x68a>
 8007632:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007636:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800763a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800763c:	2b00      	cmp	r3, #0
 800763e:	f2c0 815a 	blt.w	80078f6 <_dtoa_r+0x6fe>
 8007642:	2f0e      	cmp	r7, #14
 8007644:	f300 8157 	bgt.w	80078f6 <_dtoa_r+0x6fe>
 8007648:	4b5a      	ldr	r3, [pc, #360]	@ (80077b4 <_dtoa_r+0x5bc>)
 800764a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800764e:	ed93 7b00 	vldr	d7, [r3]
 8007652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007654:	2b00      	cmp	r3, #0
 8007656:	ed8d 7b00 	vstr	d7, [sp]
 800765a:	da03      	bge.n	8007664 <_dtoa_r+0x46c>
 800765c:	9b07      	ldr	r3, [sp, #28]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f340 8101 	ble.w	8007866 <_dtoa_r+0x66e>
 8007664:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007668:	4656      	mov	r6, sl
 800766a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800766e:	4620      	mov	r0, r4
 8007670:	4629      	mov	r1, r5
 8007672:	f7f9 f90b 	bl	800088c <__aeabi_ddiv>
 8007676:	f7f9 fa8f 	bl	8000b98 <__aeabi_d2iz>
 800767a:	4680      	mov	r8, r0
 800767c:	f7f8 ff72 	bl	8000564 <__aeabi_i2d>
 8007680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007684:	f7f8 ffd8 	bl	8000638 <__aeabi_dmul>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4620      	mov	r0, r4
 800768e:	4629      	mov	r1, r5
 8007690:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007694:	f7f8 fe18 	bl	80002c8 <__aeabi_dsub>
 8007698:	f806 4b01 	strb.w	r4, [r6], #1
 800769c:	9d07      	ldr	r5, [sp, #28]
 800769e:	eba6 040a 	sub.w	r4, r6, sl
 80076a2:	42a5      	cmp	r5, r4
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	f040 8117 	bne.w	80078da <_dtoa_r+0x6e2>
 80076ac:	f7f8 fe0e 	bl	80002cc <__adddf3>
 80076b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076b4:	4604      	mov	r4, r0
 80076b6:	460d      	mov	r5, r1
 80076b8:	f7f9 fa4e 	bl	8000b58 <__aeabi_dcmpgt>
 80076bc:	2800      	cmp	r0, #0
 80076be:	f040 80f9 	bne.w	80078b4 <_dtoa_r+0x6bc>
 80076c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076c6:	4620      	mov	r0, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	f7f9 fa1d 	bl	8000b08 <__aeabi_dcmpeq>
 80076ce:	b118      	cbz	r0, 80076d8 <_dtoa_r+0x4e0>
 80076d0:	f018 0f01 	tst.w	r8, #1
 80076d4:	f040 80ee 	bne.w	80078b4 <_dtoa_r+0x6bc>
 80076d8:	4649      	mov	r1, r9
 80076da:	4658      	mov	r0, fp
 80076dc:	f000 fc90 	bl	8008000 <_Bfree>
 80076e0:	2300      	movs	r3, #0
 80076e2:	7033      	strb	r3, [r6, #0]
 80076e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076e6:	3701      	adds	r7, #1
 80076e8:	601f      	str	r7, [r3, #0]
 80076ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 831d 	beq.w	8007d2c <_dtoa_r+0xb34>
 80076f2:	601e      	str	r6, [r3, #0]
 80076f4:	e31a      	b.n	8007d2c <_dtoa_r+0xb34>
 80076f6:	07e2      	lsls	r2, r4, #31
 80076f8:	d505      	bpl.n	8007706 <_dtoa_r+0x50e>
 80076fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076fe:	f7f8 ff9b 	bl	8000638 <__aeabi_dmul>
 8007702:	3601      	adds	r6, #1
 8007704:	2301      	movs	r3, #1
 8007706:	1064      	asrs	r4, r4, #1
 8007708:	3508      	adds	r5, #8
 800770a:	e73f      	b.n	800758c <_dtoa_r+0x394>
 800770c:	2602      	movs	r6, #2
 800770e:	e742      	b.n	8007596 <_dtoa_r+0x39e>
 8007710:	9c07      	ldr	r4, [sp, #28]
 8007712:	9704      	str	r7, [sp, #16]
 8007714:	e761      	b.n	80075da <_dtoa_r+0x3e2>
 8007716:	4b27      	ldr	r3, [pc, #156]	@ (80077b4 <_dtoa_r+0x5bc>)
 8007718:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800771a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800771e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007722:	4454      	add	r4, sl
 8007724:	2900      	cmp	r1, #0
 8007726:	d053      	beq.n	80077d0 <_dtoa_r+0x5d8>
 8007728:	4928      	ldr	r1, [pc, #160]	@ (80077cc <_dtoa_r+0x5d4>)
 800772a:	2000      	movs	r0, #0
 800772c:	f7f9 f8ae 	bl	800088c <__aeabi_ddiv>
 8007730:	4633      	mov	r3, r6
 8007732:	462a      	mov	r2, r5
 8007734:	f7f8 fdc8 	bl	80002c8 <__aeabi_dsub>
 8007738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800773c:	4656      	mov	r6, sl
 800773e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007742:	f7f9 fa29 	bl	8000b98 <__aeabi_d2iz>
 8007746:	4605      	mov	r5, r0
 8007748:	f7f8 ff0c 	bl	8000564 <__aeabi_i2d>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007754:	f7f8 fdb8 	bl	80002c8 <__aeabi_dsub>
 8007758:	3530      	adds	r5, #48	@ 0x30
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007762:	f806 5b01 	strb.w	r5, [r6], #1
 8007766:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800776a:	f7f9 f9d7 	bl	8000b1c <__aeabi_dcmplt>
 800776e:	2800      	cmp	r0, #0
 8007770:	d171      	bne.n	8007856 <_dtoa_r+0x65e>
 8007772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007776:	4911      	ldr	r1, [pc, #68]	@ (80077bc <_dtoa_r+0x5c4>)
 8007778:	2000      	movs	r0, #0
 800777a:	f7f8 fda5 	bl	80002c8 <__aeabi_dsub>
 800777e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007782:	f7f9 f9cb 	bl	8000b1c <__aeabi_dcmplt>
 8007786:	2800      	cmp	r0, #0
 8007788:	f040 8095 	bne.w	80078b6 <_dtoa_r+0x6be>
 800778c:	42a6      	cmp	r6, r4
 800778e:	f43f af50 	beq.w	8007632 <_dtoa_r+0x43a>
 8007792:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007796:	4b0a      	ldr	r3, [pc, #40]	@ (80077c0 <_dtoa_r+0x5c8>)
 8007798:	2200      	movs	r2, #0
 800779a:	f7f8 ff4d 	bl	8000638 <__aeabi_dmul>
 800779e:	4b08      	ldr	r3, [pc, #32]	@ (80077c0 <_dtoa_r+0x5c8>)
 80077a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077a4:	2200      	movs	r2, #0
 80077a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077aa:	f7f8 ff45 	bl	8000638 <__aeabi_dmul>
 80077ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b2:	e7c4      	b.n	800773e <_dtoa_r+0x546>
 80077b4:	08009870 	.word	0x08009870
 80077b8:	08009848 	.word	0x08009848
 80077bc:	3ff00000 	.word	0x3ff00000
 80077c0:	40240000 	.word	0x40240000
 80077c4:	401c0000 	.word	0x401c0000
 80077c8:	40140000 	.word	0x40140000
 80077cc:	3fe00000 	.word	0x3fe00000
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	f7f8 ff30 	bl	8000638 <__aeabi_dmul>
 80077d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80077de:	4656      	mov	r6, sl
 80077e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e4:	f7f9 f9d8 	bl	8000b98 <__aeabi_d2iz>
 80077e8:	4605      	mov	r5, r0
 80077ea:	f7f8 febb 	bl	8000564 <__aeabi_i2d>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f6:	f7f8 fd67 	bl	80002c8 <__aeabi_dsub>
 80077fa:	3530      	adds	r5, #48	@ 0x30
 80077fc:	f806 5b01 	strb.w	r5, [r6], #1
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	42a6      	cmp	r6, r4
 8007806:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	d124      	bne.n	800785a <_dtoa_r+0x662>
 8007810:	4bac      	ldr	r3, [pc, #688]	@ (8007ac4 <_dtoa_r+0x8cc>)
 8007812:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007816:	f7f8 fd59 	bl	80002cc <__adddf3>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007822:	f7f9 f999 	bl	8000b58 <__aeabi_dcmpgt>
 8007826:	2800      	cmp	r0, #0
 8007828:	d145      	bne.n	80078b6 <_dtoa_r+0x6be>
 800782a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800782e:	49a5      	ldr	r1, [pc, #660]	@ (8007ac4 <_dtoa_r+0x8cc>)
 8007830:	2000      	movs	r0, #0
 8007832:	f7f8 fd49 	bl	80002c8 <__aeabi_dsub>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800783e:	f7f9 f96d 	bl	8000b1c <__aeabi_dcmplt>
 8007842:	2800      	cmp	r0, #0
 8007844:	f43f aef5 	beq.w	8007632 <_dtoa_r+0x43a>
 8007848:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800784a:	1e73      	subs	r3, r6, #1
 800784c:	9315      	str	r3, [sp, #84]	@ 0x54
 800784e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007852:	2b30      	cmp	r3, #48	@ 0x30
 8007854:	d0f8      	beq.n	8007848 <_dtoa_r+0x650>
 8007856:	9f04      	ldr	r7, [sp, #16]
 8007858:	e73e      	b.n	80076d8 <_dtoa_r+0x4e0>
 800785a:	4b9b      	ldr	r3, [pc, #620]	@ (8007ac8 <_dtoa_r+0x8d0>)
 800785c:	f7f8 feec 	bl	8000638 <__aeabi_dmul>
 8007860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007864:	e7bc      	b.n	80077e0 <_dtoa_r+0x5e8>
 8007866:	d10c      	bne.n	8007882 <_dtoa_r+0x68a>
 8007868:	4b98      	ldr	r3, [pc, #608]	@ (8007acc <_dtoa_r+0x8d4>)
 800786a:	2200      	movs	r2, #0
 800786c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007870:	f7f8 fee2 	bl	8000638 <__aeabi_dmul>
 8007874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007878:	f7f9 f964 	bl	8000b44 <__aeabi_dcmpge>
 800787c:	2800      	cmp	r0, #0
 800787e:	f000 8157 	beq.w	8007b30 <_dtoa_r+0x938>
 8007882:	2400      	movs	r4, #0
 8007884:	4625      	mov	r5, r4
 8007886:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007888:	43db      	mvns	r3, r3
 800788a:	9304      	str	r3, [sp, #16]
 800788c:	4656      	mov	r6, sl
 800788e:	2700      	movs	r7, #0
 8007890:	4621      	mov	r1, r4
 8007892:	4658      	mov	r0, fp
 8007894:	f000 fbb4 	bl	8008000 <_Bfree>
 8007898:	2d00      	cmp	r5, #0
 800789a:	d0dc      	beq.n	8007856 <_dtoa_r+0x65e>
 800789c:	b12f      	cbz	r7, 80078aa <_dtoa_r+0x6b2>
 800789e:	42af      	cmp	r7, r5
 80078a0:	d003      	beq.n	80078aa <_dtoa_r+0x6b2>
 80078a2:	4639      	mov	r1, r7
 80078a4:	4658      	mov	r0, fp
 80078a6:	f000 fbab 	bl	8008000 <_Bfree>
 80078aa:	4629      	mov	r1, r5
 80078ac:	4658      	mov	r0, fp
 80078ae:	f000 fba7 	bl	8008000 <_Bfree>
 80078b2:	e7d0      	b.n	8007856 <_dtoa_r+0x65e>
 80078b4:	9704      	str	r7, [sp, #16]
 80078b6:	4633      	mov	r3, r6
 80078b8:	461e      	mov	r6, r3
 80078ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078be:	2a39      	cmp	r2, #57	@ 0x39
 80078c0:	d107      	bne.n	80078d2 <_dtoa_r+0x6da>
 80078c2:	459a      	cmp	sl, r3
 80078c4:	d1f8      	bne.n	80078b8 <_dtoa_r+0x6c0>
 80078c6:	9a04      	ldr	r2, [sp, #16]
 80078c8:	3201      	adds	r2, #1
 80078ca:	9204      	str	r2, [sp, #16]
 80078cc:	2230      	movs	r2, #48	@ 0x30
 80078ce:	f88a 2000 	strb.w	r2, [sl]
 80078d2:	781a      	ldrb	r2, [r3, #0]
 80078d4:	3201      	adds	r2, #1
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	e7bd      	b.n	8007856 <_dtoa_r+0x65e>
 80078da:	4b7b      	ldr	r3, [pc, #492]	@ (8007ac8 <_dtoa_r+0x8d0>)
 80078dc:	2200      	movs	r2, #0
 80078de:	f7f8 feab 	bl	8000638 <__aeabi_dmul>
 80078e2:	2200      	movs	r2, #0
 80078e4:	2300      	movs	r3, #0
 80078e6:	4604      	mov	r4, r0
 80078e8:	460d      	mov	r5, r1
 80078ea:	f7f9 f90d 	bl	8000b08 <__aeabi_dcmpeq>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	f43f aebb 	beq.w	800766a <_dtoa_r+0x472>
 80078f4:	e6f0      	b.n	80076d8 <_dtoa_r+0x4e0>
 80078f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078f8:	2a00      	cmp	r2, #0
 80078fa:	f000 80db 	beq.w	8007ab4 <_dtoa_r+0x8bc>
 80078fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007900:	2a01      	cmp	r2, #1
 8007902:	f300 80bf 	bgt.w	8007a84 <_dtoa_r+0x88c>
 8007906:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007908:	2a00      	cmp	r2, #0
 800790a:	f000 80b7 	beq.w	8007a7c <_dtoa_r+0x884>
 800790e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007912:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007914:	4646      	mov	r6, r8
 8007916:	9a08      	ldr	r2, [sp, #32]
 8007918:	2101      	movs	r1, #1
 800791a:	441a      	add	r2, r3
 800791c:	4658      	mov	r0, fp
 800791e:	4498      	add	r8, r3
 8007920:	9208      	str	r2, [sp, #32]
 8007922:	f000 fc21 	bl	8008168 <__i2b>
 8007926:	4605      	mov	r5, r0
 8007928:	b15e      	cbz	r6, 8007942 <_dtoa_r+0x74a>
 800792a:	9b08      	ldr	r3, [sp, #32]
 800792c:	2b00      	cmp	r3, #0
 800792e:	dd08      	ble.n	8007942 <_dtoa_r+0x74a>
 8007930:	42b3      	cmp	r3, r6
 8007932:	9a08      	ldr	r2, [sp, #32]
 8007934:	bfa8      	it	ge
 8007936:	4633      	movge	r3, r6
 8007938:	eba8 0803 	sub.w	r8, r8, r3
 800793c:	1af6      	subs	r6, r6, r3
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	9308      	str	r3, [sp, #32]
 8007942:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007944:	b1f3      	cbz	r3, 8007984 <_dtoa_r+0x78c>
 8007946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 80b7 	beq.w	8007abc <_dtoa_r+0x8c4>
 800794e:	b18c      	cbz	r4, 8007974 <_dtoa_r+0x77c>
 8007950:	4629      	mov	r1, r5
 8007952:	4622      	mov	r2, r4
 8007954:	4658      	mov	r0, fp
 8007956:	f000 fcc7 	bl	80082e8 <__pow5mult>
 800795a:	464a      	mov	r2, r9
 800795c:	4601      	mov	r1, r0
 800795e:	4605      	mov	r5, r0
 8007960:	4658      	mov	r0, fp
 8007962:	f000 fc17 	bl	8008194 <__multiply>
 8007966:	4649      	mov	r1, r9
 8007968:	9004      	str	r0, [sp, #16]
 800796a:	4658      	mov	r0, fp
 800796c:	f000 fb48 	bl	8008000 <_Bfree>
 8007970:	9b04      	ldr	r3, [sp, #16]
 8007972:	4699      	mov	r9, r3
 8007974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007976:	1b1a      	subs	r2, r3, r4
 8007978:	d004      	beq.n	8007984 <_dtoa_r+0x78c>
 800797a:	4649      	mov	r1, r9
 800797c:	4658      	mov	r0, fp
 800797e:	f000 fcb3 	bl	80082e8 <__pow5mult>
 8007982:	4681      	mov	r9, r0
 8007984:	2101      	movs	r1, #1
 8007986:	4658      	mov	r0, fp
 8007988:	f000 fbee 	bl	8008168 <__i2b>
 800798c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800798e:	4604      	mov	r4, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 81cf 	beq.w	8007d34 <_dtoa_r+0xb3c>
 8007996:	461a      	mov	r2, r3
 8007998:	4601      	mov	r1, r0
 800799a:	4658      	mov	r0, fp
 800799c:	f000 fca4 	bl	80082e8 <__pow5mult>
 80079a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	4604      	mov	r4, r0
 80079a6:	f300 8095 	bgt.w	8007ad4 <_dtoa_r+0x8dc>
 80079aa:	9b02      	ldr	r3, [sp, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f040 8087 	bne.w	8007ac0 <_dtoa_r+0x8c8>
 80079b2:	9b03      	ldr	r3, [sp, #12]
 80079b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f040 8089 	bne.w	8007ad0 <_dtoa_r+0x8d8>
 80079be:	9b03      	ldr	r3, [sp, #12]
 80079c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079c4:	0d1b      	lsrs	r3, r3, #20
 80079c6:	051b      	lsls	r3, r3, #20
 80079c8:	b12b      	cbz	r3, 80079d6 <_dtoa_r+0x7de>
 80079ca:	9b08      	ldr	r3, [sp, #32]
 80079cc:	3301      	adds	r3, #1
 80079ce:	9308      	str	r3, [sp, #32]
 80079d0:	f108 0801 	add.w	r8, r8, #1
 80079d4:	2301      	movs	r3, #1
 80079d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 81b0 	beq.w	8007d40 <_dtoa_r+0xb48>
 80079e0:	6923      	ldr	r3, [r4, #16]
 80079e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079e6:	6918      	ldr	r0, [r3, #16]
 80079e8:	f000 fb72 	bl	80080d0 <__hi0bits>
 80079ec:	f1c0 0020 	rsb	r0, r0, #32
 80079f0:	9b08      	ldr	r3, [sp, #32]
 80079f2:	4418      	add	r0, r3
 80079f4:	f010 001f 	ands.w	r0, r0, #31
 80079f8:	d077      	beq.n	8007aea <_dtoa_r+0x8f2>
 80079fa:	f1c0 0320 	rsb	r3, r0, #32
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	dd6b      	ble.n	8007ada <_dtoa_r+0x8e2>
 8007a02:	9b08      	ldr	r3, [sp, #32]
 8007a04:	f1c0 001c 	rsb	r0, r0, #28
 8007a08:	4403      	add	r3, r0
 8007a0a:	4480      	add	r8, r0
 8007a0c:	4406      	add	r6, r0
 8007a0e:	9308      	str	r3, [sp, #32]
 8007a10:	f1b8 0f00 	cmp.w	r8, #0
 8007a14:	dd05      	ble.n	8007a22 <_dtoa_r+0x82a>
 8007a16:	4649      	mov	r1, r9
 8007a18:	4642      	mov	r2, r8
 8007a1a:	4658      	mov	r0, fp
 8007a1c:	f000 fcbe 	bl	800839c <__lshift>
 8007a20:	4681      	mov	r9, r0
 8007a22:	9b08      	ldr	r3, [sp, #32]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	dd05      	ble.n	8007a34 <_dtoa_r+0x83c>
 8007a28:	4621      	mov	r1, r4
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	4658      	mov	r0, fp
 8007a2e:	f000 fcb5 	bl	800839c <__lshift>
 8007a32:	4604      	mov	r4, r0
 8007a34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d059      	beq.n	8007aee <_dtoa_r+0x8f6>
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	4648      	mov	r0, r9
 8007a3e:	f000 fd19 	bl	8008474 <__mcmp>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	da53      	bge.n	8007aee <_dtoa_r+0x8f6>
 8007a46:	1e7b      	subs	r3, r7, #1
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	220a      	movs	r2, #10
 8007a50:	4658      	mov	r0, fp
 8007a52:	f000 faf7 	bl	8008044 <__multadd>
 8007a56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a58:	4681      	mov	r9, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 8172 	beq.w	8007d44 <_dtoa_r+0xb4c>
 8007a60:	2300      	movs	r3, #0
 8007a62:	4629      	mov	r1, r5
 8007a64:	220a      	movs	r2, #10
 8007a66:	4658      	mov	r0, fp
 8007a68:	f000 faec 	bl	8008044 <__multadd>
 8007a6c:	9b00      	ldr	r3, [sp, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	4605      	mov	r5, r0
 8007a72:	dc67      	bgt.n	8007b44 <_dtoa_r+0x94c>
 8007a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	dc41      	bgt.n	8007afe <_dtoa_r+0x906>
 8007a7a:	e063      	b.n	8007b44 <_dtoa_r+0x94c>
 8007a7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a82:	e746      	b.n	8007912 <_dtoa_r+0x71a>
 8007a84:	9b07      	ldr	r3, [sp, #28]
 8007a86:	1e5c      	subs	r4, r3, #1
 8007a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a8a:	42a3      	cmp	r3, r4
 8007a8c:	bfbf      	itttt	lt
 8007a8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007a90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007a92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007a94:	1ae3      	sublt	r3, r4, r3
 8007a96:	bfb4      	ite	lt
 8007a98:	18d2      	addlt	r2, r2, r3
 8007a9a:	1b1c      	subge	r4, r3, r4
 8007a9c:	9b07      	ldr	r3, [sp, #28]
 8007a9e:	bfbc      	itt	lt
 8007aa0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007aa2:	2400      	movlt	r4, #0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	bfb5      	itete	lt
 8007aa8:	eba8 0603 	sublt.w	r6, r8, r3
 8007aac:	9b07      	ldrge	r3, [sp, #28]
 8007aae:	2300      	movlt	r3, #0
 8007ab0:	4646      	movge	r6, r8
 8007ab2:	e730      	b.n	8007916 <_dtoa_r+0x71e>
 8007ab4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ab6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ab8:	4646      	mov	r6, r8
 8007aba:	e735      	b.n	8007928 <_dtoa_r+0x730>
 8007abc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007abe:	e75c      	b.n	800797a <_dtoa_r+0x782>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e788      	b.n	80079d6 <_dtoa_r+0x7de>
 8007ac4:	3fe00000 	.word	0x3fe00000
 8007ac8:	40240000 	.word	0x40240000
 8007acc:	40140000 	.word	0x40140000
 8007ad0:	9b02      	ldr	r3, [sp, #8]
 8007ad2:	e780      	b.n	80079d6 <_dtoa_r+0x7de>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ad8:	e782      	b.n	80079e0 <_dtoa_r+0x7e8>
 8007ada:	d099      	beq.n	8007a10 <_dtoa_r+0x818>
 8007adc:	9a08      	ldr	r2, [sp, #32]
 8007ade:	331c      	adds	r3, #28
 8007ae0:	441a      	add	r2, r3
 8007ae2:	4498      	add	r8, r3
 8007ae4:	441e      	add	r6, r3
 8007ae6:	9208      	str	r2, [sp, #32]
 8007ae8:	e792      	b.n	8007a10 <_dtoa_r+0x818>
 8007aea:	4603      	mov	r3, r0
 8007aec:	e7f6      	b.n	8007adc <_dtoa_r+0x8e4>
 8007aee:	9b07      	ldr	r3, [sp, #28]
 8007af0:	9704      	str	r7, [sp, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	dc20      	bgt.n	8007b38 <_dtoa_r+0x940>
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	dd1e      	ble.n	8007b3c <_dtoa_r+0x944>
 8007afe:	9b00      	ldr	r3, [sp, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f47f aec0 	bne.w	8007886 <_dtoa_r+0x68e>
 8007b06:	4621      	mov	r1, r4
 8007b08:	2205      	movs	r2, #5
 8007b0a:	4658      	mov	r0, fp
 8007b0c:	f000 fa9a 	bl	8008044 <__multadd>
 8007b10:	4601      	mov	r1, r0
 8007b12:	4604      	mov	r4, r0
 8007b14:	4648      	mov	r0, r9
 8007b16:	f000 fcad 	bl	8008474 <__mcmp>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	f77f aeb3 	ble.w	8007886 <_dtoa_r+0x68e>
 8007b20:	4656      	mov	r6, sl
 8007b22:	2331      	movs	r3, #49	@ 0x31
 8007b24:	f806 3b01 	strb.w	r3, [r6], #1
 8007b28:	9b04      	ldr	r3, [sp, #16]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	e6ae      	b.n	800788e <_dtoa_r+0x696>
 8007b30:	9c07      	ldr	r4, [sp, #28]
 8007b32:	9704      	str	r7, [sp, #16]
 8007b34:	4625      	mov	r5, r4
 8007b36:	e7f3      	b.n	8007b20 <_dtoa_r+0x928>
 8007b38:	9b07      	ldr	r3, [sp, #28]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 8104 	beq.w	8007d4c <_dtoa_r+0xb54>
 8007b44:	2e00      	cmp	r6, #0
 8007b46:	dd05      	ble.n	8007b54 <_dtoa_r+0x95c>
 8007b48:	4629      	mov	r1, r5
 8007b4a:	4632      	mov	r2, r6
 8007b4c:	4658      	mov	r0, fp
 8007b4e:	f000 fc25 	bl	800839c <__lshift>
 8007b52:	4605      	mov	r5, r0
 8007b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d05a      	beq.n	8007c10 <_dtoa_r+0xa18>
 8007b5a:	6869      	ldr	r1, [r5, #4]
 8007b5c:	4658      	mov	r0, fp
 8007b5e:	f000 fa0f 	bl	8007f80 <_Balloc>
 8007b62:	4606      	mov	r6, r0
 8007b64:	b928      	cbnz	r0, 8007b72 <_dtoa_r+0x97a>
 8007b66:	4b84      	ldr	r3, [pc, #528]	@ (8007d78 <_dtoa_r+0xb80>)
 8007b68:	4602      	mov	r2, r0
 8007b6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b6e:	f7ff bb5a 	b.w	8007226 <_dtoa_r+0x2e>
 8007b72:	692a      	ldr	r2, [r5, #16]
 8007b74:	3202      	adds	r2, #2
 8007b76:	0092      	lsls	r2, r2, #2
 8007b78:	f105 010c 	add.w	r1, r5, #12
 8007b7c:	300c      	adds	r0, #12
 8007b7e:	f000 ffaf 	bl	8008ae0 <memcpy>
 8007b82:	2201      	movs	r2, #1
 8007b84:	4631      	mov	r1, r6
 8007b86:	4658      	mov	r0, fp
 8007b88:	f000 fc08 	bl	800839c <__lshift>
 8007b8c:	f10a 0301 	add.w	r3, sl, #1
 8007b90:	9307      	str	r3, [sp, #28]
 8007b92:	9b00      	ldr	r3, [sp, #0]
 8007b94:	4453      	add	r3, sl
 8007b96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b98:	9b02      	ldr	r3, [sp, #8]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	462f      	mov	r7, r5
 8007ba0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	9b07      	ldr	r3, [sp, #28]
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	4648      	mov	r0, r9
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	f7ff fa9a 	bl	80070e6 <quorem>
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	9002      	str	r0, [sp, #8]
 8007bb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007bba:	4648      	mov	r0, r9
 8007bbc:	f000 fc5a 	bl	8008474 <__mcmp>
 8007bc0:	462a      	mov	r2, r5
 8007bc2:	9008      	str	r0, [sp, #32]
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	4658      	mov	r0, fp
 8007bc8:	f000 fc70 	bl	80084ac <__mdiff>
 8007bcc:	68c2      	ldr	r2, [r0, #12]
 8007bce:	4606      	mov	r6, r0
 8007bd0:	bb02      	cbnz	r2, 8007c14 <_dtoa_r+0xa1c>
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	4648      	mov	r0, r9
 8007bd6:	f000 fc4d 	bl	8008474 <__mcmp>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	4631      	mov	r1, r6
 8007bde:	4658      	mov	r0, fp
 8007be0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007be2:	f000 fa0d 	bl	8008000 <_Bfree>
 8007be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007be8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bea:	9e07      	ldr	r6, [sp, #28]
 8007bec:	ea43 0102 	orr.w	r1, r3, r2
 8007bf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bf2:	4319      	orrs	r1, r3
 8007bf4:	d110      	bne.n	8007c18 <_dtoa_r+0xa20>
 8007bf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bfa:	d029      	beq.n	8007c50 <_dtoa_r+0xa58>
 8007bfc:	9b08      	ldr	r3, [sp, #32]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	dd02      	ble.n	8007c08 <_dtoa_r+0xa10>
 8007c02:	9b02      	ldr	r3, [sp, #8]
 8007c04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c08:	9b00      	ldr	r3, [sp, #0]
 8007c0a:	f883 8000 	strb.w	r8, [r3]
 8007c0e:	e63f      	b.n	8007890 <_dtoa_r+0x698>
 8007c10:	4628      	mov	r0, r5
 8007c12:	e7bb      	b.n	8007b8c <_dtoa_r+0x994>
 8007c14:	2201      	movs	r2, #1
 8007c16:	e7e1      	b.n	8007bdc <_dtoa_r+0x9e4>
 8007c18:	9b08      	ldr	r3, [sp, #32]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	db04      	blt.n	8007c28 <_dtoa_r+0xa30>
 8007c1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c20:	430b      	orrs	r3, r1
 8007c22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c24:	430b      	orrs	r3, r1
 8007c26:	d120      	bne.n	8007c6a <_dtoa_r+0xa72>
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	dded      	ble.n	8007c08 <_dtoa_r+0xa10>
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	2201      	movs	r2, #1
 8007c30:	4658      	mov	r0, fp
 8007c32:	f000 fbb3 	bl	800839c <__lshift>
 8007c36:	4621      	mov	r1, r4
 8007c38:	4681      	mov	r9, r0
 8007c3a:	f000 fc1b 	bl	8008474 <__mcmp>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	dc03      	bgt.n	8007c4a <_dtoa_r+0xa52>
 8007c42:	d1e1      	bne.n	8007c08 <_dtoa_r+0xa10>
 8007c44:	f018 0f01 	tst.w	r8, #1
 8007c48:	d0de      	beq.n	8007c08 <_dtoa_r+0xa10>
 8007c4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c4e:	d1d8      	bne.n	8007c02 <_dtoa_r+0xa0a>
 8007c50:	9a00      	ldr	r2, [sp, #0]
 8007c52:	2339      	movs	r3, #57	@ 0x39
 8007c54:	7013      	strb	r3, [r2, #0]
 8007c56:	4633      	mov	r3, r6
 8007c58:	461e      	mov	r6, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c60:	2a39      	cmp	r2, #57	@ 0x39
 8007c62:	d052      	beq.n	8007d0a <_dtoa_r+0xb12>
 8007c64:	3201      	adds	r2, #1
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	e612      	b.n	8007890 <_dtoa_r+0x698>
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	dd07      	ble.n	8007c7e <_dtoa_r+0xa86>
 8007c6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c72:	d0ed      	beq.n	8007c50 <_dtoa_r+0xa58>
 8007c74:	9a00      	ldr	r2, [sp, #0]
 8007c76:	f108 0301 	add.w	r3, r8, #1
 8007c7a:	7013      	strb	r3, [r2, #0]
 8007c7c:	e608      	b.n	8007890 <_dtoa_r+0x698>
 8007c7e:	9b07      	ldr	r3, [sp, #28]
 8007c80:	9a07      	ldr	r2, [sp, #28]
 8007c82:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d028      	beq.n	8007cde <_dtoa_r+0xae6>
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	2300      	movs	r3, #0
 8007c90:	220a      	movs	r2, #10
 8007c92:	4658      	mov	r0, fp
 8007c94:	f000 f9d6 	bl	8008044 <__multadd>
 8007c98:	42af      	cmp	r7, r5
 8007c9a:	4681      	mov	r9, r0
 8007c9c:	f04f 0300 	mov.w	r3, #0
 8007ca0:	f04f 020a 	mov.w	r2, #10
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	4658      	mov	r0, fp
 8007ca8:	d107      	bne.n	8007cba <_dtoa_r+0xac2>
 8007caa:	f000 f9cb 	bl	8008044 <__multadd>
 8007cae:	4607      	mov	r7, r0
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	9b07      	ldr	r3, [sp, #28]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	9307      	str	r3, [sp, #28]
 8007cb8:	e774      	b.n	8007ba4 <_dtoa_r+0x9ac>
 8007cba:	f000 f9c3 	bl	8008044 <__multadd>
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	4658      	mov	r0, fp
 8007cc8:	f000 f9bc 	bl	8008044 <__multadd>
 8007ccc:	4605      	mov	r5, r0
 8007cce:	e7f0      	b.n	8007cb2 <_dtoa_r+0xaba>
 8007cd0:	9b00      	ldr	r3, [sp, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	bfcc      	ite	gt
 8007cd6:	461e      	movgt	r6, r3
 8007cd8:	2601      	movle	r6, #1
 8007cda:	4456      	add	r6, sl
 8007cdc:	2700      	movs	r7, #0
 8007cde:	4649      	mov	r1, r9
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	4658      	mov	r0, fp
 8007ce4:	f000 fb5a 	bl	800839c <__lshift>
 8007ce8:	4621      	mov	r1, r4
 8007cea:	4681      	mov	r9, r0
 8007cec:	f000 fbc2 	bl	8008474 <__mcmp>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	dcb0      	bgt.n	8007c56 <_dtoa_r+0xa5e>
 8007cf4:	d102      	bne.n	8007cfc <_dtoa_r+0xb04>
 8007cf6:	f018 0f01 	tst.w	r8, #1
 8007cfa:	d1ac      	bne.n	8007c56 <_dtoa_r+0xa5e>
 8007cfc:	4633      	mov	r3, r6
 8007cfe:	461e      	mov	r6, r3
 8007d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d04:	2a30      	cmp	r2, #48	@ 0x30
 8007d06:	d0fa      	beq.n	8007cfe <_dtoa_r+0xb06>
 8007d08:	e5c2      	b.n	8007890 <_dtoa_r+0x698>
 8007d0a:	459a      	cmp	sl, r3
 8007d0c:	d1a4      	bne.n	8007c58 <_dtoa_r+0xa60>
 8007d0e:	9b04      	ldr	r3, [sp, #16]
 8007d10:	3301      	adds	r3, #1
 8007d12:	9304      	str	r3, [sp, #16]
 8007d14:	2331      	movs	r3, #49	@ 0x31
 8007d16:	f88a 3000 	strb.w	r3, [sl]
 8007d1a:	e5b9      	b.n	8007890 <_dtoa_r+0x698>
 8007d1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007d7c <_dtoa_r+0xb84>
 8007d22:	b11b      	cbz	r3, 8007d2c <_dtoa_r+0xb34>
 8007d24:	f10a 0308 	add.w	r3, sl, #8
 8007d28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	4650      	mov	r0, sl
 8007d2e:	b019      	add	sp, #100	@ 0x64
 8007d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	f77f ae37 	ble.w	80079aa <_dtoa_r+0x7b2>
 8007d3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d40:	2001      	movs	r0, #1
 8007d42:	e655      	b.n	80079f0 <_dtoa_r+0x7f8>
 8007d44:	9b00      	ldr	r3, [sp, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f77f aed6 	ble.w	8007af8 <_dtoa_r+0x900>
 8007d4c:	4656      	mov	r6, sl
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4648      	mov	r0, r9
 8007d52:	f7ff f9c8 	bl	80070e6 <quorem>
 8007d56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d5a:	f806 8b01 	strb.w	r8, [r6], #1
 8007d5e:	9b00      	ldr	r3, [sp, #0]
 8007d60:	eba6 020a 	sub.w	r2, r6, sl
 8007d64:	4293      	cmp	r3, r2
 8007d66:	ddb3      	ble.n	8007cd0 <_dtoa_r+0xad8>
 8007d68:	4649      	mov	r1, r9
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	220a      	movs	r2, #10
 8007d6e:	4658      	mov	r0, fp
 8007d70:	f000 f968 	bl	8008044 <__multadd>
 8007d74:	4681      	mov	r9, r0
 8007d76:	e7ea      	b.n	8007d4e <_dtoa_r+0xb56>
 8007d78:	080097d1 	.word	0x080097d1
 8007d7c:	08009755 	.word	0x08009755

08007d80 <_free_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4605      	mov	r5, r0
 8007d84:	2900      	cmp	r1, #0
 8007d86:	d041      	beq.n	8007e0c <_free_r+0x8c>
 8007d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d8c:	1f0c      	subs	r4, r1, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bfb8      	it	lt
 8007d92:	18e4      	addlt	r4, r4, r3
 8007d94:	f000 f8e8 	bl	8007f68 <__malloc_lock>
 8007d98:	4a1d      	ldr	r2, [pc, #116]	@ (8007e10 <_free_r+0x90>)
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	b933      	cbnz	r3, 8007dac <_free_r+0x2c>
 8007d9e:	6063      	str	r3, [r4, #4]
 8007da0:	6014      	str	r4, [r2, #0]
 8007da2:	4628      	mov	r0, r5
 8007da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007da8:	f000 b8e4 	b.w	8007f74 <__malloc_unlock>
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	d908      	bls.n	8007dc2 <_free_r+0x42>
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	1821      	adds	r1, r4, r0
 8007db4:	428b      	cmp	r3, r1
 8007db6:	bf01      	itttt	eq
 8007db8:	6819      	ldreq	r1, [r3, #0]
 8007dba:	685b      	ldreq	r3, [r3, #4]
 8007dbc:	1809      	addeq	r1, r1, r0
 8007dbe:	6021      	streq	r1, [r4, #0]
 8007dc0:	e7ed      	b.n	8007d9e <_free_r+0x1e>
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	b10b      	cbz	r3, 8007dcc <_free_r+0x4c>
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	d9fa      	bls.n	8007dc2 <_free_r+0x42>
 8007dcc:	6811      	ldr	r1, [r2, #0]
 8007dce:	1850      	adds	r0, r2, r1
 8007dd0:	42a0      	cmp	r0, r4
 8007dd2:	d10b      	bne.n	8007dec <_free_r+0x6c>
 8007dd4:	6820      	ldr	r0, [r4, #0]
 8007dd6:	4401      	add	r1, r0
 8007dd8:	1850      	adds	r0, r2, r1
 8007dda:	4283      	cmp	r3, r0
 8007ddc:	6011      	str	r1, [r2, #0]
 8007dde:	d1e0      	bne.n	8007da2 <_free_r+0x22>
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	6053      	str	r3, [r2, #4]
 8007de6:	4408      	add	r0, r1
 8007de8:	6010      	str	r0, [r2, #0]
 8007dea:	e7da      	b.n	8007da2 <_free_r+0x22>
 8007dec:	d902      	bls.n	8007df4 <_free_r+0x74>
 8007dee:	230c      	movs	r3, #12
 8007df0:	602b      	str	r3, [r5, #0]
 8007df2:	e7d6      	b.n	8007da2 <_free_r+0x22>
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	1821      	adds	r1, r4, r0
 8007df8:	428b      	cmp	r3, r1
 8007dfa:	bf04      	itt	eq
 8007dfc:	6819      	ldreq	r1, [r3, #0]
 8007dfe:	685b      	ldreq	r3, [r3, #4]
 8007e00:	6063      	str	r3, [r4, #4]
 8007e02:	bf04      	itt	eq
 8007e04:	1809      	addeq	r1, r1, r0
 8007e06:	6021      	streq	r1, [r4, #0]
 8007e08:	6054      	str	r4, [r2, #4]
 8007e0a:	e7ca      	b.n	8007da2 <_free_r+0x22>
 8007e0c:	bd38      	pop	{r3, r4, r5, pc}
 8007e0e:	bf00      	nop
 8007e10:	20000908 	.word	0x20000908

08007e14 <malloc>:
 8007e14:	4b02      	ldr	r3, [pc, #8]	@ (8007e20 <malloc+0xc>)
 8007e16:	4601      	mov	r1, r0
 8007e18:	6818      	ldr	r0, [r3, #0]
 8007e1a:	f000 b825 	b.w	8007e68 <_malloc_r>
 8007e1e:	bf00      	nop
 8007e20:	20000028 	.word	0x20000028

08007e24 <sbrk_aligned>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	4e0f      	ldr	r6, [pc, #60]	@ (8007e64 <sbrk_aligned+0x40>)
 8007e28:	460c      	mov	r4, r1
 8007e2a:	6831      	ldr	r1, [r6, #0]
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	b911      	cbnz	r1, 8007e36 <sbrk_aligned+0x12>
 8007e30:	f000 fe46 	bl	8008ac0 <_sbrk_r>
 8007e34:	6030      	str	r0, [r6, #0]
 8007e36:	4621      	mov	r1, r4
 8007e38:	4628      	mov	r0, r5
 8007e3a:	f000 fe41 	bl	8008ac0 <_sbrk_r>
 8007e3e:	1c43      	adds	r3, r0, #1
 8007e40:	d103      	bne.n	8007e4a <sbrk_aligned+0x26>
 8007e42:	f04f 34ff 	mov.w	r4, #4294967295
 8007e46:	4620      	mov	r0, r4
 8007e48:	bd70      	pop	{r4, r5, r6, pc}
 8007e4a:	1cc4      	adds	r4, r0, #3
 8007e4c:	f024 0403 	bic.w	r4, r4, #3
 8007e50:	42a0      	cmp	r0, r4
 8007e52:	d0f8      	beq.n	8007e46 <sbrk_aligned+0x22>
 8007e54:	1a21      	subs	r1, r4, r0
 8007e56:	4628      	mov	r0, r5
 8007e58:	f000 fe32 	bl	8008ac0 <_sbrk_r>
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d1f2      	bne.n	8007e46 <sbrk_aligned+0x22>
 8007e60:	e7ef      	b.n	8007e42 <sbrk_aligned+0x1e>
 8007e62:	bf00      	nop
 8007e64:	20000904 	.word	0x20000904

08007e68 <_malloc_r>:
 8007e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e6c:	1ccd      	adds	r5, r1, #3
 8007e6e:	f025 0503 	bic.w	r5, r5, #3
 8007e72:	3508      	adds	r5, #8
 8007e74:	2d0c      	cmp	r5, #12
 8007e76:	bf38      	it	cc
 8007e78:	250c      	movcc	r5, #12
 8007e7a:	2d00      	cmp	r5, #0
 8007e7c:	4606      	mov	r6, r0
 8007e7e:	db01      	blt.n	8007e84 <_malloc_r+0x1c>
 8007e80:	42a9      	cmp	r1, r5
 8007e82:	d904      	bls.n	8007e8e <_malloc_r+0x26>
 8007e84:	230c      	movs	r3, #12
 8007e86:	6033      	str	r3, [r6, #0]
 8007e88:	2000      	movs	r0, #0
 8007e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f64 <_malloc_r+0xfc>
 8007e92:	f000 f869 	bl	8007f68 <__malloc_lock>
 8007e96:	f8d8 3000 	ldr.w	r3, [r8]
 8007e9a:	461c      	mov	r4, r3
 8007e9c:	bb44      	cbnz	r4, 8007ef0 <_malloc_r+0x88>
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f7ff ffbf 	bl	8007e24 <sbrk_aligned>
 8007ea6:	1c43      	adds	r3, r0, #1
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	d158      	bne.n	8007f5e <_malloc_r+0xf6>
 8007eac:	f8d8 4000 	ldr.w	r4, [r8]
 8007eb0:	4627      	mov	r7, r4
 8007eb2:	2f00      	cmp	r7, #0
 8007eb4:	d143      	bne.n	8007f3e <_malloc_r+0xd6>
 8007eb6:	2c00      	cmp	r4, #0
 8007eb8:	d04b      	beq.n	8007f52 <_malloc_r+0xea>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	eb04 0903 	add.w	r9, r4, r3
 8007ec4:	f000 fdfc 	bl	8008ac0 <_sbrk_r>
 8007ec8:	4581      	cmp	r9, r0
 8007eca:	d142      	bne.n	8007f52 <_malloc_r+0xea>
 8007ecc:	6821      	ldr	r1, [r4, #0]
 8007ece:	1a6d      	subs	r5, r5, r1
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7ff ffa6 	bl	8007e24 <sbrk_aligned>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d03a      	beq.n	8007f52 <_malloc_r+0xea>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	442b      	add	r3, r5
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	bb62      	cbnz	r2, 8007f44 <_malloc_r+0xdc>
 8007eea:	f8c8 7000 	str.w	r7, [r8]
 8007eee:	e00f      	b.n	8007f10 <_malloc_r+0xa8>
 8007ef0:	6822      	ldr	r2, [r4, #0]
 8007ef2:	1b52      	subs	r2, r2, r5
 8007ef4:	d420      	bmi.n	8007f38 <_malloc_r+0xd0>
 8007ef6:	2a0b      	cmp	r2, #11
 8007ef8:	d917      	bls.n	8007f2a <_malloc_r+0xc2>
 8007efa:	1961      	adds	r1, r4, r5
 8007efc:	42a3      	cmp	r3, r4
 8007efe:	6025      	str	r5, [r4, #0]
 8007f00:	bf18      	it	ne
 8007f02:	6059      	strne	r1, [r3, #4]
 8007f04:	6863      	ldr	r3, [r4, #4]
 8007f06:	bf08      	it	eq
 8007f08:	f8c8 1000 	streq.w	r1, [r8]
 8007f0c:	5162      	str	r2, [r4, r5]
 8007f0e:	604b      	str	r3, [r1, #4]
 8007f10:	4630      	mov	r0, r6
 8007f12:	f000 f82f 	bl	8007f74 <__malloc_unlock>
 8007f16:	f104 000b 	add.w	r0, r4, #11
 8007f1a:	1d23      	adds	r3, r4, #4
 8007f1c:	f020 0007 	bic.w	r0, r0, #7
 8007f20:	1ac2      	subs	r2, r0, r3
 8007f22:	bf1c      	itt	ne
 8007f24:	1a1b      	subne	r3, r3, r0
 8007f26:	50a3      	strne	r3, [r4, r2]
 8007f28:	e7af      	b.n	8007e8a <_malloc_r+0x22>
 8007f2a:	6862      	ldr	r2, [r4, #4]
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	bf0c      	ite	eq
 8007f30:	f8c8 2000 	streq.w	r2, [r8]
 8007f34:	605a      	strne	r2, [r3, #4]
 8007f36:	e7eb      	b.n	8007f10 <_malloc_r+0xa8>
 8007f38:	4623      	mov	r3, r4
 8007f3a:	6864      	ldr	r4, [r4, #4]
 8007f3c:	e7ae      	b.n	8007e9c <_malloc_r+0x34>
 8007f3e:	463c      	mov	r4, r7
 8007f40:	687f      	ldr	r7, [r7, #4]
 8007f42:	e7b6      	b.n	8007eb2 <_malloc_r+0x4a>
 8007f44:	461a      	mov	r2, r3
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	d1fb      	bne.n	8007f44 <_malloc_r+0xdc>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	6053      	str	r3, [r2, #4]
 8007f50:	e7de      	b.n	8007f10 <_malloc_r+0xa8>
 8007f52:	230c      	movs	r3, #12
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	4630      	mov	r0, r6
 8007f58:	f000 f80c 	bl	8007f74 <__malloc_unlock>
 8007f5c:	e794      	b.n	8007e88 <_malloc_r+0x20>
 8007f5e:	6005      	str	r5, [r0, #0]
 8007f60:	e7d6      	b.n	8007f10 <_malloc_r+0xa8>
 8007f62:	bf00      	nop
 8007f64:	20000908 	.word	0x20000908

08007f68 <__malloc_lock>:
 8007f68:	4801      	ldr	r0, [pc, #4]	@ (8007f70 <__malloc_lock+0x8>)
 8007f6a:	f7ff b8ba 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8007f6e:	bf00      	nop
 8007f70:	20000900 	.word	0x20000900

08007f74 <__malloc_unlock>:
 8007f74:	4801      	ldr	r0, [pc, #4]	@ (8007f7c <__malloc_unlock+0x8>)
 8007f76:	f7ff b8b5 	b.w	80070e4 <__retarget_lock_release_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	20000900 	.word	0x20000900

08007f80 <_Balloc>:
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	69c6      	ldr	r6, [r0, #28]
 8007f84:	4604      	mov	r4, r0
 8007f86:	460d      	mov	r5, r1
 8007f88:	b976      	cbnz	r6, 8007fa8 <_Balloc+0x28>
 8007f8a:	2010      	movs	r0, #16
 8007f8c:	f7ff ff42 	bl	8007e14 <malloc>
 8007f90:	4602      	mov	r2, r0
 8007f92:	61e0      	str	r0, [r4, #28]
 8007f94:	b920      	cbnz	r0, 8007fa0 <_Balloc+0x20>
 8007f96:	4b18      	ldr	r3, [pc, #96]	@ (8007ff8 <_Balloc+0x78>)
 8007f98:	4818      	ldr	r0, [pc, #96]	@ (8007ffc <_Balloc+0x7c>)
 8007f9a:	216b      	movs	r1, #107	@ 0x6b
 8007f9c:	f000 fdae 	bl	8008afc <__assert_func>
 8007fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fa4:	6006      	str	r6, [r0, #0]
 8007fa6:	60c6      	str	r6, [r0, #12]
 8007fa8:	69e6      	ldr	r6, [r4, #28]
 8007faa:	68f3      	ldr	r3, [r6, #12]
 8007fac:	b183      	cbz	r3, 8007fd0 <_Balloc+0x50>
 8007fae:	69e3      	ldr	r3, [r4, #28]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fb6:	b9b8      	cbnz	r0, 8007fe8 <_Balloc+0x68>
 8007fb8:	2101      	movs	r1, #1
 8007fba:	fa01 f605 	lsl.w	r6, r1, r5
 8007fbe:	1d72      	adds	r2, r6, #5
 8007fc0:	0092      	lsls	r2, r2, #2
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 fdb8 	bl	8008b38 <_calloc_r>
 8007fc8:	b160      	cbz	r0, 8007fe4 <_Balloc+0x64>
 8007fca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fce:	e00e      	b.n	8007fee <_Balloc+0x6e>
 8007fd0:	2221      	movs	r2, #33	@ 0x21
 8007fd2:	2104      	movs	r1, #4
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f000 fdaf 	bl	8008b38 <_calloc_r>
 8007fda:	69e3      	ldr	r3, [r4, #28]
 8007fdc:	60f0      	str	r0, [r6, #12]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e4      	bne.n	8007fae <_Balloc+0x2e>
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}
 8007fe8:	6802      	ldr	r2, [r0, #0]
 8007fea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ff4:	e7f7      	b.n	8007fe6 <_Balloc+0x66>
 8007ff6:	bf00      	nop
 8007ff8:	08009762 	.word	0x08009762
 8007ffc:	080097e2 	.word	0x080097e2

08008000 <_Bfree>:
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	69c6      	ldr	r6, [r0, #28]
 8008004:	4605      	mov	r5, r0
 8008006:	460c      	mov	r4, r1
 8008008:	b976      	cbnz	r6, 8008028 <_Bfree+0x28>
 800800a:	2010      	movs	r0, #16
 800800c:	f7ff ff02 	bl	8007e14 <malloc>
 8008010:	4602      	mov	r2, r0
 8008012:	61e8      	str	r0, [r5, #28]
 8008014:	b920      	cbnz	r0, 8008020 <_Bfree+0x20>
 8008016:	4b09      	ldr	r3, [pc, #36]	@ (800803c <_Bfree+0x3c>)
 8008018:	4809      	ldr	r0, [pc, #36]	@ (8008040 <_Bfree+0x40>)
 800801a:	218f      	movs	r1, #143	@ 0x8f
 800801c:	f000 fd6e 	bl	8008afc <__assert_func>
 8008020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008024:	6006      	str	r6, [r0, #0]
 8008026:	60c6      	str	r6, [r0, #12]
 8008028:	b13c      	cbz	r4, 800803a <_Bfree+0x3a>
 800802a:	69eb      	ldr	r3, [r5, #28]
 800802c:	6862      	ldr	r2, [r4, #4]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008034:	6021      	str	r1, [r4, #0]
 8008036:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800803a:	bd70      	pop	{r4, r5, r6, pc}
 800803c:	08009762 	.word	0x08009762
 8008040:	080097e2 	.word	0x080097e2

08008044 <__multadd>:
 8008044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008048:	690d      	ldr	r5, [r1, #16]
 800804a:	4607      	mov	r7, r0
 800804c:	460c      	mov	r4, r1
 800804e:	461e      	mov	r6, r3
 8008050:	f101 0c14 	add.w	ip, r1, #20
 8008054:	2000      	movs	r0, #0
 8008056:	f8dc 3000 	ldr.w	r3, [ip]
 800805a:	b299      	uxth	r1, r3
 800805c:	fb02 6101 	mla	r1, r2, r1, r6
 8008060:	0c1e      	lsrs	r6, r3, #16
 8008062:	0c0b      	lsrs	r3, r1, #16
 8008064:	fb02 3306 	mla	r3, r2, r6, r3
 8008068:	b289      	uxth	r1, r1
 800806a:	3001      	adds	r0, #1
 800806c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008070:	4285      	cmp	r5, r0
 8008072:	f84c 1b04 	str.w	r1, [ip], #4
 8008076:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800807a:	dcec      	bgt.n	8008056 <__multadd+0x12>
 800807c:	b30e      	cbz	r6, 80080c2 <__multadd+0x7e>
 800807e:	68a3      	ldr	r3, [r4, #8]
 8008080:	42ab      	cmp	r3, r5
 8008082:	dc19      	bgt.n	80080b8 <__multadd+0x74>
 8008084:	6861      	ldr	r1, [r4, #4]
 8008086:	4638      	mov	r0, r7
 8008088:	3101      	adds	r1, #1
 800808a:	f7ff ff79 	bl	8007f80 <_Balloc>
 800808e:	4680      	mov	r8, r0
 8008090:	b928      	cbnz	r0, 800809e <__multadd+0x5a>
 8008092:	4602      	mov	r2, r0
 8008094:	4b0c      	ldr	r3, [pc, #48]	@ (80080c8 <__multadd+0x84>)
 8008096:	480d      	ldr	r0, [pc, #52]	@ (80080cc <__multadd+0x88>)
 8008098:	21ba      	movs	r1, #186	@ 0xba
 800809a:	f000 fd2f 	bl	8008afc <__assert_func>
 800809e:	6922      	ldr	r2, [r4, #16]
 80080a0:	3202      	adds	r2, #2
 80080a2:	f104 010c 	add.w	r1, r4, #12
 80080a6:	0092      	lsls	r2, r2, #2
 80080a8:	300c      	adds	r0, #12
 80080aa:	f000 fd19 	bl	8008ae0 <memcpy>
 80080ae:	4621      	mov	r1, r4
 80080b0:	4638      	mov	r0, r7
 80080b2:	f7ff ffa5 	bl	8008000 <_Bfree>
 80080b6:	4644      	mov	r4, r8
 80080b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080bc:	3501      	adds	r5, #1
 80080be:	615e      	str	r6, [r3, #20]
 80080c0:	6125      	str	r5, [r4, #16]
 80080c2:	4620      	mov	r0, r4
 80080c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c8:	080097d1 	.word	0x080097d1
 80080cc:	080097e2 	.word	0x080097e2

080080d0 <__hi0bits>:
 80080d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080d4:	4603      	mov	r3, r0
 80080d6:	bf36      	itet	cc
 80080d8:	0403      	lslcc	r3, r0, #16
 80080da:	2000      	movcs	r0, #0
 80080dc:	2010      	movcc	r0, #16
 80080de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080e2:	bf3c      	itt	cc
 80080e4:	021b      	lslcc	r3, r3, #8
 80080e6:	3008      	addcc	r0, #8
 80080e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080ec:	bf3c      	itt	cc
 80080ee:	011b      	lslcc	r3, r3, #4
 80080f0:	3004      	addcc	r0, #4
 80080f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f6:	bf3c      	itt	cc
 80080f8:	009b      	lslcc	r3, r3, #2
 80080fa:	3002      	addcc	r0, #2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	db05      	blt.n	800810c <__hi0bits+0x3c>
 8008100:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008104:	f100 0001 	add.w	r0, r0, #1
 8008108:	bf08      	it	eq
 800810a:	2020      	moveq	r0, #32
 800810c:	4770      	bx	lr

0800810e <__lo0bits>:
 800810e:	6803      	ldr	r3, [r0, #0]
 8008110:	4602      	mov	r2, r0
 8008112:	f013 0007 	ands.w	r0, r3, #7
 8008116:	d00b      	beq.n	8008130 <__lo0bits+0x22>
 8008118:	07d9      	lsls	r1, r3, #31
 800811a:	d421      	bmi.n	8008160 <__lo0bits+0x52>
 800811c:	0798      	lsls	r0, r3, #30
 800811e:	bf49      	itett	mi
 8008120:	085b      	lsrmi	r3, r3, #1
 8008122:	089b      	lsrpl	r3, r3, #2
 8008124:	2001      	movmi	r0, #1
 8008126:	6013      	strmi	r3, [r2, #0]
 8008128:	bf5c      	itt	pl
 800812a:	6013      	strpl	r3, [r2, #0]
 800812c:	2002      	movpl	r0, #2
 800812e:	4770      	bx	lr
 8008130:	b299      	uxth	r1, r3
 8008132:	b909      	cbnz	r1, 8008138 <__lo0bits+0x2a>
 8008134:	0c1b      	lsrs	r3, r3, #16
 8008136:	2010      	movs	r0, #16
 8008138:	b2d9      	uxtb	r1, r3
 800813a:	b909      	cbnz	r1, 8008140 <__lo0bits+0x32>
 800813c:	3008      	adds	r0, #8
 800813e:	0a1b      	lsrs	r3, r3, #8
 8008140:	0719      	lsls	r1, r3, #28
 8008142:	bf04      	itt	eq
 8008144:	091b      	lsreq	r3, r3, #4
 8008146:	3004      	addeq	r0, #4
 8008148:	0799      	lsls	r1, r3, #30
 800814a:	bf04      	itt	eq
 800814c:	089b      	lsreq	r3, r3, #2
 800814e:	3002      	addeq	r0, #2
 8008150:	07d9      	lsls	r1, r3, #31
 8008152:	d403      	bmi.n	800815c <__lo0bits+0x4e>
 8008154:	085b      	lsrs	r3, r3, #1
 8008156:	f100 0001 	add.w	r0, r0, #1
 800815a:	d003      	beq.n	8008164 <__lo0bits+0x56>
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	4770      	bx	lr
 8008160:	2000      	movs	r0, #0
 8008162:	4770      	bx	lr
 8008164:	2020      	movs	r0, #32
 8008166:	4770      	bx	lr

08008168 <__i2b>:
 8008168:	b510      	push	{r4, lr}
 800816a:	460c      	mov	r4, r1
 800816c:	2101      	movs	r1, #1
 800816e:	f7ff ff07 	bl	8007f80 <_Balloc>
 8008172:	4602      	mov	r2, r0
 8008174:	b928      	cbnz	r0, 8008182 <__i2b+0x1a>
 8008176:	4b05      	ldr	r3, [pc, #20]	@ (800818c <__i2b+0x24>)
 8008178:	4805      	ldr	r0, [pc, #20]	@ (8008190 <__i2b+0x28>)
 800817a:	f240 1145 	movw	r1, #325	@ 0x145
 800817e:	f000 fcbd 	bl	8008afc <__assert_func>
 8008182:	2301      	movs	r3, #1
 8008184:	6144      	str	r4, [r0, #20]
 8008186:	6103      	str	r3, [r0, #16]
 8008188:	bd10      	pop	{r4, pc}
 800818a:	bf00      	nop
 800818c:	080097d1 	.word	0x080097d1
 8008190:	080097e2 	.word	0x080097e2

08008194 <__multiply>:
 8008194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008198:	4614      	mov	r4, r2
 800819a:	690a      	ldr	r2, [r1, #16]
 800819c:	6923      	ldr	r3, [r4, #16]
 800819e:	429a      	cmp	r2, r3
 80081a0:	bfa8      	it	ge
 80081a2:	4623      	movge	r3, r4
 80081a4:	460f      	mov	r7, r1
 80081a6:	bfa4      	itt	ge
 80081a8:	460c      	movge	r4, r1
 80081aa:	461f      	movge	r7, r3
 80081ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80081b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80081b4:	68a3      	ldr	r3, [r4, #8]
 80081b6:	6861      	ldr	r1, [r4, #4]
 80081b8:	eb0a 0609 	add.w	r6, sl, r9
 80081bc:	42b3      	cmp	r3, r6
 80081be:	b085      	sub	sp, #20
 80081c0:	bfb8      	it	lt
 80081c2:	3101      	addlt	r1, #1
 80081c4:	f7ff fedc 	bl	8007f80 <_Balloc>
 80081c8:	b930      	cbnz	r0, 80081d8 <__multiply+0x44>
 80081ca:	4602      	mov	r2, r0
 80081cc:	4b44      	ldr	r3, [pc, #272]	@ (80082e0 <__multiply+0x14c>)
 80081ce:	4845      	ldr	r0, [pc, #276]	@ (80082e4 <__multiply+0x150>)
 80081d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081d4:	f000 fc92 	bl	8008afc <__assert_func>
 80081d8:	f100 0514 	add.w	r5, r0, #20
 80081dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081e0:	462b      	mov	r3, r5
 80081e2:	2200      	movs	r2, #0
 80081e4:	4543      	cmp	r3, r8
 80081e6:	d321      	bcc.n	800822c <__multiply+0x98>
 80081e8:	f107 0114 	add.w	r1, r7, #20
 80081ec:	f104 0214 	add.w	r2, r4, #20
 80081f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80081f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80081f8:	9302      	str	r3, [sp, #8]
 80081fa:	1b13      	subs	r3, r2, r4
 80081fc:	3b15      	subs	r3, #21
 80081fe:	f023 0303 	bic.w	r3, r3, #3
 8008202:	3304      	adds	r3, #4
 8008204:	f104 0715 	add.w	r7, r4, #21
 8008208:	42ba      	cmp	r2, r7
 800820a:	bf38      	it	cc
 800820c:	2304      	movcc	r3, #4
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	9b02      	ldr	r3, [sp, #8]
 8008212:	9103      	str	r1, [sp, #12]
 8008214:	428b      	cmp	r3, r1
 8008216:	d80c      	bhi.n	8008232 <__multiply+0x9e>
 8008218:	2e00      	cmp	r6, #0
 800821a:	dd03      	ble.n	8008224 <__multiply+0x90>
 800821c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008220:	2b00      	cmp	r3, #0
 8008222:	d05b      	beq.n	80082dc <__multiply+0x148>
 8008224:	6106      	str	r6, [r0, #16]
 8008226:	b005      	add	sp, #20
 8008228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822c:	f843 2b04 	str.w	r2, [r3], #4
 8008230:	e7d8      	b.n	80081e4 <__multiply+0x50>
 8008232:	f8b1 a000 	ldrh.w	sl, [r1]
 8008236:	f1ba 0f00 	cmp.w	sl, #0
 800823a:	d024      	beq.n	8008286 <__multiply+0xf2>
 800823c:	f104 0e14 	add.w	lr, r4, #20
 8008240:	46a9      	mov	r9, r5
 8008242:	f04f 0c00 	mov.w	ip, #0
 8008246:	f85e 7b04 	ldr.w	r7, [lr], #4
 800824a:	f8d9 3000 	ldr.w	r3, [r9]
 800824e:	fa1f fb87 	uxth.w	fp, r7
 8008252:	b29b      	uxth	r3, r3
 8008254:	fb0a 330b 	mla	r3, sl, fp, r3
 8008258:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800825c:	f8d9 7000 	ldr.w	r7, [r9]
 8008260:	4463      	add	r3, ip
 8008262:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008266:	fb0a c70b 	mla	r7, sl, fp, ip
 800826a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800826e:	b29b      	uxth	r3, r3
 8008270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008274:	4572      	cmp	r2, lr
 8008276:	f849 3b04 	str.w	r3, [r9], #4
 800827a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800827e:	d8e2      	bhi.n	8008246 <__multiply+0xb2>
 8008280:	9b01      	ldr	r3, [sp, #4]
 8008282:	f845 c003 	str.w	ip, [r5, r3]
 8008286:	9b03      	ldr	r3, [sp, #12]
 8008288:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800828c:	3104      	adds	r1, #4
 800828e:	f1b9 0f00 	cmp.w	r9, #0
 8008292:	d021      	beq.n	80082d8 <__multiply+0x144>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	f104 0c14 	add.w	ip, r4, #20
 800829a:	46ae      	mov	lr, r5
 800829c:	f04f 0a00 	mov.w	sl, #0
 80082a0:	f8bc b000 	ldrh.w	fp, [ip]
 80082a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80082a8:	fb09 770b 	mla	r7, r9, fp, r7
 80082ac:	4457      	add	r7, sl
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082b4:	f84e 3b04 	str.w	r3, [lr], #4
 80082b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082c0:	f8be 3000 	ldrh.w	r3, [lr]
 80082c4:	fb09 330a 	mla	r3, r9, sl, r3
 80082c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80082cc:	4562      	cmp	r2, ip
 80082ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082d2:	d8e5      	bhi.n	80082a0 <__multiply+0x10c>
 80082d4:	9f01      	ldr	r7, [sp, #4]
 80082d6:	51eb      	str	r3, [r5, r7]
 80082d8:	3504      	adds	r5, #4
 80082da:	e799      	b.n	8008210 <__multiply+0x7c>
 80082dc:	3e01      	subs	r6, #1
 80082de:	e79b      	b.n	8008218 <__multiply+0x84>
 80082e0:	080097d1 	.word	0x080097d1
 80082e4:	080097e2 	.word	0x080097e2

080082e8 <__pow5mult>:
 80082e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082ec:	4615      	mov	r5, r2
 80082ee:	f012 0203 	ands.w	r2, r2, #3
 80082f2:	4607      	mov	r7, r0
 80082f4:	460e      	mov	r6, r1
 80082f6:	d007      	beq.n	8008308 <__pow5mult+0x20>
 80082f8:	4c25      	ldr	r4, [pc, #148]	@ (8008390 <__pow5mult+0xa8>)
 80082fa:	3a01      	subs	r2, #1
 80082fc:	2300      	movs	r3, #0
 80082fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008302:	f7ff fe9f 	bl	8008044 <__multadd>
 8008306:	4606      	mov	r6, r0
 8008308:	10ad      	asrs	r5, r5, #2
 800830a:	d03d      	beq.n	8008388 <__pow5mult+0xa0>
 800830c:	69fc      	ldr	r4, [r7, #28]
 800830e:	b97c      	cbnz	r4, 8008330 <__pow5mult+0x48>
 8008310:	2010      	movs	r0, #16
 8008312:	f7ff fd7f 	bl	8007e14 <malloc>
 8008316:	4602      	mov	r2, r0
 8008318:	61f8      	str	r0, [r7, #28]
 800831a:	b928      	cbnz	r0, 8008328 <__pow5mult+0x40>
 800831c:	4b1d      	ldr	r3, [pc, #116]	@ (8008394 <__pow5mult+0xac>)
 800831e:	481e      	ldr	r0, [pc, #120]	@ (8008398 <__pow5mult+0xb0>)
 8008320:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008324:	f000 fbea 	bl	8008afc <__assert_func>
 8008328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800832c:	6004      	str	r4, [r0, #0]
 800832e:	60c4      	str	r4, [r0, #12]
 8008330:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008334:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008338:	b94c      	cbnz	r4, 800834e <__pow5mult+0x66>
 800833a:	f240 2171 	movw	r1, #625	@ 0x271
 800833e:	4638      	mov	r0, r7
 8008340:	f7ff ff12 	bl	8008168 <__i2b>
 8008344:	2300      	movs	r3, #0
 8008346:	f8c8 0008 	str.w	r0, [r8, #8]
 800834a:	4604      	mov	r4, r0
 800834c:	6003      	str	r3, [r0, #0]
 800834e:	f04f 0900 	mov.w	r9, #0
 8008352:	07eb      	lsls	r3, r5, #31
 8008354:	d50a      	bpl.n	800836c <__pow5mult+0x84>
 8008356:	4631      	mov	r1, r6
 8008358:	4622      	mov	r2, r4
 800835a:	4638      	mov	r0, r7
 800835c:	f7ff ff1a 	bl	8008194 <__multiply>
 8008360:	4631      	mov	r1, r6
 8008362:	4680      	mov	r8, r0
 8008364:	4638      	mov	r0, r7
 8008366:	f7ff fe4b 	bl	8008000 <_Bfree>
 800836a:	4646      	mov	r6, r8
 800836c:	106d      	asrs	r5, r5, #1
 800836e:	d00b      	beq.n	8008388 <__pow5mult+0xa0>
 8008370:	6820      	ldr	r0, [r4, #0]
 8008372:	b938      	cbnz	r0, 8008384 <__pow5mult+0x9c>
 8008374:	4622      	mov	r2, r4
 8008376:	4621      	mov	r1, r4
 8008378:	4638      	mov	r0, r7
 800837a:	f7ff ff0b 	bl	8008194 <__multiply>
 800837e:	6020      	str	r0, [r4, #0]
 8008380:	f8c0 9000 	str.w	r9, [r0]
 8008384:	4604      	mov	r4, r0
 8008386:	e7e4      	b.n	8008352 <__pow5mult+0x6a>
 8008388:	4630      	mov	r0, r6
 800838a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800838e:	bf00      	nop
 8008390:	0800983c 	.word	0x0800983c
 8008394:	08009762 	.word	0x08009762
 8008398:	080097e2 	.word	0x080097e2

0800839c <__lshift>:
 800839c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a0:	460c      	mov	r4, r1
 80083a2:	6849      	ldr	r1, [r1, #4]
 80083a4:	6923      	ldr	r3, [r4, #16]
 80083a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083aa:	68a3      	ldr	r3, [r4, #8]
 80083ac:	4607      	mov	r7, r0
 80083ae:	4691      	mov	r9, r2
 80083b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083b4:	f108 0601 	add.w	r6, r8, #1
 80083b8:	42b3      	cmp	r3, r6
 80083ba:	db0b      	blt.n	80083d4 <__lshift+0x38>
 80083bc:	4638      	mov	r0, r7
 80083be:	f7ff fddf 	bl	8007f80 <_Balloc>
 80083c2:	4605      	mov	r5, r0
 80083c4:	b948      	cbnz	r0, 80083da <__lshift+0x3e>
 80083c6:	4602      	mov	r2, r0
 80083c8:	4b28      	ldr	r3, [pc, #160]	@ (800846c <__lshift+0xd0>)
 80083ca:	4829      	ldr	r0, [pc, #164]	@ (8008470 <__lshift+0xd4>)
 80083cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083d0:	f000 fb94 	bl	8008afc <__assert_func>
 80083d4:	3101      	adds	r1, #1
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	e7ee      	b.n	80083b8 <__lshift+0x1c>
 80083da:	2300      	movs	r3, #0
 80083dc:	f100 0114 	add.w	r1, r0, #20
 80083e0:	f100 0210 	add.w	r2, r0, #16
 80083e4:	4618      	mov	r0, r3
 80083e6:	4553      	cmp	r3, sl
 80083e8:	db33      	blt.n	8008452 <__lshift+0xb6>
 80083ea:	6920      	ldr	r0, [r4, #16]
 80083ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083f0:	f104 0314 	add.w	r3, r4, #20
 80083f4:	f019 091f 	ands.w	r9, r9, #31
 80083f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008400:	d02b      	beq.n	800845a <__lshift+0xbe>
 8008402:	f1c9 0e20 	rsb	lr, r9, #32
 8008406:	468a      	mov	sl, r1
 8008408:	2200      	movs	r2, #0
 800840a:	6818      	ldr	r0, [r3, #0]
 800840c:	fa00 f009 	lsl.w	r0, r0, r9
 8008410:	4310      	orrs	r0, r2
 8008412:	f84a 0b04 	str.w	r0, [sl], #4
 8008416:	f853 2b04 	ldr.w	r2, [r3], #4
 800841a:	459c      	cmp	ip, r3
 800841c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008420:	d8f3      	bhi.n	800840a <__lshift+0x6e>
 8008422:	ebac 0304 	sub.w	r3, ip, r4
 8008426:	3b15      	subs	r3, #21
 8008428:	f023 0303 	bic.w	r3, r3, #3
 800842c:	3304      	adds	r3, #4
 800842e:	f104 0015 	add.w	r0, r4, #21
 8008432:	4584      	cmp	ip, r0
 8008434:	bf38      	it	cc
 8008436:	2304      	movcc	r3, #4
 8008438:	50ca      	str	r2, [r1, r3]
 800843a:	b10a      	cbz	r2, 8008440 <__lshift+0xa4>
 800843c:	f108 0602 	add.w	r6, r8, #2
 8008440:	3e01      	subs	r6, #1
 8008442:	4638      	mov	r0, r7
 8008444:	612e      	str	r6, [r5, #16]
 8008446:	4621      	mov	r1, r4
 8008448:	f7ff fdda 	bl	8008000 <_Bfree>
 800844c:	4628      	mov	r0, r5
 800844e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008452:	f842 0f04 	str.w	r0, [r2, #4]!
 8008456:	3301      	adds	r3, #1
 8008458:	e7c5      	b.n	80083e6 <__lshift+0x4a>
 800845a:	3904      	subs	r1, #4
 800845c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008460:	f841 2f04 	str.w	r2, [r1, #4]!
 8008464:	459c      	cmp	ip, r3
 8008466:	d8f9      	bhi.n	800845c <__lshift+0xc0>
 8008468:	e7ea      	b.n	8008440 <__lshift+0xa4>
 800846a:	bf00      	nop
 800846c:	080097d1 	.word	0x080097d1
 8008470:	080097e2 	.word	0x080097e2

08008474 <__mcmp>:
 8008474:	690a      	ldr	r2, [r1, #16]
 8008476:	4603      	mov	r3, r0
 8008478:	6900      	ldr	r0, [r0, #16]
 800847a:	1a80      	subs	r0, r0, r2
 800847c:	b530      	push	{r4, r5, lr}
 800847e:	d10e      	bne.n	800849e <__mcmp+0x2a>
 8008480:	3314      	adds	r3, #20
 8008482:	3114      	adds	r1, #20
 8008484:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008488:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800848c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008490:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008494:	4295      	cmp	r5, r2
 8008496:	d003      	beq.n	80084a0 <__mcmp+0x2c>
 8008498:	d205      	bcs.n	80084a6 <__mcmp+0x32>
 800849a:	f04f 30ff 	mov.w	r0, #4294967295
 800849e:	bd30      	pop	{r4, r5, pc}
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	d3f3      	bcc.n	800848c <__mcmp+0x18>
 80084a4:	e7fb      	b.n	800849e <__mcmp+0x2a>
 80084a6:	2001      	movs	r0, #1
 80084a8:	e7f9      	b.n	800849e <__mcmp+0x2a>
	...

080084ac <__mdiff>:
 80084ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b0:	4689      	mov	r9, r1
 80084b2:	4606      	mov	r6, r0
 80084b4:	4611      	mov	r1, r2
 80084b6:	4648      	mov	r0, r9
 80084b8:	4614      	mov	r4, r2
 80084ba:	f7ff ffdb 	bl	8008474 <__mcmp>
 80084be:	1e05      	subs	r5, r0, #0
 80084c0:	d112      	bne.n	80084e8 <__mdiff+0x3c>
 80084c2:	4629      	mov	r1, r5
 80084c4:	4630      	mov	r0, r6
 80084c6:	f7ff fd5b 	bl	8007f80 <_Balloc>
 80084ca:	4602      	mov	r2, r0
 80084cc:	b928      	cbnz	r0, 80084da <__mdiff+0x2e>
 80084ce:	4b3f      	ldr	r3, [pc, #252]	@ (80085cc <__mdiff+0x120>)
 80084d0:	f240 2137 	movw	r1, #567	@ 0x237
 80084d4:	483e      	ldr	r0, [pc, #248]	@ (80085d0 <__mdiff+0x124>)
 80084d6:	f000 fb11 	bl	8008afc <__assert_func>
 80084da:	2301      	movs	r3, #1
 80084dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084e0:	4610      	mov	r0, r2
 80084e2:	b003      	add	sp, #12
 80084e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e8:	bfbc      	itt	lt
 80084ea:	464b      	movlt	r3, r9
 80084ec:	46a1      	movlt	r9, r4
 80084ee:	4630      	mov	r0, r6
 80084f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084f4:	bfba      	itte	lt
 80084f6:	461c      	movlt	r4, r3
 80084f8:	2501      	movlt	r5, #1
 80084fa:	2500      	movge	r5, #0
 80084fc:	f7ff fd40 	bl	8007f80 <_Balloc>
 8008500:	4602      	mov	r2, r0
 8008502:	b918      	cbnz	r0, 800850c <__mdiff+0x60>
 8008504:	4b31      	ldr	r3, [pc, #196]	@ (80085cc <__mdiff+0x120>)
 8008506:	f240 2145 	movw	r1, #581	@ 0x245
 800850a:	e7e3      	b.n	80084d4 <__mdiff+0x28>
 800850c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008510:	6926      	ldr	r6, [r4, #16]
 8008512:	60c5      	str	r5, [r0, #12]
 8008514:	f109 0310 	add.w	r3, r9, #16
 8008518:	f109 0514 	add.w	r5, r9, #20
 800851c:	f104 0e14 	add.w	lr, r4, #20
 8008520:	f100 0b14 	add.w	fp, r0, #20
 8008524:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008528:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	46d9      	mov	r9, fp
 8008530:	f04f 0c00 	mov.w	ip, #0
 8008534:	9b01      	ldr	r3, [sp, #4]
 8008536:	f85e 0b04 	ldr.w	r0, [lr], #4
 800853a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800853e:	9301      	str	r3, [sp, #4]
 8008540:	fa1f f38a 	uxth.w	r3, sl
 8008544:	4619      	mov	r1, r3
 8008546:	b283      	uxth	r3, r0
 8008548:	1acb      	subs	r3, r1, r3
 800854a:	0c00      	lsrs	r0, r0, #16
 800854c:	4463      	add	r3, ip
 800854e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008552:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008556:	b29b      	uxth	r3, r3
 8008558:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800855c:	4576      	cmp	r6, lr
 800855e:	f849 3b04 	str.w	r3, [r9], #4
 8008562:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008566:	d8e5      	bhi.n	8008534 <__mdiff+0x88>
 8008568:	1b33      	subs	r3, r6, r4
 800856a:	3b15      	subs	r3, #21
 800856c:	f023 0303 	bic.w	r3, r3, #3
 8008570:	3415      	adds	r4, #21
 8008572:	3304      	adds	r3, #4
 8008574:	42a6      	cmp	r6, r4
 8008576:	bf38      	it	cc
 8008578:	2304      	movcc	r3, #4
 800857a:	441d      	add	r5, r3
 800857c:	445b      	add	r3, fp
 800857e:	461e      	mov	r6, r3
 8008580:	462c      	mov	r4, r5
 8008582:	4544      	cmp	r4, r8
 8008584:	d30e      	bcc.n	80085a4 <__mdiff+0xf8>
 8008586:	f108 0103 	add.w	r1, r8, #3
 800858a:	1b49      	subs	r1, r1, r5
 800858c:	f021 0103 	bic.w	r1, r1, #3
 8008590:	3d03      	subs	r5, #3
 8008592:	45a8      	cmp	r8, r5
 8008594:	bf38      	it	cc
 8008596:	2100      	movcc	r1, #0
 8008598:	440b      	add	r3, r1
 800859a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800859e:	b191      	cbz	r1, 80085c6 <__mdiff+0x11a>
 80085a0:	6117      	str	r7, [r2, #16]
 80085a2:	e79d      	b.n	80084e0 <__mdiff+0x34>
 80085a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80085a8:	46e6      	mov	lr, ip
 80085aa:	0c08      	lsrs	r0, r1, #16
 80085ac:	fa1c fc81 	uxtah	ip, ip, r1
 80085b0:	4471      	add	r1, lr
 80085b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085b6:	b289      	uxth	r1, r1
 80085b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085bc:	f846 1b04 	str.w	r1, [r6], #4
 80085c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085c4:	e7dd      	b.n	8008582 <__mdiff+0xd6>
 80085c6:	3f01      	subs	r7, #1
 80085c8:	e7e7      	b.n	800859a <__mdiff+0xee>
 80085ca:	bf00      	nop
 80085cc:	080097d1 	.word	0x080097d1
 80085d0:	080097e2 	.word	0x080097e2

080085d4 <__d2b>:
 80085d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085d8:	460f      	mov	r7, r1
 80085da:	2101      	movs	r1, #1
 80085dc:	ec59 8b10 	vmov	r8, r9, d0
 80085e0:	4616      	mov	r6, r2
 80085e2:	f7ff fccd 	bl	8007f80 <_Balloc>
 80085e6:	4604      	mov	r4, r0
 80085e8:	b930      	cbnz	r0, 80085f8 <__d2b+0x24>
 80085ea:	4602      	mov	r2, r0
 80085ec:	4b23      	ldr	r3, [pc, #140]	@ (800867c <__d2b+0xa8>)
 80085ee:	4824      	ldr	r0, [pc, #144]	@ (8008680 <__d2b+0xac>)
 80085f0:	f240 310f 	movw	r1, #783	@ 0x30f
 80085f4:	f000 fa82 	bl	8008afc <__assert_func>
 80085f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008600:	b10d      	cbz	r5, 8008606 <__d2b+0x32>
 8008602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	f1b8 0300 	subs.w	r3, r8, #0
 800860c:	d023      	beq.n	8008656 <__d2b+0x82>
 800860e:	4668      	mov	r0, sp
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	f7ff fd7c 	bl	800810e <__lo0bits>
 8008616:	e9dd 1200 	ldrd	r1, r2, [sp]
 800861a:	b1d0      	cbz	r0, 8008652 <__d2b+0x7e>
 800861c:	f1c0 0320 	rsb	r3, r0, #32
 8008620:	fa02 f303 	lsl.w	r3, r2, r3
 8008624:	430b      	orrs	r3, r1
 8008626:	40c2      	lsrs	r2, r0
 8008628:	6163      	str	r3, [r4, #20]
 800862a:	9201      	str	r2, [sp, #4]
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	61a3      	str	r3, [r4, #24]
 8008630:	2b00      	cmp	r3, #0
 8008632:	bf0c      	ite	eq
 8008634:	2201      	moveq	r2, #1
 8008636:	2202      	movne	r2, #2
 8008638:	6122      	str	r2, [r4, #16]
 800863a:	b1a5      	cbz	r5, 8008666 <__d2b+0x92>
 800863c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008640:	4405      	add	r5, r0
 8008642:	603d      	str	r5, [r7, #0]
 8008644:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008648:	6030      	str	r0, [r6, #0]
 800864a:	4620      	mov	r0, r4
 800864c:	b003      	add	sp, #12
 800864e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008652:	6161      	str	r1, [r4, #20]
 8008654:	e7ea      	b.n	800862c <__d2b+0x58>
 8008656:	a801      	add	r0, sp, #4
 8008658:	f7ff fd59 	bl	800810e <__lo0bits>
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	6163      	str	r3, [r4, #20]
 8008660:	3020      	adds	r0, #32
 8008662:	2201      	movs	r2, #1
 8008664:	e7e8      	b.n	8008638 <__d2b+0x64>
 8008666:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800866a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800866e:	6038      	str	r0, [r7, #0]
 8008670:	6918      	ldr	r0, [r3, #16]
 8008672:	f7ff fd2d 	bl	80080d0 <__hi0bits>
 8008676:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800867a:	e7e5      	b.n	8008648 <__d2b+0x74>
 800867c:	080097d1 	.word	0x080097d1
 8008680:	080097e2 	.word	0x080097e2

08008684 <__ssputs_r>:
 8008684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008688:	688e      	ldr	r6, [r1, #8]
 800868a:	461f      	mov	r7, r3
 800868c:	42be      	cmp	r6, r7
 800868e:	680b      	ldr	r3, [r1, #0]
 8008690:	4682      	mov	sl, r0
 8008692:	460c      	mov	r4, r1
 8008694:	4690      	mov	r8, r2
 8008696:	d82d      	bhi.n	80086f4 <__ssputs_r+0x70>
 8008698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800869c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086a0:	d026      	beq.n	80086f0 <__ssputs_r+0x6c>
 80086a2:	6965      	ldr	r5, [r4, #20]
 80086a4:	6909      	ldr	r1, [r1, #16]
 80086a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086aa:	eba3 0901 	sub.w	r9, r3, r1
 80086ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086b2:	1c7b      	adds	r3, r7, #1
 80086b4:	444b      	add	r3, r9
 80086b6:	106d      	asrs	r5, r5, #1
 80086b8:	429d      	cmp	r5, r3
 80086ba:	bf38      	it	cc
 80086bc:	461d      	movcc	r5, r3
 80086be:	0553      	lsls	r3, r2, #21
 80086c0:	d527      	bpl.n	8008712 <__ssputs_r+0x8e>
 80086c2:	4629      	mov	r1, r5
 80086c4:	f7ff fbd0 	bl	8007e68 <_malloc_r>
 80086c8:	4606      	mov	r6, r0
 80086ca:	b360      	cbz	r0, 8008726 <__ssputs_r+0xa2>
 80086cc:	6921      	ldr	r1, [r4, #16]
 80086ce:	464a      	mov	r2, r9
 80086d0:	f000 fa06 	bl	8008ae0 <memcpy>
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086de:	81a3      	strh	r3, [r4, #12]
 80086e0:	6126      	str	r6, [r4, #16]
 80086e2:	6165      	str	r5, [r4, #20]
 80086e4:	444e      	add	r6, r9
 80086e6:	eba5 0509 	sub.w	r5, r5, r9
 80086ea:	6026      	str	r6, [r4, #0]
 80086ec:	60a5      	str	r5, [r4, #8]
 80086ee:	463e      	mov	r6, r7
 80086f0:	42be      	cmp	r6, r7
 80086f2:	d900      	bls.n	80086f6 <__ssputs_r+0x72>
 80086f4:	463e      	mov	r6, r7
 80086f6:	6820      	ldr	r0, [r4, #0]
 80086f8:	4632      	mov	r2, r6
 80086fa:	4641      	mov	r1, r8
 80086fc:	f000 f9c6 	bl	8008a8c <memmove>
 8008700:	68a3      	ldr	r3, [r4, #8]
 8008702:	1b9b      	subs	r3, r3, r6
 8008704:	60a3      	str	r3, [r4, #8]
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	4433      	add	r3, r6
 800870a:	6023      	str	r3, [r4, #0]
 800870c:	2000      	movs	r0, #0
 800870e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008712:	462a      	mov	r2, r5
 8008714:	f000 fa36 	bl	8008b84 <_realloc_r>
 8008718:	4606      	mov	r6, r0
 800871a:	2800      	cmp	r0, #0
 800871c:	d1e0      	bne.n	80086e0 <__ssputs_r+0x5c>
 800871e:	6921      	ldr	r1, [r4, #16]
 8008720:	4650      	mov	r0, sl
 8008722:	f7ff fb2d 	bl	8007d80 <_free_r>
 8008726:	230c      	movs	r3, #12
 8008728:	f8ca 3000 	str.w	r3, [sl]
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008732:	81a3      	strh	r3, [r4, #12]
 8008734:	f04f 30ff 	mov.w	r0, #4294967295
 8008738:	e7e9      	b.n	800870e <__ssputs_r+0x8a>
	...

0800873c <_svfiprintf_r>:
 800873c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008740:	4698      	mov	r8, r3
 8008742:	898b      	ldrh	r3, [r1, #12]
 8008744:	061b      	lsls	r3, r3, #24
 8008746:	b09d      	sub	sp, #116	@ 0x74
 8008748:	4607      	mov	r7, r0
 800874a:	460d      	mov	r5, r1
 800874c:	4614      	mov	r4, r2
 800874e:	d510      	bpl.n	8008772 <_svfiprintf_r+0x36>
 8008750:	690b      	ldr	r3, [r1, #16]
 8008752:	b973      	cbnz	r3, 8008772 <_svfiprintf_r+0x36>
 8008754:	2140      	movs	r1, #64	@ 0x40
 8008756:	f7ff fb87 	bl	8007e68 <_malloc_r>
 800875a:	6028      	str	r0, [r5, #0]
 800875c:	6128      	str	r0, [r5, #16]
 800875e:	b930      	cbnz	r0, 800876e <_svfiprintf_r+0x32>
 8008760:	230c      	movs	r3, #12
 8008762:	603b      	str	r3, [r7, #0]
 8008764:	f04f 30ff 	mov.w	r0, #4294967295
 8008768:	b01d      	add	sp, #116	@ 0x74
 800876a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876e:	2340      	movs	r3, #64	@ 0x40
 8008770:	616b      	str	r3, [r5, #20]
 8008772:	2300      	movs	r3, #0
 8008774:	9309      	str	r3, [sp, #36]	@ 0x24
 8008776:	2320      	movs	r3, #32
 8008778:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800877c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008780:	2330      	movs	r3, #48	@ 0x30
 8008782:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008920 <_svfiprintf_r+0x1e4>
 8008786:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800878a:	f04f 0901 	mov.w	r9, #1
 800878e:	4623      	mov	r3, r4
 8008790:	469a      	mov	sl, r3
 8008792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008796:	b10a      	cbz	r2, 800879c <_svfiprintf_r+0x60>
 8008798:	2a25      	cmp	r2, #37	@ 0x25
 800879a:	d1f9      	bne.n	8008790 <_svfiprintf_r+0x54>
 800879c:	ebba 0b04 	subs.w	fp, sl, r4
 80087a0:	d00b      	beq.n	80087ba <_svfiprintf_r+0x7e>
 80087a2:	465b      	mov	r3, fp
 80087a4:	4622      	mov	r2, r4
 80087a6:	4629      	mov	r1, r5
 80087a8:	4638      	mov	r0, r7
 80087aa:	f7ff ff6b 	bl	8008684 <__ssputs_r>
 80087ae:	3001      	adds	r0, #1
 80087b0:	f000 80a7 	beq.w	8008902 <_svfiprintf_r+0x1c6>
 80087b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087b6:	445a      	add	r2, fp
 80087b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80087ba:	f89a 3000 	ldrb.w	r3, [sl]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 809f 	beq.w	8008902 <_svfiprintf_r+0x1c6>
 80087c4:	2300      	movs	r3, #0
 80087c6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ce:	f10a 0a01 	add.w	sl, sl, #1
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	9307      	str	r3, [sp, #28]
 80087d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087da:	931a      	str	r3, [sp, #104]	@ 0x68
 80087dc:	4654      	mov	r4, sl
 80087de:	2205      	movs	r2, #5
 80087e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e4:	484e      	ldr	r0, [pc, #312]	@ (8008920 <_svfiprintf_r+0x1e4>)
 80087e6:	f7f7 fd13 	bl	8000210 <memchr>
 80087ea:	9a04      	ldr	r2, [sp, #16]
 80087ec:	b9d8      	cbnz	r0, 8008826 <_svfiprintf_r+0xea>
 80087ee:	06d0      	lsls	r0, r2, #27
 80087f0:	bf44      	itt	mi
 80087f2:	2320      	movmi	r3, #32
 80087f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087f8:	0711      	lsls	r1, r2, #28
 80087fa:	bf44      	itt	mi
 80087fc:	232b      	movmi	r3, #43	@ 0x2b
 80087fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008802:	f89a 3000 	ldrb.w	r3, [sl]
 8008806:	2b2a      	cmp	r3, #42	@ 0x2a
 8008808:	d015      	beq.n	8008836 <_svfiprintf_r+0xfa>
 800880a:	9a07      	ldr	r2, [sp, #28]
 800880c:	4654      	mov	r4, sl
 800880e:	2000      	movs	r0, #0
 8008810:	f04f 0c0a 	mov.w	ip, #10
 8008814:	4621      	mov	r1, r4
 8008816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800881a:	3b30      	subs	r3, #48	@ 0x30
 800881c:	2b09      	cmp	r3, #9
 800881e:	d94b      	bls.n	80088b8 <_svfiprintf_r+0x17c>
 8008820:	b1b0      	cbz	r0, 8008850 <_svfiprintf_r+0x114>
 8008822:	9207      	str	r2, [sp, #28]
 8008824:	e014      	b.n	8008850 <_svfiprintf_r+0x114>
 8008826:	eba0 0308 	sub.w	r3, r0, r8
 800882a:	fa09 f303 	lsl.w	r3, r9, r3
 800882e:	4313      	orrs	r3, r2
 8008830:	9304      	str	r3, [sp, #16]
 8008832:	46a2      	mov	sl, r4
 8008834:	e7d2      	b.n	80087dc <_svfiprintf_r+0xa0>
 8008836:	9b03      	ldr	r3, [sp, #12]
 8008838:	1d19      	adds	r1, r3, #4
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	9103      	str	r1, [sp, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	bfbb      	ittet	lt
 8008842:	425b      	neglt	r3, r3
 8008844:	f042 0202 	orrlt.w	r2, r2, #2
 8008848:	9307      	strge	r3, [sp, #28]
 800884a:	9307      	strlt	r3, [sp, #28]
 800884c:	bfb8      	it	lt
 800884e:	9204      	strlt	r2, [sp, #16]
 8008850:	7823      	ldrb	r3, [r4, #0]
 8008852:	2b2e      	cmp	r3, #46	@ 0x2e
 8008854:	d10a      	bne.n	800886c <_svfiprintf_r+0x130>
 8008856:	7863      	ldrb	r3, [r4, #1]
 8008858:	2b2a      	cmp	r3, #42	@ 0x2a
 800885a:	d132      	bne.n	80088c2 <_svfiprintf_r+0x186>
 800885c:	9b03      	ldr	r3, [sp, #12]
 800885e:	1d1a      	adds	r2, r3, #4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	9203      	str	r2, [sp, #12]
 8008864:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008868:	3402      	adds	r4, #2
 800886a:	9305      	str	r3, [sp, #20]
 800886c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008930 <_svfiprintf_r+0x1f4>
 8008870:	7821      	ldrb	r1, [r4, #0]
 8008872:	2203      	movs	r2, #3
 8008874:	4650      	mov	r0, sl
 8008876:	f7f7 fccb 	bl	8000210 <memchr>
 800887a:	b138      	cbz	r0, 800888c <_svfiprintf_r+0x150>
 800887c:	9b04      	ldr	r3, [sp, #16]
 800887e:	eba0 000a 	sub.w	r0, r0, sl
 8008882:	2240      	movs	r2, #64	@ 0x40
 8008884:	4082      	lsls	r2, r0
 8008886:	4313      	orrs	r3, r2
 8008888:	3401      	adds	r4, #1
 800888a:	9304      	str	r3, [sp, #16]
 800888c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008890:	4824      	ldr	r0, [pc, #144]	@ (8008924 <_svfiprintf_r+0x1e8>)
 8008892:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008896:	2206      	movs	r2, #6
 8008898:	f7f7 fcba 	bl	8000210 <memchr>
 800889c:	2800      	cmp	r0, #0
 800889e:	d036      	beq.n	800890e <_svfiprintf_r+0x1d2>
 80088a0:	4b21      	ldr	r3, [pc, #132]	@ (8008928 <_svfiprintf_r+0x1ec>)
 80088a2:	bb1b      	cbnz	r3, 80088ec <_svfiprintf_r+0x1b0>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	3307      	adds	r3, #7
 80088a8:	f023 0307 	bic.w	r3, r3, #7
 80088ac:	3308      	adds	r3, #8
 80088ae:	9303      	str	r3, [sp, #12]
 80088b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b2:	4433      	add	r3, r6
 80088b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088b6:	e76a      	b.n	800878e <_svfiprintf_r+0x52>
 80088b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80088bc:	460c      	mov	r4, r1
 80088be:	2001      	movs	r0, #1
 80088c0:	e7a8      	b.n	8008814 <_svfiprintf_r+0xd8>
 80088c2:	2300      	movs	r3, #0
 80088c4:	3401      	adds	r4, #1
 80088c6:	9305      	str	r3, [sp, #20]
 80088c8:	4619      	mov	r1, r3
 80088ca:	f04f 0c0a 	mov.w	ip, #10
 80088ce:	4620      	mov	r0, r4
 80088d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088d4:	3a30      	subs	r2, #48	@ 0x30
 80088d6:	2a09      	cmp	r2, #9
 80088d8:	d903      	bls.n	80088e2 <_svfiprintf_r+0x1a6>
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0c6      	beq.n	800886c <_svfiprintf_r+0x130>
 80088de:	9105      	str	r1, [sp, #20]
 80088e0:	e7c4      	b.n	800886c <_svfiprintf_r+0x130>
 80088e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80088e6:	4604      	mov	r4, r0
 80088e8:	2301      	movs	r3, #1
 80088ea:	e7f0      	b.n	80088ce <_svfiprintf_r+0x192>
 80088ec:	ab03      	add	r3, sp, #12
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	462a      	mov	r2, r5
 80088f2:	4b0e      	ldr	r3, [pc, #56]	@ (800892c <_svfiprintf_r+0x1f0>)
 80088f4:	a904      	add	r1, sp, #16
 80088f6:	4638      	mov	r0, r7
 80088f8:	f7fd fe84 	bl	8006604 <_printf_float>
 80088fc:	1c42      	adds	r2, r0, #1
 80088fe:	4606      	mov	r6, r0
 8008900:	d1d6      	bne.n	80088b0 <_svfiprintf_r+0x174>
 8008902:	89ab      	ldrh	r3, [r5, #12]
 8008904:	065b      	lsls	r3, r3, #25
 8008906:	f53f af2d 	bmi.w	8008764 <_svfiprintf_r+0x28>
 800890a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800890c:	e72c      	b.n	8008768 <_svfiprintf_r+0x2c>
 800890e:	ab03      	add	r3, sp, #12
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	462a      	mov	r2, r5
 8008914:	4b05      	ldr	r3, [pc, #20]	@ (800892c <_svfiprintf_r+0x1f0>)
 8008916:	a904      	add	r1, sp, #16
 8008918:	4638      	mov	r0, r7
 800891a:	f7fe f90b 	bl	8006b34 <_printf_i>
 800891e:	e7ed      	b.n	80088fc <_svfiprintf_r+0x1c0>
 8008920:	08009938 	.word	0x08009938
 8008924:	08009942 	.word	0x08009942
 8008928:	08006605 	.word	0x08006605
 800892c:	08008685 	.word	0x08008685
 8008930:	0800993e 	.word	0x0800993e

08008934 <__sflush_r>:
 8008934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893c:	0716      	lsls	r6, r2, #28
 800893e:	4605      	mov	r5, r0
 8008940:	460c      	mov	r4, r1
 8008942:	d454      	bmi.n	80089ee <__sflush_r+0xba>
 8008944:	684b      	ldr	r3, [r1, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	dc02      	bgt.n	8008950 <__sflush_r+0x1c>
 800894a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800894c:	2b00      	cmp	r3, #0
 800894e:	dd48      	ble.n	80089e2 <__sflush_r+0xae>
 8008950:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008952:	2e00      	cmp	r6, #0
 8008954:	d045      	beq.n	80089e2 <__sflush_r+0xae>
 8008956:	2300      	movs	r3, #0
 8008958:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800895c:	682f      	ldr	r7, [r5, #0]
 800895e:	6a21      	ldr	r1, [r4, #32]
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	d030      	beq.n	80089c6 <__sflush_r+0x92>
 8008964:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	0759      	lsls	r1, r3, #29
 800896a:	d505      	bpl.n	8008978 <__sflush_r+0x44>
 800896c:	6863      	ldr	r3, [r4, #4]
 800896e:	1ad2      	subs	r2, r2, r3
 8008970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008972:	b10b      	cbz	r3, 8008978 <__sflush_r+0x44>
 8008974:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008976:	1ad2      	subs	r2, r2, r3
 8008978:	2300      	movs	r3, #0
 800897a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800897c:	6a21      	ldr	r1, [r4, #32]
 800897e:	4628      	mov	r0, r5
 8008980:	47b0      	blx	r6
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	d106      	bne.n	8008996 <__sflush_r+0x62>
 8008988:	6829      	ldr	r1, [r5, #0]
 800898a:	291d      	cmp	r1, #29
 800898c:	d82b      	bhi.n	80089e6 <__sflush_r+0xb2>
 800898e:	4a2a      	ldr	r2, [pc, #168]	@ (8008a38 <__sflush_r+0x104>)
 8008990:	410a      	asrs	r2, r1
 8008992:	07d6      	lsls	r6, r2, #31
 8008994:	d427      	bmi.n	80089e6 <__sflush_r+0xb2>
 8008996:	2200      	movs	r2, #0
 8008998:	6062      	str	r2, [r4, #4]
 800899a:	04d9      	lsls	r1, r3, #19
 800899c:	6922      	ldr	r2, [r4, #16]
 800899e:	6022      	str	r2, [r4, #0]
 80089a0:	d504      	bpl.n	80089ac <__sflush_r+0x78>
 80089a2:	1c42      	adds	r2, r0, #1
 80089a4:	d101      	bne.n	80089aa <__sflush_r+0x76>
 80089a6:	682b      	ldr	r3, [r5, #0]
 80089a8:	b903      	cbnz	r3, 80089ac <__sflush_r+0x78>
 80089aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80089ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089ae:	602f      	str	r7, [r5, #0]
 80089b0:	b1b9      	cbz	r1, 80089e2 <__sflush_r+0xae>
 80089b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089b6:	4299      	cmp	r1, r3
 80089b8:	d002      	beq.n	80089c0 <__sflush_r+0x8c>
 80089ba:	4628      	mov	r0, r5
 80089bc:	f7ff f9e0 	bl	8007d80 <_free_r>
 80089c0:	2300      	movs	r3, #0
 80089c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80089c4:	e00d      	b.n	80089e2 <__sflush_r+0xae>
 80089c6:	2301      	movs	r3, #1
 80089c8:	4628      	mov	r0, r5
 80089ca:	47b0      	blx	r6
 80089cc:	4602      	mov	r2, r0
 80089ce:	1c50      	adds	r0, r2, #1
 80089d0:	d1c9      	bne.n	8008966 <__sflush_r+0x32>
 80089d2:	682b      	ldr	r3, [r5, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0c6      	beq.n	8008966 <__sflush_r+0x32>
 80089d8:	2b1d      	cmp	r3, #29
 80089da:	d001      	beq.n	80089e0 <__sflush_r+0xac>
 80089dc:	2b16      	cmp	r3, #22
 80089de:	d11e      	bne.n	8008a1e <__sflush_r+0xea>
 80089e0:	602f      	str	r7, [r5, #0]
 80089e2:	2000      	movs	r0, #0
 80089e4:	e022      	b.n	8008a2c <__sflush_r+0xf8>
 80089e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ea:	b21b      	sxth	r3, r3
 80089ec:	e01b      	b.n	8008a26 <__sflush_r+0xf2>
 80089ee:	690f      	ldr	r7, [r1, #16]
 80089f0:	2f00      	cmp	r7, #0
 80089f2:	d0f6      	beq.n	80089e2 <__sflush_r+0xae>
 80089f4:	0793      	lsls	r3, r2, #30
 80089f6:	680e      	ldr	r6, [r1, #0]
 80089f8:	bf08      	it	eq
 80089fa:	694b      	ldreq	r3, [r1, #20]
 80089fc:	600f      	str	r7, [r1, #0]
 80089fe:	bf18      	it	ne
 8008a00:	2300      	movne	r3, #0
 8008a02:	eba6 0807 	sub.w	r8, r6, r7
 8008a06:	608b      	str	r3, [r1, #8]
 8008a08:	f1b8 0f00 	cmp.w	r8, #0
 8008a0c:	dde9      	ble.n	80089e2 <__sflush_r+0xae>
 8008a0e:	6a21      	ldr	r1, [r4, #32]
 8008a10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a12:	4643      	mov	r3, r8
 8008a14:	463a      	mov	r2, r7
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b0      	blx	r6
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	dc08      	bgt.n	8008a30 <__sflush_r+0xfc>
 8008a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a26:	81a3      	strh	r3, [r4, #12]
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a30:	4407      	add	r7, r0
 8008a32:	eba8 0800 	sub.w	r8, r8, r0
 8008a36:	e7e7      	b.n	8008a08 <__sflush_r+0xd4>
 8008a38:	dfbffffe 	.word	0xdfbffffe

08008a3c <_fflush_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	690b      	ldr	r3, [r1, #16]
 8008a40:	4605      	mov	r5, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	b913      	cbnz	r3, 8008a4c <_fflush_r+0x10>
 8008a46:	2500      	movs	r5, #0
 8008a48:	4628      	mov	r0, r5
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	b118      	cbz	r0, 8008a56 <_fflush_r+0x1a>
 8008a4e:	6a03      	ldr	r3, [r0, #32]
 8008a50:	b90b      	cbnz	r3, 8008a56 <_fflush_r+0x1a>
 8008a52:	f7fe fa1b 	bl	8006e8c <__sinit>
 8008a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0f3      	beq.n	8008a46 <_fflush_r+0xa>
 8008a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a60:	07d0      	lsls	r0, r2, #31
 8008a62:	d404      	bmi.n	8008a6e <_fflush_r+0x32>
 8008a64:	0599      	lsls	r1, r3, #22
 8008a66:	d402      	bmi.n	8008a6e <_fflush_r+0x32>
 8008a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a6a:	f7fe fb3a 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8008a6e:	4628      	mov	r0, r5
 8008a70:	4621      	mov	r1, r4
 8008a72:	f7ff ff5f 	bl	8008934 <__sflush_r>
 8008a76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a78:	07da      	lsls	r2, r3, #31
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	d4e4      	bmi.n	8008a48 <_fflush_r+0xc>
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	059b      	lsls	r3, r3, #22
 8008a82:	d4e1      	bmi.n	8008a48 <_fflush_r+0xc>
 8008a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a86:	f7fe fb2d 	bl	80070e4 <__retarget_lock_release_recursive>
 8008a8a:	e7dd      	b.n	8008a48 <_fflush_r+0xc>

08008a8c <memmove>:
 8008a8c:	4288      	cmp	r0, r1
 8008a8e:	b510      	push	{r4, lr}
 8008a90:	eb01 0402 	add.w	r4, r1, r2
 8008a94:	d902      	bls.n	8008a9c <memmove+0x10>
 8008a96:	4284      	cmp	r4, r0
 8008a98:	4623      	mov	r3, r4
 8008a9a:	d807      	bhi.n	8008aac <memmove+0x20>
 8008a9c:	1e43      	subs	r3, r0, #1
 8008a9e:	42a1      	cmp	r1, r4
 8008aa0:	d008      	beq.n	8008ab4 <memmove+0x28>
 8008aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aaa:	e7f8      	b.n	8008a9e <memmove+0x12>
 8008aac:	4402      	add	r2, r0
 8008aae:	4601      	mov	r1, r0
 8008ab0:	428a      	cmp	r2, r1
 8008ab2:	d100      	bne.n	8008ab6 <memmove+0x2a>
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008abe:	e7f7      	b.n	8008ab0 <memmove+0x24>

08008ac0 <_sbrk_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d06      	ldr	r5, [pc, #24]	@ (8008adc <_sbrk_r+0x1c>)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	f7f9 ff30 	bl	8002930 <_sbrk>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_sbrk_r+0x1a>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_sbrk_r+0x1a>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	200008fc 	.word	0x200008fc

08008ae0 <memcpy>:
 8008ae0:	440a      	add	r2, r1
 8008ae2:	4291      	cmp	r1, r2
 8008ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ae8:	d100      	bne.n	8008aec <memcpy+0xc>
 8008aea:	4770      	bx	lr
 8008aec:	b510      	push	{r4, lr}
 8008aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008af6:	4291      	cmp	r1, r2
 8008af8:	d1f9      	bne.n	8008aee <memcpy+0xe>
 8008afa:	bd10      	pop	{r4, pc}

08008afc <__assert_func>:
 8008afc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008afe:	4614      	mov	r4, r2
 8008b00:	461a      	mov	r2, r3
 8008b02:	4b09      	ldr	r3, [pc, #36]	@ (8008b28 <__assert_func+0x2c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4605      	mov	r5, r0
 8008b08:	68d8      	ldr	r0, [r3, #12]
 8008b0a:	b954      	cbnz	r4, 8008b22 <__assert_func+0x26>
 8008b0c:	4b07      	ldr	r3, [pc, #28]	@ (8008b2c <__assert_func+0x30>)
 8008b0e:	461c      	mov	r4, r3
 8008b10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b14:	9100      	str	r1, [sp, #0]
 8008b16:	462b      	mov	r3, r5
 8008b18:	4905      	ldr	r1, [pc, #20]	@ (8008b30 <__assert_func+0x34>)
 8008b1a:	f000 f86f 	bl	8008bfc <fiprintf>
 8008b1e:	f000 f87f 	bl	8008c20 <abort>
 8008b22:	4b04      	ldr	r3, [pc, #16]	@ (8008b34 <__assert_func+0x38>)
 8008b24:	e7f4      	b.n	8008b10 <__assert_func+0x14>
 8008b26:	bf00      	nop
 8008b28:	20000028 	.word	0x20000028
 8008b2c:	0800998e 	.word	0x0800998e
 8008b30:	08009960 	.word	0x08009960
 8008b34:	08009953 	.word	0x08009953

08008b38 <_calloc_r>:
 8008b38:	b570      	push	{r4, r5, r6, lr}
 8008b3a:	fba1 5402 	umull	r5, r4, r1, r2
 8008b3e:	b93c      	cbnz	r4, 8008b50 <_calloc_r+0x18>
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7ff f991 	bl	8007e68 <_malloc_r>
 8008b46:	4606      	mov	r6, r0
 8008b48:	b928      	cbnz	r0, 8008b56 <_calloc_r+0x1e>
 8008b4a:	2600      	movs	r6, #0
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	bd70      	pop	{r4, r5, r6, pc}
 8008b50:	220c      	movs	r2, #12
 8008b52:	6002      	str	r2, [r0, #0]
 8008b54:	e7f9      	b.n	8008b4a <_calloc_r+0x12>
 8008b56:	462a      	mov	r2, r5
 8008b58:	4621      	mov	r1, r4
 8008b5a:	f7fe fa44 	bl	8006fe6 <memset>
 8008b5e:	e7f5      	b.n	8008b4c <_calloc_r+0x14>

08008b60 <__ascii_mbtowc>:
 8008b60:	b082      	sub	sp, #8
 8008b62:	b901      	cbnz	r1, 8008b66 <__ascii_mbtowc+0x6>
 8008b64:	a901      	add	r1, sp, #4
 8008b66:	b142      	cbz	r2, 8008b7a <__ascii_mbtowc+0x1a>
 8008b68:	b14b      	cbz	r3, 8008b7e <__ascii_mbtowc+0x1e>
 8008b6a:	7813      	ldrb	r3, [r2, #0]
 8008b6c:	600b      	str	r3, [r1, #0]
 8008b6e:	7812      	ldrb	r2, [r2, #0]
 8008b70:	1e10      	subs	r0, r2, #0
 8008b72:	bf18      	it	ne
 8008b74:	2001      	movne	r0, #1
 8008b76:	b002      	add	sp, #8
 8008b78:	4770      	bx	lr
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	e7fb      	b.n	8008b76 <__ascii_mbtowc+0x16>
 8008b7e:	f06f 0001 	mvn.w	r0, #1
 8008b82:	e7f8      	b.n	8008b76 <__ascii_mbtowc+0x16>

08008b84 <_realloc_r>:
 8008b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b88:	4680      	mov	r8, r0
 8008b8a:	4615      	mov	r5, r2
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	b921      	cbnz	r1, 8008b9a <_realloc_r+0x16>
 8008b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b94:	4611      	mov	r1, r2
 8008b96:	f7ff b967 	b.w	8007e68 <_malloc_r>
 8008b9a:	b92a      	cbnz	r2, 8008ba8 <_realloc_r+0x24>
 8008b9c:	f7ff f8f0 	bl	8007d80 <_free_r>
 8008ba0:	2400      	movs	r4, #0
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba8:	f000 f841 	bl	8008c2e <_malloc_usable_size_r>
 8008bac:	4285      	cmp	r5, r0
 8008bae:	4606      	mov	r6, r0
 8008bb0:	d802      	bhi.n	8008bb8 <_realloc_r+0x34>
 8008bb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bb6:	d8f4      	bhi.n	8008ba2 <_realloc_r+0x1e>
 8008bb8:	4629      	mov	r1, r5
 8008bba:	4640      	mov	r0, r8
 8008bbc:	f7ff f954 	bl	8007e68 <_malloc_r>
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d0ec      	beq.n	8008ba0 <_realloc_r+0x1c>
 8008bc6:	42b5      	cmp	r5, r6
 8008bc8:	462a      	mov	r2, r5
 8008bca:	4621      	mov	r1, r4
 8008bcc:	bf28      	it	cs
 8008bce:	4632      	movcs	r2, r6
 8008bd0:	f7ff ff86 	bl	8008ae0 <memcpy>
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	f7ff f8d2 	bl	8007d80 <_free_r>
 8008bdc:	463c      	mov	r4, r7
 8008bde:	e7e0      	b.n	8008ba2 <_realloc_r+0x1e>

08008be0 <__ascii_wctomb>:
 8008be0:	4603      	mov	r3, r0
 8008be2:	4608      	mov	r0, r1
 8008be4:	b141      	cbz	r1, 8008bf8 <__ascii_wctomb+0x18>
 8008be6:	2aff      	cmp	r2, #255	@ 0xff
 8008be8:	d904      	bls.n	8008bf4 <__ascii_wctomb+0x14>
 8008bea:	228a      	movs	r2, #138	@ 0x8a
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf2:	4770      	bx	lr
 8008bf4:	700a      	strb	r2, [r1, #0]
 8008bf6:	2001      	movs	r0, #1
 8008bf8:	4770      	bx	lr
	...

08008bfc <fiprintf>:
 8008bfc:	b40e      	push	{r1, r2, r3}
 8008bfe:	b503      	push	{r0, r1, lr}
 8008c00:	4601      	mov	r1, r0
 8008c02:	ab03      	add	r3, sp, #12
 8008c04:	4805      	ldr	r0, [pc, #20]	@ (8008c1c <fiprintf+0x20>)
 8008c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c0a:	6800      	ldr	r0, [r0, #0]
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	f000 f83f 	bl	8008c90 <_vfiprintf_r>
 8008c12:	b002      	add	sp, #8
 8008c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c18:	b003      	add	sp, #12
 8008c1a:	4770      	bx	lr
 8008c1c:	20000028 	.word	0x20000028

08008c20 <abort>:
 8008c20:	b508      	push	{r3, lr}
 8008c22:	2006      	movs	r0, #6
 8008c24:	f000 fa08 	bl	8009038 <raise>
 8008c28:	2001      	movs	r0, #1
 8008c2a:	f7f9 fe09 	bl	8002840 <_exit>

08008c2e <_malloc_usable_size_r>:
 8008c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c32:	1f18      	subs	r0, r3, #4
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bfbc      	itt	lt
 8008c38:	580b      	ldrlt	r3, [r1, r0]
 8008c3a:	18c0      	addlt	r0, r0, r3
 8008c3c:	4770      	bx	lr

08008c3e <__sfputc_r>:
 8008c3e:	6893      	ldr	r3, [r2, #8]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	b410      	push	{r4}
 8008c46:	6093      	str	r3, [r2, #8]
 8008c48:	da08      	bge.n	8008c5c <__sfputc_r+0x1e>
 8008c4a:	6994      	ldr	r4, [r2, #24]
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	db01      	blt.n	8008c54 <__sfputc_r+0x16>
 8008c50:	290a      	cmp	r1, #10
 8008c52:	d103      	bne.n	8008c5c <__sfputc_r+0x1e>
 8008c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c58:	f000 b932 	b.w	8008ec0 <__swbuf_r>
 8008c5c:	6813      	ldr	r3, [r2, #0]
 8008c5e:	1c58      	adds	r0, r3, #1
 8008c60:	6010      	str	r0, [r2, #0]
 8008c62:	7019      	strb	r1, [r3, #0]
 8008c64:	4608      	mov	r0, r1
 8008c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <__sfputs_r>:
 8008c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6e:	4606      	mov	r6, r0
 8008c70:	460f      	mov	r7, r1
 8008c72:	4614      	mov	r4, r2
 8008c74:	18d5      	adds	r5, r2, r3
 8008c76:	42ac      	cmp	r4, r5
 8008c78:	d101      	bne.n	8008c7e <__sfputs_r+0x12>
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e007      	b.n	8008c8e <__sfputs_r+0x22>
 8008c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c82:	463a      	mov	r2, r7
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7ff ffda 	bl	8008c3e <__sfputc_r>
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	d1f3      	bne.n	8008c76 <__sfputs_r+0xa>
 8008c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c90 <_vfiprintf_r>:
 8008c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c94:	460d      	mov	r5, r1
 8008c96:	b09d      	sub	sp, #116	@ 0x74
 8008c98:	4614      	mov	r4, r2
 8008c9a:	4698      	mov	r8, r3
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	b118      	cbz	r0, 8008ca8 <_vfiprintf_r+0x18>
 8008ca0:	6a03      	ldr	r3, [r0, #32]
 8008ca2:	b90b      	cbnz	r3, 8008ca8 <_vfiprintf_r+0x18>
 8008ca4:	f7fe f8f2 	bl	8006e8c <__sinit>
 8008ca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008caa:	07d9      	lsls	r1, r3, #31
 8008cac:	d405      	bmi.n	8008cba <_vfiprintf_r+0x2a>
 8008cae:	89ab      	ldrh	r3, [r5, #12]
 8008cb0:	059a      	lsls	r2, r3, #22
 8008cb2:	d402      	bmi.n	8008cba <_vfiprintf_r+0x2a>
 8008cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cb6:	f7fe fa14 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8008cba:	89ab      	ldrh	r3, [r5, #12]
 8008cbc:	071b      	lsls	r3, r3, #28
 8008cbe:	d501      	bpl.n	8008cc4 <_vfiprintf_r+0x34>
 8008cc0:	692b      	ldr	r3, [r5, #16]
 8008cc2:	b99b      	cbnz	r3, 8008cec <_vfiprintf_r+0x5c>
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f000 f938 	bl	8008f3c <__swsetup_r>
 8008ccc:	b170      	cbz	r0, 8008cec <_vfiprintf_r+0x5c>
 8008cce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cd0:	07dc      	lsls	r4, r3, #31
 8008cd2:	d504      	bpl.n	8008cde <_vfiprintf_r+0x4e>
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd8:	b01d      	add	sp, #116	@ 0x74
 8008cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cde:	89ab      	ldrh	r3, [r5, #12]
 8008ce0:	0598      	lsls	r0, r3, #22
 8008ce2:	d4f7      	bmi.n	8008cd4 <_vfiprintf_r+0x44>
 8008ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ce6:	f7fe f9fd 	bl	80070e4 <__retarget_lock_release_recursive>
 8008cea:	e7f3      	b.n	8008cd4 <_vfiprintf_r+0x44>
 8008cec:	2300      	movs	r3, #0
 8008cee:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cf0:	2320      	movs	r3, #32
 8008cf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cfa:	2330      	movs	r3, #48	@ 0x30
 8008cfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008eac <_vfiprintf_r+0x21c>
 8008d00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d04:	f04f 0901 	mov.w	r9, #1
 8008d08:	4623      	mov	r3, r4
 8008d0a:	469a      	mov	sl, r3
 8008d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d10:	b10a      	cbz	r2, 8008d16 <_vfiprintf_r+0x86>
 8008d12:	2a25      	cmp	r2, #37	@ 0x25
 8008d14:	d1f9      	bne.n	8008d0a <_vfiprintf_r+0x7a>
 8008d16:	ebba 0b04 	subs.w	fp, sl, r4
 8008d1a:	d00b      	beq.n	8008d34 <_vfiprintf_r+0xa4>
 8008d1c:	465b      	mov	r3, fp
 8008d1e:	4622      	mov	r2, r4
 8008d20:	4629      	mov	r1, r5
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff ffa2 	bl	8008c6c <__sfputs_r>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	f000 80a7 	beq.w	8008e7c <_vfiprintf_r+0x1ec>
 8008d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d30:	445a      	add	r2, fp
 8008d32:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d34:	f89a 3000 	ldrb.w	r3, [sl]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 809f 	beq.w	8008e7c <_vfiprintf_r+0x1ec>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f04f 32ff 	mov.w	r2, #4294967295
 8008d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d48:	f10a 0a01 	add.w	sl, sl, #1
 8008d4c:	9304      	str	r3, [sp, #16]
 8008d4e:	9307      	str	r3, [sp, #28]
 8008d50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d54:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d56:	4654      	mov	r4, sl
 8008d58:	2205      	movs	r2, #5
 8008d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d5e:	4853      	ldr	r0, [pc, #332]	@ (8008eac <_vfiprintf_r+0x21c>)
 8008d60:	f7f7 fa56 	bl	8000210 <memchr>
 8008d64:	9a04      	ldr	r2, [sp, #16]
 8008d66:	b9d8      	cbnz	r0, 8008da0 <_vfiprintf_r+0x110>
 8008d68:	06d1      	lsls	r1, r2, #27
 8008d6a:	bf44      	itt	mi
 8008d6c:	2320      	movmi	r3, #32
 8008d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d72:	0713      	lsls	r3, r2, #28
 8008d74:	bf44      	itt	mi
 8008d76:	232b      	movmi	r3, #43	@ 0x2b
 8008d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d80:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d82:	d015      	beq.n	8008db0 <_vfiprintf_r+0x120>
 8008d84:	9a07      	ldr	r2, [sp, #28]
 8008d86:	4654      	mov	r4, sl
 8008d88:	2000      	movs	r0, #0
 8008d8a:	f04f 0c0a 	mov.w	ip, #10
 8008d8e:	4621      	mov	r1, r4
 8008d90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d94:	3b30      	subs	r3, #48	@ 0x30
 8008d96:	2b09      	cmp	r3, #9
 8008d98:	d94b      	bls.n	8008e32 <_vfiprintf_r+0x1a2>
 8008d9a:	b1b0      	cbz	r0, 8008dca <_vfiprintf_r+0x13a>
 8008d9c:	9207      	str	r2, [sp, #28]
 8008d9e:	e014      	b.n	8008dca <_vfiprintf_r+0x13a>
 8008da0:	eba0 0308 	sub.w	r3, r0, r8
 8008da4:	fa09 f303 	lsl.w	r3, r9, r3
 8008da8:	4313      	orrs	r3, r2
 8008daa:	9304      	str	r3, [sp, #16]
 8008dac:	46a2      	mov	sl, r4
 8008dae:	e7d2      	b.n	8008d56 <_vfiprintf_r+0xc6>
 8008db0:	9b03      	ldr	r3, [sp, #12]
 8008db2:	1d19      	adds	r1, r3, #4
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	9103      	str	r1, [sp, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	bfbb      	ittet	lt
 8008dbc:	425b      	neglt	r3, r3
 8008dbe:	f042 0202 	orrlt.w	r2, r2, #2
 8008dc2:	9307      	strge	r3, [sp, #28]
 8008dc4:	9307      	strlt	r3, [sp, #28]
 8008dc6:	bfb8      	it	lt
 8008dc8:	9204      	strlt	r2, [sp, #16]
 8008dca:	7823      	ldrb	r3, [r4, #0]
 8008dcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dce:	d10a      	bne.n	8008de6 <_vfiprintf_r+0x156>
 8008dd0:	7863      	ldrb	r3, [r4, #1]
 8008dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd4:	d132      	bne.n	8008e3c <_vfiprintf_r+0x1ac>
 8008dd6:	9b03      	ldr	r3, [sp, #12]
 8008dd8:	1d1a      	adds	r2, r3, #4
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	9203      	str	r2, [sp, #12]
 8008dde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008de2:	3402      	adds	r4, #2
 8008de4:	9305      	str	r3, [sp, #20]
 8008de6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ebc <_vfiprintf_r+0x22c>
 8008dea:	7821      	ldrb	r1, [r4, #0]
 8008dec:	2203      	movs	r2, #3
 8008dee:	4650      	mov	r0, sl
 8008df0:	f7f7 fa0e 	bl	8000210 <memchr>
 8008df4:	b138      	cbz	r0, 8008e06 <_vfiprintf_r+0x176>
 8008df6:	9b04      	ldr	r3, [sp, #16]
 8008df8:	eba0 000a 	sub.w	r0, r0, sl
 8008dfc:	2240      	movs	r2, #64	@ 0x40
 8008dfe:	4082      	lsls	r2, r0
 8008e00:	4313      	orrs	r3, r2
 8008e02:	3401      	adds	r4, #1
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e0a:	4829      	ldr	r0, [pc, #164]	@ (8008eb0 <_vfiprintf_r+0x220>)
 8008e0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e10:	2206      	movs	r2, #6
 8008e12:	f7f7 f9fd 	bl	8000210 <memchr>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d03f      	beq.n	8008e9a <_vfiprintf_r+0x20a>
 8008e1a:	4b26      	ldr	r3, [pc, #152]	@ (8008eb4 <_vfiprintf_r+0x224>)
 8008e1c:	bb1b      	cbnz	r3, 8008e66 <_vfiprintf_r+0x1d6>
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	3307      	adds	r3, #7
 8008e22:	f023 0307 	bic.w	r3, r3, #7
 8008e26:	3308      	adds	r3, #8
 8008e28:	9303      	str	r3, [sp, #12]
 8008e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e2c:	443b      	add	r3, r7
 8008e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e30:	e76a      	b.n	8008d08 <_vfiprintf_r+0x78>
 8008e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e36:	460c      	mov	r4, r1
 8008e38:	2001      	movs	r0, #1
 8008e3a:	e7a8      	b.n	8008d8e <_vfiprintf_r+0xfe>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	3401      	adds	r4, #1
 8008e40:	9305      	str	r3, [sp, #20]
 8008e42:	4619      	mov	r1, r3
 8008e44:	f04f 0c0a 	mov.w	ip, #10
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e4e:	3a30      	subs	r2, #48	@ 0x30
 8008e50:	2a09      	cmp	r2, #9
 8008e52:	d903      	bls.n	8008e5c <_vfiprintf_r+0x1cc>
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0c6      	beq.n	8008de6 <_vfiprintf_r+0x156>
 8008e58:	9105      	str	r1, [sp, #20]
 8008e5a:	e7c4      	b.n	8008de6 <_vfiprintf_r+0x156>
 8008e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e60:	4604      	mov	r4, r0
 8008e62:	2301      	movs	r3, #1
 8008e64:	e7f0      	b.n	8008e48 <_vfiprintf_r+0x1b8>
 8008e66:	ab03      	add	r3, sp, #12
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	4b12      	ldr	r3, [pc, #72]	@ (8008eb8 <_vfiprintf_r+0x228>)
 8008e6e:	a904      	add	r1, sp, #16
 8008e70:	4630      	mov	r0, r6
 8008e72:	f7fd fbc7 	bl	8006604 <_printf_float>
 8008e76:	4607      	mov	r7, r0
 8008e78:	1c78      	adds	r0, r7, #1
 8008e7a:	d1d6      	bne.n	8008e2a <_vfiprintf_r+0x19a>
 8008e7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e7e:	07d9      	lsls	r1, r3, #31
 8008e80:	d405      	bmi.n	8008e8e <_vfiprintf_r+0x1fe>
 8008e82:	89ab      	ldrh	r3, [r5, #12]
 8008e84:	059a      	lsls	r2, r3, #22
 8008e86:	d402      	bmi.n	8008e8e <_vfiprintf_r+0x1fe>
 8008e88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e8a:	f7fe f92b 	bl	80070e4 <__retarget_lock_release_recursive>
 8008e8e:	89ab      	ldrh	r3, [r5, #12]
 8008e90:	065b      	lsls	r3, r3, #25
 8008e92:	f53f af1f 	bmi.w	8008cd4 <_vfiprintf_r+0x44>
 8008e96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e98:	e71e      	b.n	8008cd8 <_vfiprintf_r+0x48>
 8008e9a:	ab03      	add	r3, sp, #12
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	462a      	mov	r2, r5
 8008ea0:	4b05      	ldr	r3, [pc, #20]	@ (8008eb8 <_vfiprintf_r+0x228>)
 8008ea2:	a904      	add	r1, sp, #16
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7fd fe45 	bl	8006b34 <_printf_i>
 8008eaa:	e7e4      	b.n	8008e76 <_vfiprintf_r+0x1e6>
 8008eac:	08009938 	.word	0x08009938
 8008eb0:	08009942 	.word	0x08009942
 8008eb4:	08006605 	.word	0x08006605
 8008eb8:	08008c6d 	.word	0x08008c6d
 8008ebc:	0800993e 	.word	0x0800993e

08008ec0 <__swbuf_r>:
 8008ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec2:	460e      	mov	r6, r1
 8008ec4:	4614      	mov	r4, r2
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	b118      	cbz	r0, 8008ed2 <__swbuf_r+0x12>
 8008eca:	6a03      	ldr	r3, [r0, #32]
 8008ecc:	b90b      	cbnz	r3, 8008ed2 <__swbuf_r+0x12>
 8008ece:	f7fd ffdd 	bl	8006e8c <__sinit>
 8008ed2:	69a3      	ldr	r3, [r4, #24]
 8008ed4:	60a3      	str	r3, [r4, #8]
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	071a      	lsls	r2, r3, #28
 8008eda:	d501      	bpl.n	8008ee0 <__swbuf_r+0x20>
 8008edc:	6923      	ldr	r3, [r4, #16]
 8008ede:	b943      	cbnz	r3, 8008ef2 <__swbuf_r+0x32>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f000 f82a 	bl	8008f3c <__swsetup_r>
 8008ee8:	b118      	cbz	r0, 8008ef2 <__swbuf_r+0x32>
 8008eea:	f04f 37ff 	mov.w	r7, #4294967295
 8008eee:	4638      	mov	r0, r7
 8008ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	6922      	ldr	r2, [r4, #16]
 8008ef6:	1a98      	subs	r0, r3, r2
 8008ef8:	6963      	ldr	r3, [r4, #20]
 8008efa:	b2f6      	uxtb	r6, r6
 8008efc:	4283      	cmp	r3, r0
 8008efe:	4637      	mov	r7, r6
 8008f00:	dc05      	bgt.n	8008f0e <__swbuf_r+0x4e>
 8008f02:	4621      	mov	r1, r4
 8008f04:	4628      	mov	r0, r5
 8008f06:	f7ff fd99 	bl	8008a3c <_fflush_r>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d1ed      	bne.n	8008eea <__swbuf_r+0x2a>
 8008f0e:	68a3      	ldr	r3, [r4, #8]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	60a3      	str	r3, [r4, #8]
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	6022      	str	r2, [r4, #0]
 8008f1a:	701e      	strb	r6, [r3, #0]
 8008f1c:	6962      	ldr	r2, [r4, #20]
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d004      	beq.n	8008f2e <__swbuf_r+0x6e>
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	07db      	lsls	r3, r3, #31
 8008f28:	d5e1      	bpl.n	8008eee <__swbuf_r+0x2e>
 8008f2a:	2e0a      	cmp	r6, #10
 8008f2c:	d1df      	bne.n	8008eee <__swbuf_r+0x2e>
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4628      	mov	r0, r5
 8008f32:	f7ff fd83 	bl	8008a3c <_fflush_r>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d0d9      	beq.n	8008eee <__swbuf_r+0x2e>
 8008f3a:	e7d6      	b.n	8008eea <__swbuf_r+0x2a>

08008f3c <__swsetup_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4b29      	ldr	r3, [pc, #164]	@ (8008fe4 <__swsetup_r+0xa8>)
 8008f40:	4605      	mov	r5, r0
 8008f42:	6818      	ldr	r0, [r3, #0]
 8008f44:	460c      	mov	r4, r1
 8008f46:	b118      	cbz	r0, 8008f50 <__swsetup_r+0x14>
 8008f48:	6a03      	ldr	r3, [r0, #32]
 8008f4a:	b90b      	cbnz	r3, 8008f50 <__swsetup_r+0x14>
 8008f4c:	f7fd ff9e 	bl	8006e8c <__sinit>
 8008f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f54:	0719      	lsls	r1, r3, #28
 8008f56:	d422      	bmi.n	8008f9e <__swsetup_r+0x62>
 8008f58:	06da      	lsls	r2, r3, #27
 8008f5a:	d407      	bmi.n	8008f6c <__swsetup_r+0x30>
 8008f5c:	2209      	movs	r2, #9
 8008f5e:	602a      	str	r2, [r5, #0]
 8008f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f64:	81a3      	strh	r3, [r4, #12]
 8008f66:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6a:	e033      	b.n	8008fd4 <__swsetup_r+0x98>
 8008f6c:	0758      	lsls	r0, r3, #29
 8008f6e:	d512      	bpl.n	8008f96 <__swsetup_r+0x5a>
 8008f70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f72:	b141      	cbz	r1, 8008f86 <__swsetup_r+0x4a>
 8008f74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f78:	4299      	cmp	r1, r3
 8008f7a:	d002      	beq.n	8008f82 <__swsetup_r+0x46>
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f7fe feff 	bl	8007d80 <_free_r>
 8008f82:	2300      	movs	r3, #0
 8008f84:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f86:	89a3      	ldrh	r3, [r4, #12]
 8008f88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f8c:	81a3      	strh	r3, [r4, #12]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	f043 0308 	orr.w	r3, r3, #8
 8008f9c:	81a3      	strh	r3, [r4, #12]
 8008f9e:	6923      	ldr	r3, [r4, #16]
 8008fa0:	b94b      	cbnz	r3, 8008fb6 <__swsetup_r+0x7a>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fac:	d003      	beq.n	8008fb6 <__swsetup_r+0x7a>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f000 f883 	bl	80090bc <__smakebuf_r>
 8008fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fba:	f013 0201 	ands.w	r2, r3, #1
 8008fbe:	d00a      	beq.n	8008fd6 <__swsetup_r+0x9a>
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	60a2      	str	r2, [r4, #8]
 8008fc4:	6962      	ldr	r2, [r4, #20]
 8008fc6:	4252      	negs	r2, r2
 8008fc8:	61a2      	str	r2, [r4, #24]
 8008fca:	6922      	ldr	r2, [r4, #16]
 8008fcc:	b942      	cbnz	r2, 8008fe0 <__swsetup_r+0xa4>
 8008fce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fd2:	d1c5      	bne.n	8008f60 <__swsetup_r+0x24>
 8008fd4:	bd38      	pop	{r3, r4, r5, pc}
 8008fd6:	0799      	lsls	r1, r3, #30
 8008fd8:	bf58      	it	pl
 8008fda:	6962      	ldrpl	r2, [r4, #20]
 8008fdc:	60a2      	str	r2, [r4, #8]
 8008fde:	e7f4      	b.n	8008fca <__swsetup_r+0x8e>
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	e7f7      	b.n	8008fd4 <__swsetup_r+0x98>
 8008fe4:	20000028 	.word	0x20000028

08008fe8 <_raise_r>:
 8008fe8:	291f      	cmp	r1, #31
 8008fea:	b538      	push	{r3, r4, r5, lr}
 8008fec:	4605      	mov	r5, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	d904      	bls.n	8008ffc <_raise_r+0x14>
 8008ff2:	2316      	movs	r3, #22
 8008ff4:	6003      	str	r3, [r0, #0]
 8008ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ffe:	b112      	cbz	r2, 8009006 <_raise_r+0x1e>
 8009000:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009004:	b94b      	cbnz	r3, 800901a <_raise_r+0x32>
 8009006:	4628      	mov	r0, r5
 8009008:	f000 f830 	bl	800906c <_getpid_r>
 800900c:	4622      	mov	r2, r4
 800900e:	4601      	mov	r1, r0
 8009010:	4628      	mov	r0, r5
 8009012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009016:	f000 b817 	b.w	8009048 <_kill_r>
 800901a:	2b01      	cmp	r3, #1
 800901c:	d00a      	beq.n	8009034 <_raise_r+0x4c>
 800901e:	1c59      	adds	r1, r3, #1
 8009020:	d103      	bne.n	800902a <_raise_r+0x42>
 8009022:	2316      	movs	r3, #22
 8009024:	6003      	str	r3, [r0, #0]
 8009026:	2001      	movs	r0, #1
 8009028:	e7e7      	b.n	8008ffa <_raise_r+0x12>
 800902a:	2100      	movs	r1, #0
 800902c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009030:	4620      	mov	r0, r4
 8009032:	4798      	blx	r3
 8009034:	2000      	movs	r0, #0
 8009036:	e7e0      	b.n	8008ffa <_raise_r+0x12>

08009038 <raise>:
 8009038:	4b02      	ldr	r3, [pc, #8]	@ (8009044 <raise+0xc>)
 800903a:	4601      	mov	r1, r0
 800903c:	6818      	ldr	r0, [r3, #0]
 800903e:	f7ff bfd3 	b.w	8008fe8 <_raise_r>
 8009042:	bf00      	nop
 8009044:	20000028 	.word	0x20000028

08009048 <_kill_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4d07      	ldr	r5, [pc, #28]	@ (8009068 <_kill_r+0x20>)
 800904c:	2300      	movs	r3, #0
 800904e:	4604      	mov	r4, r0
 8009050:	4608      	mov	r0, r1
 8009052:	4611      	mov	r1, r2
 8009054:	602b      	str	r3, [r5, #0]
 8009056:	f7f9 fbe3 	bl	8002820 <_kill>
 800905a:	1c43      	adds	r3, r0, #1
 800905c:	d102      	bne.n	8009064 <_kill_r+0x1c>
 800905e:	682b      	ldr	r3, [r5, #0]
 8009060:	b103      	cbz	r3, 8009064 <_kill_r+0x1c>
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	bd38      	pop	{r3, r4, r5, pc}
 8009066:	bf00      	nop
 8009068:	200008fc 	.word	0x200008fc

0800906c <_getpid_r>:
 800906c:	f7f9 bbd0 	b.w	8002810 <_getpid>

08009070 <__swhatbuf_r>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	460c      	mov	r4, r1
 8009074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009078:	2900      	cmp	r1, #0
 800907a:	b096      	sub	sp, #88	@ 0x58
 800907c:	4615      	mov	r5, r2
 800907e:	461e      	mov	r6, r3
 8009080:	da0d      	bge.n	800909e <__swhatbuf_r+0x2e>
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009088:	f04f 0100 	mov.w	r1, #0
 800908c:	bf14      	ite	ne
 800908e:	2340      	movne	r3, #64	@ 0x40
 8009090:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009094:	2000      	movs	r0, #0
 8009096:	6031      	str	r1, [r6, #0]
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	b016      	add	sp, #88	@ 0x58
 800909c:	bd70      	pop	{r4, r5, r6, pc}
 800909e:	466a      	mov	r2, sp
 80090a0:	f000 f848 	bl	8009134 <_fstat_r>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	dbec      	blt.n	8009082 <__swhatbuf_r+0x12>
 80090a8:	9901      	ldr	r1, [sp, #4]
 80090aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090b2:	4259      	negs	r1, r3
 80090b4:	4159      	adcs	r1, r3
 80090b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090ba:	e7eb      	b.n	8009094 <__swhatbuf_r+0x24>

080090bc <__smakebuf_r>:
 80090bc:	898b      	ldrh	r3, [r1, #12]
 80090be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090c0:	079d      	lsls	r5, r3, #30
 80090c2:	4606      	mov	r6, r0
 80090c4:	460c      	mov	r4, r1
 80090c6:	d507      	bpl.n	80090d8 <__smakebuf_r+0x1c>
 80090c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	6123      	str	r3, [r4, #16]
 80090d0:	2301      	movs	r3, #1
 80090d2:	6163      	str	r3, [r4, #20]
 80090d4:	b003      	add	sp, #12
 80090d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090d8:	ab01      	add	r3, sp, #4
 80090da:	466a      	mov	r2, sp
 80090dc:	f7ff ffc8 	bl	8009070 <__swhatbuf_r>
 80090e0:	9f00      	ldr	r7, [sp, #0]
 80090e2:	4605      	mov	r5, r0
 80090e4:	4639      	mov	r1, r7
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7fe febe 	bl	8007e68 <_malloc_r>
 80090ec:	b948      	cbnz	r0, 8009102 <__smakebuf_r+0x46>
 80090ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f2:	059a      	lsls	r2, r3, #22
 80090f4:	d4ee      	bmi.n	80090d4 <__smakebuf_r+0x18>
 80090f6:	f023 0303 	bic.w	r3, r3, #3
 80090fa:	f043 0302 	orr.w	r3, r3, #2
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	e7e2      	b.n	80090c8 <__smakebuf_r+0xc>
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	6020      	str	r0, [r4, #0]
 8009106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	9b01      	ldr	r3, [sp, #4]
 800910e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009112:	b15b      	cbz	r3, 800912c <__smakebuf_r+0x70>
 8009114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009118:	4630      	mov	r0, r6
 800911a:	f000 f81d 	bl	8009158 <_isatty_r>
 800911e:	b128      	cbz	r0, 800912c <__smakebuf_r+0x70>
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	f023 0303 	bic.w	r3, r3, #3
 8009126:	f043 0301 	orr.w	r3, r3, #1
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	431d      	orrs	r5, r3
 8009130:	81a5      	strh	r5, [r4, #12]
 8009132:	e7cf      	b.n	80090d4 <__smakebuf_r+0x18>

08009134 <_fstat_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d07      	ldr	r5, [pc, #28]	@ (8009154 <_fstat_r+0x20>)
 8009138:	2300      	movs	r3, #0
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	4611      	mov	r1, r2
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	f7f9 fbcd 	bl	80028e0 <_fstat>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d102      	bne.n	8009150 <_fstat_r+0x1c>
 800914a:	682b      	ldr	r3, [r5, #0]
 800914c:	b103      	cbz	r3, 8009150 <_fstat_r+0x1c>
 800914e:	6023      	str	r3, [r4, #0]
 8009150:	bd38      	pop	{r3, r4, r5, pc}
 8009152:	bf00      	nop
 8009154:	200008fc 	.word	0x200008fc

08009158 <_isatty_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4d06      	ldr	r5, [pc, #24]	@ (8009174 <_isatty_r+0x1c>)
 800915c:	2300      	movs	r3, #0
 800915e:	4604      	mov	r4, r0
 8009160:	4608      	mov	r0, r1
 8009162:	602b      	str	r3, [r5, #0]
 8009164:	f7f9 fbcc 	bl	8002900 <_isatty>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d102      	bne.n	8009172 <_isatty_r+0x1a>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	b103      	cbz	r3, 8009172 <_isatty_r+0x1a>
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	200008fc 	.word	0x200008fc

08009178 <_init>:
 8009178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917a:	bf00      	nop
 800917c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917e:	bc08      	pop	{r3}
 8009180:	469e      	mov	lr, r3
 8009182:	4770      	bx	lr

08009184 <_fini>:
 8009184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009186:	bf00      	nop
 8009188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800918a:	bc08      	pop	{r3}
 800918c:	469e      	mov	lr, r3
 800918e:	4770      	bx	lr
